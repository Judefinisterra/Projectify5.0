{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/errors/base.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/utils/fetch.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/errors/utils.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/errors/index.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/utils/user-agent.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/assistant/chatStream.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/utils/retries.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/utils/queryParamsStringify.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/errors/request.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/utils/debugLog.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/errors/config.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/utils/normalizeUrl.js","webpack://excel-custom-functions-js/./node_modules/process/browser.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/errors/http.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/errors/validation.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/utils/index.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/utils/environment.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/utils/convertKeys.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/errors/handling.js","webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/webpack/runtime/global","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions-js/webpack/runtime/publicPath","webpack://excel-custom-functions-js/webpack/runtime/jsonp chunk loading","webpack://excel-custom-functions-js/./src/taskpane/Validation.js","webpack://excel-custom-functions-js/./src/taskpane/CodeCollection.js","webpack://excel-custom-functions-js/./src/taskpane/IndexWorksheet.js","webpack://excel-custom-functions-js/./src/taskpane/AIModelPlanner.js","webpack://excel-custom-functions-js/./config.js","webpack://excel-custom-functions-js/./src/taskpane/AIcalls.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.html"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BasePineconeError = void 0;\nclass BasePineconeError extends Error {\n    constructor(message, cause) {\n        super(message);\n        // Set the prototype explicitly to ensure instanceof works correctly\n        Object.setPrototypeOf(this, new.target.prototype);\n        // Maintain a proper stack trace in V8 environments (Chrome and Node.js)\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, new.target);\n        }\n        this.name = this.constructor.name;\n        this.cause = cause;\n    }\n}\nexports.BasePineconeError = BasePineconeError;\n//# sourceMappingURL=base.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFetch = void 0;\nconst errors_1 = require(\"../errors\");\nconst getFetch = (config) => {\n    if (config.fetchApi) {\n        // User-provided fetch implementation, if any, takes precedence.\n        return config.fetchApi;\n    }\n    else if (global.fetch) {\n        // If a fetch implementation is present in the global scope (will work with native fetch in Node18+, Edge runtimes,\n        // etc.), use that. This should prevent confusing failures in\n        // Next.js projects where @vercel/fetch is mandated and\n        // other implementations are stubbed out.\n        return global.fetch;\n    }\n    else {\n        // If no fetch implementation is found, throw an error.\n        throw new errors_1.PineconeConfigurationError('No global or user-provided fetch implementations found. Please supply a fetch implementation.');\n    }\n};\nexports.getFetch = getFetch;\n//# sourceMappingURL=fetch.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extractMessage = void 0;\n/** @internal */\nconst extractMessage = async (error) => {\n    let message = await error.response.text();\n    // Error response is sometimes the raw message, sometimes it's JSON\n    // so we will try to parse out the actual message text, but\n    // we wrap it in a try to avoid crashing in a way that obscures\n    // the actual error if the response format changes in the future.\n    try {\n        const messageJSON = JSON.parse(message);\n        if (messageJSON.message) {\n            message = messageJSON.message;\n        }\n    }\n    catch (e) {\n        // noop\n    }\n    return message;\n};\nexports.extractMessage = extractMessage;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleApiError = exports.extractMessage = exports.PineconeArgumentError = exports.BasePineconeError = exports.PineconeRequestError = exports.PineconeConnectionError = exports.PineconeUnableToResolveHostError = exports.PineconeEnvironmentVarsNotSupportedError = exports.PineconeUnexpectedResponseError = exports.PineconeConfigurationError = void 0;\nvar config_1 = require(\"./config\");\nObject.defineProperty(exports, \"PineconeConfigurationError\", { enumerable: true, get: function () { return config_1.PineconeConfigurationError; } });\nObject.defineProperty(exports, \"PineconeUnexpectedResponseError\", { enumerable: true, get: function () { return config_1.PineconeUnexpectedResponseError; } });\nObject.defineProperty(exports, \"PineconeEnvironmentVarsNotSupportedError\", { enumerable: true, get: function () { return config_1.PineconeEnvironmentVarsNotSupportedError; } });\nObject.defineProperty(exports, \"PineconeUnableToResolveHostError\", { enumerable: true, get: function () { return config_1.PineconeUnableToResolveHostError; } });\n__exportStar(require(\"./http\"), exports);\nvar request_1 = require(\"./request\");\nObject.defineProperty(exports, \"PineconeConnectionError\", { enumerable: true, get: function () { return request_1.PineconeConnectionError; } });\nObject.defineProperty(exports, \"PineconeRequestError\", { enumerable: true, get: function () { return request_1.PineconeRequestError; } });\nvar base_1 = require(\"./base\");\nObject.defineProperty(exports, \"BasePineconeError\", { enumerable: true, get: function () { return base_1.BasePineconeError; } });\nvar validation_1 = require(\"./validation\");\nObject.defineProperty(exports, \"PineconeArgumentError\", { enumerable: true, get: function () { return validation_1.PineconeArgumentError; } });\nvar utils_1 = require(\"./utils\");\nObject.defineProperty(exports, \"extractMessage\", { enumerable: true, get: function () { return utils_1.extractMessage; } });\nvar handling_1 = require(\"./handling\");\nObject.defineProperty(exports, \"handleApiError\", { enumerable: true, get: function () { return handling_1.handleApiError; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.buildUserAgent = void 0;\nconst environment_1 = require(\"./environment\");\nconst packageInfo = __importStar(require(\"../version.json\"));\nconst buildUserAgent = (config) => {\n    // We always want to include the package name and version\n    // along with the langauge name to help distinguish these\n    // requests from those emitted by other clients\n    const userAgentParts = [\n        `${packageInfo.name} v${packageInfo.version}`,\n        'lang=typescript',\n    ];\n    if ((0, environment_1.isEdge)()) {\n        userAgentParts.push('Edge Runtime');\n    }\n    // If available, capture information about the Node.js version\n    if (typeof process !== 'undefined' && process && process.version) {\n        userAgentParts.push(`node ${process.version}`);\n    }\n    if (config.sourceTag) {\n        userAgentParts.push(`source_tag=${normalizeSourceTag(config.sourceTag)}`);\n    }\n    return userAgentParts.join('; ');\n};\nexports.buildUserAgent = buildUserAgent;\nconst normalizeSourceTag = (sourceTag) => {\n    if (!sourceTag) {\n        return;\n    }\n    /**\n     * normalize sourceTag\n     * 1. Lowercase\n     * 2. Limit charset to [a-z0-9_ :]\n     * 3. Trim left/right spaces\n     * 4. Condense multiple spaces to one, and replace with underscore\n     */\n    return sourceTag\n        .toLowerCase()\n        .replace(/[^a-z0-9_ :]/g, '')\n        .trim()\n        .replace(/[ ]+/g, '_');\n};\n//# sourceMappingURL=user-agent.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChatStream = void 0;\nconst convertKeys_1 = require(\"../utils/convertKeys\");\n/**\n * Implements an async iterable that processes the readable stream of an assistant chat response.\n *\n * This class expects each chunk of data in the stream to begin with `data:` and be followed by a valid chunk of JSON.\n * If a chunk contains malformed JSON, it is skipped, and a debug message is logged.\n *\n * @template Item - The type of items yielded by the iterable.\n */\nclass ChatStream {\n    constructor(stream) {\n        this.stream = stream;\n    }\n    async *[Symbol.asyncIterator]() {\n        let buffer = '';\n        for await (const chunk of this.stream) {\n            buffer += chunk.toString();\n            let newlineIndex;\n            while ((newlineIndex = buffer.indexOf('\\n')) !== -1) {\n                const line = buffer.slice(0, newlineIndex).trim();\n                buffer = buffer.slice(newlineIndex + 1);\n                // each chunk of json should begin with 'data:'\n                if (line && line.startsWith('data:')) {\n                    const json = line.slice(5).trim();\n                    try {\n                        const parsedJson = JSON.parse(json);\n                        const convertedJson = (0, convertKeys_1.convertKeysToCamelCase)(parsedJson);\n                        yield convertedJson;\n                    }\n                    catch (err) {\n                        console.debug(`Skipping malformed JSON:${line}`);\n                        continue;\n                    }\n                }\n            }\n        }\n        if (buffer.trim()) {\n            try {\n                const parsedJson = JSON.parse(buffer);\n                const convertedJson = (0, convertKeys_1.convertKeysToCamelCase)(parsedJson);\n                yield convertedJson;\n            }\n            catch (err) {\n                console.debug(`Skipping malformed JSON:${buffer}`);\n            }\n        }\n    }\n}\nexports.ChatStream = ChatStream;\n//# sourceMappingURL=chatStream.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RetryOnServerFailure = void 0;\nconst errors_1 = require(\"../errors\");\n// TODO: Parameterize this class to allow for custom error handling (e.g. only retry 400 errors on Chat endpoint,\n//  but not globally\n/* Retry asynchronous operations.\n *\n * @param maxRetries - The maximum number of retries to attempt.\n * @param asyncFn - The asynchronous function to retry.\n */\nclass RetryOnServerFailure {\n    constructor(asyncFn, maxRetries) {\n        /*\n         * Calculate the delay time for retrying an operation.\n         *\n         * @param attempt: The # of times the operation has been attempted.\n         * @param baseDelay: The base delay time in milliseconds.\n         * @param maxDelay: The maximum delay time in milliseconds.\n         * @param jitterFactor: The magnitude of jitter relative to the delay.\n         */\n        this.calculateRetryDelay = (attempt, baseDelay = 200, maxDelay = 20000, jitterFactor = 0.25) => {\n            let delay = baseDelay * 2 ** attempt; // Exponential (baseDelay * 2^attempt)\n            // Apply jitter as a random percentage of the original delay; e.g.: if `jitterFactor` = 0.25 and `baseDelay` = 1000,\n            // then `jitter` is 25% of `baseDelay`\n            const jitter = delay * jitterFactor * (Math.random() - 0.5);\n            delay += jitter;\n            // Ensure delay is not negative or greater than maxDelay\n            return Math.min(maxDelay, Math.max(0, delay));\n        };\n        if (maxRetries) {\n            this.maxRetries = maxRetries;\n        }\n        else {\n            this.maxRetries = 3;\n        }\n        if (this.maxRetries > 10) {\n            throw new Error('Max retries cannot exceed 10');\n        }\n        this.asyncFn = asyncFn;\n    }\n    async execute(...args) {\n        if (this.maxRetries < 1) {\n            return this.asyncFn(...args);\n        }\n        for (let attempt = 0; attempt < this.maxRetries; attempt++) {\n            try {\n                const response = await this.asyncFn(...args);\n                // Return immediately if the response is not a retryable error\n                if (!this.isRetryError(response)) {\n                    return response;\n                }\n                throw response; // Will catch this in next line\n            }\n            catch (error) {\n                const mappedError = this.mapErrorIfNeeded(error);\n                // If the error is not retryable, throw it immediately\n                if (this.shouldStopRetrying(mappedError)) {\n                    throw mappedError;\n                }\n                // On the last retry, throw a MaxRetriesExceededError\n                if (attempt === this.maxRetries - 1) {\n                    throw new errors_1.PineconeMaxRetriesExceededError(this.maxRetries);\n                }\n                // Wait before retrying\n                await this.delay(attempt + 1);\n            }\n        }\n        // This fallback is unnecessary, but included for type safety\n        throw new errors_1.PineconeMaxRetriesExceededError(this.maxRetries);\n    }\n    isRetryError(response) {\n        if (!response) {\n            return false;\n        }\n        if (response) {\n            if (response.name &&\n                ['PineconeUnavailableError', 'PineconeInternalServerError'].includes(response.name)) {\n                return true;\n            }\n            if (response.status && response.status >= 500) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async delay(attempt) {\n        const delayTime = this.calculateRetryDelay(attempt);\n        return new Promise((resolve) => setTimeout(resolve, delayTime));\n    }\n    mapErrorIfNeeded(error) {\n        if (error?.status) {\n            return (0, errors_1.mapHttpStatusError)(error);\n        }\n        return error; // Return original error if no mapping is needed\n    }\n    shouldStopRetrying(error) {\n        if (error.status) {\n            return error.status < 500;\n        }\n        if (error.name) {\n            return (error.name !== 'PineconeUnavailableError' &&\n                error.name !== 'PineconeInternalServerError');\n        }\n        return true;\n    }\n}\nexports.RetryOnServerFailure = RetryOnServerFailure;\n//# sourceMappingURL=retries.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.queryParamsStringify = void 0;\n// Everything in this file is lifted from the generated openapi runtime.\n// I need to create a small modification of the generated queryParamStringify\n// function in order to fix an issue with array params.\n//\n// See https://github.com/pinecone-io/pinecone-ts-client/pull/74\nfunction queryParamsStringify(params, prefix = '') {\n    return Object.keys(params)\n        .map((key) => querystringSingleKey(key, params[key], prefix))\n        .filter((part) => part.length > 0)\n        .join('&');\n}\nexports.queryParamsStringify = queryParamsStringify;\nfunction querystringSingleKey(key, value, keyPrefix = '') {\n    const fullKey = keyPrefix + (keyPrefix.length ? `[${key}]` : key);\n    // This is a one line change from the default querystring implementation. Checking\n    // with `Array.isArray` instead of `value instanceof Array` allows us to get the\n    // the correct behavior when stringifying array params.\n    if (Array.isArray(value)) {\n        const multiValue = value\n            .map((singleValue) => encodeURIComponent(String(singleValue)))\n            .join(`&${encodeURIComponent(fullKey)}=`);\n        return `${encodeURIComponent(fullKey)}=${multiValue}`;\n    }\n    if (value instanceof Set) {\n        const valueAsArray = Array.from(value);\n        return querystringSingleKey(key, valueAsArray, keyPrefix);\n    }\n    if (value instanceof Date) {\n        return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;\n    }\n    if (value instanceof Object) {\n        return queryParamsStringify(value, fullKey);\n    }\n    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;\n}\n//# sourceMappingURL=queryParamsStringify.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PineconeRequestError = exports.PineconeConnectionError = void 0;\nconst base_1 = require(\"./base\");\n/**\n * This error is thrown when the client attempts to make a\n * request and never receives any response.\n *\n * This could be due to:\n * - Network problems which prevent the request from being completed.\n * - An outage of Pinecone's APIs. See [Pinecone's status page](https://status.pinecone.io/) to find out whether there is an ongoing incident.\n *\n * The `cause` property will contain a reference to the underlying error. Inspect its value to find out more about the root cause of the error.\n * ```\n * import { Pinecone } from '@pinecone-database/pinecone';\n *\n * const p = new Pinecone({ apiKey: 'invalid-api-key-value' })\n *\n * try {\n *  await p.listIndexes();\n * } catch (e) {\n *  console.log(e.name); // PineconeConnectionError\n *  console.log(e.cause); // Error [FetchError]: The request failed and the interceptors did not return an alternative response\n *  console.log(e.cause.cause); // TypeError: fetch failed\n *  console.log(e.cause.cause.cause); // Error: getaddrinfo ENOTFOUND controller.wrong-environment.pinecone.io\n * }\n * ```\n *\n * @see [Pinecone's status page](https://status.pinecone.io/)\n * */\nclass PineconeConnectionError extends base_1.BasePineconeError {\n    constructor(e, url) {\n        let urlMessage = '';\n        if (url) {\n            urlMessage = ` while calling ${url}`;\n        }\n        super(`Request failed to reach Pinecone${urlMessage}. This can occur for reasons such as network problems that prevent the request from being completed, or a Pinecone API outage. Check your network connection, and visit https://status.pinecone.io/ to see whether any outages are ongoing.`, e);\n        this.name = 'PineconeConnectionError';\n    }\n}\nexports.PineconeConnectionError = PineconeConnectionError;\n/**\n * This error is thrown any time a request to the Pinecone API fails.\n *\n * The `cause` property will contain a reference to the underlying error. Inspect its value to find out more about the root cause.\n */\nclass PineconeRequestError extends base_1.BasePineconeError {\n    constructor(context) {\n        if (context.response) {\n            super(`Request failed during a call to ${context.init.method} ${context.url} with status ${context.response.status}`, context.error);\n        }\n        else {\n            super(`Request failed during a call to ${context.init.method} ${context.url}`, context.error);\n        }\n    }\n}\nexports.PineconeRequestError = PineconeRequestError;\n//# sourceMappingURL=request.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.debugLog = void 0;\nconst debugLog = (str) => {\n    if (typeof process !== 'undefined' &&\n        process &&\n        process.env &&\n        process.env.PINECONE_DEBUG) {\n        console.log(str);\n    }\n};\nexports.debugLog = debugLog;\n//# sourceMappingURL=debugLog.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PineconeUnableToResolveHostError = exports.PineconeEnvironmentVarsNotSupportedError = exports.PineconeUnexpectedResponseError = exports.PineconeConfigurationError = void 0;\nconst base_1 = require(\"./base\");\nconst CONFIG_HELP = `You can find the configuration values for your project in the Pinecone developer console at https://app.pinecone.io.`;\n/**\n * This exception indicates there is a problem with the configuration values\n * you have provided to the client. The error message should contain additional\n * context about what you are missing.\n *\n * @see {@link Pinecone} for information about initializing the client.\n */\nclass PineconeConfigurationError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(`${message} ${CONFIG_HELP}`);\n        this.name = 'PineconeConfigurationError';\n    }\n}\nexports.PineconeConfigurationError = PineconeConfigurationError;\n/**\n * This exception indicates an API call that returned a response that was\n * unable to be parsed or that did not include expected fields. It's not\n * expected to ever occur.\n *\n * If you encounter this error, please [file an issue](https://github.com/pinecone-io/pinecone-ts-client/issues) so we can investigate.\n */\nclass PineconeUnexpectedResponseError extends base_1.BasePineconeError {\n    constructor(url, status, body, message) {\n        super(`Unexpected response while calling ${url}. ${message ? message + ' ' : ''}Status: ${status}. Body: ${body}`);\n        this.name = 'PineconeUnexpectedResponseError';\n    }\n}\nexports.PineconeUnexpectedResponseError = PineconeUnexpectedResponseError;\n/**\n * This error occurs when the client tries to read environment variables in\n * an environment that does not have access to the Node.js global `process.env`.\n *\n * If you are seeing this error, you will need to configure the client by passing\n * configuration values to the `Pinecone` constructor.\n *\n * ```typescript\n * import { Pinecone } from '@pinecone-database/pinecone';\n *\n * const pinecone = new Pinecone({\n *    apiKey: 'YOUR_API_KEY',\n * })\n * ```\n *\n * @see Instructions for configuring { @link Pinecone }\n */\nclass PineconeEnvironmentVarsNotSupportedError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(message);\n        this.name = 'PineconeEnvironmentVarsNotSupportedError';\n    }\n}\nexports.PineconeEnvironmentVarsNotSupportedError = PineconeEnvironmentVarsNotSupportedError;\n/**\n * This error occurs when the client is unable to resolve the database host for a given\n * index. This is unexpected to occur unless there is a problem with the Pinecone service.\n *\n * If you encounter this error, please [file an issue](https://github.com/pinecone-io/pinecone-ts-client/issues) so we can investigate.\n */\nclass PineconeUnableToResolveHostError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(message);\n        this.name = 'PineconeUnableToResolveHostError';\n    }\n}\nexports.PineconeUnableToResolveHostError = PineconeUnableToResolveHostError;\n//# sourceMappingURL=config.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeUrl = void 0;\nfunction normalizeUrl(url) {\n    if (!url || url.trim().length === 0) {\n        return;\n    }\n    if (!url.startsWith('http://') && !url.startsWith('https://')) {\n        return 'https://' + url;\n    }\n    return url;\n}\nexports.normalizeUrl = normalizeUrl;\n//# sourceMappingURL=normalizeUrl.js.map","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mapHttpStatusError = exports.PineconeUnmappedHttpError = exports.PineconeNotImplementedError = exports.PineconeUnavailableError = exports.PineconeMaxRetriesExceededError = exports.PineconeInternalServerError = exports.PineconeConflictError = exports.PineconeNotFoundError = exports.PineconeAuthorizationError = exports.PineconeBadRequestError = void 0;\nconst base_1 = require(\"./base\");\nconst CONFIG_HELP = `You can find the configuration values for your project in the Pinecone developer console at https://app.pinecone.io`;\n/** This error is thrown when API requests return with status 400. Typically this is due to some aspect of the request being incorrect or invalid.\n *\n * Some examples when this error could occur:\n * - While attempting to create an index with no available quota in your project.\n * - While upserting records that do not match the `dimension` of your index\n * - While attempting to create an index using an invalid name (\"!@#$%\")\n */\nclass PineconeBadRequestError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { message } = failedRequest;\n        super(message);\n        this.name = 'PineconeBadRequestError';\n    }\n}\nexports.PineconeBadRequestError = PineconeBadRequestError;\n/**\n * This error occurs when API requests are attempted using invalid configurations such as a mispelled or revoked API key.\n *\n * Log in to https://app.pinecone.io to verify you have configured the { @link Pinecone }\n * client using the correct values.\n */\nclass PineconeAuthorizationError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url } = failedRequest;\n        if (url) {\n            super(`The API key you provided was rejected while calling ${url}. Please check your configuration values and try again. ${CONFIG_HELP}`);\n        }\n        else {\n            super(`The API key you provided was rejected. Please check your configuration values and try again. ${CONFIG_HELP}`);\n        }\n        this.name = 'PineconeAuthorizationError';\n    }\n}\nexports.PineconeAuthorizationError = PineconeAuthorizationError;\n/**\n * This error is thrown when interacting with a resource such as an index or collection\n * that cannot be found.\n */\nclass PineconeNotFoundError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url } = failedRequest;\n        if (url) {\n            super(`A call to ${url} returned HTTP status 404.`);\n        }\n        else {\n            super('The requested resource could not be found.');\n        }\n        this.name = 'PineconeNotFoundError';\n    }\n}\nexports.PineconeNotFoundError = PineconeNotFoundError;\n/**\n * This error is thrown when attempting to create a resource such as an index or\n * collection with a name that is already in use.\n * */\nclass PineconeConflictError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, message } = failedRequest;\n        if (url) {\n            super(`A call to ${url} returned HTTP status 409. ${message ? message : ''}`);\n        }\n        else {\n            super('The resource you are attempting to create already exists.');\n        }\n        this.name = 'PineconeConflictError';\n    }\n}\nexports.PineconeConflictError = PineconeConflictError;\n/**\n * This error indicates API responses are returning with status 500 and\n * something is wrong with Pinecone. Check the [status page](https://status.pinecone.io/)\n * for information about current or recent outages.\n *\n * @see [Pinecone's status page](https://status.pinecone.io/)\n */\nclass PineconeInternalServerError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, body, status } = failedRequest;\n        const intro = url\n            ? `An internal server error occurred while calling the ${url} endpoint.`\n            : '';\n        const help = `To see overall service health and learn whether this seems like a large-scale problem or one specific to your request, please go to https://status.pinecone.io/ to view our status page. If you believe the error reflects a problem with this client, please file a bug report in the github issue tracker at https://github.com/pinecone-io/pinecone-ts-client`;\n        const statusMessage = status ? `Status Code: ${status}.` : '';\n        const bodyMessage = body ? `Body: ${body}` : '';\n        super([intro, statusMessage, help, bodyMessage].join(' ').trim());\n        this.name = 'PineconeInternalServerError';\n    }\n}\nexports.PineconeInternalServerError = PineconeInternalServerError;\n/* We can choose to throw this error when we want to limit requests to the server. When instantiated, pass the\n number of retries the user has made already. */\nclass PineconeMaxRetriesExceededError extends base_1.BasePineconeError {\n    constructor(retries) {\n        const intro = `You have exceeded the max configured retries (${retries}). `;\n        const help = 'Increase the maxRetries field in the RetryOptions object to retry more times. If you believe the' +\n            ' error reflects a problem with this client, please file a bug report in the github issue tracker at https://github.com/pinecone-io/pinecone-ts-client';\n        super([intro, help].join(' ').trim());\n        this.name = 'PineconeMaxRetriesExceededError';\n    }\n}\nexports.PineconeMaxRetriesExceededError = PineconeMaxRetriesExceededError;\n/**\n * This error indicates API responses are returning with status 503 and\n * Pinecone itself is down. Check the [status page](https://status.pinecone.io/)\n * for information about current or recent outages.\n *\n * The difference between this error (503) and a PineconeInternalServerError (500) is that this error does NOT indicate\n * that the server is _unable_ to process the request, just that the server will not process the request.\n *\n * @see [Pinecone's status page](https://status.pinecone.io/)\n */\nclass PineconeUnavailableError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, body, status } = failedRequest;\n        const intro = url\n            ? `The Pinecone service (${url}) is temporarily unavailable.`\n            : '';\n        const statusMessage = status ? `Status Code: ${status}.` : '';\n        const help = `To see overall service health and learn whether this seems like a large-scale problem or one specific to your request, please go to https://status.pinecone.io/ to view our status page. If you believe the error reflects a problem with this client, please file a bug report in the github issue tracker at https://github.com/pinecone-io/pinecone-ts-client`;\n        const bodyMessage = body ? `Body: ${body}` : '';\n        super([intro, statusMessage, help, bodyMessage].join(' ').trim());\n        this.name = 'PineconeUnavailableError';\n    }\n}\nexports.PineconeUnavailableError = PineconeUnavailableError;\n/**\n * This error is thrown when you are attempting to use a feature that is\n * not implemented or unavailable to you on your current plan. Free indexes\n * only support a subset of Pinecone's capabilities, and if you are seeing\n * these exceptions then you should consult the\n * [pricing page](https://www.pinecone.io/pricing/) to see whether upgrading\n * makes sense for your use case.\n */\nclass PineconeNotImplementedError extends base_1.BasePineconeError {\n    constructor(requestInfo) {\n        const { url, message } = requestInfo;\n        if (url) {\n            super(`A call to ${url} returned HTTP status 501. ${message ? message : ''}`);\n        }\n        else {\n            super();\n        }\n        this.name = 'PineconeNotImplementedError';\n    }\n}\nexports.PineconeNotImplementedError = PineconeNotImplementedError;\n/**\n * This catch-all exception is thrown when a request error that is not\n * specifically mapped to another exception is thrown.\n */\nclass PineconeUnmappedHttpError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, status, body, message } = failedRequest;\n        const intro = url\n            ? `An unexpected error occured while calling the ${url} endpoint. `\n            : '';\n        const statusMsg = status ? `Status: ${status}. ` : '';\n        const bodyMsg = body ? `Body: ${body}` : '';\n        super([intro, message, statusMsg, bodyMsg].join(' ').trim());\n        this.name = 'PineconeUnmappedHttpError';\n    }\n}\nexports.PineconeUnmappedHttpError = PineconeUnmappedHttpError;\n/** @internal */\nconst mapHttpStatusError = (failedRequestInfo) => {\n    switch (failedRequestInfo.status) {\n        case 400:\n            return new PineconeBadRequestError(failedRequestInfo);\n        case 401:\n            return new PineconeAuthorizationError(failedRequestInfo);\n        case 403:\n            return new PineconeBadRequestError(failedRequestInfo);\n        case 404:\n            return new PineconeNotFoundError(failedRequestInfo);\n        case 409:\n            return new PineconeConflictError(failedRequestInfo);\n        case 500:\n            return new PineconeInternalServerError(failedRequestInfo);\n        case 501:\n            return new PineconeNotImplementedError(failedRequestInfo);\n        case 503:\n            return new PineconeUnavailableError(failedRequestInfo);\n        default:\n            throw new PineconeUnmappedHttpError(failedRequestInfo);\n    }\n};\nexports.mapHttpStatusError = mapHttpStatusError;\n//# sourceMappingURL=http.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PineconeArgumentError = void 0;\nconst base_1 = require(\"./base\");\n/**\n * This error is thrown when arguments passed to a Pinecone\n * client method fail a runtime validation.\n */\nclass PineconeArgumentError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(`${message}`);\n        this.name = 'PineconeArgumentError';\n    }\n}\nexports.PineconeArgumentError = PineconeArgumentError;\n//# sourceMappingURL=validation.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChatStream = exports.RetryOnServerFailure = exports.convertKeysToCamelCase = exports.getFetch = exports.buildUserAgent = exports.queryParamsStringify = exports.normalizeUrl = exports.debugLog = void 0;\nconst debugLog_1 = require(\"./debugLog\");\nObject.defineProperty(exports, \"debugLog\", { enumerable: true, get: function () { return debugLog_1.debugLog; } });\nconst normalizeUrl_1 = require(\"./normalizeUrl\");\nObject.defineProperty(exports, \"normalizeUrl\", { enumerable: true, get: function () { return normalizeUrl_1.normalizeUrl; } });\nconst queryParamsStringify_1 = require(\"./queryParamsStringify\");\nObject.defineProperty(exports, \"queryParamsStringify\", { enumerable: true, get: function () { return queryParamsStringify_1.queryParamsStringify; } });\nconst user_agent_1 = require(\"./user-agent\");\nObject.defineProperty(exports, \"buildUserAgent\", { enumerable: true, get: function () { return user_agent_1.buildUserAgent; } });\nconst fetch_1 = require(\"./fetch\");\nObject.defineProperty(exports, \"getFetch\", { enumerable: true, get: function () { return fetch_1.getFetch; } });\nconst retries_1 = require(\"./retries\");\nObject.defineProperty(exports, \"RetryOnServerFailure\", { enumerable: true, get: function () { return retries_1.RetryOnServerFailure; } });\nconst chatStream_1 = require(\"../assistant/chatStream\");\nObject.defineProperty(exports, \"ChatStream\", { enumerable: true, get: function () { return chatStream_1.ChatStream; } });\nconst convertKeys_1 = require(\"./convertKeys\");\nObject.defineProperty(exports, \"convertKeysToCamelCase\", { enumerable: true, get: function () { return convertKeys_1.convertKeysToCamelCase; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isBrowser = exports.isEdge = void 0;\nconst isEdge = () => {\n    // This is the recommended way to detect\n    // running in the Edge Runtime according\n    // to Vercel docs.\n    return typeof EdgeRuntime === 'string';\n};\nexports.isEdge = isEdge;\nconst isBrowser = () => {\n    return typeof window !== 'undefined';\n};\nexports.isBrowser = isBrowser;\n//# sourceMappingURL=environment.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertKeysToCamelCase = void 0;\n// converts keys of a json payload from snake_case to camelCase\nconst convertKeysToCamelCase = (object) => {\n    if (Array.isArray(object)) {\n        return object.map((item) => (0, exports.convertKeysToCamelCase)(item));\n    }\n    else if (object !== null && typeof object === 'object') {\n        return Object.entries(object).reduce((acc, [key, value]) => {\n            const camelKey = toCamelCase(key);\n            acc[camelKey] = (0, exports.convertKeysToCamelCase)(value);\n            return acc;\n        }, {});\n    }\n    return object; // return primitives as is\n};\nexports.convertKeysToCamelCase = convertKeysToCamelCase;\n// converts snake-case keys to camelCase\nconst toCamelCase = (str) => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n//# sourceMappingURL=convertKeys.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleApiError = void 0;\nconst utils_1 = require(\"./utils\");\nconst http_1 = require(\"./http\");\nconst request_1 = require(\"./request\");\n/** @internal */\nconst handleApiError = async (e, customMessage, url) => {\n    if (e instanceof Error && e.name === 'ResponseError') {\n        const responseError = e;\n        const rawMessage = await (0, utils_1.extractMessage)(responseError);\n        const statusCode = responseError.response.status;\n        const message = customMessage\n            ? await customMessage(statusCode, rawMessage)\n            : rawMessage;\n        return (0, http_1.mapHttpStatusError)({\n            status: responseError.response.status,\n            url: responseError.response.url || url,\n            message: message,\n        });\n    }\n    else if (e instanceof request_1.PineconeConnectionError) {\n        // If we've already wrapped this error, just return it\n        return e;\n    }\n    else {\n        // There seem to be some situations where \"e instanceof Error\" is erroneously\n        // false (perhaps the custom errors emitted by cross-fetch do not extend Error?)\n        // but we can still cast it to an Error type because all we're going to do\n        // with it is store off a reference to whatever it is under the \"cause\"\n        const err = e;\n        return new request_1.PineconeConnectionError(err);\n    }\n};\nexports.handleApiError = handleApiError;\n//# sourceMappingURL=handling.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Remove all these imports as they're no longer needed\r\n// import { promises as fs } from 'fs';\r\n// import { join } from 'path';\r\n// import { fileURLToPath } from 'url';\r\n// import { dirname } from 'path';\r\n\r\nexport async function validateCodeStrings(inputCodeStrings) {\r\n    const errors = [];\r\n    const tabLabels = new Set();\r\n    const rowValues = new Set();\r\n    const codeTypes = new Set();\r\n    \r\n    // Clean up input strings by removing anything outside angle brackets\r\n    inputCodeStrings = inputCodeStrings.map(str => {\r\n        const match = str.match(/<[^>]+>/);\r\n        return match ? match[0] : str;\r\n    });\r\n\r\n    console.log(\"CleanedInput Code Strings:\", inputCodeStrings);\r\n\r\n    // Track codes by their suffixes\r\n    const vvCodes = new Set();  // codes ending in -VV\r\n    const vrCodes = new Set();  // codes ending in -VR\r\n    const rrCodes = new Set();  // codes ending in -RR\r\n    const rvCodes = new Set();  // codes ending in -RV\r\n    const evCodes = new Set();  // codes ending in -EV\r\n    const erCodes = new Set();  // codes ending in -ER\r\n\r\n    // Load valid codes from the correct location\r\n    let validCodes = new Set();\r\n    try {\r\n        const response = await fetch('../prompts/Codes.txt');\r\n        if (!response.ok) {\r\n            throw new Error('Failed to load Codes.txt file');\r\n        }\r\n        const fileContent = await response.text();\r\n        validCodes = new Set(fileContent.split('\\n')\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0));\r\n    } catch (error) {\r\n        errors.push(`Error reading Codes.txt file: ${error.message}`);\r\n        return errors;\r\n    }\r\n\r\n    // First pass: collect all row values, code types, and suffixes\r\n    for (const codeString of inputCodeStrings) {\r\n        if (!codeString.startsWith('<') || !codeString.endsWith('>')) {\r\n            errors.push(`Invalid code string format: ${codeString}`);\r\n            continue;\r\n        }\r\n        // Extract and store row IDs\r\n        if (codeString.startsWith('<BR>')) {\r\n            // Skip extraction for BR tags\r\n            continue;\r\n        }\r\n\r\n        const rowMatches = codeString.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/)[1];\r\n                // Handle spaces before/after the pipe delimiter\r\n                const parts = rowContent.split('|');\r\n                if (parts.length > 0) {\r\n                    // Extract all potential row IDs including those after asterisks\r\n                    parts.forEach(part => {\r\n                        const trimmedPart = part.trim();\r\n                        if (trimmedPart.startsWith('*')) {\r\n                            // Add the ID after the asterisk\r\n                            const afterAsterisk = trimmedPart.substring(1).trim();\r\n                            if (afterAsterisk) {\r\n                                rowValues.add(afterAsterisk);\r\n                            }\r\n                        } else if (trimmedPart) {\r\n                            // Add regular IDs\r\n                            rowValues.add(trimmedPart);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        \r\n        // console.log(rowMatches);\r\n        // Extract code type and suffix\r\n        const codeMatch = codeString.match(/<([^;]+);/);\r\n        if (codeMatch) {\r\n            const codeType = codeMatch[1].trim();\r\n            codeTypes.add(codeType);\r\n\r\n            // Check for suffixes and store them\r\n            if (codeType.endsWith('-VV')) vvCodes.add(codeType);\r\n            if (codeType.endsWith('-VR')) vrCodes.add(codeType);\r\n            if (codeType.endsWith('-RR')) rrCodes.add(codeType);\r\n            if (codeType.endsWith('-RV')) rvCodes.add(codeType);\r\n            if (codeType.endsWith('-EV')) evCodes.add(codeType);\r\n            if (codeType.endsWith('-ER')) erCodes.add(codeType);\r\n        }\r\n    }\r\n\r\n    // Validate suffix relationships\r\n    // Rule 1: -VV or -VR must have -EV or -RV\r\n    for (const code of [...vvCodes, ...vrCodes]) {\r\n        if (evCodes.size === 0 && rvCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -EV or -RV. Fix by adding another code with the correct suffix or by change to the EV/ER version of the same code.`);\r\n        }\r\n    }\r\n\r\n    // Rule 2: -RR or -RV must have -ER or -VR\r\n    for (const code of [...rrCodes, ...rvCodes]) {\r\n        if (erCodes.size === 0 && vrCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -ER or -VR`);\r\n        }\r\n    }\r\n\r\n// Second pass: detailed validation\r\nfor (const codeString of inputCodeStrings) {\r\n    // Skip BR tags completely\r\n    if (codeString === '<BR>') {\r\n        continue;\r\n    }\r\n    \r\n    const codeMatch = codeString.match(/<([^;]+);/);\r\n    if (!codeMatch) {\r\n        errors.push(`Cannot extract code type from: ${codeString}`);\r\n        continue;\r\n    }\r\n\r\n    const codeType = codeMatch[1].trim();\r\n    \r\n    // Validate code exists in description file\r\n    if (!validCodes.has(codeType)) {\r\n        errors.push(`Invalid code type: \"${codeType}\" not found in valid codes list`);\r\n    }\r\n\r\n\r\n\r\n        // Validate TAB labels\r\n        if (codeType === 'TAB') {\r\n            const labelMatch = codeString.match(/label\\d+=\"([^\"]*)\"/);\r\n            if (!labelMatch) {\r\n                errors.push('TAB code missing label parameter');\r\n                continue;\r\n            }\r\n\r\n            const label = labelMatch[1];\r\n            \r\n            if (label.length > 30) {\r\n                errors.push(`Tab label too long (max 30 chars): \"${label}\"`);\r\n            }\r\n            \r\n            if (/[&,\":;]/.test(label)) {\r\n                errors.push(`Tab label contains illegal characters (&,\":;): \"${label}\"`);\r\n            }\r\n            \r\n            if (tabLabels.has(label)) {\r\n                errors.push(`Duplicate tab label: \"${label}\"`);\r\n            }\r\n            tabLabels.add(label);\r\n        }\r\n\r\n        // Validate row format\r\n        const rowMatches = codeString.match(/row\\d+=\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+=\"([^\"]*)\"/)[1];\r\n                const parts = rowContent.split('|');\r\n                if (parts.length < 2) {\r\n                    errors.push(`Invalid row format (missing required fields): \"${rowContent}\"`);\r\n                }\r\n            });\r\n        }\r\n    } // <-- This is the end of the second pass loop\r\n\r\n    // Third pass: validate driver references after all row IDs are collected\r\n    for (const codeString of inputCodeStrings) {\r\n        const driverMatches = codeString.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (driverMatches) {\r\n            driverMatches.forEach(match => {\r\n                const driverValue = match.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/)[1].trim();\r\n                if (!rowValues.has(driverValue)) {\r\n                    errors.push(`Driver value \"${driverValue}\" not found in any row`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Convert array of errors to a single string with line breaks\r\n    return errors.join('\\n');\r\n}\r\n\r\n// Modified export function\r\nexport async function runValidation(inputStrings) {\r\n    try {\r\n        const cleanedStrings = inputStrings\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0)\r\n            .map(line => line.replace(/^'|',$|,$|^\"|\"$/g, ''));\r\n\r\n        const codeStrings = cleanedStrings.join(' ').match(/<[^>]+>/g) || [];\r\n\r\n        if (codeStrings.length === 0) {\r\n            console.error('Validation run with no codestrings - input is empty');\r\n            return ['No code strings found to validate'];\r\n        }\r\n\r\n        const validationErrors = await validateCodeStrings(codeStrings);\r\n        return validationErrors;\r\n    } catch (error) {\r\n        console.error('Validation failed:', error);\r\n        return [`Validation failed: ${error.message}`];\r\n    }\r\n}\r\n\r\n// >>> ADDED: New validation function for Run Codes flow (returns array)\r\nexport async function validateCodeStringsForRun(inputCodeStrings) {\r\n    const errors = [];\r\n    const tabLabels = new Set();\r\n    const rowValues = new Set();\r\n    const codeTypes = new Set();\r\n    \r\n    // Clean up input strings by removing anything outside angle brackets\r\n    inputCodeStrings = inputCodeStrings.map(str => {\r\n        const match = str.match(/<[^>]+>/);\r\n        return match ? match[0] : str;\r\n    });\r\n\r\n    console.log(\"[ValidateForRun] CleanedInput Code Strings:\", inputCodeStrings);\r\n\r\n    // Track codes by their suffixes (Same logic as original)\r\n    const vvCodes = new Set();\r\n    const vrCodes = new Set();\r\n    const rrCodes = new Set();\r\n    const rvCodes = new Set();\r\n    const evCodes = new Set();\r\n    const erCodes = new Set();\r\n\r\n    // Load valid codes (Same logic as original)\r\n    let validCodes = new Set();\r\n    try {\r\n        const response = await fetch('../prompts/Codes.txt');\r\n        if (!response.ok) {\r\n            throw new Error('Failed to load Codes.txt file');\r\n        }\r\n        const fileContent = await response.text();\r\n        validCodes = new Set(fileContent.split('\\n')\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0));\r\n    } catch (error) {\r\n        errors.push(`Error reading Codes.txt file: ${error.message}`);\r\n        return errors; // Return array on critical error\r\n    }\r\n\r\n    // First pass: collect all row values, code types, and suffixes (Same logic as original)\r\n    for (const codeString of inputCodeStrings) {\r\n        if (!codeString.startsWith('<') || !codeString.endsWith('>')) {\r\n            errors.push(`Invalid code string format: ${codeString}`);\r\n            continue;\r\n        }\r\n        if (codeString.startsWith('<BR>')) {\r\n            continue;\r\n        }\r\n        const rowMatches = codeString.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/)[1];\r\n                const parts = rowContent.split('|');\r\n                if (parts.length > 0) {\r\n                    parts.forEach(part => {\r\n                        const trimmedPart = part.trim();\r\n                        if (trimmedPart.startsWith('*')) {\r\n                            const afterAsterisk = trimmedPart.substring(1).trim();\r\n                            if (afterAsterisk) {\r\n                                rowValues.add(afterAsterisk);\r\n                            }\r\n                        } else if (trimmedPart) {\r\n                            rowValues.add(trimmedPart);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        const codeMatch = codeString.match(/<([^;]+);/);\r\n        if (codeMatch) {\r\n            const codeType = codeMatch[1].trim();\r\n            codeTypes.add(codeType);\r\n            if (codeType.endsWith('-VV')) vvCodes.add(codeType);\r\n            if (codeType.endsWith('-VR')) vrCodes.add(codeType);\r\n            if (codeType.endsWith('-RR')) rrCodes.add(codeType);\r\n            if (codeType.endsWith('-RV')) rvCodes.add(codeType);\r\n            if (codeType.endsWith('-EV')) evCodes.add(codeType);\r\n            if (codeType.endsWith('-ER')) erCodes.add(codeType);\r\n        }\r\n    }\r\n\r\n    // Validate suffix relationships (Same logic as original)\r\n    for (const code of [...vvCodes, ...vrCodes]) {\r\n        if (evCodes.size === 0 && rvCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -EV or -RV. Fix by adding another code with the correct suffix or by change to the EV/ER version of the same code.`);\r\n        }\r\n    }\r\n    for (const code of [...rrCodes, ...rvCodes]) {\r\n        if (erCodes.size === 0 && vrCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -ER or -VR`);\r\n        }\r\n    }\r\n\r\n    // Second pass: detailed validation (Same logic as original)\r\n    for (const codeString of inputCodeStrings) {\r\n        if (codeString === '<BR>') {\r\n            continue;\r\n        }\r\n        const codeMatch = codeString.match(/<([^;]+);/);\r\n        if (!codeMatch) {\r\n            errors.push(`Cannot extract code type from: ${codeString}`);\r\n            continue;\r\n        }\r\n        const codeType = codeMatch[1].trim();\r\n        if (!validCodes.has(codeType)) {\r\n            errors.push(`Invalid code type: \"${codeType}\" not found in valid codes list`);\r\n        }\r\n        if (codeType === 'TAB') {\r\n            const labelMatch = codeString.match(/label\\d+=\"([^\"]*)\"/);\r\n            if (!labelMatch) {\r\n                errors.push('TAB code missing label parameter');\r\n                continue;\r\n            }\r\n            const label = labelMatch[1];\r\n            if (label.length > 30) {\r\n                errors.push(`Tab label too long (max 30 chars): \"${label}\"`);\r\n            }\r\n            if (/[&,\":;]/.test(label)) {\r\n                errors.push(`Tab label contains illegal characters (&,\":;): \"${label}\"`);\r\n            }\r\n            if (tabLabels.has(label)) {\r\n                errors.push(`Duplicate tab label: \"${label}\"`);\r\n            }\r\n            tabLabels.add(label);\r\n        }\r\n        const rowMatches = codeString.match(/row\\d+=\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+=\"([^\"]*)\"/)[1];\r\n                const parts = rowContent.split('|');\r\n                if (parts.length < 2) {\r\n                    errors.push(`Invalid row format (missing required fields): \"${rowContent}\"`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Third pass: validate driver references (Same logic as original)\r\n    for (const codeString of inputCodeStrings) {\r\n        const driverMatches = codeString.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (driverMatches) {\r\n            driverMatches.forEach(match => {\r\n                const driverValue = match.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/)[1].trim();\r\n                if (!rowValues.has(driverValue)) {\r\n                    errors.push(`Driver value \"${driverValue}\" not found in any row`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Key Change: Return the array of errors directly\r\n    return errors;\r\n}\r\n// <<< END ADDED FUNCTION\r\n\r\n","/**\r\n * CodeCollection.js\r\n * Functions for processing and managing code collections\r\n */\r\n\r\nimport { convertKeysToCamelCase } from \"@pinecone-database/pinecone/dist/utils\";\r\n\r\n/**\r\n * Parses code strings and creates a code collection\r\n * @param {string} inputText - The input text containing code strings\r\n * @returns {Array} - An array of code objects with type and parameters\r\n */\r\nexport function populateCodeCollection(inputText) {\r\n    try {\r\n        console.log(\"Processing input text for code collection\");\r\n         \r\n        // Initialize an empty code collection\r\n        const codeCollection = [];\r\n        \r\n        // Split the input text by newlines (handles \\n and \\r\\n)\r\n        const lines = inputText.split(/\\r?\\n/);\r\n        \r\n        for (const line of lines) {\r\n            // Skip empty lines\r\n            if (!line.trim()) continue;\r\n            \r\n            // Extract the code type and parameters\r\n            const codeMatch = line.match(/<([^;>]+);(.*?)>/);\r\n            if (!codeMatch) continue;\r\n            \r\n            const codeType = codeMatch[1].trim();\r\n            // Remove potential leftover newline/carriage return characters from the params string\r\n            const paramsString = codeMatch[2].replace(/[\\r\\n]+/g, '').trim();\r\n            \r\n            // Parse parameters\r\n            const params = {};\r\n            \r\n            // Handle special case for row parameters with asterisks\r\n            // Use the cleaned paramsString\r\n            const rowMatches = paramsString.matchAll(/row(\\d+)\\s*=\\s*\"([^\"]*)\"/g);\r\n            for (const match of rowMatches) {\r\n                const rowNum = match[1];\r\n                const rowValue = match[2];\r\n                params[`row${rowNum}`] = rowValue;\r\n            }\r\n            \r\n            // Parse other parameters\r\n            // Use the cleaned paramsString\r\n            const paramMatches = paramsString.matchAll(/(\\w+)\\s*=\\s*\"([^\"]*)\"/g);\r\n            for (const match of paramMatches) {\r\n                const paramName = match[1].trim();\r\n                const paramValue = match[2].trim();\r\n                \r\n                // Skip row parameters as they're already handled\r\n                if (paramName.startsWith('row')) continue;\r\n                \r\n                params[paramName] = paramValue;\r\n            }\r\n            \r\n            // Add the code to the collection\r\n            codeCollection.push({\r\n                type: codeType,\r\n                params: params\r\n            });\r\n        }\r\n        \r\n        console.log(`Processed ${codeCollection.length} codes`);\r\n        return codeCollection;\r\n    } catch (error) {\r\n        console.error(\"Error in populateCodeCollection:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Exports a code collection to text format\r\n * @param {Array} codeCollection - The code collection to export\r\n * @returns {string} - A formatted text representation of the code collection\r\n */\r\nexport function exportCodeCollectionToText(codeCollection) {\r\n    try {\r\n        if (!codeCollection || !Array.isArray(codeCollection)) {\r\n            throw new Error(\"Invalid code collection\");\r\n        }\r\n        \r\n        let result = \"Code Collection:\\n\";\r\n        result += \"================\\n\\n\";\r\n        \r\n        codeCollection.forEach((code, index) => {\r\n            result += `Code ${index + 1}: ${code.type}\\n`;\r\n            result += \"Parameters:\\n\";\r\n            \r\n            // First display non-row parameters\r\n            for (const [key, value] of Object.entries(code.params)) {\r\n                if (!key.startsWith('row')) {\r\n                    result += `  ${key}: ${value}\\n`;\r\n                }\r\n            }\r\n            \r\n            // Then display row parameters\r\n            const rowParams = Object.entries(code.params)\r\n                .filter(([key]) => key.startsWith('row'))\r\n                .sort((a, b) => {\r\n                    const numA = parseInt(a[0].replace('row', ''));\r\n                    const numB = parseInt(b[0].replace('row', ''));\r\n                    return numA - numB;\r\n                });\r\n            \r\n            if (rowParams.length > 0) {\r\n                result += \"  Rows:\\n\";\r\n                for (const [key, value] of rowParams) {\r\n                    result += `    ${key}: ${value}\\n`;\r\n                }\r\n            }\r\n            \r\n            result += \"\\n\";\r\n        });\r\n        \r\n        return result;\r\n    } catch (error) {\r\n        console.error(\"Error in exportCodeCollectionToText:\", error);\r\n        throw error;\r\n    }\r\n} \r\n\r\n/**\r\n * Processes a code collection and performs operations based on code types\r\n * @param {Array} codeCollection - The code collection to process\r\n * @returns {Object} - Results of processing the code collection\r\n */\r\nexport async function runCodes(codeCollection) {\r\n    try {\r\n        console.log(\"Running code collection processing\");\r\n        \r\n        if (!codeCollection || !Array.isArray(codeCollection)) {\r\n            throw new Error(\"Invalid code collection\");\r\n        }\r\n        \r\n        // Initialize result object\r\n        const result = {\r\n            processedCodes: 0,\r\n            createdTabs: [],\r\n            errors: []\r\n        };\r\n        \r\n        // Initialize state variables (similar to VBA variables)\r\n        let currentWorksheetName = null;\r\n        const assumptionTabs = [];\r\n        \r\n        // Process each code in the collection\r\n        for (let i = 0; i < codeCollection.length; i++) {\r\n            const code = codeCollection[i];\r\n            const codeType = code.type;\r\n            \r\n            try {\r\n                // Handle MODEL code type\r\n                if (codeType === \"MODEL\") {\r\n                    // Skip for now as mentioned in the original VBA code\r\n                    console.log(\"MODEL code type encountered - skipping for now\");\r\n                    continue;\r\n                }\r\n                \r\n                // Handle TAB code type\r\n                if (codeType === \"TAB\") {\r\n                    // Accept both label1 and Label1 for backward compatibility\r\n                    const tabName = code.params.label1 || code.params.Label1 || `Tab_${i}`;\r\n                    \r\n                    // Check if worksheet exists and delete it\r\n                    await Excel.run(async (context) => {\r\n                        try {\r\n                            // Get all worksheets\r\n                            const sheets = context.workbook.worksheets;\r\n                            sheets.load(\"items/name\");\r\n                            console.log(\"sheets\", sheets);\r\n                            await context.sync();\r\n                            \r\n                            // Check if worksheet exists\r\n                            const existingSheet = sheets.items.find(sheet => sheet.name === tabName);\r\n                            console.log(\"existingSheet\", existingSheet);\r\n                            // if (existingSheet) {\r\n                            //     // Delete the worksheet if it exists\r\n                            //     existingSheet.delete();\r\n                            //     await context.sync();\r\n                            // }\r\n                            // console.log(\"existingSheet deleted\");\r\n                            \r\n                            // Get the Financials worksheet (needed for position and as fallback template)\r\n                            const financialsSheet = context.workbook.worksheets.getItem(\"Financials\");\r\n                            financialsSheet.load(\"position\"); // Load Financials sheet position\r\n                            await context.sync(); // Sync to get Financials position\r\n                            console.log(`Financials sheet is at position ${financialsSheet.position}`);\r\n                            \r\n                            // Check if the target tab already exists\r\n                            if (!existingSheet) {\r\n                                let newSheet;\r\n                                let sourceSheetName;\r\n\r\n                                // Try to get the Calcs worksheet\r\n                                try {\r\n                                    const sourceCalcsWS = context.workbook.worksheets.getItem(\"Calcs\");\r\n                                    await context.sync(); // Ensure it's loaded if found\r\n                                    console.log(\"Using Calcs worksheet as template.\");\r\n                                    newSheet = sourceCalcsWS.copy();\r\n                                    sourceSheetName = \"Calcs\";\r\n                                } catch (calcsError) {\r\n                                    // If Calcs doesn't exist, use Financials as the template\r\n                                    console.warn(\"Calcs worksheet not found. Using Financials as template.\");\r\n                                    newSheet = financialsSheet.copy();\r\n                                    sourceSheetName = \"Financials\";\r\n                                    // Sync needed *after* copy to reference the new sheet object reliably\r\n                                    await context.sync(); \r\n                                    \r\n                                    // --- Load name before accessing it ---\r\n                                    newSheet.load(\"name\");\r\n                                    await context.sync();\r\n                                    // --- End Load name ---\r\n                                    \r\n                                    // --- Clear rows 10 down if copied from Financials ---\r\n                                    console.log(`Clearing contents and formats from row 10 down in new sheet ${newSheet.name} copied from ${sourceSheetName}`);\r\n                                    // Use a reasonable large row number or get last row if needed, 10000 should suffice\r\n                                    const clearRange = newSheet.getRange(\"10:10000\"); \r\n                                    clearRange.clear(Excel.ClearApplyTo.all);\r\n                                    // Do NOT sync clear yet, batch with linking below\r\n\r\n                                    // --- Link non-empty cells in rows 1-8 back to Financials ---\r\n                                    console.log(`Linking header rows (1-8) in ${newSheet.name} back to Financials`);\r\n                                    // Get used range of the new sheet to find last column\r\n                                    const usedRange = newSheet.getUsedRange(true); // Use valuesOnly = true\r\n                                    usedRange.load([\"columnCount\", \"rowCount\"]);\r\n                                    // Sync to get the used range info *before* calculating link range address\r\n                                    await context.sync();\r\n\r\n                                    const lastColIndex = usedRange.columnCount > 0 ? usedRange.columnCount - 1 : 0; \r\n                                    const lastColLetter = columnIndexToLetter(lastColIndex);\r\n                                    // Process only up to row 8\r\n                                    const linkRangeAddress = `A1:${lastColLetter}8`;\r\n\r\n                                    console.log(`Processing header link range: ${linkRangeAddress}`);\r\n                                    const linkRange = newSheet.getRange(linkRangeAddress);\r\n                                    linkRange.load(\"values\");\r\n                                    // Sync to load the values *before* iterating and setting formulas\r\n                                    await context.sync();\r\n\r\n                                    const values = linkRange.values;\r\n                                    // Batch formula setting directly\r\n                                    for (let r = 0; r < values.length; r++) {\r\n                                        const rowNum = r + 1;\r\n                                        for (let c = 0; c < values[r].length; c++) {\r\n                                            const cellValue = values[r][c];\r\n                                            if (cellValue !== null && cellValue !== \"\") {\r\n                                                const colLetter = columnIndexToLetter(c);\r\n                                                const cellAddress = `${colLetter}${rowNum}`;\r\n                                                const formula = `=Financials!${cellAddress}`;\r\n                                                // Get the specific cell and queue the formula update\r\n                                                const targetCell = newSheet.getRange(cellAddress);\r\n                                                targetCell.formulas = [[formula]];\r\n                                                // console.log(`  Queueing formula for ${cellAddress} to ${formula}`); \r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    // The sync for these formula changes will happen later, along with rename/position.\r\n                                    // --- End Link header rows ---\r\n\r\n                                    // --- Set font color for rows 2-8 ---\r\n                                    console.log(`Setting font color for rows 2-8 in ${newSheet.name}`);\r\n                                    const headerFormatRangeAddress = `A2:${lastColLetter}8`;\r\n                                    const headerFormatRange = newSheet.getRange(headerFormatRangeAddress);\r\n                                    headerFormatRange.format.font.color = \"#008000\"; // Green\r\n                                    // --- End Set font color ---\r\n\r\n                                    // --- Set tab color ---\r\n                                    console.log(`Setting tab color for ${newSheet.name}`);\r\n                                    newSheet.tabColor = \"#4472C4\"; // Blue\r\n                                    // --- End Set tab color ---\r\n                                }\r\n\r\n                                // Sync copy operation if not already synced (e.g., if Calcs was used)\r\n                                // If Financials was used, sync happened before clear. If Calcs was used, sync happens here.\r\n                                if (sourceSheetName === \"Calcs\") {\r\n                                     await context.sync();\r\n                                }\r\n\r\n                                console.log(`newSheet created by copying ${sourceSheetName} worksheet`);\r\n\r\n                                // Rename it\r\n                                newSheet.name = tabName;\r\n                                console.log(\"newSheet renamed to\", tabName);\r\n\r\n                                // <<< NEW: Set position relative to Financials sheet >>>\r\n                                newSheet.position = financialsSheet.position + 1;\r\n                                console.log(`Set position of ${tabName} to ${newSheet.position}`);\r\n                                // Add to assumption tabs collection\r\n                                assumptionTabs.push({\r\n                                    name: tabName,\r\n                                    worksheet: newSheet\r\n                                }); // <-- Added closing brace and semicolon here\r\n\r\n                                currentWorksheetName = tabName;\r\n\r\n                                await context.sync(); // Sync rename and position changes\r\n\r\n                                result.createdTabs.push(tabName);\r\n                                console.log(\"Tab created successfully:\", tabName);\r\n                            // }); <-- Removed this closing parenthesis, it belongs to Excel.run below\r\n\r\n                            }\r\n\r\n                            else {\r\n                                console.log(\"Worksheet already exists:\", tabName);\r\n                                assumptionTabs.push({\r\n                                    name: tabName,\r\n                                    worksheet: existingSheet\r\n                                });\r\n                                // Need to set currentWorksheetName here too if the sheet exists\r\n                                currentWorksheetName = tabName; \r\n                            }\r\n                      \r\n       \r\n                            \r\n                         \r\n                            \r\n                            // Set the current worksheet name <-- This comment is now redundant/misplaced\r\n                       \r\n                        } catch (error) {\r\n                            console.error(\"Detailed error in TAB processing:\", error);\r\n                            throw error;\r\n                        }\r\n                    }).catch(error => { // <-- This is the correct closing for Excel.run\r\n                        console.error(`Error processing TAB code: ${error.message}`);\r\n                        result.errors.push({\r\n                            codeIndex: i,\r\n                            codeType: codeType,\r\n                            error: error.message\r\n                        });\r\n                    });\r\n                    \r\n                    continue;\r\n                }\r\n                \r\n                // Handle non-TAB codes\r\n                if (codeType !== \"TAB\") {\r\n                    await Excel.run(async (context) => {\r\n                        try {\r\n                            // Get the Codes worksheet\r\n                            const codesWS = context.workbook.worksheets.getItem(\"Codes\");\r\n                            console.log(\"Got Codes worksheet\");\r\n                            \r\n                            // Get the used range of the Codes worksheet\r\n                            const usedRange = codesWS.getUsedRange();\r\n                            usedRange.load(\"rowCount\");\r\n                            usedRange.load(\"columnCount\");\r\n                            await context.sync();\r\n                            console.log(`Used range: ${usedRange.rowCount} rows x ${usedRange.columnCount} columns`);\r\n                            \r\n                            // Get the current worksheet\r\n                            const currentWS = context.workbook.worksheets.getItem(currentWorksheetName);\r\n                            console.log(\"Got current worksheet:\", currentWorksheetName);\r\n                            \r\n                            // Get the last row in the current worksheet\r\n                            const lastUsedRow = currentWS.getUsedRange().getLastRow();\r\n                            lastUsedRow.load(\"rowIndex\");\r\n                            await context.sync();\r\n                            const pasteRow = lastUsedRow.rowIndex + 2; // Adjusted to paste one row lower\r\n                            console.log(\"Paste row:\", pasteRow);\r\n                            \r\n                            // Search for the code type in column D (index 3)\r\n                            let firstRow = -1;\r\n                            let lastRow = -1;\r\n                            \r\n                            // Load the values of column D\r\n                            const columnD = codesWS.getRange(`D1:D${usedRange.rowCount}`);\r\n                            columnD.load(\"values\");\r\n                            await context.sync();\r\n                            \r\n                            console.log(\"Loaded column D values\");\r\n                            \r\n                            // Check if values are loaded properly\r\n                            if (!columnD.values) {\r\n                                console.error(\"columnD.values is null or undefined\");\r\n                                throw new Error(`Failed to load values from column D in Codes worksheet`);\r\n                            }\r\n                            \r\n                            console.log(`columnD.values length: ${columnD.values.length}`);\r\n                            \r\n                            // Debug print the first few values in column D\r\n                            console.log(\"First 10 values in column D:\");\r\n                            for (let i = 0; i < Math.min(10, columnD.values.length); i++) {\r\n                                console.log(`Row ${i+1}: ${columnD.values[i][0]}`);\r\n                            }\r\n                            \r\n                            // Find the first and last row with the code\r\n                            for (let row = 0; row < columnD.values.length; row++) {\r\n                                if (columnD.values[row][0] === codeType) {\r\n                                    if (firstRow === -1) {\r\n                                        firstRow = row + 1; // Excel rows are 1-indexed\r\n                                    }\r\n                                    lastRow = row + 1;\r\n                                }\r\n                            }\r\n                            \r\n                            // Check if the code type was found\r\n                            const codeTypeFound = firstRow !== -1 && lastRow !== -1;\r\n                            \r\n                            if (!codeTypeFound) {\r\n                                console.warn(`Code type ${codeType} not found in Codes worksheet. Skipping this code.`);\r\n                                result.errors.push({\r\n                                    codeIndex: i,\r\n                                    codeType: codeType,\r\n                                    error: `Code type ${codeType} not found in Codes worksheet`\r\n                                });\r\n                                // Skip to the next code\r\n                                result.processedCodes++;\r\n                            } else {\r\n                                console.log(`Found code type ${codeType} in rows ${firstRow} to ${lastRow}`);\r\n                                \r\n                                // Try the suggested approach to copy the range with all properties\r\n                                await Excel.run(async (context) => {\r\n                                    // Get the source range\r\n                                    const sourceRange = context.workbook.worksheets.getItem(\"Codes\").getRange(`A${firstRow}:CX${lastRow}`);\r\n                                    \r\n                                    // Get the destination range\r\n                                    const destinationRange = context.workbook.worksheets.getItem(currentWorksheetName).getRange(`A${pasteRow}`);\r\n                                    \r\n                                    // Copy the range with all properties\r\n                                    destinationRange.copyFrom(sourceRange, Excel.RangeCopyType.all);\r\n                                    \r\n                                    await context.sync();\r\n                                });\r\n                                \r\n                                await context.sync();\r\n                                \r\n                                // Apply the driver and assumption inputs function to the current worksheet\r\n                                try {\r\n                                    console.log(`Applying driver and assumption inputs to worksheet: ${currentWorksheetName}`);\r\n                                    \r\n                                    // Get the current worksheet and load its properties\r\n                                    const currentWorksheet = context.workbook.worksheets.getItem(currentWorksheetName);\r\n                                    currentWorksheet.load('name');\r\n                                    await context.sync();\r\n                                    \r\n                                    await driverAndAssumptionInputs(\r\n                                        currentWorksheet,\r\n                                        pasteRow,\r\n                                        code\r\n                                    );\r\n                                    console.log(`Successfully applied driver and assumption inputs to worksheet: ${currentWorksheetName}`);\r\n                                } catch (error) {\r\n                                    console.error(`Error applying driver and assumption inputs: ${error.message}`);\r\n                                    result.errors.push({\r\n                                        codeIndex: i,\r\n                                        codeType: codeType,\r\n                                        error: `Error applying driver and assumption inputs: ${error.message}`\r\n                                    });\r\n                                }\r\n                                \r\n                                result.processedCodes++;\r\n                            }\r\n                        } catch (error) {\r\n                            console.error(`Error processing code ${codeType}:`, error);\r\n                            throw error;\r\n                        }\r\n                    }).catch(error => {\r\n                        console.error(`Error processing code ${codeType}: ${error.message}`);\r\n                        result.errors.push({\r\n                            codeIndex: i,\r\n                            codeType: codeType,\r\n                            error: error.message\r\n                        });\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                console.error(`Error processing code ${i}:`, error);\r\n                result.errors.push({\r\n                    codeIndex: i,\r\n                    codeType: codeType,\r\n                    error: error.message\r\n                });\r\n            }\r\n        }\r\n        \r\n        // Prepare the final result object, including the names of assumption tabs\r\n        const finalResult = {\r\n            ...result, // Includes processedCodes, errors\r\n            assumptionTabs: assumptionTabs.map(tab => tab.name) // Return only the names\r\n        };\r\n\r\n        console.log(\"runCodes finished. Returning:\", finalResult);\r\n        return finalResult; // Return the modified result object\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in runCodes:\", error);\r\n        // Consider how to return errors. Throwing stops execution.\r\n        // Returning them in the result allows the caller to decide.\r\n        throw error; // Or return { errors: [error.message], assumptionTabs: [] }\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function to update cell references in formulas when rows are inserted\r\n * @param {string} formula - The formula to update\r\n * @param {number} rowOffset - The number of rows to offset\r\n * @returns {string} - The updated formula\r\n */\r\nfunction updateFormulaReferences(formula, rowOffset) {\r\n    if (!formula || !formula.startsWith('=')) {\r\n        return formula;\r\n    }\r\n    \r\n    // Regular expression to match cell references (e.g., A1, B2, etc.)\r\n    const cellRefRegex = /([A-Z]+)([0-9]+)/g;\r\n    \r\n    // Replace each cell reference with an updated one\r\n    return formula.replace(cellRefRegex, (match, col, row) => {\r\n        const rowNum = parseInt(row);\r\n        return `${col}${rowNum + rowOffset}`;\r\n    });\r\n}\r\n\r\n/**\r\n * Tests if the active cell's fill color is #CCFFCC (light green)\r\n * @returns {Promise<boolean>} - True if the active cell is green, false otherwise\r\n */\r\nexport async function isActiveCellGreen() {\r\n    try {\r\n        console.log(\"Testing if cell B2 is green (#CCFFCC)\");\r\n        \r\n        return await Excel.run(async (context) => {\r\n            // Get cell B2 instead of the active cell\r\n            const cellB2 = context.workbook.worksheets.getActiveWorksheet().getRange(\"B2\");\r\n            \r\n            // Load the fill color property and address\r\n            cellB2.load([\"format/fill/color\", \"address\"]);\r\n            \r\n            // Execute the request\r\n            await context.sync();\r\n            \r\n            // Check if the color is #CCFFCC\r\n            const isGreen = cellB2.format.fill.color === \"#CCFFCC\";\r\n            \r\n            console.log(`Cell B2 address: ${cellB2.address}, color: ${cellB2.format.fill.color}, Is green: ${isGreen}`);\r\n            \r\n            return isGreen;\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error in isActiveCellGreen:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Processes driver and assumption inputs for a worksheet based on code parameters,\r\n * replicating the logic from the VBA Driver_and_Assumption_Inputs function.\r\n * @param {Excel.Worksheet} worksheet - The initial Excel worksheet object.\r\n * @param {number} calcsPasteRow - The starting row for finding the code block.\r\n * @param {Object} code - The code object with type and parameters.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function driverAndAssumptionInputs(worksheet, calcsPasteRow, code) {\r\n    try {\r\n        // --- Load worksheet name before calling helper ---\r\n        // This requires its own context if worksheet object might not have name loaded yet\r\n        let worksheetName = 'unknown';\r\n        try {\r\n             await Excel.run(async (context) => {\r\n                 worksheet.load('name');\r\n                 await context.sync();\r\n                 worksheetName = worksheet.name;\r\n                 \r\n             });\r\n         } catch(nameLoadError) {\r\n             console.error(\"Failed to load worksheet name before calling helper\", nameLoadError);\r\n             throw new Error(\"Cannot determine worksheet name to proceed.\");\r\n         }\r\n\r\n        // Define variable to store lastRow outside Excel.run scope so we can use it later\r\n        let lastRow = 1000; // Default value in case of failure\r\n\r\n        try {\r\n            // Get a fresh worksheet reference and find the last row within a proper Excel.run context\r\n            lastRow = await Excel.run(async (context) => {    \r\n                // Get worksheet reference within THIS context by name\r\n                const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\r\n                \r\n                // Get the used range of the worksheet\r\n                const usedRange = currentWorksheet.getUsedRange();\r\n\r\n                // Get the last row within the used range\r\n                const lastRowRange = usedRange.getLastRow();\r\n\r\n                // Load the rowIndex property of the last row\r\n                lastRowRange.load(\"rowIndex\");\r\n\r\n                // Synchronize the state with the Excel document\r\n                await context.sync();\r\n\r\n                // Calculate the 1-based index of the last row\r\n                const result = lastRowRange.rowIndex + 1;\r\n                console.log('lastRow', result);\r\n                \r\n                // Return the value so it's accessible outside this Excel.run\r\n                return result;\r\n            });\r\n        } catch(lastRowError) {\r\n            console.error(\"Failed to determine last row\", lastRowError);\r\n            throw new Error(\"Cannot determine last row to proceed.\");\r\n        }\r\n\r\n        // Ensure lastRow is a valid number (helper should return 1000 on error)\r\n        if (typeof lastRow !== 'number' || lastRow <= 0) {\r\n            console.error(`Last row determination failed or returned invalid value (${lastRow}). Cannot proceed safely.`);\r\n            throw new Error(\"Failed to determine a valid last row for processing.\");\r\n        }\r\n        // --- End Determine Last Row ---\r\n\r\n        // Now, proceed with the main logic within its own Excel.run\r\n        await Excel.run(async (context) => {\r\n            // Pass the determined lastRow into this context\r\n            const determinedLastRow = lastRow; \r\n            \r\n            // Get worksheet reference within THIS context by name\r\n            const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\r\n            \r\n            // USE calcsPasteRow in console log\r\n            console.log(`Processing driver/assumption inputs for worksheet: ${worksheetName}, Code: ${code.type}, Start Row: ${calcsPasteRow}, Using Last Row: ${determinedLastRow}`);\r\n\r\n            // NEW SECTION: Convert row references to absolute for columns >= AE\r\n            // First, load all formulas from columns AE to CX for the range of interest\r\n            console.log(\"Making row references absolute for cell references in columns >= AE before row insertion\");\r\n            \r\n            const START_ROW = 10;\r\n            const TARGET_COL = \"AE\";\r\n            const END_COL = \"CX\";\r\n            \r\n            // Define range to process\r\n            let processStartRow = Math.min(calcsPasteRow, START_ROW);\r\n            let processEndRow = determinedLastRow;\r\n            \r\n            const formulaRangeAddress = `${TARGET_COL}${processStartRow}:${END_COL}${processEndRow}`;\r\n            console.log(`Loading formulas from range: ${formulaRangeAddress}`);\r\n            \r\n            try {\r\n                const formulaRange = currentWorksheet.getRange(formulaRangeAddress);\r\n                formulaRange.load(\"formulas\");\r\n                await context.sync();\r\n                \r\n                // Calculate TARGET_COL index for reference comparisons\r\n                const targetColIndex = columnLetterToIndex(TARGET_COL);\r\n                console.log(`Target column ${TARGET_COL} has index ${targetColIndex}`);\r\n                \r\n                let formulasUpdated = false;\r\n                const origFormulas = formulaRange.formulas;\r\n                const newFormulas = [];\r\n                \r\n                // Process each formula in the range\r\n                for (let r = 0; r < origFormulas.length; r++) {\r\n                    const rowFormulas = [];\r\n                    \r\n                    for (let c = 0; c < origFormulas[r].length; c++) {\r\n                        let formula = origFormulas[r][c];\r\n                        \r\n                        // Only process string formulas\r\n                        if (typeof formula === 'string') {\r\n                            // Skip if it's not a formula\r\n                            if (!formula.startsWith('=')) {\r\n                                rowFormulas.push(formula);\r\n                                continue;\r\n                            }\r\n                            \r\n                            // Find cell references (e.g., A1, B2, AA34) but exclude already absolute refs (e.g., A$1, $A$1)\r\n                            // This regex captures: group 1 = column letter(s), group 2 = row number\r\n                            // It skips references that already have $ before the row number\r\n                            const cellRefRegex = /([A-Z]+)(\\d+)(?![^\\W_])/g;\r\n                            \r\n                            // Replace with absolute row references where needed\r\n                            const originalFormula = formula;\r\n                            formula = formula.replace(cellRefRegex, (match, col, row) => {\r\n                                // Get column index\r\n                                const colIndex = columnLetterToIndex(col);\r\n                                \r\n                                // If column index is >= target column index, make row reference absolute\r\n                                if (colIndex >= targetColIndex) {\r\n                                    return `${col}$${row}`;\r\n                                }\r\n                                return match; // Keep as is for columns before TARGET_COL\r\n                            });\r\n                            \r\n                            if (formula !== originalFormula) {\r\n                                formulasUpdated = true;\r\n                                //console.log(`  Row ${processStartRow + r}, Col ${columnIndexToLetter(c + targetColIndex)}: Formula changed from '${originalFormula}' to '${formula}'`);\r\n                            }\r\n                        }\r\n                        \r\n                        rowFormulas.push(formula);\r\n                    }\r\n                    \r\n                    newFormulas.push(rowFormulas);\r\n                }\r\n                \r\n                // Only update if changes were made\r\n                if (formulasUpdated) {\r\n                    console.log(`Updating formulas with absolute row references in range ${formulaRangeAddress}`);\r\n                    formulaRange.formulas = newFormulas;\r\n                    await context.sync();\r\n                    console.log(\"Formula updates completed\");\r\n                } else {\r\n                    console.log(\"No formulas needed absolute row reference updates\");\r\n                }\r\n            } catch (formulaError) {\r\n                console.error(`Error processing formulas for absolute row references: ${formulaError.message}`, formulaError);\r\n                // Continue with the function, don't let this conversion stop the flow\r\n            }\r\n            // END NEW SECTION\r\n\r\n            const columnSequence = ['A', 'B', 'C', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'O', 'P', 'R'];\r\n            \r\n            // Get the code value\r\n            const codeValue = code.type;\r\n\r\n            // Find the search row (first row >= calcsPasteRow where CodeValue is found in Col D)\r\n            // Note: Using determinedLastRow obtained from the helper function\r\n            let searchRow = -1; // 1-based index\r\n            let searchRange = null; \r\n            let searchRangeAddress = ''; \r\n\r\n            try {\r\n                // USE calcsPasteRow in console log\r\n                console.log(`Attempting to get searchRange. calcsPasteRow: ${calcsPasteRow}, determinedLastRow: ${determinedLastRow}`);\r\n                // USE calcsPasteRow in condition\r\n                if (typeof calcsPasteRow !== 'number' || typeof determinedLastRow !== 'number' || calcsPasteRow <= 0 || determinedLastRow < calcsPasteRow) {\r\n                     console.error(`Invalid range parameters for searchRange: calcsPasteRow=${calcsPasteRow}, determinedLastRow=${determinedLastRow}. Skipping search.`);\r\n                     searchRow = -1; \r\n                 } else {\r\n                     // USE calcsPasteRow for search range address\r\n                     searchRangeAddress = `D${calcsPasteRow}:D${determinedLastRow}`;\r\n                     console.log(`Creating searchRange with address: ${searchRangeAddress}`);\r\n                     // Need to use the worksheet object available in *this* context\r\n                     searchRange = currentWorksheet.getRange(searchRangeAddress);\r\n\r\n                     console.log(`Loading values for searchRange: ${searchRangeAddress}`);\r\n                     searchRange.load('values');\r\n                     await context.sync();\r\n                     console.log(`Successfully loaded values for searchRange: ${searchRangeAddress}`);\r\n                 }\r\n\r\n            } catch (loadError) {\r\n                 console.error(`Error loading/syncing searchRange (${searchRangeAddress}): ${loadError.message}`, loadError);\r\n                 searchRow = -1; \r\n            }\r\n\r\n            // Check if searchRange was successfully created and loaded before accessing .values\r\n            if (searchRange && searchRange.values) { // Check searchRange first!\r\n                 console.log(`SearchRange (${searchRangeAddress}) has loaded values. Searching for codeValue: ${codeValue}`);\r\n                 for (let i = 0; i < searchRange.values.length; i++) {\r\n                    if (searchRange.values[i][0] === codeValue) {\r\n                        // USE calcsPasteRow to calculate searchRow\r\n                        searchRow = calcsPasteRow + i; // Found the row (1-based)\r\n                        console.log(`Found codeValue '${codeValue}' at index ${i}, resulting searchRow: ${searchRow}`);\r\n                        break;\r\n                    }\r\n                }\r\n                 if (searchRow === -1) { // If loop finished without finding\r\n                     console.log(`CodeValue '${codeValue}' not found within the loaded values of searchRange (${searchRangeAddress}).`);\r\n                 }\r\n            } else if (searchRow !== -1) { // Only log warning if we didn't already hit the loadError or invalid params\r\n                 console.warn(`searchRange (${searchRangeAddress}) object exists but '.values' property is not available after sync. Search cannot be performed.`);\r\n                 searchRow = -1; // Ensure we trigger the \"not found\" logic\r\n            }\r\n\r\n            if (searchRow === -1) {\r\n                 console.warn(`Code type ${codeValue} not found or could not be searched for in column D (Range: ${searchRangeAddress || 'Invalid'}). Skipping inputs for this code.`);\r\n                 return; // Exit if code not found or search failed\r\n            }\r\n            console.log(`Found code ${codeValue} at search row: ${searchRow}`);\r\n\r\n\r\n            // Find the check row (first row >= searchrow where Col B is not light green #CCFFCC)\r\n            // VBA: Do While .Cells(checkrow, 2).Interior.Color = RGB(204, 255, 204)\r\n            let checkRow = searchRow;\r\n            let isGreen = true;\r\n            while (isGreen) {\r\n                const cellB = currentWorksheet.getRange(`B${checkRow}`);\r\n                cellB.load('format/fill/color');\r\n                await context.sync();\r\n                 // Handle potential errors if cell color can't be loaded\r\n                 if (cellB.format && cellB.format.fill) {\r\n                    isGreen = cellB.format.fill.color === '#CCFFCC';\r\n                 } else {\r\n                     console.warn(`Could not read fill color for cell B${checkRow}. Assuming not green.`);\r\n                     isGreen = false; // Assume not green if color cannot be determined\r\n                 }\r\n\r\n                if (isGreen) {\r\n                    checkRow++;\r\n                    // Add a safety break condition?\r\n                    if (checkRow > determinedLastRow + 50) { // Use determinedLastRow\r\n                         console.error(\"Check row exceeded expected limits. Breaking loop.\");\r\n                         throw new Error(\"Failed to find non-green check row within reasonable bounds.\");\r\n                    }\r\n                }\r\n            }\r\n            console.log(`Found check row (first non-green row in B at/after search row): ${checkRow}`);\r\n\r\n\r\n            // Process drivers, labels, and financialsdriver (relative to searchRow)\r\n            for (let k = 1; k <= 9; k++) {\r\n                const targetRow = searchRow + k - 1;\r\n                if (targetRow > determinedLastRow + 20) { // Safety check: Don't write way past the data\r\n                    console.warn(`Target row ${targetRow} seems too high. Skipping write for k=${k}.`);\r\n                    continue;\r\n                }\r\n\r\n                // Financials Driver (only for k=1)\r\n                if (k === 1 && code.params.financialsdriver) {\r\n                    const finDriverCell = currentWorksheet.getRange(`I${targetRow}`);\r\n                    finDriverCell.values = [[code.params.financialsdriver]];\r\n                    console.log(`Set financialsdriver at I${targetRow}: ${code.params.financialsdriver}`);\r\n                }\r\n\r\n                // Driver\r\n                const driverParam = code.params[`driver${k}`];\r\n                if (driverParam) {\r\n                    const driverCell = currentWorksheet.getRange(`F${targetRow}`);\r\n                    driverCell.values = [[driverParam]];\r\n                     console.log(`Set driver${k} at F${targetRow}: ${driverParam}`);\r\n                }\r\n\r\n                // Label\r\n                const labelParam = code.params[`label${k}`];\r\n                if (labelParam) {\r\n                    const labelCell = currentWorksheet.getRange(`B${targetRow}`);\r\n                    labelCell.values = [[labelParam]];\r\n                     console.log(`Set label${k} at B${targetRow}: ${labelParam}`);\r\n                }\r\n            }\r\n            await context.sync(); // Sync after loop for efficiency\r\n\r\n\r\n            // Process row items (inserting rows relative to checkRow)\r\n            let currentCheckRowForInserts = checkRow; // Use a separate variable to track cumulative insertions correctly\r\n            for (let g = 1; g <= 200; g++) { // Max 200 row parameters as in VBA\r\n                const rowParam = code.params[`row${g}`];\r\n                if (!rowParam) continue; // Skip if rowg parameter doesn't exist\r\n\r\n                 console.log(`Processing row${g}: ${rowParam}`);\r\n\r\n                const rowItems = rowParam.split('*');\r\n                const numNewRows = rowItems.length - 1; // Number of rows to insert\r\n\r\n                // Calculate the 1-based row number *before* potential insertions for this 'g' iteration\r\n                // This takes into account rows inserted by previous 'g' loops via currentCheckRowForInserts\r\n                const baseRowForThisG = currentCheckRowForInserts + g - 1;\r\n                console.log(`Base row for row${g}: ${baseRowForThisG}, numNewRows: ${numNewRows}`);\r\n\r\n                if (numNewRows > 0) {\r\n                    // Insert new rows below the baseRowForThisG\r\n                    const insertStartAddress = `${baseRowForThisG + 1}:${baseRowForThisG + numNewRows}`;\r\n                    console.log(`Inserting ${numNewRows} rows at ${insertStartAddress}`);\r\n                    const insertRange = currentWorksheet.getRange(insertStartAddress);\r\n                    insertRange.insert(Excel.InsertShiftDirection.down);\r\n                    await context.sync(); // Sync after insert\r\n\r\n                    // Sequentially copy formats and formulas from the previous row to the newly inserted ones\r\n                    // This helps ensure relative formulas are adjusted correctly step-by-step\r\n                    console.log(`Copying formats/formulas sequentially for inserted rows.`);\r\n                    for (let i = 0; i < numNewRows; i++) {\r\n                        const sourceRowNum = baseRowForThisG + i;\r\n                        const targetRowNum = baseRowForThisG + i + 1; // The newly inserted row\r\n                        const sourceRowRange = currentWorksheet.getRange(`${sourceRowNum}:${sourceRowNum}`);\r\n                        const targetRowRange = currentWorksheet.getRange(`${targetRowNum}:${targetRowNum}`);\r\n\r\n                        // Copy formats\r\n                        console.log(`  Copying formats from row ${sourceRowNum} to ${targetRowNum}`);\r\n                        targetRowRange.copyFrom(sourceRowRange, Excel.RangeCopyType.formats);\r\n\r\n                        // Copy formulas (should adjust relative references)\r\n                        console.log(`  Copying formulas from row ${sourceRowNum} to ${targetRowNum}`);\r\n                        targetRowRange.copyFrom(sourceRowRange, Excel.RangeCopyType.formulas);\r\n\r\n                        // We could use RangeCopyType.all, but separate copy ensures population step overrides values cleanly.\r\n                    }\r\n                    await context.sync(); // Sync after all copies for this 'g' group are done\r\n                    console.log(\"Finished sequential copy for inserted rows.\");\r\n                }\r\n\r\n                // Populate the row(s) (original row + inserted rows)\r\n                // This runs AFTER rows are inserted and structure (formats/formulas) is copied.\r\n                for (let yy = 0; yy <= numNewRows; yy++) {\r\n                    const currentRowNum = baseRowForThisG + yy; // 1-based row number to write to\r\n                    const splitArray = rowItems[yy].split('|');\r\n                    console.log(`Populating row ${currentRowNum} with items: ${rowItems[yy]}`);\r\n\r\n                    for (let x = 0; x < splitArray.length; x++) {\r\n                        // Check bounds for columnSequence\r\n                        if (x >= columnSequence.length) {\r\n                            console.warn(`Data item index ${x} exceeds columnSequence length (${columnSequence.length}). Skipping.`);\r\n                            continue;\r\n                        }\r\n\r\n                        const valueToWrite = splitArray[x];\r\n                        // VBA check: If splitArray(x) <> \"\" And splitArray(x) <> \"F\" Then\r\n                        // 'F' likely means \"Formula\", so we don't overwrite if the value is 'F'.\r\n                        if (valueToWrite && valueToWrite.toUpperCase() !== 'F') {\r\n                            const colLetter = columnSequence[x];\r\n                            const cellToWrite = currentWorksheet.getRange(`${colLetter}${currentRowNum}`);\r\n                            // Attempt to infer data type (basic number check)\r\n                            const numValue = Number(valueToWrite);\r\n                            if (!isNaN(numValue) && valueToWrite.trim() !== '') {\r\n                                cellToWrite.values = [[numValue]];\r\n                            } else {\r\n                                // Preserve existing value if empty string, otherwise write text\r\n                                if (valueToWrite.trim() !== '') {\r\n                                    cellToWrite.values = [[valueToWrite]];\r\n                                }\r\n                            }\r\n                            // console.log(`  Wrote '${valueToWrite}' to ${colLetter}${currentRowNum}`);\r\n                        }\r\n                    }\r\n                }\r\n                await context.sync(); // Sync after populating each 'g' group\r\n\r\n                // Adjust the base check row marker for subsequent 'g' iterations\r\n                // by adding the number of rows inserted in *this* iteration.\r\n                currentCheckRowForInserts += numNewRows;\r\n                console.log(`Finished processing row${g}. currentCheckRowForInserts is now ${currentCheckRowForInserts}`);\r\n\r\n            } // End for g loop\r\n\r\n            console.log(`Completed processing driver and assumption inputs for code ${codeValue} in worksheet ${worksheetName}`);\r\n        }); // End main Excel.run\r\n    } catch (error) {\r\n        console.error(`Error in driverAndAssumptionInputs MAIN CATCH for code '${code.type}' in worksheet '${worksheet?.name || 'unknown'}': ${error.message}`, error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Finds the last used row in a specific column of a worksheet.\r\n * @param {Excel.Worksheet} worksheet - The worksheet to search in.\r\n * @param {string} columnLetter - The column letter (e.g., \"B\").\r\n * @returns {Promise<number>} - The 1-based index of the last used row, or 0 if the column is empty or an error occurs.\r\n */\r\nasync function getLastUsedRow(worksheet, columnLetter) {\r\n    // Re-use worksheet object passed into the function within this Excel.run\r\n    // Need context from the caller's Excel.run or wrap this in its own\r\n    console.log(`Attempting to get last used row for column ${columnLetter} in sheet ${worksheet.name}`);\r\n    try {\r\n        // It's safer to re-get the worksheet by name if this is called outside the main loop's context\r\n        // However, if called within the loop's context, using the passed object is fine.\r\n        // For simplicity assuming it's called within a valid context for now.\r\n        const fullColumn = worksheet.getRange(`${columnLetter}:${columnLetter}`);\r\n        const usedRange = fullColumn.getUsedRange(true); // Use 'true' for valuesOnly parameter\r\n        const lastCell = usedRange.getLastCell();\r\n        lastCell.load(\"rowIndex\");\r\n        await worksheet.context.sync(); // Use the context associated with the worksheet object\r\n        const lastRowIndex = lastCell.rowIndex + 1; // Convert 0-based index to 1-based row number\r\n        console.log(`Last used row in column ${columnLetter} is ${lastRowIndex}`);\r\n        return lastRowIndex;\r\n    } catch (error) {\r\n        // Handle cases where the column might be completely empty or other errors\r\n        if (error.code === \"ItemNotFound\" || error.code === \"GeneralException\") {\r\n            console.warn(`Could not find used range or last cell in column ${columnLetter} of sheet ${worksheet.name}. Assuming empty or header only (returning 0).`);\r\n            return 0; // Return 0 if column is empty or error occurs\r\n        }\r\n        console.error(`Error in getLastUsedRow for column ${columnLetter} on sheet ${worksheet.name}:`, error);\r\n        // It's often better to let the caller handle the error if it's unexpected.\r\n        throw error; // Re-throw other errors\r\n    }\r\n    // Note: Removed the inner Excel.run as it complicates context management.\r\n    // This function now expects to be called *within* an existing Excel.run context.\r\n}\r\n\r\n/**\r\n * Adjusts driver references in column AE based on lookups in column A.\r\n * Replicates the core logic of VBA Adjust_Drivers.\r\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\r\n * @param {number} lastRow - The last row to process (inclusive).\r\n */\r\nasync function adjustDriversJS(worksheet, lastRow) {\r\n    const START_ROW = 10; // <<< CHANGED FROM 9\r\n    const DRIVER_CODE_COL = \"F\"; // Column containing the driver code to look up\r\n    const LOOKUP_COL = \"A\";      // Column to search for the driver code\r\n    const TARGET_COL = \"AE\";     // Column where the result address string is written\r\n\r\n    console.log(`Running adjustDriversJS for sheet: ${worksheet.name} from row ${START_ROW} to ${lastRow}`);\r\n\r\n    // Ensure lastRow is valid before proceeding\r\n    if (lastRow < START_ROW) {\r\n        console.warn(`adjustDriversJS: lastRow (${lastRow}) is less than START_ROW (${START_ROW}). Skipping.`);\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // Define the ranges to load\r\n        const driverCodeRangeAddress = `${DRIVER_CODE_COL}${START_ROW}:${DRIVER_CODE_COL}${lastRow}`;\r\n        const lookupRangeAddress = `${LOOKUP_COL}${START_ROW}:${LOOKUP_COL}${lastRow}`;\r\n        const driverCodeRange = worksheet.getRange(driverCodeRangeAddress);\r\n        const lookupRange = worksheet.getRange(lookupRangeAddress);\r\n\r\n        // Load values from both columns\r\n        driverCodeRange.load(\"values\");\r\n        lookupRange.load(\"values\");\r\n        await worksheet.context.sync(); // Sync to get the values\r\n\r\n        const driverCodeValues = driverCodeRange.values;\r\n        const lookupValues = lookupRange.values;\r\n\r\n        // Create a map for efficient lookup: { lookupValue: rowIndex }\r\n        // Note: rowIndex here is the 1-based Excel row number\r\n        const lookupMap = new Map();\r\n        for (let i = 0; i < lookupValues.length; i++) {\r\n            const value = lookupValues[i][0];\r\n            // Only add non-empty values to the map. Handle potential duplicates?\r\n            // VBA's .Find typically finds the first match. Map naturally stores the last encountered.\r\n            if (value !== null && value !== \"\") {\r\n                 // The row number in Excel is START_ROW + index\r\n                lookupMap.set(value, START_ROW + i);\r\n            }\r\n        }\r\n        console.log(`Built lookup map from ${LOOKUP_COL}${START_ROW}:${LOOKUP_COL}${lastRow} with ${lookupMap.size} entries.`);\r\n\r\n        // Prepare the output values for the target column AE\r\n        // Initialize with nulls or empty strings to clear previous values potentially\r\n        const outputValues = []; // Array of arrays for Excel range: [[value1], [value2], ...]\r\n        let foundCount = 0;\r\n        let notFoundCount = 0;\r\n\r\n        for (let i = 0; i < driverCodeValues.length; i++) {\r\n            const driverCode = driverCodeValues[i][0];\r\n            const currentRow = START_ROW + i; // Current Excel row being processed\r\n\r\n            if (driverCode !== null && driverCode !== \"\") {\r\n                if (lookupMap.has(driverCode)) {\r\n                    const foundRow = lookupMap.get(driverCode);\r\n                    const targetAddress = `${TARGET_COL}${foundRow}`;\r\n                    outputValues.push([targetAddress]); // Store as [[value]] for range write\r\n                    foundCount++;\r\n                    // console.log(`Row ${currentRow} (${DRIVER_CODE_COL}): Found '${driverCode}' in ${LOOKUP_COL} at row ${foundRow}. Setting ${TARGET_COL}${currentRow} = '${targetAddress}'`);\r\n                } else {\r\n                    // Value in F not found in A\r\n                    console.warn(`adjustDriversJS: Driver code '${driverCode}' from cell ${DRIVER_CODE_COL}${currentRow} not found in range ${lookupRangeAddress}.`);\r\n                    outputValues.push([null]); // Or [\"\"] or keep existing? VBA doesn't explicitly clear. Using null.\r\n                    notFoundCount++;\r\n                }\r\n            } else {\r\n                // Empty cell in F, write null to corresponding AE cell\r\n                outputValues.push([null]);\r\n            }\r\n        }\r\n\r\n        // Write the results back to column AE\r\n        if (outputValues.length > 0) {\r\n            const targetRangeAddress = `${TARGET_COL}${START_ROW}:${TARGET_COL}${lastRow}`;\r\n            const targetRange = worksheet.getRange(targetRangeAddress);\r\n            console.log(`Writing ${foundCount} results (${notFoundCount} not found) to ${targetRangeAddress}`);\r\n            targetRange.values = outputValues;\r\n            // Sync will happen in the caller's context\r\n        } else {\r\n             console.log(`adjustDriversJS: No values to write to ${TARGET_COL}.`);\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(`Error in adjustDriversJS for sheet ${worksheet.name}:`, error);\r\n        // Decide if error should be re-thrown to stop the whole process\r\n        // throw error;\r\n    }\r\n    // No context.sync() here - it should be handled by the calling function (processAssumptionTabs)\r\n}\r\n\r\n/**\r\n * Replaces INDIRECT functions in a specified column range with their evaluated values.\r\n * Mimics the VBA Replace_Indirects logic using batched range value lookups.\r\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\r\n * @param {number} lastRow - The last row to process.\r\n */\r\nasync function replaceIndirectsJS(worksheet, lastRow) {\r\n    const START_ROW = 10; // <<< CHANGED FROM 9\r\n    const TARGET_COL = \"AE\";\r\n\r\n    console.log(`Running replaceIndirectsJS for sheet: ${worksheet.name} from row ${START_ROW} to ${lastRow}`);\r\n\r\n    if (lastRow < START_ROW) {\r\n        console.warn(`replaceIndirectsJS: lastRow (${lastRow}) is less than START_ROW (${START_ROW}). Skipping.`);\r\n        return;\r\n    }\r\n\r\n    const targetRangeAddress = `${TARGET_COL}${START_ROW}:${TARGET_COL}${lastRow}`;\r\n    const targetRange = worksheet.getRange(targetRangeAddress);\r\n\r\n    try {\r\n        // 1. Load formulas from the target range\r\n        targetRange.load(\"formulas\");\r\n        await worksheet.context.sync();\r\n\r\n        const originalFormulas = targetRange.formulas; // 2D array [[f1], [f2], ...]\r\n        const referencesToLookup = new Map(); // Map<string, { range: Excel.Range | null, value: any }>\r\n        const formulaData = []; // Array<{ originalFormula: string, index: number }>\r\n\r\n        // 2. First Pass: Identify all unique INDIRECT arguments\r\n        console.log(\"Replace_Indirects: Pass 1 - Identifying INDIRECT arguments\");\r\n        for (let i = 0; i < originalFormulas.length; i++) {\r\n            let formula = originalFormulas[i][0];\r\n            formulaData.push({ originalFormula: formula, index: i }); // Store original formula and index\r\n\r\n            if (typeof formula === 'string') {\r\n                // Use a loop to find all INDIRECT occurrences in a single formula\r\n                let searchStartIndex = 0;\r\n                while (true) {\r\n                    const upperFormula = formula.toUpperCase();\r\n                    const indirectStartIndex = upperFormula.indexOf(\"INDIRECT(\", searchStartIndex);\r\n\r\n                    // Stop if no more INDIRECT found or if it might be part of INDEX\r\n                    if (indirectStartIndex === -1 || upperFormula.includes(\"INDEX(\")) {\r\n                        break;\r\n                    }\r\n\r\n                    // Find the matching closing parenthesis (simple approach)\r\n                    const parenStartIndex = indirectStartIndex + \"INDIRECT(\".length;\r\n                    const parenEndIndex = formula.indexOf(\")\", parenStartIndex);\r\n\r\n                    if (parenEndIndex === -1) {\r\n                        console.warn(`Row ${START_ROW + i}: Malformed INDIRECT found in formula: ${formula}`);\r\n                        break; // Cannot process this INDIRECT\r\n                    }\r\n\r\n                    const argString = formula.substring(parenStartIndex, parenEndIndex).trim();\r\n\r\n                    // Validate argString looks like a cell/range reference (basic check)\r\n                    // This helps avoid trying to load ranges like \"Sheet1!A:A\" which might fail or be slow\r\n                    if (argString && /^[A-Za-z0-9_!$:'\". ]+$/.test(argString) && !referencesToLookup.has(argString)) {\r\n                         console.log(`  Found reference to lookup: ${argString}`);\r\n                         referencesToLookup.set(argString, { range: null, value: undefined }); // Placeholder\r\n                    }\r\n\r\n                    // Continue searching after this INDIRECT\r\n                    searchStartIndex = parenEndIndex + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        // 3. Batch Load Values for identified references\r\n        console.log(`Replace_Indirects: Loading values for ${referencesToLookup.size} unique references.`);\r\n        if (referencesToLookup.size > 0) {\r\n            for (const [refString, data] of referencesToLookup.entries()) {\r\n                try {\r\n                    // Attempt to get the range and load its value\r\n                    data.range = worksheet.getRange(refString);\r\n                    // Load values. Consider loading formulas too if INDIRECT might point to a formula cell.\r\n                    // Loading numberFormat might help distinguish between 0 and empty.\r\n                    data.range.load([\"values\", \"text\"]); // Load text to handle \"DELETE\" easily\r\n                } catch (rangeError) {\r\n                    console.warn(`Replace_Indirects: Error getting range for reference \"${refString}\". It might be invalid or on another sheet.`, rangeError.debugInfo || rangeError.message);\r\n                     // Keep data.range as null, will be handled later\r\n                    referencesToLookup.set(refString, { range: null, value: '#REF!' }); // Mark as error\r\n                }\r\n            }\r\n            await worksheet.context.sync(); // Sync all loaded values\r\n\r\n            // Populate the values in the map\r\n            for (const [refString, data] of referencesToLookup.entries()) {\r\n                 if (data.range) { // If range was successfully retrieved\r\n                     try {\r\n                         // Use .text to directly compare with \"DELETE\"\r\n                         // Use .values for the actual numeric/boolean value if not \"DELETE\"\r\n                        const cellText = data.range.text[0][0];\r\n                        if (cellText === \"DELETE\") {\r\n                            data.value = \"0\"; // Replace \"DELETE\" with \"0\" string as per VBA\r\n                        } else {\r\n                             // Use the actual value (could be string, number, boolean)\r\n                             // Prefer values[0][0] as it respects data types better than text\r\n                             data.value = data.range.values[0][0];\r\n                        }\r\n                     } catch (valueError) {\r\n                         console.warn(`Replace_Indirects: Error reading value for reference \"${refString}\" after sync.`, valueError.debugInfo || valueError.message);\r\n                         data.value = '#VALUE!'; // Or another suitable error indicator\r\n                     }\r\n                 }\r\n                 // If data.range was null or value fetch failed, data.value remains '#REF!' or '#VALUE!'\r\n            }\r\n             console.log(\"Replace_Indirects: Finished loading reference values.\");\r\n        }\r\n\r\n\r\n        // 4. Second Pass: Replace INDIRECT with looked-up values\r\n        console.log(\"Replace_Indirects: Pass 2 - Replacing INDIRECT calls.\");\r\n        const newFormulas = []; // Array of arrays: [[newF1], [newF2], ...]\r\n        \r\n        // Calculate TARGET_COL index for reference comparisons\r\n        const targetColIndex = columnLetterToIndex(TARGET_COL);\r\n        console.log(`Target column ${TARGET_COL} has index ${targetColIndex}`);\r\n        \r\n        for (const item of formulaData) {\r\n            let currentFormula = item.originalFormula;\r\n\r\n            if (typeof currentFormula === 'string') {\r\n                let loopCount = 0; // Safety break\r\n                const MAX_LOOPS = 20; // Prevent infinite loops for complex/circular cases\r\n\r\n                while (loopCount < MAX_LOOPS) {\r\n                    const upperFormula = currentFormula.toUpperCase();\r\n                    const indirectStartIndex = upperFormula.indexOf(\"INDIRECT(\");\r\n\r\n                    if (indirectStartIndex === -1 || upperFormula.includes(\"INDEX(\")) {\r\n                        break; // No more INDIRECTs (or INDEX present)\r\n                    }\r\n\r\n                    const parenStartIndex = indirectStartIndex + \"INDIRECT(\".length;\r\n                    const parenEndIndex = currentFormula.indexOf(\")\", parenStartIndex);\r\n\r\n                    if (parenEndIndex === -1) {\r\n                         // Already warned in pass 1, just break here\r\n                        break;\r\n                    }\r\n\r\n                    const indString = currentFormula.substring(indirectStartIndex, parenEndIndex + 1); // The full INDIRECT(...)\r\n                    const argString = currentFormula.substring(parenStartIndex, parenEndIndex).trim();\r\n\r\n                    let directRef = '#REF!'; // Default if lookup fails\r\n                     if (referencesToLookup.has(argString)) {\r\n                         directRef = referencesToLookup.get(argString).value;\r\n                     } else {\r\n                         // Argument wasn't identified/loaded (maybe invalid?)\r\n                         console.warn(`Row ${START_ROW + item.index}: INDIRECT argument \"${argString}\" not found in lookup map during replacement.`);\r\n                     }\r\n\r\n                    // Handle potential null/undefined values from lookup - treat as 0? VBA doesn't explicitly handle this.\r\n                    // Let's treat null/undefined as 0 for replacement to avoid inserting 'null' or 'undefined' into formulas.\r\n                     // Empty string \"\" should probably remain \"\" unless it was \"DELETE\".\r\n                     if (directRef === null || typeof directRef === 'undefined') {\r\n                         directRef = 0; // Replace null/undefined with numeric 0\r\n                     } else if (directRef === \"\") {\r\n                          // Keep empty string as empty string unless it was originally \"DELETE\"\r\n                          // The map handles \"DELETE\" -> \"0\" already\r\n                     } else if (typeof directRef === 'string') {\r\n                         // If the resolved value is a string, potentially needs quoting if replacing in a formula context?\r\n                         // VBA seems to just concatenate the value directly. Let's follow that.\r\n                         // Example: =SUM(INDIRECT(\"A1\")) where A1 contains \"B2\" becomes =SUM(B2)\r\n                         // Example: =CONCATENATE(\"Result: \",INDIRECT(\"A1\")) where A1 contains \"Success\" becomes =CONCATENATE(\"Result: \",\"Success\") - requires quotes?\r\n                         // VBA appears to handle this implicitly. JS replace won't add quotes.\r\n                         // Let's test behavior, may need adjustment if it breaks formulas expecting strings.\r\n                         // For now, direct replacement. Consider adding quotes if `directRef` is text AND the context requires it.\r\n                     } else if (typeof directRef === 'boolean') {\r\n                         directRef = directRef ? 'TRUE' : 'FALSE'; // Convert boolean to formula text\r\n                     }\r\n                     // Numeric values are fine as is.\r\n\r\n                    // Perform the replacement. Use replace directly on the found indString.\r\n                    currentFormula = currentFormula.replace(indString, String(directRef));\r\n                    loopCount++;\r\n\r\n                } // End while loop for single formula processing\r\n\r\n                if (loopCount === MAX_LOOPS) {\r\n                    console.warn(`Row ${START_ROW + item.index}: Max replacement loops reached for formula. Result might be incomplete: ${currentFormula}`);\r\n                }\r\n                \r\n                // NEW SECTION: Convert row references to absolute for columns >= TARGET_COL\r\n                if (typeof currentFormula === 'string') {\r\n                    console.log(`Making row references absolute for cell references in columns >= ${TARGET_COL} in row ${START_ROW + item.index}`);\r\n                    \r\n                    // Find cell references (e.g., A1, B2, AA34) but exclude already absolute refs (e.g., A$1, $A$1)\r\n                    // This regex captures: group 1 = column letter(s), group 2 = row number\r\n                    // It skips references that already have $ before the row number\r\n                    const cellRefRegex = /([A-Z]+)(\\d+)(?![^\\W_])/g;\r\n                    \r\n                    // Replace with absolute row references where needed\r\n                    currentFormula = currentFormula.replace(cellRefRegex, (match, col, row) => {\r\n                        // Get column index\r\n                        const colIndex = columnLetterToIndex(col);\r\n                        \r\n                        // If column index is >= target column index, make row reference absolute\r\n                        if (colIndex >= targetColIndex) {\r\n                            return `${col}$${row}`;\r\n                        }\r\n                        return match; // Keep as is for columns before TARGET_COL\r\n                    });\r\n                    \r\n                    console.log(`  Formula after converting to absolute row refs: ${currentFormula}`);\r\n                }\r\n                // END NEW SECTION\r\n            }\r\n            \r\n            // Add the processed formula (or original if not string/no INDIRECT) to the result array\r\n            newFormulas.push([currentFormula]);\r\n\r\n        } // End for loop processing all formulas\r\n\r\n        // 5. Write the modified formulas back to the range\r\n        console.log(`Replace_Indirects: Writing ${newFormulas.length} updated formulas back to ${targetRangeAddress}`);\r\n        targetRange.formulas = newFormulas;\r\n\r\n        // Sync is handled by the caller (processAssumptionTabs)\r\n\r\n    } catch (error) {\r\n        console.error(`Error in replaceIndirectsJS for sheet ${worksheet.name} range ${targetRangeAddress}:`, error.debugInfo || error);\r\n        // Re-throw the error to allow the calling function to handle it\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Placeholder for Populate_Financials VBA logic.\r\n * Populates the \"Financials\" sheet based on codes in the assumption sheet.\r\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\r\n * @param {number} lastRow - The last row to process in the assumption sheet.\r\n * @param {Excel.Worksheet} financialsSheet - The \"Financials\" worksheet (within the same Excel.run context).\r\n */\r\nasync function populateFinancialsJS(worksheet, lastRow, financialsSheet) {\r\n    console.log(`Running populateFinancialsJS for sheet: ${worksheet.name} (lastRow: ${lastRow}) -> ${financialsSheet.name}`);\r\n    // This function MUST be called within an Excel.run context.\r\n\r\n    const CALCS_FIRST_ROW = 10; // <<< CHANGED FROM 9 // Same as START_ROW elsewhere\r\n    const ASSUMPTION_CODE_COL = \"C\"; // Column with code to lookup on assumption sheet\r\n    const ASSUMPTION_LINK_COL_B = \"B\";\r\n    const ASSUMPTION_LINK_COL_D = \"D\";\r\n    // Column on assumption sheet to link for monthly data\r\n    const ASSUMPTION_MONTHS_START_COL = \"AE\";\r\n\r\n    const FINANCIALS_CODE_COLUMN = \"I\"; // Column to search for code on Financials sheet\r\n    const FINANCIALS_TARGET_COL_B = \"B\";\r\n    const FINANCIALS_TARGET_COL_D = \"D\";\r\n    const FINANCIALS_ANNUALS_START_COL = \"J\"; // Annuals start here\r\n    const FINANCIALS_MONTHS_START_COL = \"AE\"; // Months start here\r\n\r\n    // --- Updated Column Definitions ---\r\n    const ANNUALS_END_COL = \"P\";       // Annuals end here\r\n    const MONTHS_END_COL = \"CX\";       // Months end here\r\n    // --- End Updated Column Definitions ---\r\n\r\n    // Formatting constants\r\n    // const PURPLE_COLOR = \"#800080\"; // RGB(128, 0, 128) - Removed as Actuals section is removed\r\n    const GREEN_COLOR = \"#008000\";  // RGB(0, 128, 0)\r\n    const CURRENCY_FORMAT = '_(* $#,##0_);_(* $(#,##0);_(* \"$\" -_);_(@_)';\r\n\r\n    // Ensure lastRow is valid\r\n    if (lastRow < CALCS_FIRST_ROW) {\r\n        console.warn(`populateFinancialsJS: lastRow (${lastRow}) is less than CALCS_FIRST_ROW (${CALCS_FIRST_ROW}). Skipping.`);\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // 1. Load data from Assumption Sheet\r\n        console.log(`populateFinancialsJS: Loading assumption data up to row ${lastRow}`);\r\n        const assumptionCodeRange = worksheet.getRange(`${ASSUMPTION_CODE_COL}${CALCS_FIRST_ROW}:${ASSUMPTION_CODE_COL}${lastRow}`);\r\n        // No need to load B, D, AE addresses/values here anymore if only used for linking\r\n\r\n        assumptionCodeRange.load(\"values\");\r\n\r\n        // 2. Load data from Financials Sheet (Find last row in code column I)\r\n        const financialsSearchCol = financialsSheet.getRange(`${FINANCIALS_CODE_COLUMN}:${FINANCIALS_CODE_COLUMN}`);\r\n        const financialsUsedRange = financialsSearchCol.getUsedRange(true);\r\n        financialsUsedRange.load(\"rowCount\");\r\n        // It's okay to sync assumption and initial financials loads together\r\n        // await worksheet.context.sync(); // Removed intermediate sync\r\n\r\n        let financialsLastRow = 0;\r\n        // Sync financials rowCount load before calculating financialsLastRow\r\n        await worksheet.context.sync();\r\n        if (financialsUsedRange.rowCount > 0) {\r\n           try {\r\n              const lastCell = financialsUsedRange.getLastCell();\r\n              lastCell.load(\"rowIndex\");\r\n               await worksheet.context.sync();\r\n              financialsLastRow = lastCell.rowIndex + 1;\r\n           } catch(e) {\r\n               console.warn(`Could not get last cell directly for Financials col ${FINANCIALS_CODE_COLUMN}. Error: ${e.message}. Attempting fallback range loading.`);\r\n               try {\r\n                   // Use a potentially more reliable column like B for last row fallback\r\n                   const fallbackRange = financialsSheet.getRange(`${FINANCIALS_TARGET_COL_B}1:${FINANCIALS_TARGET_COL_B}10000`); // Check Col B\r\n                   fallbackRange.load(\"values\");\r\n                   await worksheet.context.sync();\r\n                   for (let i = fallbackRange.values.length - 1; i >= 0; i--) {\r\n                       if (fallbackRange.values[i][0] !== null && fallbackRange.values[i][0] !== \"\") {\r\n                           financialsLastRow = i + 1;\r\n                           break;\r\n                       }\r\n                   }\r\n                   if (financialsLastRow === 0) console.warn(`Fallback range load for Financials col ${FINANCIALS_TARGET_COL_B} also yielded no data.`);\r\n               } catch (fallbackError) {\r\n                    console.error(`Error during fallback range loading for Financials col ${FINANCIALS_TARGET_COL_B}:`, fallbackError);\r\n                    financialsLastRow = 0; // Keep it 0 if fallback fails\r\n               }\r\n           }\r\n        }\r\n        // Recalculate financialsLastRow based on Col B if it's potentially larger\r\n        try {\r\n            const lastRowB = await getLastUsedRow(financialsSheet, FINANCIALS_TARGET_COL_B);\r\n            financialsLastRow = Math.max(financialsLastRow, lastRowB);\r\n        } catch (lastRowBErr) {\r\n            console.warn(`Could not get last row from Col B: ${lastRowBErr.message}`);\r\n        }\r\n\r\n        console.log(`Financials last relevant row used for processing: ${financialsLastRow}`);\r\n\r\n\r\n        // 3. Create Map of Financials Codes (Col I) -> Row Number\r\n        // MODIFIED: Use a case-insensitive map for codes\r\n        const financialsCodeMap = new Map();\r\n        if (financialsLastRow > 0) {\r\n            const financialsCodeRange = financialsSheet.getRange(`${FINANCIALS_CODE_COLUMN}1:${FINANCIALS_CODE_COLUMN}${financialsLastRow}`);\r\n            financialsCodeRange.load(\"values\");\r\n            await worksheet.context.sync(); // Sync map data load\r\n            for (let i = 0; i < financialsCodeRange.values.length; i++) {\r\n                const code = financialsCodeRange.values[i][0];\r\n                if (code !== null && code !== \"\") {\r\n                    // Convert code to uppercase for case-insensitive comparison\r\n                    const upperCode = String(code).toUpperCase();\r\n                    // Only map the first occurrence of a code, like .Find would\r\n                    if (!financialsCodeMap.has(upperCode)) {\r\n                         financialsCodeMap.set(upperCode, i + 1);\r\n                    }\r\n                }\r\n            }\r\n            console.log(`Built Financials code map with ${financialsCodeMap.size} entries.`);\r\n        } else {\r\n            console.warn(`Financials sheet column ${FINANCIALS_CODE_COLUMN} appears empty or last row not found. No codes loaded for map.`);\r\n        }\r\n\r\n        // *** REMOVED: Logic for existingDataLinks Set ***\r\n        // const existingDataLinks = new Set();\r\n        // if (financialsLastRow > 0) {\r\n        //     ... load formulas from Financials Col B ...\r\n        //     ... populate existingDataLinks set ...\r\n        // }\r\n        // *** END REMOVED ***\r\n\r\n        // 4. Identify rows to insert and prepare task data\r\n        const tasks = [];\r\n        console.log(\"populateFinancialsJS: Syncing assumption codes load...\");\r\n        await worksheet.context.sync(); // Sync needed for assumptionCodeRange.values\r\n\r\n        // *** RELOAD assumption codes here AFTER the sync above, just in case ***\r\n        // It's safer to reload after any potential sync/modification, though unlikely needed here.\r\n        // Keeping the original load before the Financials code map creation seems okay.\r\n        const assumptionCodes = assumptionCodeRange.values; // Use the already loaded values\r\n\r\n        console.log(`populateFinancialsJS: Processing ${assumptionCodes?.length ?? 0} assumption rows.`);\r\n\r\n        // --- REMOVED Debug logging for row 17 values/addresses ---\r\n\r\n        for (let i = 0; i < (assumptionCodes?.length ?? 0); i++) {\r\n            const code = assumptionCodes[i][0];\r\n            const assumptionRow = CALCS_FIRST_ROW + i; // This is the correct Excel row number\r\n\r\n            if (code !== null && code !== \"\") {\r\n                // Construct the potential link formulas first\r\n                const linkFormulaB = `='${worksheet.name}'!${ASSUMPTION_LINK_COL_B}${assumptionRow}`;\r\n                const linkFormulaD = `='${worksheet.name}'!${ASSUMPTION_LINK_COL_D}${assumptionRow}`;\r\n                const linkFormulaMonths = `='${worksheet.name}'!${ASSUMPTION_MONTHS_START_COL}${assumptionRow}`;\r\n\r\n                // *** REMOVED CHECK 1: Skip if this assumption row link already exists in Financials Col B ***\r\n                // if (existingDataLinks.has(linkFormulaB)) {\r\n                //     console.log(`  Skipping Code ${code} (Assumption Row ${assumptionRow}): Link ${linkFormulaB} already exists in Financials!${FINANCIALS_TARGET_COL_B}.`);\r\n                //     continue; // Skip to next assumption code\r\n                // }\r\n\r\n                // *** MODIFIED: Use case-insensitive check for code existence ***\r\n                const upperCode = String(code).toUpperCase();\r\n                if (!financialsCodeMap.has(upperCode)) {\r\n                     console.log(`  Skipping Code ${code} (Assumption Row ${assumptionRow}): Code not found in Financials template column ${FINANCIALS_CODE_COLUMN}. Cannot determine target row.`);\r\n                     continue; // Skip if no template row found\r\n                }\r\n\r\n                // If the code exists in the map, proceed to create the task\r\n                const targetRow = financialsCodeMap.get(upperCode); // Get the row number from the map\r\n                console.log(`  Task Prep: Code ${code} (Assumption Row ${assumptionRow}) -> Target Financials Row (for insertion): ${targetRow}`);\r\n\r\n                tasks.push({\r\n                    targetRow: targetRow,\r\n                    assumptionRow: assumptionRow,\r\n                    code: code,\r\n                    addressB: linkFormulaB,     // Use the constructed formula link\r\n                    addressD: linkFormulaD,     // Use the constructed formula link\r\n                    addressMonths: linkFormulaMonths // Use the constructed formula link\r\n                });\r\n            }\r\n        }\r\n\r\n        if (tasks.length === 0) {\r\n            console.log(\"No matching codes found. Nothing to insert or populate.\");\r\n            return;\r\n        }\r\n\r\n        // 5. Sort tasks by targetRow DESCENDING\r\n        tasks.sort((a, b) => b.targetRow - a.targetRow);\r\n        console.log(`Sorted ${tasks.length} tasks for insertion.`);\r\n        // --- DEBUG: Log the tasks array --- \r\n        // console.log(\"Tasks array (sorted desc by targetRow):\", JSON.stringify(tasks)); // REMOVED DEBUG\r\n        // --- END DEBUG ---\r\n\r\n        // 6. Perform Insertions (bottom-up)\r\n        console.log(\"Performing row insertions...\");\r\n        for (const task of tasks) { // Uses the DESCENDING sorted tasks\r\n            financialsSheet.getRange(`${task.targetRow}:${task.targetRow}`).insert(Excel.InsertShiftDirection.down);\r\n            // *** It's generally more efficient to sync less often, but syncing after each insert\r\n            // ensures the row model is updated for potential complex dependencies if they existed.\r\n            // Keep sync here for now unless performance becomes an issue. ***\r\n            // await worksheet.context.sync(); // Sync after EACH insertion -- REMOVED THIS LINE\r\n        }\r\n        await worksheet.context.sync(); // Sync AFTER all insertions are queued\r\n        console.log(\"Finished row insertions.\");\r\n\r\n        // Pre-calculate the final adjusted row for each task after all insertions\r\n        console.log(\"Calculating final adjusted rows for population/autofill...\");\r\n        // Get unique original target rows, sorted ascending\r\n        const originalTargetRowsAsc = [...new Set(tasks.map(t => t.targetRow))].sort((a, b) => a - b);\r\n        const taskAdjustedRows = new Map(); // Map to store { assumptionRow: adjustedRow }\r\n        let totalShift = 0; // Total shift accumulated from previous rows\r\n\r\n        // --- DEBUG: Log originalTargetRowsAsc ---\r\n        // console.log(\"Original Target Rows (unique, asc):\", originalTargetRowsAsc); // REMOVED DEBUG\r\n        // --- END DEBUG ---\r\n\r\n        originalTargetRowsAsc.forEach(uniqueRow => {\r\n            // --- DEBUG: Log current uniqueRow ---\r\n            // console.log(`Processing uniqueRow: ${uniqueRow}`); // REMOVED DEBUG\r\n            // --- END DEBUG ---\r\n\r\n            // Find all tasks that originally targeted this unique row\r\n            // CORRECTED PROPERTY NAME IN FILTER: task.targetRow instead of task.originalTargetRow\r\n            const tasksAtThisRow = tasks.filter(task => task.targetRow === uniqueRow);\r\n\r\n            // --- DEBUG: Log tasks found for this uniqueRow ---\r\n            // console.log(`  Tasks found for uniqueRow ${uniqueRow}:`, JSON.stringify(tasksAtThisRow)); // REMOVED DEBUG\r\n            // --- END DEBUG ---\r\n\r\n            // Optional: Sort tasksAtThisRow by assumptionRow for deterministic order, though might not be strictly necessary\r\n            // tasksAtThisRow.sort((a, b) => a.assumptionRow - b.assumptionRow);\r\n\r\n            let currentAdjustedRowForGroup = uniqueRow + totalShift; // Starting adjusted row for this group\r\n\r\n            // Assign consecutive adjusted rows to each task in this group\r\n            tasksAtThisRow.forEach(task => {\r\n                taskAdjustedRows.set(task.assumptionRow, currentAdjustedRowForGroup); // Use assumptionRow as key\r\n                console.log(`  Mapping: Code ${task.code}, Assumption Row ${task.assumptionRow}, Original Target ${uniqueRow}, Final Adjusted Row ${currentAdjustedRowForGroup}`);\r\n                currentAdjustedRowForGroup++; // Increment for the next task inserting at the same original spot\r\n            });\r\n\r\n            // Update the total shift for subsequent unique rows\r\n            totalShift += tasksAtThisRow.length;\r\n        });\r\n\r\n        // --- DEBUG: Log the contents of the map --- \r\n        // console.log(\"taskAdjustedRows map contents:\", taskAdjustedRows); // REMOVED DEBUG\r\n        // --- END DEBUG ---\r\n\r\n        // 7. Populate and Format inserted rows using ADJUSTED row numbers\r\n        console.log(\"Populating inserted rows (using adjusted rows)...\");\r\n        for (const task of tasks) { // Iterates descending sorted tasks (order doesn't strictly matter here, but using the same loop)\r\n            // const originalTargetRow = task.targetRow; // No longer needed for lookup\r\n            const populateRow = taskAdjustedRows.get(task.assumptionRow); // Get the calculated adjusted row using assumptionRow\r\n\r\n            // Check if populateRow was found\r\n            if (typeof populateRow === 'undefined' || populateRow === null) {\r\n                console.error(`Could not find adjusted row for task with Assumption Row ${task.assumptionRow}, Code ${task.code}. Skipping population.`);\r\n                continue; // Skip this task if mapping failed\r\n            }\r\n\r\n            // Use populateRow instead of task.targetRow for getRange calls\r\n            const cellB = financialsSheet.getRange(`${FINANCIALS_TARGET_COL_B}${populateRow}`);\r\n            const cellD = financialsSheet.getRange(`${FINANCIALS_TARGET_COL_D}${populateRow}`);\r\n            const cellAnnualsStart = financialsSheet.getRange(`${FINANCIALS_ANNUALS_START_COL}${populateRow}`);\r\n            const cellMonthsStart = financialsSheet.getRange(`${FINANCIALS_MONTHS_START_COL}${populateRow}`);\r\n\r\n            // --- Populate Column B ---\r\n            cellB.formulas = [[task.addressB]]; // Set formula directly\r\n            cellB.format.font.bold = false;\r\n            cellB.format.font.italic = false;\r\n            cellB.format.indentLevel = 2;\r\n\r\n            // --- Populate Column D ---\r\n            cellD.formulas = [[task.addressD]]; // Set formula directly\r\n            cellD.format.font.bold = false;\r\n            cellD.format.font.italic = false;\r\n            cellD.format.indentLevel = 2;\r\n\r\n            // --- Populate Annuals Start Column (J) with SUMIF ---\r\n            // MODIFIED: Make code prefix comparison case-insensitive\r\n            let codePrefix = String(task.code).substring(0, 2).toUpperCase();\r\n            let formulaJ = \"\";\r\n            if (codePrefix === \"IS\" || codePrefix === \"CF\") {\r\n                 // Corrected R2C[1] to R2C: Criteria should reference current column's header (J$2)\r\n                 formulaJ = `=SUMIF(R3,R2C,R[0])`;\r\n            } else {\r\n                 // Corrected R2C[1] to R2C: Criteria should reference current column's header (J$2)\r\n                 formulaJ = `=SUMIF(R4,R2C,R[0])`;\r\n            }\r\n            cellAnnualsStart.formulasR1C1 = [[formulaJ]]; // Use formulasR1C1 for SUMIF\r\n            cellAnnualsStart.format.font.bold = false;\r\n            cellAnnualsStart.format.font.italic = false;\r\n            cellAnnualsStart.format.numberFormat = CURRENCY_FORMAT;\r\n\r\n            // --- Populate Months Start Column (AE) with Link ---\r\n            cellMonthsStart.formulas = [[task.addressMonths]]; // Set formula directly\r\n            cellMonthsStart.format.font.bold = false;\r\n            cellMonthsStart.format.font.italic = false;\r\n            cellMonthsStart.format.font.color = GREEN_COLOR; // Keep green color for month links\r\n            cellMonthsStart.format.numberFormat = CURRENCY_FORMAT;\r\n\r\n            // Removed Actuals column population (was L in previous version)\r\n            \r\n            // --- NEW: Populate Actuals Columns S:AD with SUMIFS formula ---\r\n            try {\r\n                const actualsRange = financialsSheet.getRange(`S${populateRow}:AD${populateRow}`);\r\n                const sumifsFormula = \"=SUMIFS('Actual Data'!$B:$B,'Actual Data'!$D:$D,EOMONTH(INDIRECT(ADDRESS(2,COLUMN())),0),'Actual Data'!$E:$E,@INDIRECT(ADDRESS(ROW(),2)))\";\r\n                \r\n                // Create a 2D array matching the range dimensions\r\n                const numCols = columnLetterToIndex('AD') - columnLetterToIndex('S') + 1;\r\n                const formulasArray = [Array(numCols).fill(sumifsFormula)];\r\n                actualsRange.formulas = formulasArray;\r\n                \r\n                // Apply formatting\r\n                actualsRange.format.numberFormat = CURRENCY_FORMAT;\r\n                actualsRange.format.font.bold = false;\r\n                actualsRange.format.font.italic = false;\r\n                actualsRange.format.font.color = \"#7030A0\"; // Set font color\r\n                console.log(`  Set SUMIFS formula for S${populateRow}:AD${populateRow}`);\r\n            } catch (sumifsError) {\r\n                console.error(`Error setting SUMIFS formula for row ${populateRow} (Code: ${task.code}):`, sumifsError.debugInfo || sumifsError);\r\n            }\r\n            // --- END NEW SECTION ---\r\n        }\r\n        console.log(\"Finished setting values/formulas/formats for inserted rows.\");\r\n        await worksheet.context.sync(); // Sync all population and formatting\r\n\r\n\r\n        // 8. Perform Autofills using ADJUSTED row numbers\r\n        console.log(\"Performing autofills (using adjusted rows)...\");\r\n        for (const task of tasks) { // Uses the DESCENDING sorted tasks again\r\n             // const originalTargetRow = task.targetRow; // No longer needed for lookup\r\n             const populateRow = taskAdjustedRows.get(task.assumptionRow); // Get the calculated adjusted row using assumptionRow\r\n\r\n             // Check if populateRow was found\r\n            if (typeof populateRow === 'undefined' || populateRow === null) {\r\n                console.error(`Could not find adjusted row for task with Assumption Row ${task.assumptionRow}, Code ${task.code}. Skipping autofill.`);\r\n                continue; // Skip this task if mapping failed\r\n            }\r\n\r\n             try {\r\n                // Use populateRow for autofill ranges\r\n                // Autofill Annuals: J -> P\r\n                const sourceAnnuals = financialsSheet.getRange(`${FINANCIALS_ANNUALS_START_COL}${populateRow}`); // Use adjusted row\r\n                const destAnnuals = financialsSheet.getRange(`${FINANCIALS_ANNUALS_START_COL}${populateRow}:${ANNUALS_END_COL}${populateRow}`); // Use adjusted row\r\n                sourceAnnuals.autoFill(destAnnuals, Excel.AutoFillType.fillDefault);\r\n                // console.log(`  Autofilled ${FINANCIALS_ANNUALS_START_COL}${populateRow} to ${ANNUALS_END_COL}${populateRow}`);\r\n\r\n                // Autofill Months: AE -> CX\r\n                const sourceMonths = financialsSheet.getRange(`${FINANCIALS_MONTHS_START_COL}${populateRow}`); // Use adjusted row\r\n                const destMonths = financialsSheet.getRange(`${FINANCIALS_MONTHS_START_COL}${populateRow}:${MONTHS_END_COL}${populateRow}`); // Use adjusted row\r\n                sourceMonths.autoFill(destMonths, Excel.AutoFillType.fillDefault);\r\n                // console.log(`  Autofilled ${FINANCIALS_MONTHS_START_COL}${populateRow} to ${MONTHS_END_COL}${populateRow}`);\r\n\r\n                // Removed Actuals autofill\r\n             } catch(autofillError) {\r\n                 // Update error message to use adjusted row\r\n                 console.error(`Error during autofill for adjusted row ${populateRow} (Code: ${task.code}, Original Target: ${task.targetRow}):`, autofillError.debugInfo || autofillError);\r\n             }\r\n        }\r\n        console.log(\"Finished setting up autofills.\");\r\n        await worksheet.context.sync(); // Sync all autofill operations\r\n        console.log(\"Autofills synced.\");\r\n\r\n        // *** NEW STEP: Modify codes in Assumption Sheet Column C ***\r\n        console.log(`Modifying codes in ${worksheet.name} column ${ASSUMPTION_CODE_COL} (${CALCS_FIRST_ROW}:${lastRow}) by prepending '-'...`);\r\n        try {\r\n            // Re-get the range and load values (ensure we have the latest state)\r\n            const codeColRange = worksheet.getRange(`${ASSUMPTION_CODE_COL}${CALCS_FIRST_ROW}:${ASSUMPTION_CODE_COL}${lastRow}`);\r\n            codeColRange.load(\"values\");\r\n            await worksheet.context.sync(); // Load the values\r\n\r\n            const currentCodeValues = codeColRange.values;\r\n            const modifiedCodeValues = [];\r\n            let modifiedCount = 0;\r\n\r\n            for (let i = 0; i < currentCodeValues.length; i++) {\r\n                const originalValue = currentCodeValues[i][0];\r\n                if (originalValue !== null && originalValue !== \"\" && !String(originalValue).startsWith('-')) {\r\n                    modifiedCodeValues.push([\"-\" + originalValue]); // Prepend \"-\"\r\n                    modifiedCount++;\r\n                } else {\r\n                    modifiedCodeValues.push([originalValue]); // Keep original if empty, null, or already starts with '-'\r\n                }\r\n            }\r\n\r\n            // Write the modified values back if any changes were made\r\n            if (modifiedCount > 0) {\r\n                 console.log(`  Writing ${modifiedCount} modified codes back to ${ASSUMPTION_CODE_COL}${CALCS_FIRST_ROW}:${ASSUMPTION_CODE_COL}${lastRow}`);\r\n                 codeColRange.values = modifiedCodeValues;\r\n                 await worksheet.context.sync(); // Sync the code modifications\r\n                 console.log(\"  Synced code modifications.\");\r\n            } else {\r\n                console.log(\"  No codes needed modification.\");\r\n            }\r\n        } catch (modifyError) {\r\n             console.error(`Error modifying codes in ${worksheet.name} column ${ASSUMPTION_CODE_COL}:`, modifyError.debugInfo || modifyError);\r\n             // Continue even if modification fails? Or throw? Let's log and continue.\r\n        }\r\n        // *** END NEW STEP ***\r\n\r\n\r\n        console.log(`populateFinancialsJS successfully completed for ${worksheet.name} -> ${financialsSheet.name}`);\r\n\r\n    } catch (error) {\r\n        console.error(`Error in populateFinancialsJS for sheet ${worksheet.name} -> ${financialsSheet.name}:`, error.debugInfo || error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Placeholder for Format_Changes_In_Working_Capital VBA logic.\r\n * Inserts a row and adjusts formatting in \"Financials\" based on specific codes.\r\n * @param {Excel.Worksheet} financialsSheet - The \"Financials\" worksheet (within an Excel.run context).\r\n */\r\nasync function formatChangesInWorkingCapitalJS(financialsSheet) {\r\n    console.log(`Running formatChangesInWorkingCapitalJS for sheet: ${financialsSheet.name}`);\r\n    // This function MUST be called within an Excel.run context.\r\n    const FIND_TEXT_1 = \"CF: Non-cash\";\r\n    const FIND_TEXT_2 = \"CF: WC\";\r\n    const SEARCH_COLUMN = \"I\";\r\n     // Define ranges for border removal based on VBA (e.g., \"K\" + (foundRow + 1) + \":P\" + (foundRow + 1))\r\n\r\n    // TODO: Implement Format_Changes_In_Working_Capital logic\r\n    // 1. Find FIND_TEXT_1 in SEARCH_COLUMN using range.find\r\n    // 2. If found:\r\n    //    a. Get cell above (offset -1, 0)\r\n    //    b. Load its value\r\n    //    c. Sync\r\n    //    d. Check if value is FIND_TEXT_2\r\n    //    e. If yes:\r\n    //       i. Get the entire row of the found cell (.getEntireRow())\r\n    //       ii. Insert a new row above it (insert(Excel.InsertShiftDirection.down))\r\n    //       iii. Get ranges in the *original* row (now shifted down one) and remove borders.\r\n    financialsSheet.load('name'); // Keep reference valid if needed later in the SAME context\r\n    await financialsSheet.context.sync();\r\n     console.warn(`formatChangesInWorkingCapitalJS on ${financialsSheet.name} not implemented yet.`);\r\n}\r\n\r\n/**\r\n * Processes assumption tabs after runCodes, replicating VBA logic.\r\n * Expects an array of assumption tab names.\r\n * @param {string[]} assumptionTabNames - Array of assumption tab names created by runCodes.\r\n */\r\nexport async function processAssumptionTabs(assumptionTabNames) {\r\n    console.log(`Starting processing for ${assumptionTabNames.length} assumption tabs:`, assumptionTabNames);\r\n    if (!assumptionTabNames || assumptionTabNames.length === 0) {\r\n        console.log(\"No assumption tabs provided to process.\");\r\n        return;\r\n    }\r\n\r\n    const FINANCIALS_SHEET_NAME = \"Financials\"; // Define constant\r\n    const AUTOFILL_START_COLUMN = \"AE\";\r\n    const AUTOFILL_END_COLUMN = \"CX\";\r\n    const START_ROW = 10; // <<< CHANGED FROM 9 // Standard start row for processing\r\n\r\n    try {\r\n        // --- Loop through each assumption tab name ---\r\n        for (const worksheetName of assumptionTabNames) {\r\n             console.log(`\\nProcessing Assumption Tab: ${worksheetName}`);\r\n\r\n            try {\r\n                 // Perform operations for a single tab within one Excel.run for efficiency\r\n                 await Excel.run(async (context) => {\r\n                     // Get worksheet and financials sheet references within THIS context\r\n                     const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\r\n                     const financialsSheet = context.workbook.worksheets.getItem(FINANCIALS_SHEET_NAME);\r\n                     currentWorksheet.load('name'); // Load basic properties\r\n                     financialsSheet.load('name');\r\n                     await context.sync(); // Ensure sheets are loaded\r\n\r\n                     console.log(`Successfully got references for ${currentWorksheet.name} and ${financialsSheet.name}`);\r\n\r\n                     // 1. Get Last Row for the current assumption tab\r\n                     // getLastUsedRow needs context, so call it here\r\n                     const lastRow = await getLastUsedRow(currentWorksheet, \"B\"); // Pass currentWorksheet from this context\r\n                     if (lastRow < START_ROW) {\r\n                         console.warn(`Skipping tab ${worksheetName} as last used row in Col B (${lastRow}) is before start row (${START_ROW}).`);\r\n                         return; // Skip to next tab if empty or too short\r\n                     }\r\n                     console.log(`Last row in Col B for ${worksheetName}: ${lastRow}`);\r\n\r\n                     // --- Call helper functions IN ORDER, passing worksheet objects from this context ---\r\n                     // These helpers now expect to run within this context\r\n\r\n                     // 2. Adjust Drivers\r\n                     await adjustDriversJS(currentWorksheet, lastRow);\r\n\r\n                     // 3. Replace Indirects\r\n                     await replaceIndirectsJS(currentWorksheet, lastRow);\r\n\r\n                     // 4. Get Last Row Again (if Replace_Indirects might change it)\r\n                     // const updatedLastRow = await getLastUsedRow(currentWorksheet, \"B\"); // Recalculate if necessary\r\n                     const updatedLastRow = lastRow; // Assuming Replace_Indirects doesn't change last row for now\r\n                     console.log(`Using last row for subsequent steps: ${updatedLastRow}`);\r\n                     if (updatedLastRow < START_ROW) {\r\n                         console.warn(`Skipping remaining steps for ${worksheetName} as updated last row (${updatedLastRow}) is invalid.`);\r\n                         return;\r\n                     }\r\n\r\n                     // 5. Populate Financials\r\n                     await populateFinancialsJS(currentWorksheet, updatedLastRow, financialsSheet);\r\n\r\n                     // 6.5 Set font color to white in column A\r\n                     // We use updatedLastRow here, as deletions haven't happened yet\r\n                     await setColumnAFontWhite(currentWorksheet, START_ROW, updatedLastRow); \r\n                     console.log(`Set font color to white in column A from rows ${START_ROW}-${updatedLastRow}`);\r\n  \r\n                     // // Force recalculation before Index Growth Curve (especially if manual calc mode)\r\n                     // console.log(`Performing full workbook recalculation before Index Growth Curve for ${worksheetName}...`);\r\n                     // context.workbook.application.calculate(Excel.CalculationType.fullRebuild);\r\n                     // await context.sync(); // Sync the calculation\r\n                     // console.log(`Recalculation complete for ${worksheetName}.`);\r\n \r\n                      // 6.8 Apply Index Growth Curve logic (if applicable)\r\n                     // Run Index Growth *before* deleting rows. Use updatedLastRow as the boundary.\r\n                     await applyIndexGrowthCurveJS(currentWorksheet, updatedLastRow); \r\n                     \r\n                     // 7. Delete rows with green background (#CCFFCC) - AFTER Index Growth\r\n                     console.log(`Deleting green rows in ${worksheetName}...`);\r\n                     // Changed START_ROW to START_ROW - 1 to include row 9\r\n                     const finalLastRow = await deleteGreenRows(currentWorksheet, START_ROW - 1, updatedLastRow); // Get the new last row AFTER deletions\r\n                     console.log(`After deleting green rows, last row is now: ${finalLastRow}`);\r\n \r\n                     // 8. Autofill AE9:AE<lastRow> -> CX<lastRow> on Assumption Tab - Use finalLastRow\r\n                     console.log(`Autofilling ${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${finalLastRow} to ${AUTOFILL_END_COLUMN} on ${worksheetName}`);\r\n                     const sourceRange = currentWorksheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${finalLastRow}`);\r\n                     const fillRange = currentWorksheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_END_COLUMN}${finalLastRow}`);\r\n                     sourceRange.autoFill(fillRange, Excel.AutoFillType.fillDefault);\r\n \r\n                     // 9. Set Row 9 interior color to none\r\n                     console.log(`Setting row 9 interior color to none for ${worksheetName}`);\r\n                     const row9Range = currentWorksheet.getRange(\"9:9\");\r\n                     row9Range.format.fill.clear();\r\n\r\n                     // Sync all batched operations for this tab\r\n                     await context.sync();\r\n                     console.log(`Finished processing and syncing for tab ${worksheetName}`);\r\n\r\n                 }); // End Excel.run for single tab processing\r\n\r\n             } catch (tabError) {\r\n                 console.error(`Error processing tab ${worksheetName}:`, tabError);\r\n                 // Optionally add to an error list and continue with the next tab\r\n                 // Be mindful that subsequent tabs might depend on this one succeeding.\r\n             }\r\n        } // --- End loop through assumption tabs ---\r\n\r\n        // --- Final Operations on Financials Sheet ---\r\n        console.log(`\\nPerforming final operations on ${FINANCIALS_SHEET_NAME}`);\r\n        try {\r\n             await Excel.run(async (context) => {\r\n                 const finSheet = context.workbook.worksheets.getItem(FINANCIALS_SHEET_NAME);\r\n                 finSheet.load('name'); // Load name for logging\r\n                 await context.sync(); // Ensure sheet is loaded\r\n\r\n                 // 1. Format Changes In Working Capital\r\n                 // await formatChangesInWorkingCapitalJS(finSheet); // <<< COMMENTED OUT\r\n\r\n                 // 2. Get Last Row for Financials\r\n                 const financialsLastRow = await getLastUsedRow(finSheet, \"B\"); // Pass sheet from this context\r\n                 if (financialsLastRow < START_ROW) {\r\n                     console.warn(`Skipping final autofill on ${FINANCIALS_SHEET_NAME} as last row (${financialsLastRow}) is before start row (${START_ROW}).`);\r\n                     return;\r\n                 }\r\n                 console.log(`Last row in Col B for ${FINANCIALS_SHEET_NAME}: ${financialsLastRow}`);\r\n\r\n                //  // 3. Autofill AE9:AE<lastRow> -> CX<lastRow> on Financials\r\n                //  console.log(`Autofilling ${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${financialsLastRow} to ${AUTOFILL_END_COLUMN} on ${FINANCIALS_SHEET_NAME}`);\r\n                //  const sourceRangeFin = finSheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${financialsLastRow}`);\r\n                //  const fillRangeFin = finSheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_END_COLUMN}${financialsLastRow}`);\r\n                //  sourceRangeFin.autoFill(fillRangeFin, Excel.AutoFillType.fillDefault);\r\n\r\n\r\n                 // Sync final Financials sheet operations\r\n                 await context.sync();\r\n                 console.log(`Finished final operations on ${FINANCIALS_SHEET_NAME}`);\r\n             });\r\n         } catch (financialsError) {\r\n             console.error(`Error during final operations on ${FINANCIALS_SHEET_NAME}:`, financialsError);\r\n         }\r\n\r\n        console.log(\"Finished processing all assumption tabs.\");\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in processAssumptionTabs main function:\", error);\r\n        // Potentially re-throw or handle top-level errors\r\n    }\r\n}\r\n\r\n/**\r\n * Deletes rows with light green background (#CCFFCC) in column B\r\n * @param {Excel.Worksheet} worksheet - The worksheet to process\r\n * @param {number} startRow - The first row to check\r\n * @param {number} lastRow - The last row to check\r\n * @returns {Promise<number>} - The new last row after deletions\r\n */\r\nasync function deleteGreenRows(worksheet, startRow, lastRow) {\r\n    console.log(`Deleting green rows (#CCFFCC) in ${worksheet.name} from row ${startRow} to ${lastRow}`);\r\n    \r\n    try {\r\n        // Create an array to store rows that need deletion (in descending order)\r\n        const rowsToDelete = [];\r\n        \r\n        // Process each row individually instead of as a range to avoid collection issues\r\n        for (let rowNum = startRow; rowNum <= lastRow; rowNum++) {\r\n            const cellAddress = `B${rowNum}`;\r\n            const cell = worksheet.getRange(cellAddress);\r\n            cell.load(\"format/fill/color\");\r\n            \r\n            try {\r\n                await worksheet.context.sync();\r\n                \r\n                // Safely check if properties exist and if color matches\r\n                if (cell.format && \r\n                    cell.format.fill && \r\n                    cell.format.fill.color === \"#CCFFCC\") {\r\n                    rowsToDelete.push(rowNum);\r\n                }\r\n            } catch (cellError) {\r\n                console.warn(`Error checking color for ${cellAddress}: ${cellError.message}`);\r\n                // Continue to next cell if there's an error with this one\r\n            }\r\n        }\r\n        \r\n        // Sort in descending order to delete from bottom to top\r\n        rowsToDelete.sort((a, b) => b - a);\r\n        \r\n        console.log(`Found ${rowsToDelete.length} green rows to delete`);\r\n        \r\n        // Delete each row (from bottom to top)\r\n        if (rowsToDelete.length > 0) {\r\n            for (const rowNum of rowsToDelete) {\r\n                console.log(`Deleting row ${rowNum}`);\r\n                const rowRange = worksheet.getRange(`${rowNum}:${rowNum}`);\r\n                rowRange.delete(Excel.DeleteShiftDirection.up);\r\n            }\r\n            \r\n            await worksheet.context.sync();\r\n            \r\n            // Recalculate the last row\r\n            const newLastRow = await getLastUsedRow(worksheet, \"B\");\r\n            console.log(`New last row after deletions: ${newLastRow}`);\r\n            \r\n            return newLastRow;\r\n        } else {\r\n            console.log(\"No green rows found to delete\");\r\n            return lastRow; // Return original lastRow if no rows deleted\r\n        }\r\n    } catch (error) {\r\n        console.error(`Error in deleteGreenRows: ${error.message}`, error);\r\n        // Return the original lastRow on error\r\n        return lastRow;\r\n    }\r\n}\r\n\r\n/**\r\n * Sets the font color to white for all cells in column A\r\n * @param {Excel.Worksheet} worksheet - The worksheet to process\r\n * @param {number} startRow - The first row to format\r\n * @param {number} lastRow - The last row to format\r\n * @returns {Promise<void>}\r\n */\r\nasync function setColumnAFontWhite(worksheet, startRow, lastRow) {\r\n    console.log(`Setting font color to white in column A for ${worksheet.name} from row ${startRow} to ${lastRow}`);\r\n    \r\n    try {\r\n        // Get the entire range for column A from startRow to lastRow\r\n        const columnARange = worksheet.getRange(`A${startRow}:A${lastRow}`);\r\n        \r\n        // Set the font color to white\r\n        columnARange.format.font.color = \"#FFFFFF\";\r\n        \r\n        await worksheet.context.sync();\r\n        console.log(`Successfully set font color to white in column A for rows ${startRow}-${lastRow}`);\r\n    } catch (error) {\r\n        console.error(`Error in setColumnAFontWhite: ${error.message}`, error);\r\n    }\r\n}\r\n\r\n// --- Helper Functions for Column Conversion ---\r\n\r\n/**\r\n * Converts a 0-based column index into a column letter (e.g., 0 -> A, 1 -> B, 26 -> AA).\r\n * @param {number} index - The 0-based column index.\r\n * @returns {string} The column letter.\r\n */\r\nfunction columnIndexToLetter(index) {\r\n    let letter = '';\r\n    while (index >= 0) {\r\n        letter = String.fromCharCode(index % 26 + 'A'.charCodeAt(0)) + letter;\r\n        index = Math.floor(index / 26) - 1;\r\n    }\r\n    return letter;\r\n}\r\n\r\n/**\r\n * Converts a column letter into a 0-based column index (e.g., A -> 0, B -> 1, AA -> 26).\r\n * @param {string} letter - The column letter (case-insensitive).\r\n * @returns {number} The 0-based column index.\r\n */\r\nfunction columnLetterToIndex(letter) {\r\n    letter = letter.toUpperCase();\r\n    let index = 0;\r\n    for (let i = 0; i < letter.length; i++) {\r\n        index = index * 26 + (letter.charCodeAt(i) - 'A'.charCodeAt(0) + 1);\r\n    }\r\n    return index - 1; // Adjust to 0-based\r\n}\r\n\r\n/**\r\n * Hides Columns C-I, Rows 2-8, and specific Actuals columns on specified sheets,\r\n * then navigates to cell A1 of the Financials sheet.\r\n * @param {string[]} assumptionTabNames - Array of assumption tab names created by runCodes.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function hideColumnsAndNavigate(assumptionTabNames) { // Renamed and added parameter\r\n    // Define Actuals columns\r\n    const ACTUALS_START_COL = \"S\";\r\n    const ACTUALS_END_COL = \"AD\";\r\n\r\n    try {\r\n        const targetSheetNames = [...assumptionTabNames, \"Financials\"]; // Combine assumption tabs and Financials\r\n        console.log(`Attempting to hide specific rows/columns on sheets [${targetSheetNames.join(', ')}] and navigate...`);\r\n\r\n        await Excel.run(async (context) => {\r\n            // Get all worksheets\r\n            const worksheets = context.workbook.worksheets;\r\n            // Load only names needed for matching\r\n            worksheets.load(\"items/name\");\r\n            await context.sync();\r\n\r\n            console.log(`Found ${worksheets.items.length} worksheets. Targeting ${targetSheetNames.length} specific sheets.`);\r\n            let hideAttempted = false;\r\n\r\n            // Calculate actuals end column for assumption tabs\r\n            const actualsEndIndex = columnLetterToIndex(ACTUALS_END_COL);\r\n            const actualsEndMinusOneCol = actualsEndIndex > 0 ? columnIndexToLetter(actualsEndIndex - 1) : ACTUALS_START_COL; // Handle edge case\r\n\r\n            // --- Queue hiding operations for target sheets ---\r\n            for (const worksheet of worksheets.items) {\r\n                const sheetName = worksheet.name;\r\n                if (targetSheetNames.includes(sheetName)) { // Check if sheet is in our target list\r\n                    console.log(`Queueing hide operations for: ${sheetName}`);\r\n                    try {\r\n                        // Hide Rows 2:8 (Applies to both)\r\n                        const rows28 = worksheet.getRange(\"2:8\");\r\n                        rows28.rowHidden = true;\r\n\r\n                        // Conditional Column Hiding\r\n                        if (sheetName === \"Financials\") {\r\n                            console.log(`  -> Hiding Columns C:I for Financials`);\r\n                            const colsCI = worksheet.getRange(\"C:I\");\r\n                            colsCI.columnHidden = true;\r\n                        } else {\r\n                            // Hide Columns C:E for Assumption Tabs\r\n                            console.log(`  -> Hiding Columns C:E for ${sheetName}`);\r\n                            const colsCE = worksheet.getRange(\"C:E\");\r\n                            colsCE.columnHidden = true;\r\n                        }\r\n\r\n                        // Hide Actuals Columns based on sheet type\r\n                        if (sheetName === \"Financials\") {\r\n                            console.log(`  -> Hiding Actuals range ${ACTUALS_START_COL}:${ACTUALS_END_COL}`);\r\n                            const actualsRangeFin = worksheet.getRange(`${ACTUALS_START_COL}:${ACTUALS_END_COL}`);\r\n                            actualsRangeFin.columnHidden = true;\r\n                        } else if (assumptionTabNames.includes(sheetName)) {\r\n                             console.log(`  -> Hiding Actuals range ${ACTUALS_START_COL}:${actualsEndMinusOneCol}`);\r\n                             const actualsRangeAssum = worksheet.getRange(`${ACTUALS_START_COL}:${actualsEndMinusOneCol}`);\r\n                             actualsRangeAssum.columnHidden = true;\r\n                        }\r\n\r\n                        hideAttempted = true; // Mark that at least one hide was queued\r\n                    } catch (error) {\r\n                        // Log unexpected errors during the queuing attempt\r\n                        console.error(`  Error queuing hide operations for ${sheetName}: ${error.message}`, {\r\n                            code: error.code,\r\n                            debugInfo: error.debugInfo ? JSON.stringify(error.debugInfo) : 'N/A'\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            // --- Sync all queued hide operations ---\r\n            if (hideAttempted) {\r\n                console.log(`Attempting to sync hide columns/rows operations...`);\r\n                try {\r\n                    await context.sync();\r\n                    console.log(\"Successfully synced hide columns/rows operations.\");\r\n                } catch (syncError) {\r\n                    console.error(`Error syncing hide columns/rows operations: ${syncError.message}`, {\r\n                        code: syncError.code,\r\n                        debugInfo: syncError.debugInfo ? JSON.stringify(syncError.debugInfo) : 'N/A'\r\n                    });\r\n                     // Report failure but continue to navigation attempt\r\n                }\r\n            } else {\r\n                 console.log(\"No target sheets found or no hide operations were queued.\");\r\n            }\r\n\r\n            // --- Activate and Select A1 on each assumption tab (mimic Ctrl+Home) ---\r\n            console.log(\"Activating and selecting A1 on assumption tabs...\");\r\n            // Note: This requires syncing inside the loop for the activate/select effect per sheet\r\n            for (const sheetName of assumptionTabNames) {\r\n                try {\r\n                    console.log(`  Activating and selecting A1 for: ${sheetName}`);\r\n                    const worksheet = context.workbook.worksheets.getItem(sheetName);\r\n                    worksheet.activate(); // Activate the sheet first\r\n                    const rangeA1 = worksheet.getRange(\"A1\");\r\n                    rangeA1.select(); // Then select A1\r\n                    await context.sync(); // Sync *immediately* to apply activation and selection for this sheet\r\n                    console.log(`  Synced A1 view reset for ${sheetName}.`);\r\n                } catch (error) {\r\n                     console.error(`  Error resetting view for ${sheetName}: ${error.message}`);\r\n                     // Optionally continue to the next sheet even if one fails\r\n                }\r\n            }\r\n            // No final sync needed for this loop as it happens inside\r\n\r\n            // --- Activate and Select J9 on each assumption tab ---\r\n            console.log(\"Activating and selecting J9 on assumption tabs...\");\r\n            // Note: This requires syncing inside the loop for the activate/select effect per sheet\r\n            for (const sheetName of assumptionTabNames) {\r\n                try {\r\n                    console.log(`  Activating and selecting J9 for: ${sheetName}`);\r\n                    const worksheet = context.workbook.worksheets.getItem(sheetName);\r\n                    worksheet.activate(); // Activate the sheet first\r\n                    const rangeJ9 = worksheet.getRange(\"J9\"); // Get J9\r\n                    rangeJ9.select(); // Then select J9\r\n                    await context.sync(); // Sync *immediately* to apply activation and selection for this sheet\r\n                    console.log(`  Synced J9 view reset for ${sheetName}.`);\r\n                } catch (error) {\r\n                     console.error(`  Error resetting view to J9 for ${sheetName}: ${error.message}`);\r\n                     // Optionally continue to the next sheet even if one fails\r\n                }\r\n            }\r\n            // No final sync needed for this loop as it happens inside\r\n\r\n            // --- Navigate to Financials sheet and select cell J9 ---\r\n            // (This ensures Financials is the final active sheet)\r\n            try {\r\n                console.log(\"Navigating to Financials sheet and selecting J9...\");\r\n                const financialsSheet = context.workbook.worksheets.getItem(\"Financials\");\r\n                // This activate/select sequence overrides the previous active sheet.\r\n                financialsSheet.activate(); \r\n                const rangeJ9 = financialsSheet.getRange(\"J9\"); // Get J9\r\n                rangeJ9.select(); // Select J9\r\n                await context.sync(); // Sync the final activate/select\r\n                console.log(\"Successfully navigated to Financials!J9.\");\r\n            } catch (navError) {\r\n                console.error(`Error navigating to Financials sheet J9: ${navError.message}`, {\r\n                    code: navError.code,\r\n                    debugInfo: navError.debugInfo ? JSON.stringify(navError.debugInfo) : 'N/A'\r\n                });\r\n                // Do not throw here, allow the function to finish\r\n            }\r\n\r\n            console.log(\"Finished hideColumnsAndNavigate function.\");\r\n\r\n        }); // End Excel.run\r\n    } catch (error) {\r\n        // Catch errors from the Excel.run call itself\r\n        console.error(\"Critical error in hideColumnsAndNavigate:\", error);\r\n        throw error; // Re-throw critical errors\r\n    }\r\n}\r\n\r\n/**\r\n * Hides specific rows and columns on all worksheets except for specified exclusions.\r\n * Hides rows 1-8, columns C-I (3-9), and columns S-AC (19-29).\r\n * @param {string[]} excludedSheetNames - An array of sheet names to exclude from hiding.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function hideRowsAndColumnsOnSheets(excludedSheetNames = [\"Actuals Data\", \"Actuals Categorization\"]) {\r\n    try {\r\n        console.log(`Hiding rows/columns on sheets, excluding: ${excludedSheetNames.join(', ')}`);\r\n\r\n        await Excel.run(async (context) => {\r\n            const worksheets = context.workbook.worksheets;\r\n            worksheets.load(\"items/name\");\r\n            await context.sync();\r\n\r\n            for (const worksheet of worksheets.items) {\r\n                const sheetName = worksheet.name;\r\n                if (excludedSheetNames.includes(sheetName)) {\r\n                    console.log(`Skipping sheet: ${sheetName} (excluded)`);\r\n                    continue;\r\n                }\r\n\r\n                console.log(`Processing sheet: ${sheetName}`);\r\n\r\n                try {\r\n                    // Hide Rows 1-8\r\n                    const rowRange = worksheet.getRange(\"1:8\");\r\n                    rowRange.rowHidden = true;\r\n                    console.log(`  Hiding rows 1-8`);\r\n\r\n                    // Hide Columns C-E (Changed from C:I)\r\n                    const colRange1 = worksheet.getRange(\"C:E\"); // Changed range\r\n                    colRange1.columnHidden = true;\r\n                    console.log(`  Hiding columns C-E`); // Update log message\r\n\r\n                    // Hide Columns S-AC\r\n                    const colRange2 = worksheet.getRange(\"S:AC\");\r\n                    colRange2.columnHidden = true;\r\n                    console.log(`  Hiding columns S-AC`);\r\n\r\n                    // It's often more efficient to batch sync operations,\r\n                    // but sometimes hiding needs immediate effect or separate syncs.\r\n                    // Let's sync after hiding for this sheet.\r\n                    await context.sync();\r\n                    console.log(`  Finished hiding for ${sheetName}`);\r\n\r\n                } catch (hideError) {\r\n                    console.error(`  Error hiding rows/columns on sheet ${sheetName}: ${hideError.message}`, {\r\n                        code: hideError.code,\r\n                        debugInfo: hideError.debugInfo ? JSON.stringify(hideError.debugInfo) : 'N/A'\r\n                    });\r\n                    // Continue to the next sheet even if one fails\r\n                }\r\n            }\r\n\r\n            console.log(\"Finished processing all sheets for hiding rows/columns.\");\r\n        }); // End Excel.run\r\n\r\n    } catch (error) {\r\n        console.error(\"Critical error in hideRowsAndColumnsOnSheets:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// TODO: Implement the actual logic within the JS helper functions (adjustDriversJS, replaceIndirectsJS, etc.).\r\n// TODO: Implement findRowByValue helper function if Retained Earnings logic is needed.\r\n// TODO: Update the calling code (e.g., button handler in taskpane.js) to call `processAssumptionTabs` after `runCodes`.\r\n\r\n/**\r\n * Inserts worksheets from a base64-encoded Excel file into the current workbook\r\n * @param {string} base64String - Base64-encoded string of the source Excel file\r\n * @param {string[]} [sheetNames] - Optional array of sheet names to insert. If not provided, all sheets will be inserted.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function handleInsertWorksheetsFromBase64(base64String, sheetNames = null) {\r\n    try {\r\n        // Validate base64 string\r\n        if (!base64String || typeof base64String !== 'string') {\r\n            throw new Error(\"Invalid base64 string provided\");\r\n        }\r\n\r\n        // Validate base64 format\r\n        if (!/^[A-Za-z0-9+/]*={0,2}$/.test(base64String)) {\r\n            throw new Error(\"Invalid base64 format\");\r\n        }\r\n\r\n        await Excel.run(async (context) => {\r\n            const workbook = context.workbook;\r\n            \r\n            // Check if we have the required API version\r\n            if (!workbook.insertWorksheetsFromBase64) {\r\n                throw new Error(\"This feature requires Excel API requirement set 1.13 or later\");\r\n            }\r\n            \r\n            // Insert the worksheets with error handling\r\n            try {\r\n                await workbook.insertWorksheetsFromBase64(base64String, {\r\n                    sheetNames: sheetNames\r\n                });\r\n                \r\n                await context.sync();\r\n                console.log(\"Worksheets inserted successfully\");\r\n            } catch (error) {\r\n                console.error(\"Error during worksheet insertion:\", error);\r\n                throw new Error(`Failed to insert worksheets: ${error.message}`);\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error inserting worksheets from base64:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Applies the Index Growth Curve logic to a worksheet, mimicking VBA Function IndexGrowthCurve.\r\n * Finds INDEXBEGIN/INDEXEND, inserts rows, populates data and formulas, applies formatting.\r\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\r\n * @param {number} initialLastRow - The last row determined before this function runs.\r\n */\r\nasync function applyIndexGrowthCurveJS(worksheet, initialLastRow) {\r\n    console.log(`Running applyIndexGrowthCurveJS for sheet: ${worksheet.name}`);\r\n    const START_ROW = 9; // Row to start searching for INDEXBEGIN\r\n    const BEGIN_MARKER = \"INDEXBEGIN\";\r\n    const END_MARKER = \"INDEXEND\";\r\n    const DATA_COL = \"C\";\r\n    const SEARCH_COL = \"D\";\r\n    const OUTPUT_COL_B = \"B\";\r\n    const OUTPUT_COL_C = \"C\";\r\n    const OUTPUT_COL_D = \"D\";\r\n    const CHECK_COL_B = \"B\"; // Column B for green check\r\n    const VALUE_COL_A = \"A\"; // Column A for BS/AV check\r\n    const DRIVER_REF_COL = \"AE\"; // Column containing driver range ref in END_MARKER row\r\n    const SUMIF_START_COL = \"K\"; // K\r\n    const SUMIF_END_COL = \"P\"; // P\r\n    const SUMPRODUCT_COL = \"AE\"; // AE (VBA used AE, not S)\r\n    const MONTHS_START_COL = \"AE\"; // AE\r\n    const MONTHS_END_COL = \"CX\"; // CX\r\n    const LIGHT_BLUE_COLOR = \"#D9E1F2\"; // RGB(217, 225, 242)\r\n    const LIGHT_GREEN_COLOR = \"#CCFFCC\"; // RGB(204, 255, 204)\r\n \r\n    try {\r\n        // Re-get worksheet reference within this context to ensure freshness\r\n        const context = worksheet.context; // Get context from the passed object\r\n        const worksheetName = worksheet.name; // Get name from potentially stale object\r\n        const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\r\n        // We assume the context itself is valid for this entire Excel.run block\r\n \r\n        // --- 1. Find INDEXBEGIN and INDEXEND rows ---\r\n        console.log(`Searching for ${BEGIN_MARKER} and ${END_MARKER} in column ${SEARCH_COL} of ${worksheetName}`);\r\n        const searchRangeAddress = `${SEARCH_COL}${START_ROW}:${SEARCH_COL}${initialLastRow}`; \r\n        const searchRange = currentWorksheet.getRange(searchRangeAddress); // Use refreshed worksheet object\r\n        searchRange.load(\"values\");\r\n        await context.sync(); // Use the context variable\r\n \r\n        let firstRow = -1;\r\n        let lastRow = -1;\r\n        let indexEndRow = -1; // Keep track of the original END_MARKER row\r\n \r\n        if (searchRange.values) {\r\n            for (let i = 0; i < searchRange.values.length; i++) {\r\n                const currentRow = START_ROW + i;\r\n                const cellValue = searchRange.values[i][0];\r\n                if (cellValue === BEGIN_MARKER && firstRow === -1) {\r\n                    firstRow = currentRow;\r\n                }\r\n                if (cellValue === END_MARKER) {\r\n                    lastRow = currentRow; // This will be the last END_MARKER found\r\n                    indexEndRow = currentRow; // Store the original row index\r\n                }\r\n            }\r\n        }\r\n \r\n        if (firstRow === -1 || lastRow === -1 || lastRow < firstRow) {\r\n            console.log(`Markers ${BEGIN_MARKER}/${END_MARKER} not found or in wrong order in ${searchRangeAddress}. Skipping Index Growth Curve.`);\r\n            return; // Exit if markers not found or invalid\r\n        }\r\n        console.log(`Found ${BEGIN_MARKER} at row ${firstRow}, ${END_MARKER} at row ${lastRow}`);\r\n \r\n        // --- 2. Collect Index Rows (Rows between markers where Col C is not empty) ---\r\n        const indexRows = [];\r\n        // CHANGE DATA_COL here if needed, e.g. const DATA_COL_TO_CHECK = \"B\";\r\n        const DATA_COL_TO_CHECK = \"B\"; // Or \"A\", etc.\r\n        const dataColRangeAddress = `${DATA_COL_TO_CHECK}${firstRow}:${DATA_COL_TO_CHECK}${lastRow}`;\r\n        const dataColRange = currentWorksheet.getRange(dataColRangeAddress);\r\n        // ... rest of the loading and checking logic ...\r\n \r\n        if (indexRows.length === 0) {\r\n            console.log(`No data rows found between ${BEGIN_MARKER} and ${END_MARKER} in column ${DATA_COL}. Skipping rest of Index Growth Curve.`);\r\n            return; // Exit if no data rows found\r\n        }\r\n        console.log(`Collected ${indexRows.length} index rows:`, indexRows);\r\n \r\n        // --- 3. Set Background Color for non-green rows ---\r\n        // Range: B(firstRow+2) to CX(lastRow-2) in VBA, but logic only checks B color. Let's adjust row color based on B.\r\n        const formatCheckStartRow = firstRow + 2;\r\n        const formatCheckEndRow = lastRow - 2;\r\n        console.log(`Setting background color for non-green rows between ${formatCheckStartRow} and ${formatCheckEndRow}`);\r\n        if (formatCheckStartRow <= formatCheckEndRow) {\r\n             // Load colors first\r\n             const checkColorRange = currentWorksheet.getRange(`${CHECK_COL_B}${formatCheckStartRow}:${CHECK_COL_B}${formatCheckEndRow}`);\r\n             checkColorRange.load(\"format/fill/color\");\r\n             await context.sync();\r\n \r\n              // Queue formatting changes\r\n              for (let i = 0; i < checkColorRange.values.length; i++) { // checkColorRange.values isn't loaded, use index\r\n                 const currentRow = formatCheckStartRow + i;\r\n                  // Use loaded format object\r\n                 if (checkColorRange.format.fill.color !== LIGHT_GREEN_COLOR) {\r\n                     console.log(`  Setting row ${currentRow} background to ${LIGHT_BLUE_COLOR}`);\r\n                     const rowRange = currentWorksheet.getRange(`${currentRow}:${currentRow}`);\r\n                     rowRange.format.fill.color = LIGHT_BLUE_COLOR;\r\n                     // Clear fill in column A specifically\r\n                     const cellARange = currentWorksheet.getRange(`A${currentRow}`);\r\n                     cellARange.format.fill.clear();\r\n                 }\r\n              }\r\n         }\r\n \r\n         // --- 4. Insert Rows ---\r\n         const newRowStart = lastRow + 2;\r\n         const numNewRows = indexRows.length;\r\n         const newRowEnd = newRowStart + numNewRows - 1;\r\n         console.log(`Inserting ${numNewRows} rows at range ${newRowStart}:${newRowEnd}`);\r\n         const insertRange = currentWorksheet.getRange(`${newRowStart}:${newRowEnd}`);\r\n         insertRange.insert(Excel.InsertShiftDirection.down);\r\n         // Sync required before populating new rows\r\n         await context.sync();\r\n \r\n         // --- 5. Populate New Rows (B, C, D) ---\r\n         console.log(`Populating columns ${OUTPUT_COL_B}, ${OUTPUT_COL_C}, ${OUTPUT_COL_D} in new rows ${newRowStart}:${newRowEnd}`);\r\n         // Load source data from original index rows\r\n         const sourceDataAddresses = indexRows.map(r => `${OUTPUT_COL_B}${r}:${OUTPUT_COL_C}${r}`);\r\n         // Cannot load disjoint ranges easily this way. Load columns B and C for the whole original block.\r\n         const sourceBlockRange = currentWorksheet.getRange(`${OUTPUT_COL_B}${firstRow}:${OUTPUT_COL_C}${lastRow}`);\r\n         sourceBlockRange.load(\"values\");\r\n         await context.sync();\r\n \r\n         const outputDataBC = [];\r\n         const outputDataD = [];\r\n         const sourceValues = sourceBlockRange.values;\r\n         for (const originalRow of indexRows) {\r\n             const rowIndexInBlock = originalRow - firstRow; // 0-based index within the loaded block\r\n             const valB = sourceValues[rowIndexInBlock][0]; // Col B is index 0\r\n             const valC = sourceValues[rowIndexInBlock][1]; // Col C is index 1\r\n             outputDataBC.push([valB, valC]);\r\n             outputDataD.push([END_MARKER]);\r\n         }\r\n \r\n         const outputRangeBC = currentWorksheet.getRange(`${OUTPUT_COL_B}${newRowStart}:${OUTPUT_COL_C}${newRowEnd}`);\r\n         outputRangeBC.values = outputDataBC;\r\n         const outputRangeD = currentWorksheet.getRange(`${OUTPUT_COL_D}${newRowStart}:${OUTPUT_COL_D}${newRowEnd}`);\r\n         outputRangeD.values = outputDataD;\r\n \r\n         // --- 6. Apply SUMIF Formulas (K-P) ---\r\n         console.log(`Applying SUMIF formulas to ${SUMIF_START_COL}${newRowStart}:${SUMIF_END_COL}${newRowEnd}`);\r\n         // Load necessary data: Col C and Col A values from original index rows\r\n         const sourceColCRange = currentWorksheet.getRange(`${DATA_COL}${firstRow}:${DATA_COL}${lastRow}`);\r\n         const sourceColARange = currentWorksheet.getRange(`${VALUE_COL_A}${firstRow}:${VALUE_COL_A}${lastRow}`);\r\n         sourceColCRange.load(\"values\");\r\n         sourceColARange.load(\"values\");\r\n         await context.sync();\r\n \r\n         const sourceValuesC = sourceColCRange.values;\r\n         const sourceValuesA = sourceColARange.values;\r\n         const numSumifCols = columnLetterToIndex(SUMIF_END_COL) - columnLetterToIndex(SUMIF_START_COL) + 1;\r\n         const sumifFormulas = [];\r\n \r\n         for (let i = 0; i < indexRows.length; i++) {\r\n             const originalRow = indexRows[i];\r\n             const rowIndexInBlock = originalRow - firstRow; // 0-based index within the loaded block\r\n             const codeC = sourceValuesC[rowIndexInBlock][0] || \"\"; // Ensure string\r\n             const valueA = sourceValuesA[rowIndexInBlock][0];\r\n             const targetRowNum = newRowStart + i; // Row where formula will be placed\r\n \r\n             let baseFormula;\r\n             // Check if Col C starts with \"BS\" or Col A is \"AV\"\r\n             if (codeC.toUpperCase().startsWith(\"BS\") || String(valueA).toUpperCase() === \"AV\") {\r\n                 // \"=SUMIF($3:$3,@ INDIRECT(ADDRESS(ROW($A$2),COLUMN(),2)), INDIRECT(ROW() & \"\":\"\" & ROW()))\"\r\n                  baseFormula = `=SUMIF($3:$3, INDIRECT(ADDRESS(2,COLUMN())), ${targetRowNum}:${targetRowNum})`;\r\n             } else {\r\n                 // \"=SUMIF($4:$4,@ INDIRECT(ADDRESS(ROW($A$2),COLUMN(),2)), INDIRECT(ROW() & \"\":\"\" & ROW()))\"\r\n                  baseFormula = `=SUMIF($4:$4, INDIRECT(ADDRESS(2,COLUMN())), ${targetRowNum}:${targetRowNum})`;\r\n             }\r\n             // Create array for the row\r\n             sumifFormulas.push(Array(numSumifCols).fill(baseFormula));\r\n         }\r\n \r\n         const sumifRange = currentWorksheet.getRange(`${SUMIF_START_COL}${newRowStart}:${SUMIF_END_COL}${newRowEnd}`);\r\n         sumifRange.formulas = sumifFormulas;\r\n \r\n         // --- 7. Apply SUMPRODUCT Formulas (AE) ---\r\n         console.log(`Applying SUMPRODUCT formulas to ${SUMPRODUCT_COL}${newRowStart}:${SUMPRODUCT_COL}${newRowEnd}`);\r\n         // Get the driver range string from the original END_MARKER row, column AE\r\n         const driverCell = currentWorksheet.getRange(`${DRIVER_REF_COL}${indexEndRow}`);\r\n         driverCell.load(\"values\");\r\n         await context.sync();\r\n         const driverRangeString = driverCell.values[0][0];\r\n \r\n         if (!driverRangeString || typeof driverRangeString !== 'string') {\r\n             console.warn(`Driver range string not found or invalid in cell ${DRIVER_REF_COL}${indexEndRow}. Skipping SUMPRODUCT.`);\r\n         } else {\r\n              console.log(`Using driver range: ${driverRangeString}`);\r\n              // Iterate and set formula for each cell individually (mimics FormulaArray)\r\n              for (let i = 0; i < indexRows.length; i++) {\r\n                  const originalRow = indexRows[i];\r\n                  const targetRow = newRowStart + i;\r\n                  const dataRangeString = `$${MONTHS_START_COL}$${originalRow}:$${MONTHS_END_COL}$${originalRow}`;\r\n                  // Formula: =SUMPRODUCT(INDEX(driverRange, N(IF({1}, MAX(COLUMN(driverRange)) - COLUMN(driverRange) + 1))), dataRange)\r\n                  const sumproductFormula = `=SUMPRODUCT(INDEX(${driverRangeString},N(IF({1},MAX(COLUMN(${driverRangeString}))-COLUMN(${driverRangeString})+1))), ${dataRangeString})`;\r\n \r\n                  const targetCell = currentWorksheet.getRange(`${SUMPRODUCT_COL}${targetRow}`);\r\n                  targetCell.formulas = [[sumproductFormula]];\r\n                  // console.log(`  Set formula for ${SUMPRODUCT_COL}${targetRow}: ${sumproductFormula}`);\r\n             }\r\n         }\r\n \r\n         // --- 8. Copy Formats and Adjust ---\r\n         console.log(`Copying formats and adjusting for new rows ${newRowStart}:${newRowEnd}`);\r\n         for (let i = 0; i < indexRows.length; i++) {\r\n             const sourceRow = indexRows[i];\r\n             const targetRow = newRowStart + i;\r\n \r\n             const sourceRowRange = currentWorksheet.getRange(`${sourceRow}:${sourceRow}`);\r\n             const targetRowRange = currentWorksheet.getRange(`${targetRow}:${targetRow}`);\r\n \r\n             // Copy formats first\r\n             targetRowRange.copyFrom(sourceRowRange, Excel.RangeCopyType.formats);\r\n              await context.sync(); // Sync after each copy maybe needed? Let's try one sync after loop.\r\n \r\n             // Apply format overrides\r\n             targetRowRange.format.font.color = \"#000000\"; // Black font\r\n             targetRowRange.format.borders.load('items'); // Load borders collection\r\n              await context.sync(); // Need to sync load before clearing\r\n \r\n              targetRowRange.format.borders.items.forEach(border => border.style = 'None');\r\n             // Explicitly clear all borders (simpler?)\r\n             // targetRowRange.format.borders.getItem('EdgeTop').style = 'None';\r\n             // targetRowRange.format.borders.getItem('EdgeBottom').style = 'None';\r\n             // targetRowRange.format.borders.getItem('EdgeLeft').style = 'None';\r\n             // targetRowRange.format.borders.getItem('EdgeRight').style = 'None';\r\n             // targetRowRange.format.borders.getItem('InsideVertical').style = 'None';\r\n             // targetRowRange.format.borders.getItem('InsideHorizontal').style = 'None';\r\n \r\n             targetRowRange.format.fill.clear(); // Clear interior color\r\n             targetRowRange.format.font.bold = false; // Remove bold\r\n \r\n             // Set indent level for column B\r\n             const targetCellB = currentWorksheet.getRange(`${OUTPUT_COL_B}${targetRow}`);\r\n             targetCellB.format.indentLevel = 2;\r\n         }\r\n          await context.sync(); // Sync format changes\r\n \r\n         // --- 9. Clear Original Column C values ---\r\n         console.log(`Clearing values in original index rows (${indexRows.join(', ')}) column ${DATA_COL}`);\r\n         // It's safer to clear individually if rows aren't contiguous\r\n         for (const originalRow of indexRows) {\r\n             const cellToClear = currentWorksheet.getRange(`${DATA_COL}${originalRow}`);\r\n             cellToClear.clear(Excel.ClearApplyTo.contents);\r\n         }\r\n          await context.sync(); // Sync clears\r\n \r\n         console.log(`applyIndexGrowthCurveJS completed successfully for sheet: ${worksheetName}`);\r\n \r\n     } catch (error) {\r\n         console.error(`Error in applyIndexGrowthCurveJS for sheet ${worksheet.name}:`, error);\r\n         // Decide if error should be re-thrown\r\n         // throw error; // Optional: re-throw to stop processAssumptionTabs if critical\r\n     }\r\n     // Note: This function runs within the context of the calling Excel.run in processAssumptionTabs.\r\n     // Syncs are added within the function for critical steps like after insertion.\r\n }","// Helper function to build the pipe-delimited string for a row\r\nfunction buildRowArrayString(valuesRow, formulasRow) {\r\n    // ... (Helper function remains the same)\r\n    // Indices: A=0, B=1, C=2, G=6, H=7, I=8, K=10, L=11, M=12, N=13, O=14, P=15, R=17\r\n    const cols = [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17];\r\n    const formulaCols = [10, 11, 12, 13, 14, 15, 17]; // Columns to check for formulas\r\n    let parts = [];\r\n\r\n    if (!valuesRow) return \"\"; // Handle case where row might be completely empty\r\n\r\n    for (const colIndex of cols) {\r\n        // Ensure the row has enough columns\r\n        let value = (valuesRow.length > colIndex && valuesRow[colIndex] !== null && valuesRow[colIndex] !== undefined) ? valuesRow[colIndex] : \"\";\r\n        let formula = (formulasRow && formulasRow.length > colIndex) ? formulasRow[colIndex] : null;\r\n\r\n        if (formulaCols.includes(colIndex)) {\r\n            // Check formula first\r\n            if (typeof formula === 'string' && formula.startsWith('=')) {\r\n                value = \"F\";\r\n            }\r\n        }\r\n        const valueString = String(value).replace(/\"/g, '\"\"');\r\n        parts.push(valueString);\r\n    }\r\n    return parts.join(\"|\");\r\n}\r\n\r\n// Helper function to process a standard code block based on Column D\r\nfunction processCodeBlock(values, formulas, startDataRowIndex, endDataRowIndex, codeName, rangeStartRowExcel) {\r\n    // console.log(`Processing block: ${codeName} from Excel row ${startDataRowIndex + rangeStartRowExcel} to ${endDataRowIndex + rangeStartRowExcel}`);\r\n    let blockString = `<${codeName};`;\r\n    let rowCount = 1;\r\n    // The indices i here are 0-based relative to the START of the loaded data range\r\n    for (let i = startDataRowIndex; i <= endDataRowIndex; i++) {\r\n        if (values && i < values.length && formulas && i < formulas.length) {\r\n            const rowArrayString = buildRowArrayString(values[i], formulas[i]);\r\n            blockString += `row${rowCount}=\"${rowArrayString}\";`;\r\n            rowCount++;\r\n        } else {\r\n             // console.warn(`Skipping data row index ${i} in block ${codeName} due to missing data.`);\r\n        }\r\n    }\r\n    blockString += \">\";\r\n    // console.log(`Generated block string for ${codeName}: ${blockString.substring(0,100)}...`);\r\n    return blockString;\r\n}\r\n\r\nexport async function generateTabString() {\r\n    try {\r\n        await Excel.run(async (context) => {\r\n            console.log(\"Starting generateTabString (dynamic range)...\");\r\n            const sheets = context.workbook.worksheets;\r\n            sheets.load(\"items/name\");\r\n            await context.sync();\r\n            console.log(`Found ${sheets.items.length} sheets.`);\r\n\r\n            let finalResultString = \"\";\r\n\r\n            for (const sheet of sheets.items) {\r\n                console.log(`Processing sheet: ${sheet.name}`);\r\n                let sheetCodeBlocks = \"\";\r\n                let lastUsedRowInB = 0;\r\n\r\n                try {\r\n                    // --- Find the last used row in Column B ---\r\n                    // Get the bottom-most cell in column B (using a large row number)\r\n                    const bottomCellInB = sheet.getRange(\"B1048576\");\r\n                    // Find the last used cell *up* from the absolute bottom\r\n                    const lastUsedCellInB = bottomCellInB.getRangeEdge(Excel.KeyboardDirection.up);\r\n                    lastUsedCellInB.load(\"rowIndex\");\r\n                    await context.sync();\r\n\r\n                    // Add 1 because rowIndex is 0-based\r\n                    lastUsedRowInB = lastUsedCellInB.rowIndex + 1;\r\n                    console.log(`Sheet ${sheet.name}: Last used row in Col B found at: ${lastUsedRowInB}`);\r\n\r\n                    // --- Validate last row and define dynamic range ---\r\n                    if (lastUsedRowInB < 9) {\r\n                        console.log(`Sheet ${sheet.name}: Last used row (${lastUsedRowInB}) is before row 9. Skipping code generation.`);\r\n                        finalResultString += `<TAB; label1=\"${sheet.name}\";>\\n\\n`; // Add TAB tag even if no codes\r\n                        continue; // Skip to the next sheet\r\n                    }\r\n\r\n                    const dynamicRangeAddress = `A9:R${lastUsedRowInB}`;\r\n                    console.log(`Sheet ${sheet.name}: Loading dynamic range: ${dynamicRangeAddress}`);\r\n\r\n                    // --- Load data from the dynamic range --- Load data from the dynamic range ---\r\n                    const range = sheet.getRange(dynamicRangeAddress);\r\n                    range.load([\"values\", \"formulas\", \"rowCount\", \"rowIndex\"]);\r\n                    await context.sync();\r\n\r\n                    const values = range.values;\r\n                    const formulas = range.formulas;\r\n                    const loadedRowCount = range.rowCount;\r\n                    const rangeStartRowExcel = range.rowIndex + 1; // Should be 9\r\n\r\n                    if (rangeStartRowExcel !== 9) {\r\n                         console.warn(`Sheet ${sheet.name}: Loaded range started at ${rangeStartRowExcel} instead of 9.`);\r\n                    }\r\n                    if (!values || loadedRowCount === 0) {\r\n                        console.log(`Sheet ${sheet.name}: No values loaded from range ${dynamicRangeAddress}. Skipping code generation.`);\r\n                        finalResultString += `<TAB; label1=\"${sheet.name}\";>\\n\\n`;\r\n                        continue; // Skip to the next sheet\r\n                    }\r\n\r\n                    // --- Process the loaded data --- Process the loaded data ---\r\n                    // Check if Column D (index 3 in the loaded array) has significant data\r\n                    let hasDataInD = false;\r\n                    for (let r = 0; r < loadedRowCount; r++) {\r\n                         if (values[r] && values[r].length > 3 && values[r][3] && String(values[r][3]).trim() !== \"\") {\r\n                            hasDataInD = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    console.log(`Sheet ${sheet.name}: Has significant data in Column D (in loaded range)? ${hasDataInD}`);\r\n\r\n                    if (!hasDataInD) {\r\n                        // --- Generate MANUAL-ER Block ---\r\n                        console.log(`Sheet ${sheet.name}: Generating MANUAL-ER block.`);\r\n                        sheetCodeBlocks += \"<MANUAL-ER;\";\r\n                        let manualRowCount = 1;\r\n                        for (let r = 0; r < loadedRowCount; r++) {\r\n                            if (values[r] && formulas[r]) { // Ensure row data exists\r\n                                const rowArrayString = buildRowArrayString(values[r], formulas[r]);\r\n                                sheetCodeBlocks += `row${manualRowCount}=\"${rowArrayString}\";`;\r\n                                manualRowCount++;\r\n                            }\r\n                        }\r\n                        sheetCodeBlocks += \">\";\r\n\r\n                    } else {\r\n                        // --- Generate Blocks Based on Column D ---\r\n                        console.log(`Sheet ${sheet.name}: Generating blocks based on Column D changes.`);\r\n                        let currentBlockStartDataRow = -1;\r\n                        let currentBlockCodeName = \"\";\r\n\r\n                        for (let r = 0; r < loadedRowCount; r++) {\r\n                            const dValue = (values[r] && values[r].length > 3 && values[r][3]) ? String(values[r][3]).trim() : \"\";\r\n\r\n                            if (dValue !== \"\") {\r\n                                if (currentBlockStartDataRow === -1) {\r\n                                    currentBlockStartDataRow = r;\r\n                                    currentBlockCodeName = dValue;\r\n                                } else if (dValue !== currentBlockCodeName) {\r\n                                    // Add newline before appending if sheetCodeBlocks isn't empty\r\n                                    if (sheetCodeBlocks) sheetCodeBlocks += \"\\n\";\r\n                                    sheetCodeBlocks += processCodeBlock(values, formulas, currentBlockStartDataRow, r - 1, currentBlockCodeName, rangeStartRowExcel);\r\n                                    currentBlockStartDataRow = r;\r\n                                    currentBlockCodeName = dValue;\r\n                                }\r\n                            } else { // Empty D value\r\n                                if (currentBlockStartDataRow !== -1) {\r\n                                    // Add newline before appending if sheetCodeBlocks isn't empty\r\n                                    if (sheetCodeBlocks) sheetCodeBlocks += \"\\n\";\r\n                                    sheetCodeBlocks += processCodeBlock(values, formulas, currentBlockStartDataRow, r - 1, currentBlockCodeName, rangeStartRowExcel);\r\n                                    currentBlockStartDataRow = -1;\r\n                                    currentBlockCodeName = \"\";\r\n                                }\r\n                            }\r\n\r\n                            // Handle the last block if the loop finishes while inside a block\r\n                            if (r === loadedRowCount - 1 && currentBlockStartDataRow !== -1) {\r\n                                // Add newline before appending if sheetCodeBlocks isn't empty\r\n                                if (sheetCodeBlocks) sheetCodeBlocks += \"\\n\";\r\n                                sheetCodeBlocks += processCodeBlock(values, formulas, currentBlockStartDataRow, r, currentBlockCodeName, rangeStartRowExcel);\r\n                            }\r\n                        } // end for loop r\r\n                    } // end else (hasDataInD)\r\n\r\n                } catch (sheetError) {\r\n                     console.error(`Error processing sheet ${sheet.name}: ${sheetError}`);\r\n                     if (sheetError instanceof OfficeExtension.Error) {\r\n                         console.error(\"Debug info: \" + JSON.stringify(sheetError.debugInfo));\r\n                     }\r\n                     sheetCodeBlocks = \"<!-- Error processing sheet data -->\";\r\n                }\r\n\r\n                // Append the result for this sheet\r\n                // Add a newline between TAB and blocks only if blocks exist\r\n                let tabLine = `<TAB; label1=\"${sheet.name}\";>`;\r\n                if (sheetCodeBlocks) {\r\n                    tabLine += \"\\n\" + sheetCodeBlocks; // Add newline before the blocks\r\n                }\r\n                finalResultString += tabLine + \"\\n\\n\"; // Add double newline after each sheet entry\r\n            } // end loop sheets\r\n\r\n            console.log(\"--- FINAL GENERATED STRING ---\");\r\n            console.log(finalResultString);\r\n            console.log(\"--- END FINAL GENERATED STRING ---\");\r\n\r\n        }); // end Excel.run\r\n    } catch (error) {\r\n        console.error(\"Error in generateTabString top level: \" + error);\r\n        if (error instanceof OfficeExtension.Error) {\r\n            console.error(\"Debug info: \" + JSON.stringify(error.debugInfo));\r\n        }\r\n    }\r\n}\r\n","// AIModelPlanner.js\r\n\r\n// Assuming API keys are managed and accessible similarly to AIcalls.js\r\n// Or that callOpenAI is available globally/imported if AIcalls.js exports it.\r\n// For now, let's assume a local way to call OpenAI or that it's handled by the main taskpane script.\r\n\r\n// Imports needed for _executePlannerCodes\r\nimport { validateCodeStringsForRun } from './Validation.js';\r\nimport { \r\n    populateCodeCollection, \r\n    runCodes, \r\n    processAssumptionTabs, \r\n    hideColumnsAndNavigate, \r\n    handleInsertWorksheetsFromBase64 \r\n} from './CodeCollection.js';\r\nimport { getAICallsProcessedResponse } from './AIcalls.js';\r\n// We don't import from taskpane.js to avoid cycles\r\n\r\nlet modelPlannerConversationHistory = [];\r\nlet AI_MODEL_PLANNER_OPENAI_API_KEY = \"\";\r\nlet lastPlannerResponseForClient = null; // To store the last response for client mode buttons\r\n\r\nconst DEBUG_PLANNER = true; // For planner-specific debugging\r\n\r\nimport { processModelCodesForPlanner } from './taskpane.js'; // <<< UPDATED IMPORT\r\n\r\n// Helper function to get API keys (placeholder, adapt as needed based on your structure)\r\n// This might need to be coordinated with how API keys are managed in your main taskpane.js\r\n// For now, we'll assume AIcalls.js might make setAPIKeys and INTERNAL_API_KEYS available or similar.\r\n// As per the prompt, we are not changing AIcalls.js, so we'll define what's needed here.\r\n\r\nexport function setAIModelPlannerOpenApiKey(key) {\r\n    if (key) {\r\n        AI_MODEL_PLANNER_OPENAI_API_KEY = key;\r\n        if (DEBUG_PLANNER) console.log(\"AIModelPlanner.js: OpenAI API key set.\");\r\n    } else {\r\n        if (DEBUG_PLANNER) console.warn(\"AIModelPlanner.js: Attempted to set an empty OpenAI API key.\");\r\n    }\r\n}\r\n\r\n\r\n// Updated to use the more robust fetching approach\r\nasync function getAIModelPlanningSystemPrompt() {\r\n  const promptKey = \"AIModelPlanning_System\"; // Key for this specific prompt file\r\n  const paths = [\r\n    // Try path relative to root if /src/ is not working, assuming 'prompts' is then at root level of served dir\r\n    // THIS IS A GUESS - The original path `https://localhost:3002/src/prompts/...` should work if server is configured for it.\r\n    `https://localhost:3002/prompts/${promptKey}.txt`, \r\n    `https://localhost:3002/src/prompts/${promptKey}.txt` // Original path as a fallback\r\n  ];\r\n\r\n  if (DEBUG_PLANNER) console.log(`AIModelPlanner: Attempting to load prompt file: ${promptKey}.txt`);\r\n\r\n  let response = null;\r\n  for (const path of paths) {\r\n    if (DEBUG_PLANNER) console.log(`AIModelPlanner: Attempting to load prompt from: ${path}`);\r\n    try {\r\n      response = await fetch(path);\r\n      if (response.ok) {\r\n        if (DEBUG_PLANNER) console.log(`AIModelPlanner: Successfully loaded prompt from: ${path}`);\r\n        const text = await response.text();\r\n        return text;\r\n      } else {\r\n        if (DEBUG_PLANNER) console.warn(`AIModelPlanner: Failed to load from ${path} - Status: ${response.status} ${response.statusText}`);\r\n      }\r\n    } catch (err) {\r\n      if (DEBUG_PLANNER) console.error(`AIModelPlanner: Error fetching from ${path}: ${err.message}`);\r\n    }\r\n  }\r\n\r\n  // If all paths fail\r\n  console.error(`AIModelPlanner: Failed to load prompt ${promptKey}.txt from all attempted paths.`);\r\n  // Fallback prompt\r\n  return \"You are a helpful assistant for financial model planning. [Error: System prompt AIModelPlanning_System.txt could not be loaded]\"; \r\n}\r\n\r\n// Direct OpenAI API call function (simplified version, adapt if AIcalls.js exports its own)\r\nasync function callOpenAIForModelPlanner(messages, model = \"gpt-4.1\", temperature = 0.7) {\r\n  if (!AI_MODEL_PLANNER_OPENAI_API_KEY) {\r\n    console.error(\"AIModelPlanner: OpenAI API key not set.\");\r\n    throw new Error(\"OpenAI API key not set for AIModelPlanner.\");\r\n  }\r\n\r\n  if (DEBUG_PLANNER) {\r\n    if (messages && messages.length > 0) {\r\n      const systemMessage = messages.find(msg => msg.role === 'system');\r\n      const userMessages = messages.filter(msg => msg.role === 'user');\r\n      const lastUserMessage = userMessages.length > 0 ? userMessages[userMessages.length - 1] : null;\r\n\r\n      if (systemMessage) {\r\n        console.log(\"AIModelPlanner API Call: System Prompt:\", systemMessage.content);\r\n      } else {\r\n        console.warn(\"AIModelPlanner API Call: No system prompt found in messages.\");\r\n      }\r\n      if (lastUserMessage) {\r\n        console.log(\"AIModelPlanner API Call: Main User Prompt:\", lastUserMessage.content);\r\n      } else {\r\n        console.warn(\"AIModelPlanner API Call: No user prompt found in messages.\");\r\n      }\r\n    } else {\r\n      console.warn(\"AIModelPlanner API Call: Messages array is empty or undefined.\");\r\n    }\r\n  }\r\n\r\n  try {\r\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${AI_MODEL_PLANNER_OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: model,\r\n        messages: messages,\r\n        temperature: temperature\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => null);\r\n      console.error(\"AIModelPlanner - OpenAI API error response:\", errorData);\r\n      throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.choices[0].message.content;\r\n  } catch (error) {\r\n    console.error(\"Error calling OpenAI API in AIModelPlanner:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\n// Function to process a prompt for the AI Model Planner\r\nasync function processAIModelPlannerPromptInternal({ userInput, systemPrompt, model, temperature, history = [] }) {\r\n    const messages = [\r\n        { role: \"system\", content: systemPrompt }\r\n    ];\r\n\r\n    if (history.length > 0) {\r\n        history.forEach(message => {\r\n             if (Array.isArray(message) && message.length === 2) {\r\n                 messages.push({\r\n                     role: message[0] === \"human\" ? \"user\" : \"assistant\",\r\n                     content: message[1]\r\n                 });\r\n             } else {\r\n                 console.warn(\"AIModelPlanner: Skipping malformed history message:\", message);\r\n             }\r\n        });\r\n    }\r\n\r\n    messages.push({ role: \"user\", content: userInput });\r\n\r\n    try {\r\n        const responseContent = await callOpenAIForModelPlanner(messages, model, temperature);\r\n        // The prompt asks for JSON output in the final step.\r\n        // For intermediate steps, it might be text. We need to handle both.\r\n        try {\r\n            // Try to parse as JSON. If it works, and it's the final step format, return as object.\r\n            const parsedJson = JSON.parse(responseContent);\r\n            // If it's an object (likely the final JSON output), return it directly\r\n            if (typeof parsedJson === 'object' && parsedJson !== null) {\r\n                return parsedJson; \r\n            }\r\n            // If it parsed to something else (e.g. a string that happened to be valid JSON), treat as text.\r\n            return responseContent.split('\\n').filter(line => line.trim());\r\n\r\n        } catch (e) {\r\n            // If JSON parsing fails, it's likely a text response.\r\n            return responseContent.split('\\n').filter(line => line.trim());\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in processAIModelPlannerPrompt:\", error);\r\n        throw error; \r\n    }\r\n}\r\n\r\n// Handle initial conversation for AI Model Planner\r\nasync function handleInitialAIModelPlannerConversation(userInput) {\r\n    console.log(\"AIModelPlanner: Processing initial question:\", userInput);\r\n    \r\n    const systemPrompt = await getAIModelPlanningSystemPrompt();\r\n    if (!systemPrompt) {\r\n        throw new Error(\"Failed to load the AI Model Planning system prompt.\");\r\n    }\r\n\r\n    const model = \"gpt-4.1\"; // As specified\r\n    const temperature = 0.7; // A reasonable default\r\n\r\n    const response = await processAIModelPlannerPromptInternal({\r\n        userInput: userInput,\r\n        systemPrompt: systemPrompt,\r\n        model: model,\r\n        temperature: temperature,\r\n        history: [] \r\n    });\r\n    \r\n    // Update history\r\n    // The prompt implies the final output is JSON, but intermediate steps are text.\r\n    let assistantResponseContent = \"\";\r\n    if (typeof response === 'object') {\r\n        assistantResponseContent = JSON.stringify(response); // Store JSON as string in history\r\n    } else if (Array.isArray(response)) {\r\n        assistantResponseContent = response.join(\"\\n\");\r\n    } else {\r\n        assistantResponseContent = String(response);\r\n    }\r\n    \r\n    modelPlannerConversationHistory = [\r\n        [\"human\", userInput],\r\n        [\"assistant\", assistantResponseContent]\r\n    ];\r\n    \r\n    console.log(\"AIModelPlanner: Initial conversation processed.\");\r\n    return { response: response, history: modelPlannerConversationHistory };\r\n}\r\n\r\n// Handle follow-up conversation for AI Model Planner\r\nasync function handleFollowUpAIModelPlannerConversation(userInput, currentHistory) {\r\n    console.log(\"AIModelPlanner: Processing follow-up question:\", userInput);\r\n    \r\n    const systemPrompt = await getAIModelPlanningSystemPrompt();\r\n    if (!systemPrompt) {\r\n        throw new Error(\"Failed to load the AI Model Planning system prompt.\");\r\n    }\r\n\r\n    const model = \"gpt-4.1\"; // As specified\r\n    const temperature = 0.7; // A reasonable default\r\n\r\n    const response = await processAIModelPlannerPromptInternal({\r\n        userInput: userInput,\r\n        systemPrompt: systemPrompt,\r\n        model: model,\r\n        temperature: temperature,\r\n        history: currentHistory\r\n    });\r\n\r\n    let assistantResponseContent = \"\";\r\n    if (typeof response === 'object') {\r\n        assistantResponseContent = JSON.stringify(response);\r\n    } else if (Array.isArray(response)) {\r\n        assistantResponseContent = response.join(\"\\n\");\r\n    } else {\r\n        assistantResponseContent = String(response);\r\n    }\r\n\r\n    const updatedHistory = [\r\n        ...currentHistory,\r\n        [\"human\", userInput],\r\n        [\"assistant\", assistantResponseContent]\r\n    ];\r\n    modelPlannerConversationHistory = updatedHistory;\r\n    \r\n    console.log(\"AIModelPlanner: Follow-up conversation processed.\");\r\n    return { response: response, history: updatedHistory };\r\n}\r\n\r\n// Main conversation handler for AI Model Planner\r\nexport async function handleAIModelPlannerConversation(userInput) {\r\n    try {\r\n        const isFollowUp = modelPlannerConversationHistory.length > 0;\r\n        if (isFollowUp) {\r\n            return await handleFollowUpAIModelPlannerConversation(userInput, modelPlannerConversationHistory);\r\n        } else {\r\n            return await handleInitialAIModelPlannerConversation(userInput);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in AI Model Planner conversation handling:\", error);\r\n        return {\r\n            // Return response as an array of strings for text, or object for JSON\r\n            response: (typeof error.message === 'string') ? [error.message] : error.message,\r\n            history: modelPlannerConversationHistory\r\n        };\r\n    }\r\n}\r\n\r\n// Function to clear conversation history for the model planner\r\nexport function resetAIModelPlannerConversation() {\r\n    modelPlannerConversationHistory = [];\r\n    console.log(\"AIModelPlanner: Conversation history reset.\");\r\n}\r\n\r\n// UI Helper functions specific to AIModelPlanner controlling client chat\r\nfunction displayInClientChatLogPlanner(message, isUser) {\r\n    const chatLog = document.getElementById('chat-log-client');\r\n    const welcomeMessage = document.getElementById('welcome-message-client');\r\n    if (!chatLog) { console.error(\"AIModelPlanner: Client chat log element not found.\"); return; }\r\n    if (welcomeMessage) welcomeMessage.style.display = 'none';\r\n\r\n    const messageElement = document.createElement('div');\r\n    messageElement.className = `chat-message ${isUser ? 'user-message' : 'assistant-message'}`;\r\n    const contentElement = document.createElement('p');\r\n    contentElement.className = 'message-content';\r\n\r\n    if (typeof message === 'string') {\r\n        contentElement.textContent = message;\r\n    } else if (Array.isArray(message)) {\r\n        contentElement.textContent = message.join('\\n');\r\n    } else if (typeof message === 'object' && message !== null) {\r\n        contentElement.textContent = JSON.stringify(message, null, 2);\r\n        contentElement.style.whiteSpace = 'pre-wrap'; \r\n    } else {\r\n        contentElement.textContent = String(message);\r\n    }\r\n    messageElement.appendChild(contentElement);\r\n    chatLog.appendChild(messageElement);\r\n    chatLog.scrollTop = chatLog.scrollHeight;\r\n}\r\n\r\nfunction setClientLoadingStatePlanner(isLoading) {\r\n    const sendButton = document.getElementById('send-client');\r\n    const loadingAnimation = document.getElementById('loading-animation-client');\r\n    if (sendButton) sendButton.disabled = isLoading;\r\n    if (loadingAnimation) loadingAnimation.style.display = isLoading ? 'flex' : 'none';\r\n}\r\n\r\n// Core conversation logic, now private to this module\r\nasync function _handleAIModelPlannerConversation(userInput) {\r\n    const systemPrompt = await getAIModelPlanningSystemPrompt();\r\n    if (!systemPrompt) throw new Error(\"Failed to load AI Model Planning system prompt.\");\r\n\r\n    const isFollowUp = modelPlannerConversationHistory.length > 0;\r\n    const model = \"gpt-4.1\";\r\n    const temperature = 0.7;\r\n\r\n    const response = await processAIModelPlannerPromptInternal({\r\n        userInput: userInput,\r\n        systemPrompt: systemPrompt,\r\n        model: model,\r\n        temperature: temperature,\r\n        history: isFollowUp ? modelPlannerConversationHistory : []\r\n    });\r\n\r\n    let assistantResponseContent = \"\";\r\n    if (typeof response === 'object') assistantResponseContent = JSON.stringify(response);\r\n    else if (Array.isArray(response)) assistantResponseContent = response.join(\"\\n\");\r\n    else assistantResponseContent = String(response);\r\n\r\n    if (isFollowUp) {\r\n        modelPlannerConversationHistory.push([\"human\", userInput], [\"assistant\", assistantResponseContent]);\r\n    } else {\r\n        modelPlannerConversationHistory = [[\"human\", userInput], [\"assistant\", assistantResponseContent]];\r\n    }\r\n    return response; // Return the direct response (object or array)\r\n}\r\n\r\nasync function _executePlannerCodes(modelCodesString) {\r\n    console.log(`[AIModelPlanner._executePlannerCodes] Called.`);\r\n\r\n    // Substitute <BR> with <BR; labelRow=\"\"; row1 = \"||||||||||||\";>\r\n    if (modelCodesString && typeof modelCodesString === 'string') {\r\n        modelCodesString = modelCodesString.replace(/<BR>/g, '<BR; labelRow=\"\"; row1 = \"||||||||||||\";>');\r\n    }\r\n\r\n    if (!modelCodesString || modelCodesString.trim().length === 0) {\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] No model codes to process.\");\r\n        displayInClientChatLogPlanner(\"No code content generated to apply to workbook.\", false);\r\n        return;\r\n    }\r\n\r\n    let runResult = null;\r\n\r\n    try {\r\n        await Excel.run(async (context) => {\r\n            context.application.calculationMode = Excel.CalculationMode.manual;\r\n            await context.sync();\r\n            console.log(\"[AIModelPlanner._executePlannerCodes] Calculation mode set to manual.\");\r\n        });\r\n\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Validating ALL codes...\");\r\n        const validationErrors = await validateCodeStringsForRun(modelCodesString.split(/\\r?\\n/).filter(line => line.trim() !== ''));\r\n        if (validationErrors && validationErrors.length > 0) {\r\n            const errorMsg = \"Code validation failed for planner-generated codes:\\n\" + validationErrors.join(\"\\n\");\r\n            console.error(\"[AIModelPlanner._executePlannerCodes] Code validation failed:\", validationErrors);\r\n            throw new Error(errorMsg);\r\n        }\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Code validation successful.\");\r\n\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Inserting base sheets from Worksheets_4.3.25 v1.xlsx...\");\r\n        const worksheetsResponse = await fetch('https://localhost:3002/assets/Worksheets_4.3.25 v1.xlsx');\r\n        if (!worksheetsResponse.ok) throw new Error(`[AIModelPlanner._executePlannerCodes] Worksheets_4.3.25 v1.xlsx load failed: ${worksheetsResponse.statusText}`);\r\n        const wsArrayBuffer = await worksheetsResponse.arrayBuffer();\r\n        const wsUint8Array = new Uint8Array(wsArrayBuffer);\r\n        let wsBinaryString = '';\r\n        for (let i = 0; i < wsUint8Array.length; i += 8192) {\r\n            wsBinaryString += String.fromCharCode.apply(null, wsUint8Array.slice(i, Math.min(i + 8192, wsUint8Array.length)));\r\n        }\r\n        await handleInsertWorksheetsFromBase64(btoa(wsBinaryString));\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Base sheets (Worksheets_4.3.25 v1.xlsx) inserted.\");\r\n\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Inserting codes.xlsx...\");\r\n        const codesResponse = await fetch('https://localhost:3002/assets/codes.xlsx');\r\n        if (!codesResponse.ok) throw new Error(`[AIModelPlanner._executePlannerCodes] codes.xlsx load failed: ${codesResponse.statusText}`);\r\n        const codesArrayBuffer = await codesResponse.arrayBuffer();\r\n        const codesUint8Array = new Uint8Array(codesArrayBuffer);\r\n        let codesBinaryString = '';\r\n        for (let i = 0; i < codesUint8Array.length; i += 8192) {\r\n            codesBinaryString += String.fromCharCode.apply(null, codesUint8Array.slice(i, Math.min(i + 8192, codesUint8Array.length)));\r\n        }\r\n        await handleInsertWorksheetsFromBase64(btoa(codesBinaryString), [\"Codes\"]); \r\n        console.log(\"[AIModelPlanner._executePlannerCodes] codes.xlsx sheets inserted/updated.\");\r\n    \r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Populating collection...\");\r\n        const collection = populateCodeCollection(modelCodesString);\r\n        console.log(`[AIModelPlanner._executePlannerCodes] Collection populated with ${collection.length} code(s)`);\r\n\r\n        if (collection.length > 0) {\r\n            console.log(\"[AIModelPlanner._executePlannerCodes] Running codes...\");\r\n            runResult = await runCodes(collection);\r\n            console.log(\"[AIModelPlanner._executePlannerCodes] runCodes executed. Result:\", runResult);\r\n        } else {\r\n            console.log(\"[AIModelPlanner._executePlannerCodes] Collection is empty after population, skipping runCodes execution.\");\r\n            runResult = { assumptionTabs: [] };\r\n        }\r\n\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Starting post-processing steps...\");\r\n        if (runResult && runResult.assumptionTabs && runResult.assumptionTabs.length > 0) {\r\n            console.log(\"[AIModelPlanner._executePlannerCodes] Processing assumption tabs...\");\r\n            await processAssumptionTabs(runResult.assumptionTabs);\r\n        } else {\r\n            console.log(\"[AIModelPlanner._executePlannerCodes] No assumption tabs to process from runResult.\");\r\n        }\r\n\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Hiding specific columns and navigating...\");\r\n        await hideColumnsAndNavigate(runResult?.assumptionTabs || []);\r\n\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Deleting Codes sheet...\");\r\n        await Excel.run(async (context) => {\r\n            try {\r\n                context.workbook.worksheets.getItem(\"Codes\").delete();\r\n                console.log(\"[AIModelPlanner._executePlannerCodes] Codes sheet deleted.\");\r\n            } catch (e) {\r\n                if (e instanceof OfficeExtension.Error && e.code === Excel.ErrorCodes.itemNotFound) {\r\n                    console.warn(\"[AIModelPlanner._executePlannerCodes] Codes sheet not found during cleanup, skipping deletion.\");\r\n                } else { \r\n                    console.error(\"[AIModelPlanner._executePlannerCodes] Error deleting Codes sheet during cleanup:\", e);\r\n                }\r\n            }\r\n            await context.sync();\r\n        }).catch(error => { \r\n            console.error(\"[AIModelPlanner._executePlannerCodes] Error during Codes sheet cleanup sync:\", error);\r\n        });\r\n\r\n        displayInClientChatLogPlanner(\"Workbook updated with the generated model structure.\", false);\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Successfully completed.\");\r\n\r\n    } catch (error) {\r\n        console.error(\"[AIModelPlanner._executePlannerCodes] Error during processing:\", error);\r\n        displayInClientChatLogPlanner(`Error applying model structure: ${error.message}`, false);\r\n        // No re-throw here, error is displayed in chat by this function's caller (plannerHandleSend)\r\n    } finally {\r\n        try {\r\n            await Excel.run(async (context) => {\r\n                context.application.calculationMode = Excel.CalculationMode.automatic;\r\n                await context.sync();\r\n                console.log(\"[AIModelPlanner._executePlannerCodes] Calculation mode set to automatic.\");\r\n            });\r\n        } catch (finalError) {\r\n            console.error(\"[AIModelPlanner._executePlannerCodes] Error setting calculation mode to automatic:\", finalError);\r\n        }\r\n    }\r\n}\r\n\r\nexport async function plannerHandleSend() {\r\n    const userInputElement = document.getElementById('user-input-client');\r\n    if (!userInputElement) { console.error(\"AIModelPlanner: Client user input element not found.\"); return; }\r\n    const userInput = userInputElement.value.trim();\r\n\r\n    if (!userInput) {\r\n        alert('Please enter a request (Client Mode)');\r\n        return;\r\n    }\r\n\r\n    displayInClientChatLogPlanner(userInput, true);\r\n    userInputElement.value = '';\r\n    setClientLoadingStatePlanner(true);\r\n\r\n    try {\r\n        const resultResponse = await _handleAIModelPlannerConversation(userInput);\r\n        lastPlannerResponseForClient = resultResponse; \r\n\r\n        let jsonObjectToProcess = null;\r\n\r\n        if (typeof resultResponse === 'string') {\r\n            try {\r\n                const parsedResponse = JSON.parse(resultResponse);\r\n                if (typeof parsedResponse === 'object' && parsedResponse !== null && !Array.isArray(parsedResponse)) {\r\n                    jsonObjectToProcess = parsedResponse;\r\n                    console.log(\"test passed (JSON string successfully parsed to an object for tab processing)\");\r\n                }\r\n            } catch (e) {\r\n                // Not a JSON string, or parsing did not result in a suitable object\r\n            }\r\n        } else if (typeof resultResponse === 'object' && resultResponse !== null && !Array.isArray(resultResponse)) {\r\n            jsonObjectToProcess = resultResponse;\r\n            console.log(\"test passed (response is already a suitable JSON object for tab processing)\");\r\n        }\r\n\r\n        if (jsonObjectToProcess) {\r\n            let ModelCodes = \"\"; \r\n            console.log(\"AIModelPlanner: Starting to process JSON object for ModelCodes generation.\");\r\n            displayInClientChatLogPlanner(\"Generating model structure from AI response...\", false);\r\n\r\n            for (const tabLabel in jsonObjectToProcess) {\r\n                if (Object.prototype.hasOwnProperty.call(jsonObjectToProcess, tabLabel)) {\r\n                    const lowerCaseTabLabel = tabLabel.toLowerCase();\r\n                    if (lowerCaseTabLabel === \"misc.\" || lowerCaseTabLabel === \"financials\" || lowerCaseTabLabel === \"misc. tab\" || lowerCaseTabLabel === \"financials tab\") {\r\n                        console.log(`AIModelPlanner: Skipping excluded tab - \"${tabLabel}\"`);\r\n                        continue; \r\n                    }\r\n\r\n                    ModelCodes += `<TAB; label1=\"${tabLabel}\";>\\n`; \r\n\r\n                    const tabDescription = jsonObjectToProcess[tabLabel];\r\n                    let tabDescriptionString = \"\";\r\n\r\n                    if (typeof tabDescription === 'string') {\r\n                        tabDescriptionString = tabDescription;\r\n                    } else if (typeof tabDescription === 'object' && tabDescription !== null) {\r\n                        tabDescriptionString = JSON.stringify(tabDescription);\r\n                    } else {\r\n                        tabDescriptionString = String(tabDescription);\r\n                    }\r\n                    \r\n                    if (tabDescriptionString.trim() !== \"\") {\r\n                        console.log(`AIModelPlanner: Submitting description for tab \"${tabLabel}\" to getAICallsProcessedResponse...`);\r\n                        displayInClientChatLogPlanner(`Processing details for tab: ${tabLabel}...`, false);\r\n                        try {\r\n                            const aiResponseForTabArray = await getAICallsProcessedResponse(tabDescriptionString);\r\n                            \r\n                            let formattedAiResponse = \"\";\r\n                            if (typeof aiResponseForTabArray === 'object' && aiResponseForTabArray !== null && !Array.isArray(aiResponseForTabArray)) {\r\n                                formattedAiResponse = JSON.stringify(aiResponseForTabArray, null, 2); \r\n                            } else if (Array.isArray(aiResponseForTabArray)) {\r\n                                formattedAiResponse = aiResponseForTabArray.join('\\n');\r\n                            } else {\r\n                                formattedAiResponse = String(aiResponseForTabArray);\r\n                            }\r\n                            \r\n                            ModelCodes += formattedAiResponse + \"\\n\\n\"; \r\n                            console.log(`AIModelPlanner: Received and appended AI response for tab \"${tabLabel}\"`);\r\n                            displayInClientChatLogPlanner(`Completed details for tab: ${tabLabel}.`, false);\r\n                        } catch (tabError) {\r\n                            console.error(`AIModelPlanner: Error processing description for tab \"${tabLabel}\" via getAICallsProcessedResponse:`, tabError);\r\n                            ModelCodes += `// Error processing tab ${tabLabel}: ${tabError.message}\\n\\n`;\r\n                            displayInClientChatLogPlanner(`Error processing details for tab ${tabLabel}: ${tabError.message}`, false);\r\n                        }\r\n                    } else {\r\n                        ModelCodes += `// No description provided for tab ${tabLabel}\\n\\n`;\r\n                    }\r\n                }\r\n            }\r\n            console.log(\"Generated ModelCodes (final):\\n\" + ModelCodes); \r\n            \r\n            if (ModelCodes.trim().length > 0) {\r\n                displayInClientChatLogPlanner(\"Model structure generated. Now applying to workbook...\", false);\r\n                await _executePlannerCodes(ModelCodes); // Call the new private function\r\n            } else {\r\n                console.log(\"AIModelPlanner: ModelCodes string is empty. Skipping _executePlannerCodes call.\");\r\n                displayInClientChatLogPlanner(\"No code content generated to apply to workbook.\", false);\r\n            }\r\n        } else {\r\n            displayInClientChatLogPlanner(resultResponse, false);\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in AIModelPlanner conversation:\", error);\r\n        displayInClientChatLogPlanner(`Error: ${error.message}`, false);\r\n    } finally {\r\n        setClientLoadingStatePlanner(false);\r\n    }\r\n}\r\n\r\nexport function plannerHandleReset() {\r\n    const chatLog = document.getElementById('chat-log-client');\r\n    const welcomeMessage = document.getElementById('welcome-message-client');\r\n    if (chatLog) {\r\n        chatLog.innerHTML = '';\r\n        if (welcomeMessage) {\r\n            const newWelcome = document.createElement('div');\r\n            newWelcome.id = 'welcome-message-client';\r\n            newWelcome.className = 'welcome-message';\r\n            newWelcome.innerHTML = '<h1>Ask me anything (Client Mode)</h1>';\r\n            chatLog.appendChild(newWelcome);\r\n        }\r\n    }\r\n    modelPlannerConversationHistory = [];\r\n    lastPlannerResponseForClient = null;\r\n    const userInputElement = document.getElementById('user-input-client');\r\n    if (userInputElement) userInputElement.value = '';\r\n    console.log(\"AIModelPlanner: Client chat and history reset.\");\r\n}\r\n\r\nexport function plannerHandleWriteToExcel() {\r\n    if (!lastPlannerResponseForClient) {\r\n        displayInClientChatLogPlanner(\"No response to write to Excel.\", false);\r\n        return;\r\n    }\r\n    let contentToWrite = \"\";\r\n    if (typeof lastPlannerResponseForClient === 'object') contentToWrite = JSON.stringify(lastPlannerResponseForClient, null, 2);\r\n    else if (Array.isArray(lastPlannerResponseForClient)) contentToWrite = lastPlannerResponseForClient.join(\"\\n\");\r\n    else contentToWrite = String(lastPlannerResponseForClient);\r\n    \r\n    console.log(\"AIModelPlanner Client Mode - Write to Excel (Placeholder):\\n\", contentToWrite);\r\n    displayInClientChatLogPlanner(\"Write to Excel (Placeholder): Response logged to console. Actual Excel writing depends on format.\", false);\r\n    // Actual Excel.run call would be complex here, especially for JSON, and is out of scope of this file's direct responsibility as per prompt.\r\n}\r\n\r\nexport function plannerHandleInsertToEditor() {\r\n    if (!lastPlannerResponseForClient) {\r\n        displayInClientChatLogPlanner(\"No response to insert into editor.\", false);\r\n        return;\r\n    }\r\n    let contentToInsert = \"\";\r\n    if (typeof lastPlannerResponseForClient === 'object') contentToInsert = JSON.stringify(lastPlannerResponseForClient, null, 2);\r\n    else if (Array.isArray(lastPlannerResponseForClient)) contentToInsert = lastPlannerResponseForClient.join(\"\\n\");\r\n    else contentToInsert = String(lastPlannerResponseForClient);\r\n\r\n    console.log(\"AIModelPlanner Client Mode - Insert to Editor (Placeholder):\\n\", contentToInsert);\r\n    displayInClientChatLogPlanner(\"Insert to Editor (Placeholder): Response logged to console. Actual editor insertion depends on editor availability in client mode.\", false);\r\n    // Actual editor insertion logic is out of scope here.\r\n}\r\n\r\n\r\n","// This file should be added to .gitignore so it's not committed to version control\r\n// Copy the contents to config.js.example with placeholders for other developers\r\n\r\n// API Keys configuration\r\nexport const API_KEYS = {\r\n  OPENAI_API_KEY: process.env.OPENAI_API_KEY,\r\n  PINECONE_API_KEY: process.env.PINECONE_API_KEY\r\n};\r\n\r\n// Note: This file will be used by the application to load API keys\r\n// Use the initializeAPIKeys function in taskpane.js to access these values ","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global console, document, Excel, Office */\r\n\r\n// Remove imports from Langchain to avoid ESM module issues\r\n// Using direct fetch calls instead\r\n// Add this test function\r\nimport { validateCodeStrings } from './Validation.js';\r\n// Import the spreadsheet utilities\r\n// import { handleInsertWorksheetsFromBase64 } from './SpreadsheetUtils.js';\r\n// Import code collection functions\r\nimport { populateCodeCollection, exportCodeCollectionToText, runCodes, processAssumptionTabs, collapseGroupingsAndNavigateToFinancials, hideColumnsAndNavigate, handleInsertWorksheetsFromBase64 } from './CodeCollection.js';\r\n// >>> ADDED: Import the new validation function\r\nimport { validateCodeStringsForRun } from './Validation.js';\r\n// >>> ADDED: Import the tab string generator function\r\nimport { generateTabString } from './IndexWorksheet.js';\r\n// >>> ADDED: Import AIModelPlanner functions\r\nimport { handleAIModelPlannerConversation, resetAIModelPlannerConversation, setAIModelPlannerOpenApiKey, plannerHandleSend, plannerHandleReset, plannerHandleWriteToExcel, plannerHandleInsertToEditor } from './AIModelPlanner.js';\r\n// Add the codeStrings variable with the specified content\r\n// REMOVED hardcoded codeStrings variable\r\n\r\nimport { API_KEYS as configApiKeys } from '../../config.js'; // Assuming config.js exports API_KEYS\r\n\r\n// Mock fs module for browser environment (if needed within AIcalls)\r\nconst fs = {\r\n    writeFileSync: (path, content) => {\r\n        console.log(`Mock writeFileSync called with path: ${path}`);\r\n        // In browser, we'll just log the content instead of writing to file\r\n        console.log(`Content would be written to ${path}:`, content.substring(0, 100) + '...');\r\n    }\r\n};\r\n\r\n//*********Setup*********\r\n// Start the timer\r\nconst startTime = performance.now();\r\n\r\n//Debugging Toggle\r\nconst DEBUG = true;\r\n\r\n// Variable to store loaded code strings\r\nlet loadedCodeStrings = \"\";\r\n\r\n// Variable to store the parsed code database\r\nlet codeDatabase = [];\r\n\r\n// >>> ADDED: Variables for search/replace state <<<\r\n// >>> REMOVED: Main search/replace state variables <<<\r\n// let lastSearchTerm = '';\r\n// let lastSearchIndex = -1; // Tracks the starting index of the last found match\r\n// let searchResultIndices = []; // Stores indices of all matches for Replace All\r\n// let currentHighlightIndex = -1; // Index within searchResultIndices for Find Next\r\n\r\n// API keys storage - initialized by initializeAPIKeys\r\nlet INTERNAL_API_KEYS = {\r\n  OPENAI_API_KEY: \"\",\r\n  PINECONE_API_KEY: \"\"\r\n};\r\n\r\n// Function to set API keys from outside this module\r\nexport function setAPIKeys(keys) {\r\n  if (keys && typeof keys === 'object') {\r\n    if (keys.OPENAI_API_KEY) {\r\n      INTERNAL_API_KEYS.OPENAI_API_KEY = keys.OPENAI_API_KEY;\r\n      console.log(\"AIcalls.js: OpenAI API key set externally\");\r\n    }\r\n    if (keys.PINECONE_API_KEY) {\r\n      INTERNAL_API_KEYS.PINECONE_API_KEY = keys.PINECONE_API_KEY;\r\n      console.log(\"AIcalls.js: Pinecone API key set externally\");\r\n    }\r\n  }\r\n}\r\n\r\nconst srcPaths = [\r\n  'https://localhost:3002/src/prompts/Encoder_System.txt',\r\n  'https://localhost:3002/src/prompts/Encoder_Main.txt',\r\n  'https://localhost:3002/src/prompts/Followup_System.txt',\r\n  'https://localhost:3002/src/prompts/Structure_System.txt',\r\n  'https://localhost:3002/src/prompts/Validation_System.txt',\r\n  'https://localhost:3002/src/prompts/Validation_Main.txt'\r\n];\r\n\r\n// Function to load the code string database\r\nasync function loadCodeDatabase() {\r\n  try {\r\n    console.log(\"Loading code database...\");\r\n    const response = await fetch('https://localhost:3002/assets/codestringDB.txt');\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to load codestringDB.txt: ${response.statusText}`);\r\n    }\r\n    const text = await response.text();\r\n    const lines = text.split(/[\\r\\n]+/).filter(line => line.trim() !== ''); // Split by lines and remove empty ones\r\n\r\n    codeDatabase = lines.map(line => {\r\n      const parts = line.split('\\t'); // Assuming tab-separated\r\n      if (parts.length >= 2) {\r\n        return { name: parts[0].trim(), code: parts[1].trim() };\r\n      }\r\n      console.warn(`Skipping malformed line in codestringDB.txt: ${line}`);\r\n      return null;\r\n    }).filter(item => item !== null); // Filter out null entries from malformed lines\r\n\r\n    console.log(`Code database loaded successfully with ${codeDatabase.length} entries.`);\r\n    if (DEBUG && codeDatabase.length > 0) {\r\n        console.log(\"First few code database entries:\", codeDatabase.slice(0, 5));\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error(\"Error loading code database:\", error);\r\n    showError(\"Failed to load code database. Search functionality will be unavailable.\");\r\n    codeDatabase = []; // Ensure it's empty on error\r\n  }\r\n}\r\n\r\n// Function to load API keys from a config file\r\n// This allows the keys to be stored in a separate file that's .gitignored\r\nexport async function initializeAPIKeys() {\r\n  try {\r\n    console.log(\"Initializing API keys from AIcalls.js...\");\r\n\r\n    // Use keys from imported config.js if available\r\n    if (configApiKeys?.OPENAI_API_KEY) {\r\n        INTERNAL_API_KEYS.OPENAI_API_KEY = configApiKeys.OPENAI_API_KEY;\r\n        setAIModelPlannerOpenApiKey(configApiKeys.OPENAI_API_KEY);\r\n        console.log(\"OpenAI API key loaded from config.js and set for AI Model Planner\");\r\n    } else {\r\n         console.warn(\"OpenAI API key not found in config.js.\");\r\n    }\r\n\r\n    if (configApiKeys?.PINECONE_API_KEY) {\r\n        INTERNAL_API_KEYS.PINECONE_API_KEY = configApiKeys.PINECONE_API_KEY;\r\n        console.log(\"Pinecone API key loaded from config.js\");\r\n    } else {\r\n         console.warn(\"Pinecone API key not found in config.js.\");\r\n    }\r\n\r\n    // Fallback: try fetching from the old location if config.js didn't provide them\r\n    if (!INTERNAL_API_KEYS.OPENAI_API_KEY || !INTERNAL_API_KEYS.PINECONE_API_KEY) {\r\n        console.log(\"Attempting fallback API key loading from https://localhost:3002/config.js\");\r\n        try {\r\n            const configResponse = await fetch('https://localhost:3002/config.js');\r\n            if (configResponse.ok) {\r\n                const configText = await configResponse.text();\r\n                // Extract keys from the config text using regex\r\n                const openaiKeyMatch = configText.match(/OPENAI_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n                const pineconeKeyMatch = configText.match(/PINECONE_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n\r\n                if (!INTERNAL_API_KEYS.OPENAI_API_KEY && openaiKeyMatch && openaiKeyMatch[1]) {\r\n                    INTERNAL_API_KEYS.OPENAI_API_KEY = openaiKeyMatch[1];\r\n                    setAIModelPlannerOpenApiKey(openaiKeyMatch[1]);\r\n                    console.log(\"OpenAI API key loaded via fetch fallback and set for AI Model Planner.\");\r\n                }\r\n\r\n                if (!INTERNAL_API_KEYS.PINECONE_API_KEY && pineconeKeyMatch && pineconeKeyMatch[1]) {\r\n                    INTERNAL_API_KEYS.PINECONE_API_KEY = pineconeKeyMatch[1];\r\n                    console.log(\"Pinecone API key loaded via fetch fallback.\");\r\n                }\r\n            } else {\r\n                 console.warn(\"Fallback fetch for config.js failed or returned non-OK status.\");\r\n            }\r\n        } catch (error) {\r\n            console.warn(\"Could not load config.js via fetch fallback:\", error);\r\n        }\r\n    }\r\n    \r\n    // Add debug logging with secure masking of keys\r\n    console.log(\"Loaded API Keys (AIcalls.js):\");\r\n    console.log(\"  OPENAI_API_KEY:\", INTERNAL_API_KEYS.OPENAI_API_KEY ?\r\n      `${INTERNAL_API_KEYS.OPENAI_API_KEY.substring(0, 3)}...${INTERNAL_API_KEYS.OPENAI_API_KEY.substring(INTERNAL_API_KEYS.OPENAI_API_KEY.length - 3)}` :\r\n      \"Not found\");\r\n    console.log(\"  PINECONE_API_KEY:\", INTERNAL_API_KEYS.PINECONE_API_KEY ?\r\n      `${INTERNAL_API_KEYS.PINECONE_API_KEY.substring(0, 3)}...${INTERNAL_API_KEYS.PINECONE_API_KEY.substring(INTERNAL_API_KEYS.PINECONE_API_KEY.length - 3)}` :\r\n      \"Not found\");\r\n\r\n    const keysFound = !!(INTERNAL_API_KEYS.OPENAI_API_KEY && INTERNAL_API_KEYS.PINECONE_API_KEY);\r\n    console.log(\"API Keys Initialized:\", keysFound);\r\n    // Return a copy to prevent external modification of the internal state\r\n    return { ...INTERNAL_API_KEYS };\r\n\r\n  } catch (error) {\r\n    console.error(\"Error initializing API keys:\", error);\r\n    // Return empty keys on error\r\n    return { OPENAI_API_KEY: \"\", PINECONE_API_KEY: \"\" };\r\n  }\r\n}\r\n\r\n// Update Pinecone configuration to handle multiple indexes\r\nconst PINECONE_ENVIRONMENT = \"gcp-starter\";\r\n\r\n// Define configurations for each index\r\nconst PINECONE_INDEXES = {\r\n    codes: {\r\n        name: \"codes\",\r\n        apiEndpoint: \"https://codes-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call2trainingdata: {\r\n        name: \"call2trainingdata\",\r\n        apiEndpoint: \"https://call2trainingdata-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call2context: {\r\n        name: \"call2context\",\r\n        apiEndpoint: \"https://call2context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call1context: {\r\n        name: \"call1context\",\r\n        apiEndpoint: \"https://call1context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    }\r\n};\r\n\r\n//Models\r\nconst GPT4O_MINI = \"gpt-4o-mini\"\r\nconst GPT4O = \"gpt-4o\"\r\nconst GPT41 = \"gpt-4.1\"\r\nconst GPT45_TURBO = \"gpt-4.5-turbo\"\r\nconst GPT35_TURBO = \"gpt-3.5-turbo\"\r\nconst GPT4_TURBO = \"gpt-4-turbo\"\r\nconst GPTFT1 =  \"ft:gpt-3.5-turbo-1106:orsi-advisors:cohcolumnsgpt35:B6Wlrql1\"\r\n\r\n// Conversation history storage\r\nlet conversationHistory = [];\r\n\r\n// Functions to save and load conversation history (use localStorage directly)\r\nexport function saveConversationHistory(history) {\r\n    try {\r\n        localStorage.setItem('conversationHistory', JSON.stringify(history));\r\n        if (DEBUG) console.log('Conversation history saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving conversation history:\", error);\r\n    }\r\n}\r\n\r\nexport function loadConversationHistory() {\r\n    try {\r\n        const history = localStorage.getItem('conversationHistory');\r\n        if (history) {\r\n            if (DEBUG) console.log('Loaded conversation history from localStorage');\r\n            const parsedHistory = JSON.parse(history);\r\n\r\n            if (!Array.isArray(parsedHistory)) {\r\n                console.error(\"Invalid history format, expected array\");\r\n                return [];\r\n            }\r\n\r\n            return parsedHistory;\r\n        }\r\n        if (DEBUG) console.log(\"No conversation history found in localStorage\");\r\n        return [];\r\n    } catch (error) {\r\n        console.error(\"Error loading conversation history:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\n// Direct OpenAI API call function\r\nexport async function callOpenAI(messages, model = GPT41, temperature = 0.7) {\r\n  try {\r\n    console.log(`Calling OpenAI API with model: ${model}`);\r\n\r\n    if (!INTERNAL_API_KEYS.OPENAI_API_KEY) {\r\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\r\n    }\r\n\r\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${INTERNAL_API_KEYS.OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: model,\r\n        messages: messages,\r\n        temperature: temperature\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => null);\r\n      console.error(\"OpenAI API error response:\", errorData);\r\n      throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log(\"OpenAI API response received\");\r\n\r\n    return data.choices[0].message.content;\r\n  } catch (error) {\r\n    console.error(\"Error calling OpenAI API:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// OpenAI embeddings function\r\nexport async function createEmbedding(text) {\r\n  try {\r\n    console.log(\"Creating embedding for text\");\r\n\r\n    if (!INTERNAL_API_KEYS.OPENAI_API_KEY) {\r\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\r\n    }\r\n\r\n    const response = await fetch('https://api.openai.com/v1/embeddings', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${INTERNAL_API_KEYS.OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: \"text-embedding-3-large\",\r\n        input: text\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => null);\r\n      console.error(\"OpenAI Embeddings API error response:\", errorData);\r\n      throw new Error(`OpenAI Embeddings API error: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log(\"OpenAI Embeddings API response received\");\r\n\r\n    return data.data[0].embedding;\r\n  } catch (error) {\r\n    console.error(\"Error creating embedding:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to load prompts from files\r\nexport async function loadPromptFromFile(promptKey) {\r\n  try {\r\n    const paths = [\r\n      `https://localhost:3002/prompts/${promptKey}.txt`,\r\n      ...srcPaths // Add fallback paths if needed\r\n    ];\r\n\r\n    let response = null;\r\n    for (const path of paths) {\r\n      if (DEBUG) console.log(`Attempting to load prompt from: ${path}`);\r\n      try {\r\n        response = await fetch(path);\r\n        if (response.ok) {\r\n          if (DEBUG) console.log(`Successfully loaded prompt from: ${path}`);\r\n          break;\r\n        }\r\n      } catch (err) {\r\n        if (DEBUG) console.log(`Path ${path} failed: ${err.message}`);\r\n      }\r\n    }\r\n\r\n    if (!response || !response.ok) {\r\n      throw new Error(`Failed to load prompt: ${promptKey} (Could not find file in any location)`);\r\n    }\r\n\r\n    return await response.text();\r\n  } catch (error) {\r\n    console.error(`Error loading prompt ${promptKey}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to get system prompt from file\r\nexport async function getSystemPromptFromFile(promptKey) {\r\n  try {\r\n    const prompt = await loadPromptFromFile(promptKey);\r\n    if (!prompt) {\r\n      throw new Error(`Prompt key \"${promptKey}\" not found`);\r\n    }\r\n    return prompt;\r\n  } catch (error) {\r\n    console.error(`Error getting prompt for key ${promptKey}:`, error);\r\n    return null; // Return null or handle error as appropriate\r\n  }\r\n};\r\n\r\n// Function: OpenAI Call with conversation history support\r\nexport async function processPrompt({ userInput, systemPrompt, model, temperature, history = [] }) {\r\n    if (DEBUG) console.log(\"API Key being used for processPrompt:\", INTERNAL_API_KEYS.OPENAI_API_KEY ? `${INTERNAL_API_KEYS.OPENAI_API_KEY.substring(0, 3)}...` : \"None\");\r\n\r\n    const messages = [\r\n        { role: \"system\", content: systemPrompt }\r\n    ];\r\n\r\n    if (history.length > 0) {\r\n        history.forEach(message => {\r\n            // Ensure message is in the correct format [role, content]\r\n             if (Array.isArray(message) && message.length === 2) {\r\n                 messages.push({\r\n                     role: message[0] === \"human\" ? \"user\" : \"assistant\",\r\n                     content: message[1]\r\n                 });\r\n             } else {\r\n                 console.warn(\"Skipping malformed history message:\", message);\r\n             }\r\n        });\r\n    }\r\n\r\n    messages.push({ role: \"user\", content: userInput });\r\n\r\n    try {\r\n        const responseContent = await callOpenAI(messages, model, temperature);\r\n\r\n        // Try to parse JSON response if applicable, otherwise split lines\r\n        try {\r\n            const parsed = JSON.parse(responseContent);\r\n            // Expecting an array of strings based on original code\r\n            if (Array.isArray(parsed)) {\r\n                return parsed;\r\n            }\r\n            // If not array, maybe single string JSON? Unlikely based on usage.\r\n             console.warn(\"Parsed JSON response, but it was not an array:\", parsed);\r\n             // Fallback to splitting the original string\r\n             return responseContent.split('\\n').filter(line => line.trim());\r\n        } catch (e) {\r\n            return responseContent.split('\\n').filter(line => line.trim());\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in processPrompt:\", error);\r\n        throw error; // Re-throw to be caught by caller\r\n    }\r\n}\r\n\r\n// Function: Structure database queries\r\nexport async function structureDatabasequeries(clientprompt) {\r\n  if (DEBUG) console.log(\"Processing structured database queries:\", clientprompt);\r\n\r\n  try {\r\n      if (DEBUG) console.log(\"Getting structure system prompt\");\r\n      const systemStructurePrompt = await getSystemPromptFromFile('Structure_System');\r\n\r\n      if (!systemStructurePrompt) {\r\n          throw new Error(\"Failed to load structure system prompt\");\r\n      }\r\n\r\n      if (DEBUG) console.log(\"Got system prompt, processing query strings\");\r\n      // processPrompt expects history, pass empty array if none applicable here\r\n      const queryStrings = await processPrompt({\r\n          userInput: clientprompt,\r\n          systemPrompt: systemStructurePrompt,\r\n          model: GPT41,\r\n          temperature: 1,\r\n          history: [] // Explicitly empty\r\n      });\r\n\r\n      if (!queryStrings || !Array.isArray(queryStrings)) {\r\n          console.error(\"Invalid query strings received:\", queryStrings);\r\n          throw new Error(\"Failed to get valid query strings from structuring prompt\");\r\n      }\r\n\r\n      if (DEBUG) console.log(\"Got query strings:\", queryStrings);\r\n      const results = [];\r\n\r\n      for (const queryString of queryStrings) {\r\n          if (DEBUG) console.log(\"Processing query:\", queryString);\r\n          try {\r\n              // Make sure queryVectorDB uses the internal API keys\r\n              const queryResults = {\r\n                  query: queryString,\r\n                  trainingData: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call2trainingdata',\r\n                      numResults: 3\r\n                  }),\r\n                  call2Context: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call2context',\r\n                      numResults: 5\r\n                  }),\r\n                  call1Context: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call1context',\r\n                      numResults: 5\r\n                  }),\r\n                  codeOptions: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      indexName: 'codes',\r\n                      numResults: 3,\r\n                      similarityThreshold: .1\r\n                  })\r\n              };\r\n\r\n              results.push(queryResults);\r\n              if (DEBUG) console.log(\"Successfully processed query:\", queryString);\r\n          } catch (error) {\r\n              console.error(`Error processing query \"${queryString}\":`, error);\r\n              // Continue with next query instead of failing completely\r\n          }\r\n      }\r\n\r\n      if (results.length === 0 && queryStrings.length > 0) {\r\n           console.warn(\"All structured queries failed to produce results.\");\r\n           // Decide whether to throw an error or return empty results\r\n           // Throwing error based on original logic\r\n           throw new Error(\"No valid results were obtained from any structured queries\");\r\n      } else if (queryStrings.length === 0) {\r\n           console.warn(\"Structuring prompt returned no query strings.\");\r\n           // Throwing error as subsequent steps likely depend on results\r\n           throw new Error(\"Structuring prompt did not return any queries to process.\");\r\n      }\r\n\r\n      return results;\r\n  } catch (error) {\r\n      console.error(\"Error in structureDatabasequeries:\", error);\r\n      throw error; // Re-throw\r\n  }\r\n}\r\n\r\n// Function: Query Vector Database using Pinecone REST API\r\nexport async function queryVectorDB({ queryPrompt, indexName = 'codes', numResults = 10, similarityThreshold = null }) {\r\n    try {\r\n        if (DEBUG) console.log(\"Generating embeddings for query:\", queryPrompt);\r\n\r\n        // Ensure API key exists before proceeding\r\n        if (!INTERNAL_API_KEYS.PINECONE_API_KEY) {\r\n            throw new Error(\"Pinecone API key not found. Please check your API keys.\");\r\n        }\r\n\r\n        const embedding = await createEmbedding(queryPrompt); // Uses OpenAI key internally\r\n        if (DEBUG) console.log(\"Embeddings generated successfully\");\r\n\r\n        const indexConfig = PINECONE_INDEXES[indexName];\r\n        if (!indexConfig) {\r\n            throw new Error(`Invalid index name provided: ${indexName}`);\r\n        }\r\n\r\n        const url = `${indexConfig.apiEndpoint}/query`;\r\n        if (DEBUG) console.log(\"Making Pinecone API request to:\", url);\r\n\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'api-key': INTERNAL_API_KEYS.PINECONE_API_KEY,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                vector: embedding,\r\n                topK: numResults,\r\n                includeMetadata: true,\r\n                namespace: \"ns1\" // Assuming namespace is constant\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorText = await response.text().catch(() => \"Could not read error response body\");\r\n            console.error(\"Pinecone API error details:\", {\r\n                status: response.status,\r\n                statusText: response.statusText,\r\n                error: errorText\r\n            });\r\n            throw new Error(`Pinecone API error: ${response.status} ${response.statusText} - ${errorText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        if (DEBUG) console.log(\"Pinecone API response received\");\r\n\r\n        let matches = data.matches || [];\r\n\r\n        if (similarityThreshold !== null) {\r\n            matches = matches.filter(match => match.score >= similarityThreshold);\r\n        }\r\n\r\n        // Apply numResults limit *after* threshold filtering\r\n        matches = matches.slice(0, numResults);\r\n\r\n        // Extract text using the helper function\r\n        const cleanMatches = matches.map(match => extractTextFromJson(match)).filter(text => text !== \"\");\r\n\r\n        if (DEBUG) {\r\n            console.log(`Found ${cleanMatches.length} matches (after threshold/limit/extraction):`);\r\n            cleanMatches.forEach((text, i) => console.log(`  ${i + 1}: ${text.substring(0, 100)}...`));\r\n        }\r\n\r\n        return cleanMatches;\r\n\r\n    } catch (error) {\r\n        console.error(`Error during vector database query for index \"${indexName}\":`, error);\r\n        throw error; // Re-throw\r\n    }\r\n}\r\n\r\n\r\n// Helper function to extract text from Pinecone match JSON\r\nfunction extractTextFromJson(jsonInput) {\r\n   try {\r\n       // Input might already be an object if response was parsed\r\n       const jsonData = typeof jsonInput === 'string' ? JSON.parse(jsonInput) : jsonInput;\r\n\r\n       // Check common structures\r\n       if (jsonData?.metadata?.text) {\r\n           return jsonData.metadata.text;\r\n       }\r\n       // Fallback for older structures or direct text? (Less likely based on usage)\r\n       if (typeof jsonData?.text === 'string') {\r\n           return jsonData.text;\r\n       }\r\n\r\n       // Handle array case (though query response is usually object with 'matches')\r\n       if (Array.isArray(jsonData)) {\r\n           for (const item of jsonData) {\r\n               if (item?.metadata?.text) {\r\n                   return item.metadata.text; // Return first found\r\n               }\r\n           }\r\n       }\r\n\r\n       // If no text found\r\n       console.warn(\"Could not find 'text' field in metadata for match:\", JSON.stringify(jsonInput).substring(0, 100));\r\n       return \"\"; // Return empty string if text cannot be extracted\r\n\r\n   } catch (error) {\r\n       console.error(`Error processing JSON for text extraction: ${error.message}`);\r\n       // Log the problematic input for debugging\r\n       console.error(\"Input causing error:\", jsonInput);\r\n       return \"\"; // Return empty string on error\r\n   }\r\n}\r\n\r\n\r\n// Helper function to format JSON for prompts (handle potential errors)\r\nexport function safeJsonForPrompt(obj, readable = true) {\r\n    try {\r\n        if (!readable) {\r\n            // Simple stringify, remove potential noise, escape braces\r\n            let jsonString = JSON.stringify(obj);\r\n            // Remove empty values/metadata pairs if they exist and are noise\r\n            // Be cautious with overly broad replaces\r\n            // jsonString = jsonString.replace(/\"values\":\\s*\\[\\],\\s*\"metadata\":/g, '\"metadata\":'); // Example, adjust if needed\r\n            return jsonString\r\n                // .replace(/{/g, '\\\\u007B') // Escaping might not be needed depending on LLM\r\n                // .replace(/}/g, '\\\\u007D');\r\n        }\r\n\r\n        // Readable format (extract text, add score)\r\n        if (Array.isArray(obj)) {\r\n            return obj.map(item => {\r\n                let result = \"\";\r\n                if (item?.metadata?.text) {\r\n                    // Basic cleaning: replace newlines, trim\r\n                    const text = item.metadata.text.replace(/[\\r\\n]+/g, ' ').trim();\r\n                    result = text; // Use cleaned text directly\r\n                    // Example of splitting if structure was known:\r\n                    // const parts = text.split(';');\r\n                    // if (parts.length >= 1) result += parts[0].trim();\r\n                    // ... etc ...\r\n                } else {\r\n                    // Fallback if no text found\r\n                    result = JSON.stringify(item); // Stringify the whole item as fallback\r\n                }\r\n\r\n                if (item?.score) {\r\n                    result += `\\nSimilarity Score: ${item.score.toFixed(4)}`;\r\n                }\r\n                return result;\r\n            }).join('\\n\\n'); // Separate items clearly\r\n        }\r\n\r\n        // Fallback for non-array objects (less likely for lists of results)\r\n        return JSON.stringify(obj, null, 2); // Pretty print as fallback\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in safeJsonForPrompt:\", error);\r\n        // Return a safe representation of the error or the input\r\n        return `[Error formatting JSON: ${error.message}]`;\r\n    }\r\n}\r\n\r\n\r\n// Function: Handle Follow-Up Conversation\r\nexport async function handleFollowUpConversation(clientprompt, currentHistory) {\r\n    if (DEBUG) console.log(\"Processing follow-up question:\", clientprompt);\r\n    if (DEBUG) console.log(\"Using conversation history length:\", currentHistory.length);\r\n\r\n    // Ensure API keys are available\r\n    if (!INTERNAL_API_KEYS.OPENAI_API_KEY || !INTERNAL_API_KEYS.PINECONE_API_KEY) {\r\n        throw new Error(\"API keys not initialized for follow-up conversation.\");\r\n    }\r\n\r\n    // Load necessary prompts\r\n    const systemPrompt = await getSystemPromptFromFile('Followup_System');\r\n    const mainPromptText = await getSystemPromptFromFile('Encoder_Main'); // Assuming this is the 'MainPrompt' context needed\r\n\r\n     if (!systemPrompt || !mainPromptText) {\r\n         throw new Error(\"Failed to load required prompts for follow-up.\");\r\n     }\r\n\r\n    // Fetch context using vector DB queries\r\n    // These calls internally use createEmbedding (OpenAI key) and query (Pinecone key)\r\n    const trainingdataCall2 = await queryVectorDB({\r\n        queryPrompt: clientprompt,\r\n        similarityThreshold: .4,\r\n        indexName: 'call2trainingdata',\r\n        numResults: 3\r\n    });\r\n\r\n    const call2context = await queryVectorDB({\r\n        queryPrompt: clientprompt + safeJsonForPrompt(trainingdataCall2, false), // Append context for better query\r\n        similarityThreshold: .3,\r\n        indexName: 'call2context',\r\n        numResults: 5\r\n    });\r\n\r\n    const call1context = await queryVectorDB({\r\n        queryPrompt: clientprompt + safeJsonForPrompt(trainingdataCall2, false),\r\n        similarityThreshold: .3,\r\n        indexName: 'call1context',\r\n        numResults: 5\r\n    });\r\n\r\n    const codeOptions = await queryVectorDB({\r\n        queryPrompt: clientprompt + safeJsonForPrompt(trainingdataCall2, false) + safeJsonForPrompt(call1context, false),\r\n        indexName: 'codes',\r\n        numResults: 10,\r\n        similarityThreshold: .1\r\n    });\r\n\r\n    // Construct the prompt for the LLM\r\n    const followUpPrompt = `Client request: ${clientprompt}\\n` +\r\n                   `Main Prompt Context: ${mainPromptText}\\n` + // Use loaded main prompt text\r\n                   `Training Data Context: ${safeJsonForPrompt(trainingdataCall2, true)}\\n` + // Use readable format for prompt\r\n                   `Code Choosing Context: ${safeJsonForPrompt(call1context, true)}\\n` +\r\n                   `Code Editing Context: ${safeJsonForPrompt(call2context, true)}\\n` +\r\n                   `Relevant Code Options: ${safeJsonForPrompt(codeOptions, true)}`;\r\n\r\n    // Call the LLM (processPrompt uses OpenAI key internally)\r\n    const responseArray = await processPrompt({\r\n        userInput: followUpPrompt,\r\n        systemPrompt: systemPrompt,\r\n        model: GPT41,\r\n        temperature: 1,\r\n        history: currentHistory // Pass the existing history\r\n    });\r\n\r\n    // Update history (create new array, don't modify inplace)\r\n    const updatedHistory = [\r\n        ...currentHistory,\r\n        [\"human\", clientprompt],\r\n        [\"assistant\", responseArray.join(\"\\n\")] // Store response as single string\r\n    ];\r\n\r\n    // Persist updated history and analysis data (using localStorage helpers)\r\n    saveConversationHistory(updatedHistory); // Save the new history state\r\n    savePromptAnalysis(\r\n        clientprompt,\r\n        systemPrompt,\r\n        mainPromptText,\r\n        null, // No validation prompt info available here\r\n        null, // No validation prompt info available here\r\n        null, // No validation results available here\r\n        safeJsonForPrompt(call2context, false), // Save non-readable for potential re-use\r\n        safeJsonForPrompt(call1context, false),\r\n        safeJsonForPrompt(trainingdataCall2, false),\r\n        safeJsonForPrompt(codeOptions, false),\r\n        responseArray\r\n    );\r\n    saveTrainingData(clientprompt, responseArray);\r\n\r\n    if (DEBUG) console.log(\"Follow-up conversation processed. History length:\", updatedHistory.length);\r\n\r\n    // Return the response and the updated history\r\n    return { response: responseArray, history: updatedHistory };\r\n}\r\n\r\n\r\n// Function: Handle Initial Conversation\r\nexport async function handleInitialConversation(clientprompt) {\r\n    if (DEBUG) console.log(\"Processing initial question:\", clientprompt);\r\n\r\n     // Ensure API keys are available\r\n    if (!INTERNAL_API_KEYS.OPENAI_API_KEY) {\r\n        throw new Error(\"OpenAI API key not initialized for initial conversation.\");\r\n    }\r\n\r\n    // Load necessary prompts\r\n    const systemPrompt = await getSystemPromptFromFile('Encoder_System');\r\n    const mainPromptText = await getSystemPromptFromFile('Encoder_Main');\r\n\r\n     if (!systemPrompt || !mainPromptText) {\r\n         throw new Error(\"Failed to load required prompts for initial conversation.\");\r\n     }\r\n\r\n    if (DEBUG) console.log(\"SYSTEM PROMPT: \", systemPrompt ? systemPrompt.substring(0,100) + \"...\" : \"Not loaded\");\r\n    if (DEBUG) console.log(\"MAIN PROMPT: \", mainPromptText ? mainPromptText.substring(0,100) + \"...\" : \"Not loaded\");\r\n\r\n    // Construct the prompt for the first call (no vector DB context yet)\r\n    const initialCallPrompt = `Client request: ${clientprompt}\\n` +\r\n                           `Main Prompt: ${mainPromptText}`;\r\n\r\n    // Call the LLM (processPrompt uses OpenAI key internally)\r\n    const outputArray = await processPrompt({\r\n        userInput: initialCallPrompt,\r\n        systemPrompt: systemPrompt,\r\n        model: GPT41,\r\n        temperature: 1,\r\n        history: [] // No history for initial call\r\n    });\r\n\r\n    // Create the initial history\r\n    const initialHistory = [\r\n        [\"human\", clientprompt],\r\n        [\"assistant\", outputArray.join(\"\\n\")] // Store response as single string\r\n    ];\r\n\r\n    // Persist history and analysis data\r\n    saveConversationHistory(initialHistory);\r\n    savePromptAnalysis(\r\n        clientprompt,\r\n        systemPrompt,\r\n        mainPromptText,\r\n        null, null, null, // No validation info\r\n        \"\", \"\", \"\", \"\", // No vector DB context yet\r\n        outputArray\r\n    );\r\n    saveTrainingData(clientprompt, outputArray);\r\n\r\n    if (DEBUG) console.log(\"Initial conversation processed. History length:\", initialHistory.length);\r\n    if (DEBUG) console.log(\"Initial Response:\", outputArray);\r\n\r\n    // Return the response and the new history\r\n    return { response: outputArray, history: initialHistory };\r\n}\r\n\r\n// Main conversation handler - decides between initial and follow-up\r\n// Takes current history and returns { response, history }\r\nexport async function handleConversation(clientprompt, currentHistory) {\r\n    try {\r\n        const isFollowUp = currentHistory && currentHistory.length > 0;\r\n        if (isFollowUp) {\r\n            return await handleFollowUpConversation(clientprompt, currentHistory);\r\n        } else {\r\n            return await handleInitialConversation(clientprompt);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in conversation handling:\", error);\r\n        // Return error message and unchanged history\r\n        return {\r\n            response: [\"Error processing your request: \" + error.message],\r\n            history: currentHistory || [] // Return existing or empty history\r\n        };\r\n    }\r\n}\r\n\r\n\r\n// Function: Save prompt analysis data to localStorage\r\nfunction savePromptAnalysis(clientprompt, systemPrompt, mainPrompt, validationSystemPrompt, validationMainPrompt, validationResults, call2context, call1context, trainingdataCall2, codeOptions, outputArray) {\r\n    try {\r\n        const analysisData = {\r\n            clientRequest: clientprompt || \"\",\r\n            systemPrompt: systemPrompt || \"\",\r\n            mainPrompt: mainPrompt || \"\",\r\n            validationSystemPrompt: validationSystemPrompt || \"\",\r\n            validationMainPrompt: validationMainPrompt || \"\",\r\n            validationResults: validationResults || [],\r\n            call2context: call2context || \"\", // Store the potentially non-readable string used\r\n            call1context: call1context || \"\",\r\n            trainingdataCall2: trainingdataCall2 || \"\",\r\n            codeOptions: codeOptions || \"\",\r\n            outputArray: outputArray || []\r\n        };\r\n\r\n        localStorage.setItem('promptAnalysis', JSON.stringify(analysisData));\r\n        if (DEBUG) console.log('Prompt analysis saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving prompt analysis:\", error);\r\n    }\r\n}\r\n\r\n// Function: Save training data pair to localStorage\r\nfunction saveTrainingData(clientprompt, outputArray) {\r\n    try {\r\n        // Helper to clean text for storage\r\n        function cleanText(text) {\r\n            if (!text) return '';\r\n            // Convert non-strings (like arrays) to string first\r\n            const str = Array.isArray(text) ? JSON.stringify(text) : String(text);\r\n            return str.replace(/[\\r\\n\\t]+/g, ' ').trim(); // Replace newlines/tabs with space\r\n        }\r\n\r\n        const trainingData = {\r\n            prompt: cleanText(clientprompt),\r\n            // Ensure outputArray is stringified if it's an array\r\n            response: cleanText(outputArray)\r\n        };\r\n\r\n        localStorage.setItem('trainingData', JSON.stringify(trainingData));\r\n        if (DEBUG) console.log('Training data saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving training data:\", error);\r\n    }\r\n}\r\n\r\n\r\n// Function: Perform validation correction using LLM\r\n// Note: Assumes localStorage contains relevant context from previous calls\r\nexport async function validationCorrection(clientprompt, initialResponse, validationResults) {\r\n    try {\r\n         // Ensure API keys are available\r\n         if (!INTERNAL_API_KEYS.OPENAI_API_KEY) {\r\n            throw new Error(\"OpenAI API key not initialized for validation correction.\");\r\n        }\r\n\r\n        // Load context from localStorage (as per original logic)\r\n        // Consider passing these as arguments if localStorage access becomes problematic\r\n        const trainingData = localStorage.getItem('trainingData') || '{\"prompt\":\"\",\"response\":\"\"}'; // Provide default structure\r\n        const promptAnalysisData = JSON.parse(localStorage.getItem('promptAnalysis') || '{}');\r\n\r\n        // Load validation prompts\r\n        const validationSystemPrompt = await getSystemPromptFromFile('Validation_System');\r\n        const validationMainPrompt = await getSystemPromptFromFile('Validation_Main');\r\n\r\n        if (!validationSystemPrompt || !validationMainPrompt) {\r\n            throw new Error(\"Failed to load validation system or main prompt\");\r\n        }\r\n\r\n        // Format the initial response and validation results as strings\r\n        const responseString = Array.isArray(initialResponse) ? initialResponse.join(\"\\n\") : String(initialResponse);\r\n        const validationResultsString = Array.isArray(validationResults) ? validationResults.join(\"\\n\") : String(validationResults);\r\n\r\n        // Construct the correction prompt using loaded context\r\n        const correctionPrompt =\r\n            `Main Prompt: ${validationMainPrompt}\\n\\n` +\r\n            `Original User Input: ${clientprompt}\\n\\n` +\r\n            `Initial Response (to be corrected): ${responseString}\\n\\n` +\r\n            `Validation Errors Found: ${validationResultsString}\\n\\n` +\r\n            // Include context from the last analysis if available\r\n            `Training Data Example: ${trainingData}\\n\\n` + // Use loaded training data string\r\n            `Code Options Context: ${promptAnalysisData.codeOptions || \"Not available\"}\\n\\n` +\r\n            `Code Choosing Context: ${promptAnalysisData.call1context || \"Not available\"}\\n\\n` +\r\n            `Code Editing Context: ${promptAnalysisData.call2context || \"Not available\"}`;\r\n\r\n\r\n        if (DEBUG) {\r\n            console.log(\"====== VALIDATION CORRECTION INPUT ======\");\r\n            console.log(\"System Prompt:\", validationSystemPrompt.substring(0,100) + \"...\");\r\n            console.log(\"User Input Prompt (truncated):\", correctionPrompt.substring(0, 500) + \"...\");\r\n            console.log(\"=========================================\");\r\n        }\r\n\r\n        // Call LLM for correction (processPrompt uses OpenAI key)\r\n        // Pass an empty history, as correction likely doesn't need chat context\r\n        const correctedResponseArray = await processPrompt({\r\n            userInput: correctionPrompt,\r\n            systemPrompt: validationSystemPrompt,\r\n            model: GPT41,\r\n            temperature: 0.7, // Lower temperature for correction\r\n            history: []\r\n        });\r\n\r\n        // Save the output using the mock fs (as per original logic)\r\n        const correctionOutputPath = \"C:\\\\Users\\\\joeor\\\\Dropbox\\\\B - Freelance\\\\C_Projectify\\\\VanPC\\\\Training Data\\\\Main Script Training and Context Data\\\\validation_correction_output.txt\";\r\n        const correctedResponseString = Array.isArray(correctedResponseArray) ? correctedResponseArray.join(\"\\n\") : correctedResponseArray;\r\n        fs.writeFileSync(correctionOutputPath, correctedResponseString);\r\n\r\n        if (DEBUG) console.log(`Validation correction output saved via mock fs to ${correctionOutputPath}`);\r\n        if (DEBUG) console.log(\"Corrected Response:\", correctedResponseArray);\r\n\r\n        return correctedResponseArray; // Return the array format expected by caller\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in validation correction:\", error);\r\n        // console.error(error.stack); // Keep stack trace for detailed debugging\r\n        // Return an error message array, consistent with other function returns\r\n        return [\"Error during validation correction: \" + error.message];\r\n    }\r\n}\r\n\r\n// >>> ADDED: Global variable for AI Model Planner responses\r\nlet lastAIModelPlannerResponse = null; \r\n\r\n// >>> ADDED: Functions for Client Mode Chat\r\nfunction displayInClientChat(message, isUser) {\r\n    const chatLog = document.getElementById('chat-log-client');\r\n    const welcomeMessage = document.getElementById('welcome-message-client');\r\n    if (welcomeMessage) {\r\n        welcomeMessage.style.display = 'none';\r\n    }\r\n\r\n    const messageElement = document.createElement('div');\r\n    messageElement.className = `chat-message ${isUser ? 'user-message' : 'assistant-message'}`;\r\n    \r\n    const contentElement = document.createElement('p');\r\n    contentElement.className = 'message-content';\r\n    \r\n    if (typeof message === 'string') {\r\n        contentElement.textContent = message;\r\n    } else if (Array.isArray(message)) { // Assuming array of strings for text\r\n        contentElement.textContent = message.join('\\n');\r\n    } else if (typeof message === 'object' && message !== null) { // For JSON objects\r\n        contentElement.textContent = JSON.stringify(message, null, 2);\r\n        // Optionally, add a class or style for preformatted JSON\r\n        contentElement.style.whiteSpace = 'pre-wrap'; \r\n    } else {\r\n        contentElement.textContent = String(message); // Fallback\r\n    }\r\n    \r\n    messageElement.appendChild(contentElement);\r\n    chatLog.appendChild(messageElement);\r\n    chatLog.scrollTop = chatLog.scrollHeight;\r\n}\r\n\r\nfunction setClientLoadingButton(isLoading) {\r\n    const sendButton = document.getElementById('send-client');\r\n    const loadingAnimation = document.getElementById('loading-animation-client');\r\n\r\n    if (sendButton) {\r\n        sendButton.disabled = isLoading;\r\n    }\r\n    if (loadingAnimation) {\r\n        loadingAnimation.style.display = isLoading ? 'flex' : 'none';\r\n    }\r\n}\r\n\r\nasync function handleClientModeSend() {\r\n    const userInputElement = document.getElementById('user-input-client');\r\n    const userInput = userInputElement.value.trim();\r\n\r\n    if (!userInput) {\r\n        // Potentially show a message to the user, but for now, just log and return\r\n        console.warn(\"Client mode: User input is empty.\");\r\n        return;\r\n    }\r\n\r\n    displayInClientChat(userInput, true);\r\n    userInputElement.value = '';\r\n    setClientLoadingButton(true);\r\n\r\n    try {\r\n        const result = await handleAIModelPlannerConversation(userInput);\r\n        lastAIModelPlannerResponse = result.response; // Store the raw response\r\n\r\n        // Display logic handles string, array, or object responses\r\n        displayInClientChat(result.response, false);\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in client mode conversation:\", error);\r\n        displayInClientChat(`Error: ${error.message}`, false);\r\n    } finally {\r\n        setClientLoadingButton(false);\r\n    }\r\n}\r\n\r\nfunction handleClientModeResetChat() {\r\n    const chatLog = document.getElementById('chat-log-client');\r\n    const welcomeMessage = document.getElementById('welcome-message-client');\r\n    \r\n    chatLog.innerHTML = ''; // Clear existing messages\r\n    if (welcomeMessage) {\r\n        // Re-add welcome message or set its display to block\r\n        const newWelcome = document.createElement('div');\r\n        newWelcome.id = 'welcome-message-client';\r\n        newWelcome.className = 'welcome-message';\r\n        newWelcome.innerHTML = '<h1>Ask me anything (Client Mode)</h1>';\r\n        chatLog.appendChild(newWelcome);\r\n    }\r\n    \r\n    resetAIModelPlannerConversation(); // Reset the conversation history in the planner\r\n    lastAIModelPlannerResponse = null;\r\n    document.getElementById('user-input-client').value = '';\r\n    console.log(\"Client mode chat reset.\");\r\n}\r\n\r\n// These functions are placeholders for client mode; actual Excel/editor interaction might differ or be disabled.\r\nfunction handleClientModeWriteToExcel() {\r\n    if (!lastAIModelPlannerResponse) {\r\n        displayInClientChat(\"No response to write to Excel.\", false);\r\n        return;\r\n    }\r\n    // For now, just log it or display a message. \r\n    // Actual Excel writing might be complex if it's JSON.\r\n    let contentToWrite = \"\";\r\n    if (typeof lastAIModelPlannerResponse === 'object') {\r\n        contentToWrite = JSON.stringify(lastAIModelPlannerResponse, null, 2);\r\n    } else if (Array.isArray(lastAIModelPlannerResponse)) {\r\n        contentToWrite = lastAIModelPlannerResponse.join(\"\\n\");\r\n    } else {\r\n        contentToWrite = String(lastAIModelPlannerResponse);\r\n    }\r\n    console.log(\"Client Mode - Write to Excel (Placeholder):\\n\", contentToWrite);\r\n    displayInClientChat(\"Write to Excel (Placeholder): Response logged to console. Actual Excel writing depends on format.\", false);\r\n}\r\n\r\nfunction handleClientModeInsertToEditor() {\r\n    if (!lastAIModelPlannerResponse) {\r\n        displayInClientChat(\"No response to insert into editor.\", false);\r\n        return;\r\n    }\r\n    let contentToInsert = \"\";\r\n     if (typeof lastAIModelPlannerResponse === 'object') {\r\n        contentToInsert = JSON.stringify(lastAIModelPlannerResponse, null, 2);\r\n    } else if (Array.isArray(lastAIModelPlannerResponse)) {\r\n        contentToInsert = lastAIModelPlannerResponse.join(\"\\n\");\r\n    } else {\r\n        contentToInsert = String(lastAIModelPlannerResponse);\r\n    }\r\n    console.log(\"Client Mode - Insert to Editor (Placeholder):\\n\", contentToInsert);\r\n    displayInClientChat(\"Insert to Editor (Placeholder): Response logged to console. Actual editor insertion depends on context.\", false);\r\n}\r\n\r\n\r\nOffice.onReady(async (info) => {\r\n  if (info.host === Office.HostType.Excel) {\r\n    // ... existing setup for developer mode buttons, API keys, etc. ...\r\n    \r\n    // Initialize API Keys (calls setAIModelPlannerOpenApiKey inside)\r\n    try {\r\n        await initializeAPIKeys();\r\n    } catch (error) {\r\n        console.error(\"Failed to initialize API keys on startup:\", error);\r\n        // Potentially show error to user\r\n    }\r\n\r\n    // --- SETUP FOR CLIENT MODE UI ---\r\n    // Assign event handlers from AIModelPlanner.js to client mode buttons\r\n    const sendClientButton = document.getElementById('send-client');\r\n    if (sendClientButton) sendClientButton.onclick = plannerHandleSend;\r\n\r\n    const resetClientChatButton = document.getElementById('reset-chat-client');\r\n    if (resetClientChatButton) resetClientChatButton.onclick = plannerHandleReset;\r\n    \r\n    const writeToExcelClientButton = document.getElementById('write-to-excel-client');\r\n    if (writeToExcelClientButton) writeToExcelClientButton.onclick = plannerHandleWriteToExcel;\r\n\r\n    const insertToEditorClientButton = document.getElementById('insert-to-editor-client');\r\n    if (insertToEditorClientButton) insertToEditorClientButton.onclick = plannerHandleInsertToEditor;\r\n    \r\n    const userInputClient = document.getElementById('user-input-client');\r\n    if (userInputClient) {\r\n        userInputClient.addEventListener('keypress', function(event) {\r\n            if (event.key === 'Enter' && !event.shiftKey) {\r\n                event.preventDefault(); \r\n                if (plannerHandleSend) plannerHandleSend(); // Call the imported handler\r\n            }\r\n        });\r\n    }\r\n    // --- END CLIENT MODE UI SETUP ---\r\n\r\n    // Load developer chat history\r\n    // conversationHistory = loadConversationHistory(); // Assuming loadConversationHistory is for dev chat\r\n    // ... display developer chat history ...\r\n\r\n    // Startup Menu Logic (assuming this is still part of AIcalls.js)\r\n    const startupMenu = document.getElementById('startup-menu');\r\n    const developerModeButton = document.getElementById('developer-mode-button');\r\n    const clientModeButton = document.getElementById('client-mode-button');\r\n    const appBody = document.getElementById('app-body');\r\n    const clientModeView = document.getElementById('client-mode-view');\r\n\r\n    function showDeveloperModeView() { // Renamed to avoid conflict if global\r\n      if (startupMenu) startupMenu.style.display = 'none';\r\n      if (appBody) appBody.style.display = 'flex'; \r\n      if (clientModeView) clientModeView.style.display = 'none';\r\n      console.log(\"Developer Mode view activated\");\r\n    }\r\n\r\n    function showClientModeView() { // Renamed\r\n      if (startupMenu) startupMenu.style.display = 'none';\r\n      if (appBody) appBody.style.display = 'none';\r\n      if (clientModeView) clientModeView.style.display = 'flex';\r\n      console.log(\"Client Mode view activated\");\r\n    }\r\n    \r\n    function showStartupMenuView() { // Renamed\r\n        if (startupMenu) startupMenu.style.display = 'flex';\r\n        if (appBody) appBody.style.display = 'none';\r\n        if (clientModeView) clientModeView.style.display = 'none';\r\n        console.log(\"Startup Menu view activated\");\r\n    }\r\n\r\n    if (developerModeButton) developerModeButton.onclick = showDeveloperModeView;\r\n    if (clientModeButton) clientModeButton.onclick = showClientModeView;\r\n\r\n    const backToMenuDevButton = document.getElementById('back-to-menu-dev-button');\r\n    if (backToMenuDevButton) backToMenuDevButton.onclick = showStartupMenuView;\r\n    const backToMenuClientButton = document.getElementById('back-to-menu-client-button');\r\n    if (backToMenuClientButton) backToMenuClientButton.onclick = showStartupMenuView;\r\n    \r\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\r\n    if (startupMenu) startupMenu.style.display = \"flex\"; // Show startup menu first\r\n    if (appBody) appBody.style.display = \"none\";\r\n    if (clientModeView) clientModeView.style.display = \"none\";\r\n\r\n    // ... any other existing Office.onReady logic for developer mode ...\r\n  }\r\n});\r\n\r\n// NEW FUNCTION to process text input like handleSend but without UI and main history side effects\r\nexport async function getAICallsProcessedResponse(userInputString) {\r\n    if (DEBUG) console.log(\"[getAICallsProcessedResponse] Processing input:\", userInputString.substring(0, 100) + \"...\");\r\n\r\n    try {\r\n        // 1. Structure database queries\r\n        if (DEBUG) console.log(\"[getAICallsProcessedResponse] Calling structureDatabasequeries...\");\r\n        const dbResults = await structureDatabasequeries(userInputString);\r\n        if (DEBUG) console.log(\"[getAICallsProcessedResponse] structureDatabasequeries completed. Results:\", dbResults);\r\n\r\n        if (!dbResults || !Array.isArray(dbResults)) {\r\n            console.error(\"[getAICallsProcessedResponse] Invalid database results:\", dbResults);\r\n            throw new Error(\"Failed to get valid database results from structureDatabasequeries\");\r\n        }\r\n\r\n        // 2. Format database results into an enhanced prompt\r\n        const plainTextResults = dbResults.map(result => {\r\n            if (!result) return \"No results found for a query\";\r\n            return `Query: ${result.query || 'No query'}\\n` +\r\n                   `Training Data:\\n${(result.trainingData || []).join('\\n')}\\n` +\r\n                   `Code Options:\\n${(result.codeOptions || []).join('\\n')}\\n` +\r\n                   `Code Choosing Context:\\n${(result.call1Context || []).join('\\n')}\\n` +\r\n                   `Code Editing Context:\\n${(result.call2Context || []).join('\\n')}\\n` +\r\n                   `---\\n`;\r\n        }).join('\\n');\r\n\r\n        const enhancedPrompt = `Client request: ${userInputString}\\n\\nDatabase Results:\\n${plainTextResults}`;\r\n        if (DEBUG) console.log(\"[getAICallsProcessedResponse] Enhanced prompt created:\", enhancedPrompt.substring(0, 200) + \"...\");\r\n\r\n        // 3. Call the AI using processPrompt (to avoid main history side effects of handleConversation)\r\n        if (DEBUG) console.log(\"[getAICallsProcessedResponse] Loading system and main prompts for AI call...\");\r\n        const systemPrompt = await getSystemPromptFromFile('Encoder_System');\r\n        const mainPromptText = await getSystemPromptFromFile('Encoder_Main');\r\n\r\n        if (!systemPrompt || !mainPromptText) {\r\n            throw new Error(\"[getAICallsProcessedResponse] Failed to load 'Encoder_System' or 'Encoder_Main' prompt.\");\r\n        }\r\n        \r\n        const combinedInputForAI = `Client request: ${enhancedPrompt}\\nMain Prompt: ${mainPromptText}`; // This matches how handleInitialConversation constructs it\r\n        if (DEBUG) console.log(\"[getAICallsProcessedResponse] Calling processPrompt...\");\r\n\r\n        let responseArray = await processPrompt({\r\n            userInput: combinedInputForAI,\r\n            systemPrompt: systemPrompt,\r\n            model: GPT41, // Using the same model as in other parts\r\n            temperature: 1, // Consistent temperature\r\n            history: [] // Treat each call as independent for this processing\r\n        });\r\n        if (DEBUG) console.log(\"[getAICallsProcessedResponse] processPrompt completed. Response:\", responseArray);\r\n\r\n        // 4. Validate the response\r\n        if (DEBUG) console.log(\"[getAICallsProcessedResponse] Validating response array...\");\r\n        const validationErrors = await validateCodeStrings(responseArray);\r\n        if (DEBUG) console.log(\"[getAICallsProcessedResponse] Validation completed. Errors:\", validationErrors);\r\n\r\n        // 5. Perform validation correction if needed\r\n        if (validationErrors && validationErrors.length > 0) {\r\n            if (DEBUG) console.log(\"[getAICallsProcessedResponse] Validation errors found. Performing correction...\");\r\n            responseArray = await validationCorrection(userInputString, responseArray, validationErrors);\r\n            if (DEBUG) console.log(\"[getAICallsProcessedResponse] Validation correction completed. Corrected response:\", responseArray);\r\n        }\r\n\r\n        return responseArray;\r\n\r\n    } catch (error) {\r\n        console.error(\"[getAICallsProcessedResponse] Error during processing:\", error);\r\n        // Return an error message array, consistent with other function returns\r\n        return [`Error processing tab description: ${error.message}`];\r\n    }\r\n}\r\n\r\n","import { validateCodeStrings } from './Validation.js';\r\n\r\nimport { populateCodeCollection, exportCodeCollectionToText, runCodes, processAssumptionTabs, collapseGroupingsAndNavigateToFinancials, hideColumnsAndNavigate, handleInsertWorksheetsFromBase64 } from './CodeCollection.js';\r\n// >>> ADDED: Import the new validation function\r\nimport { validateCodeStringsForRun } from './Validation.js';\r\n// >>> ADDED: Import the tab string generator function\r\nimport { generateTabString } from './IndexWorksheet.js';\r\n// >>> UPDATED: Import structureDatabasequeries from the helper file\r\nimport { structureDatabasequeries } from './StructureHelper.js';\r\n// >>> ADDED: Import setAPIKeys function from AIcalls\r\nimport { setAPIKeys } from './AIcalls.js';\r\n// >>> ADDED: Import callOpenAI function from AIcalls\r\nimport { callOpenAI } from './AIcalls.js';\r\n// >>> ADDED: Import conversation history functions from AIcalls\r\nimport { saveConversationHistory, loadConversationHistory } from './AIcalls.js';\r\n// >>> ADDED: Import prompt loading functions from AIcalls\r\nimport { loadPromptFromFile, getSystemPromptFromFile } from './AIcalls.js';\r\n// >>> ADDED: Import processPrompt function from AIcalls\r\nimport { processPrompt } from './AIcalls.js';\r\n// >>> ADDED: Import createEmbedding function from AIcalls\r\nimport { createEmbedding } from './AIcalls.js';\r\n// >>> ADDED: Import queryVectorDB function from AIcalls\r\nimport { queryVectorDB } from './AIcalls.js';\r\n// >>> ADDED: Import safeJsonForPrompt function from AIcalls\r\nimport { safeJsonForPrompt } from './AIcalls.js';\r\n// >>> ADDED: Import conversation handling and validation functions from AIcalls\r\n// Make sure handleConversation is included here\r\nimport { handleFollowUpConversation, handleInitialConversation, handleConversation, validationCorrection } from './AIcalls.js';\r\n// Add the codeStrings variable with the specified content\r\n// REMOVED hardcoded codeStrings variable\r\n\r\nimport { API_KEYS as configApiKeys } from '../../config.js'; // Assuming config.js exports API_KEYS\r\n\r\n//Debugging Toggle\r\nconst DEBUG = true;\r\n\r\n// Variable to store loaded code strings\r\nlet loadedCodeStrings = \"\";\r\n\r\n// Variable to store the parsed code database\r\nlet codeDatabase = [];\r\n\r\n// API keys storage - initialized by initializeAPIKeys\r\nlet INTERNAL_API_KEYS = {\r\n  OPENAI_API_KEY: \"\",\r\n  PINECONE_API_KEY: \"\"\r\n};\r\n\r\n// >>> MOVED & MODIFIED: Ensure truly global scope for cursor position\r\nvar lastEditorCursorPosition = null;\r\n\r\n// Function to load the code string database\r\nasync function loadCodeDatabase() {\r\n  try {\r\n    console.log(\"Loading code database...\");\r\n    const response = await fetch('https://localhost:3002/assets/codestringDB.txt');\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to load codestringDB.txt: ${response.statusText}`);\r\n    }\r\n    const text = await response.text();\r\n    const lines = text.split(/[\\r\\n]+/).filter(line => line.trim() !== ''); // Split by lines and remove empty ones\r\n\r\n    codeDatabase = lines.map(line => {\r\n      const parts = line.split('\\t'); // Assuming tab-separated\r\n      if (parts.length >= 2) {\r\n        return { name: parts[0].trim(), code: parts[1].trim() };\r\n      }\r\n      console.warn(`Skipping malformed line in codestringDB.txt: ${line}`);\r\n      return null;\r\n    }).filter(item => item !== null); // Filter out null entries from malformed lines\r\n\r\n    console.log(`Code database loaded successfully with ${codeDatabase.length} entries.`);\r\n    if (DEBUG && codeDatabase.length > 0) {\r\n        console.log(\"First few code database entries:\", codeDatabase.slice(0, 5));\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error(\"Error loading code database:\", error);\r\n    showError(\"Failed to load code database. Search functionality will be unavailable.\");\r\n    codeDatabase = []; // Ensure it's empty on error\r\n  }\r\n}\r\n\r\n// Function to load API keys from a config file\r\n// This allows the keys to be stored in a separate file that's .gitignored\r\nexport async function initializeAPIKeys() {\r\n  try {\r\n    console.log(\"Initializing API keys from AIcalls.js...\");\r\n\r\n    // Use keys from imported config.js if available\r\n    if (configApiKeys?.OPENAI_API_KEY) {\r\n        INTERNAL_API_KEYS.OPENAI_API_KEY = configApiKeys.OPENAI_API_KEY;\r\n        console.log(\"OpenAI API key loaded from config.js\");\r\n    } else {\r\n         console.warn(\"OpenAI API key not found in config.js.\");\r\n    }\r\n\r\n    if (configApiKeys?.PINECONE_API_KEY) {\r\n        INTERNAL_API_KEYS.PINECONE_API_KEY = configApiKeys.PINECONE_API_KEY;\r\n        console.log(\"Pinecone API key loaded from config.js\");\r\n    } else {\r\n         console.warn(\"Pinecone API key not found in config.js.\");\r\n    }\r\n\r\n    // Fallback: try fetching from the old location if config.js didn't provide them\r\n    if (!INTERNAL_API_KEYS.OPENAI_API_KEY || !INTERNAL_API_KEYS.PINECONE_API_KEY) {\r\n        console.log(\"Attempting fallback API key loading from https://localhost:3002/config.js\");\r\n        try {\r\n            const configResponse = await fetch('https://localhost:3002/config.js');\r\n            if (configResponse.ok) {\r\n                const configText = await configResponse.text();\r\n                // Extract keys from the config text using regex\r\n                const openaiKeyMatch = configText.match(/OPENAI_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n                const pineconeKeyMatch = configText.match(/PINECONE_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n\r\n                if (!INTERNAL_API_KEYS.OPENAI_API_KEY && openaiKeyMatch && openaiKeyMatch[1]) {\r\n                    INTERNAL_API_KEYS.OPENAI_API_KEY = openaiKeyMatch[1];\r\n                    console.log(\"OpenAI API key loaded via fetch fallback.\");\r\n                }\r\n\r\n                if (!INTERNAL_API_KEYS.PINECONE_API_KEY && pineconeKeyMatch && pineconeKeyMatch[1]) {\r\n                    INTERNAL_API_KEYS.PINECONE_API_KEY = pineconeKeyMatch[1];\r\n                    console.log(\"Pinecone API key loaded via fetch fallback.\");\r\n                }\r\n            } else {\r\n                 console.warn(\"Fallback fetch for config.js failed or returned non-OK status.\");\r\n            }\r\n        } catch (error) {\r\n            console.warn(\"Could not load config.js via fetch fallback:\", error);\r\n        }\r\n    }\r\n\r\n    // Add debug logging with secure masking of keys\r\n    console.log(\"Loaded API Keys (AIcalls.js):\");\r\n    console.log(\"  OPENAI_API_KEY:\", INTERNAL_API_KEYS.OPENAI_API_KEY ?\r\n      `${INTERNAL_API_KEYS.OPENAI_API_KEY.substring(0, 3)}...${INTERNAL_API_KEYS.OPENAI_API_KEY.substring(INTERNAL_API_KEYS.OPENAI_API_KEY.length - 3)}` :\r\n      \"Not found\");\r\n    console.log(\"  PINECONE_API_KEY:\", INTERNAL_API_KEYS.PINECONE_API_KEY ?\r\n      `${INTERNAL_API_KEYS.PINECONE_API_KEY.substring(0, 3)}...${INTERNAL_API_KEYS.PINECONE_API_KEY.substring(INTERNAL_API_KEYS.PINECONE_API_KEY.length - 3)}` :\r\n      \"Not found\");\r\n\r\n    const keysFound = !!(INTERNAL_API_KEYS.OPENAI_API_KEY && INTERNAL_API_KEYS.PINECONE_API_KEY);\r\n    console.log(\"API Keys Initialized:\", keysFound);\r\n    // Return a copy to prevent external modification of the internal state\r\n    return { ...INTERNAL_API_KEYS };\r\n\r\n  } catch (error) {\r\n    console.error(\"Error initializing API keys:\", error);\r\n    // Return empty keys on error\r\n    return { OPENAI_API_KEY: \"\", PINECONE_API_KEY: \"\" };\r\n  }\r\n}\r\n\r\n// Conversation history storage\r\nlet conversationHistory = [];\r\n\r\n// Add this variable to track if the current message is a response\r\nlet isResponse = false;\r\n\r\n// >>> ADDED: State for Client Chat\r\nlet conversationHistoryClient = [];\r\nlet lastResponseClient = null;\r\n// <<< END ADDED\r\n\r\n// Add this function at the top level\r\nfunction showMessage(message) {\r\n    const messageDiv = document.createElement('div');\r\n    messageDiv.style.color = 'green';\r\n    messageDiv.style.padding = '10px';\r\n    messageDiv.style.margin = '10px';\r\n    messageDiv.style.border = '1px solid green';\r\n    messageDiv.style.borderRadius = '4px';\r\n    messageDiv.textContent = message;\r\n    \r\n    const appBody = document.getElementById('app-body');\r\n    appBody.insertBefore(messageDiv, appBody.firstChild);\r\n    \r\n    // Remove the message after 5 seconds\r\n    setTimeout(() => {\r\n        messageDiv.remove();\r\n    }, 5000);\r\n}\r\n\r\n// Add this function at the top level\r\nfunction showError(message) {\r\n    const errorDiv = document.createElement('div');\r\n    errorDiv.style.color = 'red';\r\n    errorDiv.style.padding = '10px';\r\n    errorDiv.style.margin = '10px';\r\n    errorDiv.style.border = '1px solid red';\r\n    errorDiv.style.borderRadius = '4px';\r\n    errorDiv.textContent = `Error: ${message}`;\r\n    \r\n    const appBody = document.getElementById('app-body');\r\n    appBody.insertBefore(errorDiv, appBody.firstChild);\r\n    \r\n    // Remove the error message after 5 seconds\r\n    setTimeout(() => {\r\n        errorDiv.remove();\r\n    }, 5000);\r\n}\r\n\r\n// Add this function at the top level\r\nfunction setButtonLoading(isLoading) {\r\n    console.log(`[setButtonLoading] Called with isLoading: ${isLoading}`);\r\n    const sendButton = document.getElementById('send');\r\n    const loadingAnimation = document.getElementById('loading-animation');\r\n    \r\n    if (sendButton) {\r\n        sendButton.disabled = isLoading;\r\n    } else {\r\n        console.warn(\"[setButtonLoading] Could not find send button with id='send'\");\r\n    }\r\n    \r\n    if (loadingAnimation) {\r\n        const newDisplay = isLoading ? 'flex' : 'none';\r\n        console.log(`[setButtonLoading] Found loadingAnimation element. Setting display to: ${newDisplay}`);\r\n        loadingAnimation.style.display = newDisplay;\r\n    } else {\r\n        console.error(\"[setButtonLoading] Could not find loading animation element with id='loading-animation'\");\r\n    }\r\n}\r\n\r\n// >>> ADDED: setButtonLoading for Client Mode\r\nfunction setButtonLoadingClient(isLoading) {\r\n    console.log(`[setButtonLoadingClient] Called with isLoading: ${isLoading}`);\r\n    const sendButton = document.getElementById('send-client');\r\n    const loadingAnimation = document.getElementById('loading-animation-client');\r\n    \r\n    if (sendButton) {\r\n        sendButton.disabled = isLoading;\r\n    } else {\r\n        console.warn(\"[setButtonLoadingClient] Could not find send button with id='send-client'\");\r\n    }\r\n    \r\n    if (loadingAnimation) {\r\n        const newDisplay = isLoading ? 'flex' : 'none';\r\n        console.log(`[setButtonLoadingClient] Found loadingAnimation element. Setting display to: ${newDisplay}`);\r\n        loadingAnimation.style.display = newDisplay;\r\n    } else {\r\n        console.error(\"[setButtonLoadingClient] Could not find loading animation element with id='loading-animation-client'\");\r\n    }\r\n}\r\n// <<< END ADDED\r\n\r\n// Add this variable to store the last response\r\nlet lastResponse = null;\r\n\r\n// Add this function to write to Excel\r\nasync function writeToExcel() {\r\n    if (!lastResponse) {\r\n        showError('No response to write to Excel');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        await Excel.run(async (context) => {\r\n            const range = context.workbook.getSelectedRange();\r\n            range.load(\"rowIndex\");\r\n            range.load(\"columnIndex\");\r\n            await context.sync();\r\n            \r\n            const startRow = range.rowIndex;\r\n            const startCol = range.columnIndex;\r\n            \r\n            // Split the response into individual code strings\r\n            let codeStrings = [];\r\n            if (Array.isArray(lastResponse)) {\r\n                // Join the array elements and then split by brackets\r\n                const fullText = lastResponse.join(' ');\r\n                codeStrings = fullText.match(/<[^>]+>/g) || [];\r\n            } else if (typeof lastResponse === 'string') {\r\n                codeStrings = lastResponse.match(/<[^>]+>/g) || [];\r\n            }\r\n            \r\n            if (codeStrings.length === 0) {\r\n                throw new Error(\"No valid code strings found in response\");\r\n            }\r\n            \r\n            // Create a range that spans all the rows we need\r\n            const targetRange = range.worksheet.getRangeByIndexes(\r\n                startRow,\r\n                startCol,\r\n                codeStrings.length,\r\n                1\r\n            );\r\n            \r\n            // Set all values at once, with each code string in its own row\r\n            targetRange.values = codeStrings.map(str => [str]);\r\n            \r\n            await context.sync();\r\n            console.log(\"Response written to Excel\");\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error writing to Excel:\", error);\r\n        showError(error.message);\r\n    }\r\n}\r\n\r\n// Add this function to append messages to the chat log\r\n// >>> REFACTORED: to accept chatLogId and welcomeMessageId\r\nfunction appendMessage(content, isUser = false, chatLogId = 'chat-log', welcomeMessageId = 'welcome-message') {\r\n    const chatLog = document.getElementById(chatLogId);\r\n    const welcomeMessage = document.getElementById(welcomeMessageId);\r\n\r\n    if (!chatLog) {\r\n        console.error(`[appendMessage] Chat log element with ID '${chatLogId}' not found.`);\r\n        return;\r\n    }\r\n    \r\n    // Hide welcome message when first message is added\r\n    if (welcomeMessage) {\r\n        welcomeMessage.style.display = 'none';\r\n    }\r\n    \r\n    const messageDiv = document.createElement('div');\r\n    messageDiv.className = `chat-message ${isUser ? 'user-message' : 'assistant-message'}`;\r\n    \r\n    const messageContent = document.createElement('p');\r\n    messageContent.className = 'message-content';\r\n    messageContent.textContent = content;\r\n    \r\n    messageDiv.appendChild(messageContent);\r\n    chatLog.appendChild(messageDiv);\r\n    \r\n    // Scroll to bottom\r\n    chatLog.scrollTop = chatLog.scrollHeight;\r\n}\r\n\r\n// Modify the handleSend function\r\nasync function handleSend() {\r\n    const userInput = document.getElementById('user-input').value.trim();\r\n    \r\n    if (!userInput) {\r\n        showError('Please enter a request');\r\n        return;\r\n    }\r\n\r\n    // Check if this is a response to a previous message\r\n    isResponse = conversationHistory.length > 0;\r\n\r\n    // Add user message to chat\r\n    appendMessage(userInput, true);\r\n    \r\n    // Clear input\r\n    document.getElementById('user-input').value = '';\r\n\r\n    setButtonLoading(true);\r\n    try {\r\n        // Process the text through the main function\r\n        console.log(\"Starting structureDatabasequeries\");\r\n        const dbResults = await structureDatabasequeries(userInput);\r\n        console.log(\"Database queries completed\");\r\n        \r\n        if (!dbResults || !Array.isArray(dbResults)) {\r\n            console.error(\"Invalid database results:\", dbResults);\r\n            throw new Error(\"Failed to get valid database results\");\r\n        }\r\n        \r\n        // Format the database results into a string\r\n        const plainTextResults = dbResults.map(result => {\r\n            if (!result) return \"No results found\";\r\n            \r\n            return `Query: ${result.query || 'No query'}\\n` +\r\n                   `Training Data:\\n${(result.trainingData || []).join('\\n')}\\n` +\r\n                   `Code Options:\\n${(result.codeOptions || []).join('\\n')}\\n` +\r\n                   `Code Choosing Context:\\n${(result.call1Context || []).join('\\n')}\\n` +\r\n                   `Code Editing Context:\\n${(result.call2Context || []).join('\\n')}\\n` +\r\n                   `---\\n`;\r\n        }).join('\\n');\r\n\r\n        const enhancedPrompt = `Client Request: ${userInput}\\n\\nDatabase Results:\\n${plainTextResults}`;\r\n        console.log(\"Enhanced prompt created\");\r\n        console.log(\"Enhanced prompt:\", enhancedPrompt);\r\n\r\n        console.log(\"Starting handleConversation\");\r\n        let conversationResult = await handleConversation(enhancedPrompt, isResponse); // Store the whole result object\r\n        console.log(\"Conversation completed\");\r\n        console.log(\"Initial Conversation Result:\", conversationResult); // Log the whole object\r\n\r\n        // Extract the response array and update history\r\n        let responseArray = conversationResult.response;\r\n        conversationHistory = conversationResult.history; // Update global history if needed (check AIcalls.js if it manages history internally)\r\n\r\n        // Validate the extracted response array\r\n        if (!responseArray || !Array.isArray(responseArray)) {\r\n            console.error(\"Invalid response array extracted:\", responseArray);\r\n            throw new Error(\"Failed to get valid response array from conversation result\");\r\n        }\r\n\r\n        // Run validation and correction if needed (using the extracted array)\r\n        console.log(\"Starting validation\");\r\n        const validationResults = await validateCodeStrings(responseArray);\r\n        console.log(\"Validation completed:\", validationResults);\r\n\r\n        if (validationResults && validationResults.length > 0) {\r\n            console.log(\"Starting validation correction\");\r\n            // Pass the extracted array to validationCorrection\r\n            responseArray = await validationCorrection(userInput, responseArray, validationResults);\r\n            console.log(\"Validation correction completed\");\r\n        }\r\n\r\n        // Store the final response array for Excel writing\r\n        lastResponse = responseArray;\r\n\r\n        // Add assistant message to chat (using the extracted array)\r\n        appendMessage(responseArray.join('\\n'));\r\n        \r\n    } catch (error) {\r\n        console.error(\"Error in handleSend:\", error);\r\n        showError(error.message);\r\n        // Add error message to chat\r\n        appendMessage(`Error: ${error.message}`);\r\n    } finally {\r\n        setButtonLoading(false);\r\n    }\r\n}\r\n\r\n// >>> ADDED: handleSend for Client Mode (Simplified)\r\nasync function handleSendClient() {\r\n    const userInputElement = document.getElementById('user-input-client');\r\n    if (!userInputElement) {\r\n        console.error(\"[handleSendClient] User input element 'user-input-client' not found.\");\r\n        return;\r\n    }\r\n    const userInput = userInputElement.value.trim();\r\n    \r\n    if (!userInput) {\r\n        // Consider using a client-specific showError if available, or alert\r\n        alert('Please enter a request (Client Mode)'); \r\n        return;\r\n    }\r\n\r\n    appendMessage(userInput, true, 'chat-log-client', 'welcome-message-client');\r\n    userInputElement.value = '';\r\n    setButtonLoadingClient(true);\r\n\r\n    try {\r\n        // Simulate an API call or simple response for client mode\r\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate network delay\r\n        const clientResponse = `Client received: \"${userInput}\". This is a placeholder response.`;\r\n        lastResponseClient = clientResponse; // Store for potential client-side \"Write to Excel\"\r\n        conversationHistoryClient.push({ user: userInput, assistant: clientResponse });\r\n\r\n        appendMessage(clientResponse, false, 'chat-log-client', 'welcome-message-client');\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in handleSendClient:\", error);\r\n        appendMessage(`Error: ${error.message}`, false, 'chat-log-client', 'welcome-message-client');\r\n    } finally {\r\n        setButtonLoadingClient(false);\r\n    }\r\n}\r\n// <<< END ADDED\r\n\r\n// Add this function to reset the chat\r\nfunction resetChat() {\r\n    // Clear the chat log\r\n    const chatLog = document.getElementById('chat-log');\r\n    chatLog.innerHTML = '';\r\n    \r\n    // Restore welcome message\r\n    const welcomeMessage = document.createElement('div');\r\n    welcomeMessage.id = 'welcome-message';\r\n    welcomeMessage.className = 'welcome-message';\r\n    const welcomeTitle = document.createElement('h1');\r\n    welcomeTitle.textContent = 'What would you like to model?';\r\n    welcomeMessage.appendChild(welcomeTitle);\r\n    chatLog.appendChild(welcomeMessage);\r\n    \r\n    // Clear the conversation history\r\n    conversationHistory = [];\r\n    saveConversationHistory(conversationHistory);\r\n    \r\n    // Reset the response flag and last response\r\n    isResponse = false;\r\n    lastResponse = null;\r\n    \r\n    // Clear the input field\r\n    document.getElementById('user-input').value = '';\r\n    \r\n    console.log(\"Chat reset completed\");\r\n}\r\n\r\n// >>> ADDED: resetChat for Client Mode\r\nfunction resetChatClient() {\r\n    const chatLogClient = document.getElementById('chat-log-client');\r\n    if (chatLogClient) {\r\n        chatLogClient.innerHTML = '';\r\n    } else {\r\n        console.error(\"[resetChatClient] Chat log element 'chat-log-client' not found.\");\r\n        return;\r\n    }\r\n    \r\n    const welcomeMessageClient = document.createElement('div');\r\n    welcomeMessageClient.id = 'welcome-message-client';\r\n    welcomeMessageClient.className = 'welcome-message';\r\n    const welcomeTitleClient = document.createElement('h1');\r\n    welcomeTitleClient.textContent = 'Ask me anything (Client Mode)';\r\n    welcomeMessageClient.appendChild(welcomeTitleClient);\r\n    chatLogClient.appendChild(welcomeMessageClient);\r\n    \r\n    conversationHistoryClient = [];\r\n    lastResponseClient = null;\r\n    \r\n    const userInputClient = document.getElementById('user-input-client');\r\n    if (userInputClient) {\r\n        userInputClient.value = '';\r\n    }\r\n    console.log(\"Client chat reset completed\");\r\n}\r\n// <<< END ADDED\r\n\r\n// *** Define Helper Function Globally (BEFORE Office.onReady) ***\r\nfunction getTabBlocks(codeString) {\r\n    if (!codeString) return [];\r\n    const tabBlocks = [];\r\n    const tabRegex = /(<TAB;[^>]*>)/g;\r\n    let match;\r\n    const indices = [];\r\n    while ((match = tabRegex.exec(codeString)) !== null) {\r\n        indices.push({ index: match.index, tag: match[1] });\r\n    }\r\n    if (indices.length === 0) {\r\n        if (codeString.trim().length > 0) {\r\n            console.warn(\"Code string provided but no <TAB;...> tags found. Processing cannot proceed based on Tabs.\");\r\n        }\r\n        return []; \r\n    } \r\n    for (let i = 0; i < indices.length; i++) {\r\n        const start = indices[i].index;\r\n        const tag = indices[i].tag;\r\n        const end = (i + 1 < indices.length) ? indices[i + 1].index : codeString.length;\r\n        const blockText = codeString.substring(start, end).trim();\r\n        if (blockText) {\r\n            tabBlocks.push({ tag: tag, text: blockText });\r\n        }\r\n    }\r\n    return tabBlocks;\r\n}\r\n\r\n// Helper function to find max driver numbers in existing text\r\nfunction getMaxDriverNumbers(text) {\r\n    const maxNumbers = {};\r\n    // MODIFIED Regex: Allow optional spaces around =\r\n    const regex = /row\\d+\\s*=\\s*\"([A-Z]+)(\\d*)\\|/g;\r\n    let match;\r\n    console.log(\"Scanning text for drivers:\", text.substring(0, 200) + \"...\"); // Log input text\r\n\r\n    while ((match = regex.exec(text)) !== null) {\r\n        const prefix = match[1];\r\n        const numberStr = match[2];\r\n        const number = numberStr ? parseInt(numberStr, 10) : 0;\r\n        console.log(`Found driver match: prefix='${prefix}', numberStr='${numberStr}', number=${number}`); // Log each match\r\n\r\n        if (isNaN(number)) {\r\n             console.warn(`Parsed NaN for number from '${numberStr}' for prefix '${prefix}'. Skipping.`);\r\n             continue;\r\n        }\r\n\r\n        if (!maxNumbers[prefix] || number > maxNumbers[prefix]) {\r\n            maxNumbers[prefix] = number;\r\n            console.log(`Updated max for '${prefix}' to ${number}`); // Log updates\r\n        }\r\n    }\r\n    if (Object.keys(maxNumbers).length === 0) {\r\n        console.log(\"No existing drivers found matching the pattern.\");\r\n    }\r\n    console.log(\"Final max existing driver numbers:\", maxNumbers);\r\n    return maxNumbers;\r\n}\r\n\r\n// NEW FUNCTION SPECIFICALLY FOR AI MODEL PLANNER OUTPUT (ALWAYS FIRST PASS)\r\nexport async function processModelCodesForPlanner(modelCodesString) {\r\n    console.log(`[processModelCodesForPlanner] Called with ModelCodes.`);\r\n    if (DEBUG) console.log(\"[processModelCodesForPlanner] Input (first 500 chars):\", modelCodesString.substring(0,500));\r\n\r\n    // Substitute <BR> with <BR; labelRow=\"\"; row1 = \"||||||||||||\";>\r\n    if (modelCodesString && typeof modelCodesString === 'string') {\r\n        modelCodesString = modelCodesString.replace(/<BR>/g, '<BR; labelRow=\"\"; row1 = \"||||||||||||\";>');\r\n    }\r\n\r\n    let runResult = null;\r\n\r\n    try {\r\n        // 0. Set calculation mode to manual\r\n        await Excel.run(async (context) => {\r\n            context.application.calculationMode = Excel.CalculationMode.manual;\r\n            await context.sync();\r\n            console.log(\"[processModelCodesForPlanner] Calculation mode set to manual.\");\r\n        });\r\n\r\n        // 1. Validate all incoming codes\r\n        if (modelCodesString.trim().length > 0) {\r\n            console.log(\"[processModelCodesForPlanner] Validating ALL codes...\");\r\n            const validationErrors = await validateCodeStringsForRun(modelCodesString.split(/\\r?\\n/).filter(line => line.trim() !== ''));\r\n            if (validationErrors && validationErrors.length > 0) {\r\n                const errorMsg = \"Code validation failed for planner-generated codes:\\n\" + validationErrors.join(\"\\n\");\r\n                console.error(\"[processModelCodesForPlanner] Code validation failed:\", validationErrors);\r\n                throw new Error(errorMsg);\r\n            }\r\n            console.log(\"[processModelCodesForPlanner] Code validation successful.\");\r\n        } else {\r\n            console.log(\"[processModelCodesForPlanner] No codes provided by planner to validate or process. Exiting.\");\r\n            return; \r\n        }\r\n\r\n        // 2. Insert base sheets from Worksheets_4.3.25 v1.xlsx\r\n        console.log(\"[processModelCodesForPlanner] Inserting base sheets from Worksheets_4.3.25 v1.xlsx...\");\r\n        const worksheetsResponse = await fetch('https://localhost:3002/assets/Worksheets_4.3.25 v1.xlsx');\r\n        if (!worksheetsResponse.ok) throw new Error(`[processModelCodesForPlanner] Worksheets_4.3.25 v1.xlsx load failed: ${worksheetsResponse.statusText}`);\r\n        const wsArrayBuffer = await worksheetsResponse.arrayBuffer();\r\n        const wsUint8Array = new Uint8Array(wsArrayBuffer);\r\n        let wsBinaryString = '';\r\n        for (let i = 0; i < wsUint8Array.length; i += 8192) {\r\n            wsBinaryString += String.fromCharCode.apply(null, wsUint8Array.slice(i, Math.min(i + 8192, wsUint8Array.length)));\r\n        }\r\n        await handleInsertWorksheetsFromBase64(btoa(wsBinaryString));\r\n        console.log(\"[processModelCodesForPlanner] Base sheets (Worksheets_4.3.25 v1.xlsx) inserted.\");\r\n\r\n        // 3. Insert codes.xlsx (as runCodes depends on it)\r\n        console.log(\"[processModelCodesForPlanner] Inserting codes.xlsx...\");\r\n        const codesResponse = await fetch('https://localhost:3002/assets/codes.xlsx');\r\n        if (!codesResponse.ok) throw new Error(`[processModelCodesForPlanner] codes.xlsx load failed: ${codesResponse.statusText}`);\r\n        const codesArrayBuffer = await codesResponse.arrayBuffer();\r\n        const codesUint8Array = new Uint8Array(codesArrayBuffer);\r\n        let codesBinaryString = '';\r\n        for (let i = 0; i < codesUint8Array.length; i += 8192) {\r\n            codesBinaryString += String.fromCharCode.apply(null, codesUint8Array.slice(i, Math.min(i + 8192, codesUint8Array.length)));\r\n        }\r\n        await handleInsertWorksheetsFromBase64(btoa(codesBinaryString), [\"Codes\"]); \r\n        console.log(\"[processModelCodesForPlanner] codes.xlsx sheets inserted/updated.\");\r\n    \r\n        // 4. Execute runCodes\r\n        console.log(\"[processModelCodesForPlanner] Populating collection...\");\r\n        const collection = populateCodeCollection(modelCodesString);\r\n        console.log(`[processModelCodesForPlanner] Collection populated with ${collection.length} code(s)`);\r\n\r\n        if (collection.length > 0) {\r\n            console.log(\"[processModelCodesForPlanner] Running codes...\");\r\n            runResult = await runCodes(collection);\r\n            console.log(\"[processModelCodesForPlanner] runCodes executed. Result:\", runResult);\r\n        } else {\r\n            console.log(\"[processModelCodesForPlanner] Collection is empty after population, skipping runCodes execution.\");\r\n            runResult = { assumptionTabs: [] };\r\n        }\r\n\r\n        // 5. Post-processing\r\n        console.log(\"[processModelCodesForPlanner] Starting post-processing steps...\");\r\n        if (runResult && runResult.assumptionTabs && runResult.assumptionTabs.length > 0) {\r\n            console.log(\"[processModelCodesForPlanner] Processing assumption tabs...\");\r\n            await processAssumptionTabs(runResult.assumptionTabs);\r\n        } else {\r\n            console.log(\"[processModelCodesForPlanner] No assumption tabs to process from runResult.\");\r\n        }\r\n\r\n        console.log(\"[processModelCodesForPlanner] Hiding specific columns and navigating...\");\r\n        await hideColumnsAndNavigate(runResult?.assumptionTabs || []);\r\n\r\n        // 6. Cleanup Codes sheet\r\n        console.log(\"[processModelCodesForPlanner] Deleting Codes sheet...\");\r\n        await Excel.run(async (context) => {\r\n            try {\r\n                context.workbook.worksheets.getItem(\"Codes\").delete();\r\n                console.log(\"[processModelCodesForPlanner] Codes sheet deleted.\");\r\n            } catch (e) {\r\n                if (e instanceof OfficeExtension.Error && e.code === Excel.ErrorCodes.itemNotFound) {\r\n                    console.warn(\"[processModelCodesForPlanner] Codes sheet not found during cleanup, skipping deletion.\");\r\n                } else { \r\n                    console.error(\"[processModelCodesForPlanner] Error deleting Codes sheet during cleanup:\", e);\r\n                }\r\n            }\r\n            await context.sync();\r\n        }).catch(error => { \r\n            console.error(\"[processModelCodesForPlanner] Error during Codes sheet cleanup sync:\", error);\r\n        });\r\n\r\n        console.log(\"[processModelCodesForPlanner] Successfully completed.\");\r\n\r\n    } catch (error) {\r\n        console.error(\"[processModelCodesForPlanner] Error during processing:\", error);\r\n        throw error; \r\n    } finally {\r\n        try {\r\n            await Excel.run(async (context) => {\r\n                context.application.calculationMode = Excel.CalculationMode.automatic;\r\n                await context.sync();\r\n                console.log(\"[processModelCodesForPlanner] Calculation mode set to automatic.\");\r\n            });\r\n        } catch (finalError) {\r\n            console.error(\"[processModelCodesForPlanner] Error setting calculation mode to automatic:\", finalError);\r\n        }\r\n    }\r\n}\r\n\r\n// Original insertSheetsAndRunCodes function should be here, UNCHANGED.\r\n// Ensure it's not accidentally deleted or modified by the `// ... existing code ...` placeholder.\r\nasync function insertSheetsAndRunCodes() {\r\n    const codesTextarea = document.getElementById('codes-textarea');\r\n    if (!codesTextarea) {\r\n        showError(\"Could not find the code input area. Cannot run codes.\");\r\n        return;\r\n    }\r\n    loadedCodeStrings = codesTextarea.value; // Update global variable\r\n\r\n    // Substitute <BR> with <BR; labelRow=\"\"; row1 = \"||||||||||||\";>\r\n    if (loadedCodeStrings && typeof loadedCodeStrings === 'string') {\r\n        loadedCodeStrings = loadedCodeStrings.replace(/<BR>/g, '<BR; labelRow=\"\"; row1 = \"||||||||||||\";>');\r\n    }\r\n\r\n    try {\r\n        localStorage.setItem('userCodeStrings', loadedCodeStrings);\r\n        console.log(\"[Run Codes] Automatically saved codes from textarea to localStorage.\");\r\n    } catch (error) {\r\n        console.error(\"[Run Codes] Error auto-saving codes to localStorage:\", error);\r\n        showError(`Error automatically saving codes: ${error.message}. Run may not reflect latest changes.`);\r\n    }\r\n\r\n    let codesToRun = loadedCodeStrings;\r\n    let previousCodes = null;\r\n    let allCodeContentToProcess = \"\"; \r\n    let runResult = null; \r\n\r\n    // Substitute <BR> with <BR; labelRow=\"\"; row1 = \"||||||||||||\";> in codesToRun as well, as it's derived from loadedCodeStrings after potential modification\r\n    if (codesToRun && typeof codesToRun === 'string') {\r\n        codesToRun = codesToRun.replace(/<BR>/g, '<BR; labelRow=\"\"; row1 = \"||||||||||||\";>');\r\n    }\r\n\r\n    try {\r\n        let financialsSheetExists = false;\r\n        await Excel.run(async (context) => {\r\n            try {\r\n                const financialsSheet = context.workbook.worksheets.getItem(\"Financials\");\r\n                financialsSheet.load(\"name\");\r\n                await context.sync();\r\n                financialsSheetExists = true;\r\n            } catch (error) {\r\n                if (error instanceof OfficeExtension.Error && error.code === Excel.ErrorCodes.itemNotFound) {\r\n                    financialsSheetExists = false;\r\n                } else { throw error; } \r\n            }\r\n        });\r\n\r\n        await Excel.run(async (context) => {\r\n            context.application.calculationMode = Excel.CalculationMode.manual;\r\n            await context.sync();\r\n        });\r\n\r\n        setButtonLoading(true);\r\n        console.log(\"Starting code processing...\");\r\n\r\n        if (!financialsSheetExists) {\r\n            console.log(\"[Run Codes] FIRST PASS: Financials sheet not found.\");\r\n            allCodeContentToProcess = codesToRun;\r\n            if (allCodeContentToProcess.trim().length > 0) {\r\n                const validationErrors = await validateCodeStringsForRun(allCodeContentToProcess.split(/\\r?\\n/).filter(line => line.trim() !== ''));\r\n                if (validationErrors && validationErrors.length > 0) {\r\n                    const errorMsg = \"Initial validation failed. Please fix the errors before running:\\n\" + validationErrors.join(\"\\n\");\r\n                    console.error(\"Code validation failed:\", validationErrors);\r\n                    showError(\"Code validation failed. See chat for details.\");\r\n                    appendMessage(errorMsg);\r\n                    setButtonLoading(false);\r\n                    return;\r\n                }\r\n                console.log(\"Initial code validation successful.\");\r\n            } else {\r\n                console.log(\"[Run Codes] No codes to validate on first pass.\");\r\n            }\r\n            const worksheetsResponse = await fetch('https://localhost:3002/assets/Worksheets_4.3.25 v1.xlsx');\r\n            if (!worksheetsResponse.ok) throw new Error(`Worksheets load failed: ${worksheetsResponse.statusText}`);\r\n            const worksheetsArrayBuffer = await worksheetsResponse.arrayBuffer();\r\n            const worksheetsUint8Array = new Uint8Array(worksheetsArrayBuffer);\r\n            let worksheetsBinaryString = '';\r\n            const chunkSize = 8192;\r\n            for (let i = 0; i < worksheetsUint8Array.length; i += chunkSize) {\r\n                const chunk = worksheetsUint8Array.slice(i, Math.min(i + chunkSize, worksheetsUint8Array.length));\r\n                worksheetsBinaryString += String.fromCharCode.apply(null, chunk);\r\n            }\r\n            const worksheetsBase64String = btoa(worksheetsBinaryString);\r\n            await handleInsertWorksheetsFromBase64(worksheetsBase64String);\r\n            console.log(\"Base sheets inserted.\");\r\n        } else {\r\n            console.log(\"[Run Codes] SUBSEQUENT PASS: Financials sheet found.\");\r\n            try {\r\n                previousCodes = localStorage.getItem('previousRunCodeStrings');\r\n            } catch (error) {\r\n                 console.error(\"[Run Codes] Error loading previous codes for comparison:\", error);\r\n                 console.warn(\"[Run Codes] Could not load previous codes. Processing ALL current codes as fallback.\");\r\n                 previousCodes = null;\r\n            }\r\n            if (previousCodes !== null && previousCodes === codesToRun) {\r\n                 console.log(\"[Run Codes] No change in code strings since last run. Nothing to process.\");\r\n                 try { localStorage.setItem('previousRunCodeStrings', codesToRun); } catch(e) { console.error(\"Err updating prev codes:\", e); }\r\n                 showMessage(\"No code changes to run.\");\r\n                 setButtonLoading(false);\r\n                 return;\r\n            }\r\n            const currentTabs = getTabBlocks(codesToRun);\r\n            const previousTabs = getTabBlocks(previousCodes || \"\");\r\n            const previousTabMap = new Map(previousTabs.map(block => [block.tag, block.text]));\r\n            let hasAnyChanges = false;\r\n            const codeRegex = /<[^>]+>/g;\r\n            for (const currentTab of currentTabs) {\r\n                const currentTag = currentTab.tag;\r\n                const currentText = currentTab.text;\r\n                const previousText = previousTabMap.get(currentTag);\r\n                if (previousText === undefined) {\r\n                    const newTabCodes = currentText.match(codeRegex) || [];\r\n                    if (newTabCodes.length > 0) {\r\n                        allCodeContentToProcess += newTabCodes.join(\"\\n\") + \"\\n\\n\";\r\n                        hasAnyChanges = true;\r\n                    }\r\n                } else {\r\n                    const currentCodes = currentText.match(codeRegex) || [];\r\n                    const previousCodesSet = new Set((previousText || \"\").match(codeRegex) || []);\r\n                    let tabHasChanges = false;\r\n                    let codesToAddForThisTab = \"\";\r\n                    for (const currentCode of currentCodes) {\r\n                        if (!previousCodesSet.has(currentCode)) {\r\n                            codesToAddForThisTab += currentCode + \"\\n\";\r\n                            hasAnyChanges = true;\r\n                            tabHasChanges = true;\r\n                        }\r\n                    }\r\n                    if (tabHasChanges) {\r\n                        allCodeContentToProcess += currentTag + \"\\n\" + codesToAddForThisTab + \"\\n\";\r\n                    }\r\n                }\r\n            }\r\n            if (hasAnyChanges) {\r\n                if (allCodeContentToProcess.trim().length > 0) {\r\n                    const validationErrors = await validateCodeStringsForRun(allCodeContentToProcess.split(/\\r?\\n/).filter(line => line.trim() !== ''));\r\n                    if (validationErrors && validationErrors.length > 0) {\r\n                        const errorMsg = \"Validation failed. Please fix the errors before running:\\n\" + validationErrors.join(\"\\n\");\r\n                        console.error(\"Code validation failed:\", validationErrors);\r\n                        showError(\"Code validation failed. See chat for details.\");\r\n                        appendMessage(errorMsg);\r\n                        setButtonLoading(false);\r\n                        return;\r\n                    }\r\n                    console.log(\"Code validation successful for new/modified tabs.\");\r\n                } else {\r\n                    console.log(\"[Run Codes] Changes detected, but no code content found for validation in new/modified tabs.\");\r\n                }\r\n                try {\r\n                    const codesResponse = await fetch('https://localhost:3002/assets/codes.xlsx');\r\n                    if (!codesResponse.ok) throw new Error(`codes.xlsx load failed: ${codesResponse.statusText}`);\r\n                    const codesArrayBuffer = await codesResponse.arrayBuffer();\r\n                    const codesUint8Array = new Uint8Array(codesArrayBuffer);\r\n                    let codesBinaryString = '';\r\n                    for (let i = 0; i < codesUint8Array.length; i += 8192) {\r\n                        codesBinaryString += String.fromCharCode.apply(null, codesUint8Array.slice(i, Math.min(i + 8192, codesUint8Array.length)));\r\n                    }\r\n                    await handleInsertWorksheetsFromBase64(btoa(codesBinaryString), [\"Codes\"]);\r\n                    console.log(\"codes.xlsx sheets inserted.\");\r\n                } catch (e) {\r\n                    console.error(\"Failed to insert sheets from codes.xlsx:\", e);\r\n                    showError(\"Failed to insert necessary sheets from codes.xlsx. Aborting.\");\r\n                    setButtonLoading(false);\r\n                    return;\r\n                }\r\n            } else {\r\n                 console.log(\"[Run Codes] No changes identified in tabs compared to previous run. Nothing to insert or process.\");\r\n                 try { localStorage.setItem('previousRunCodeStrings', codesToRun); } catch(e) { console.error(\"Err updating prev codes:\", e); }\r\n                 showMessage(\"No code changes identified to run.\");\r\n                 setButtonLoading(false);\r\n                 return;\r\n            }\r\n        }\r\n\r\n        if (allCodeContentToProcess.trim().length > 0) {\r\n            const collection = populateCodeCollection(allCodeContentToProcess);\r\n            if (collection.length > 0) {\r\n                runResult = await runCodes(collection);\r\n                console.log(\"Codes executed:\", runResult);\r\n            } else {\r\n                 if (!runResult) runResult = { assumptionTabs: [] };\r\n            }\r\n        } else {\r\n             if (!runResult) runResult = { assumptionTabs: [] };\r\n        }\r\n        if (runResult && runResult.assumptionTabs && runResult.assumptionTabs.length > 0) {\r\n            await processAssumptionTabs(runResult.assumptionTabs);\r\n        } else {\r\n             console.log(\"No assumption tabs to process.\");\r\n        }\r\n        await hideColumnsAndNavigate(runResult?.assumptionTabs || []);\r\n        await Excel.run(async (context) => {\r\n            try {\r\n                context.workbook.worksheets.getItem(\"Codes\").delete();\r\n            } catch (e) {\r\n                if (e instanceof OfficeExtension.Error && e.code === Excel.ErrorCodes.itemNotFound) {\r\n                     console.warn(\"Codes sheet not found, skipping deletion.\");\r\n                } else { console.error(\"Error deleting Codes sheet:\", e); }\r\n            }\r\n            await context.sync();\r\n        }).catch(error => { console.error(\"Error during sheet cleanup:\", error); });\r\n        try {\r\n            localStorage.setItem('previousRunCodeStrings', codesToRun);\r\n        } catch (error) {\r\n             console.error(\"[Run Codes] Failed to update previous run state:\", error);\r\n        }\r\n        showMessage(\"Code processing finished successfully!\");\r\n    } catch (error) {\r\n        console.error(\"An error occurred during the build process:\", error);\r\n        showError(`Operation failed: ${error.message || error.toString()}`);\r\n    } finally {\r\n        try {\r\n            await Excel.run(async (context) => {\r\n                context.application.calculationMode = Excel.CalculationMode.automatic;\r\n                await context.sync();\r\n            });\r\n        } catch (finalError) {\r\n            console.error(\"Error setting calculation mode to automatic:\", finalError);\r\n        }\r\n        setButtonLoading(false);\r\n    }\r\n}\r\n\r\nOffice.onReady((info) => {\r\n  if (info.host === Office.HostType.Excel) {\r\n    // Get references to the new elements\r\n    const startupMenu = document.getElementById('startup-menu');\r\n    const developerModeButton = document.getElementById('developer-mode-button');\r\n    const clientModeButton = document.getElementById('client-mode-button');\r\n    const appBody = document.getElementById('app-body'); // Already exists, ensure it's captured\r\n    const clientModeView = document.getElementById('client-mode-view');\r\n\r\n    // Functions to switch views\r\n    function showDeveloperMode() {\r\n      if (startupMenu) startupMenu.style.display = 'none';\r\n      if (appBody) appBody.style.display = 'flex'; // Matches .ms-welcome__main display if it's flex\r\n      if (clientModeView) clientModeView.style.display = 'none';\r\n      console.log(\"Developer Mode activated\");\r\n    }\r\n\r\n    function showClientMode() {\r\n      if (startupMenu) startupMenu.style.display = 'none';\r\n      if (appBody) appBody.style.display = 'none';\r\n      if (clientModeView) clientModeView.style.display = 'flex'; // Matches .ms-welcome__main display\r\n      console.log(\"Client Mode activated\");\r\n    }\r\n\r\n    // Assign click handlers for startup menu buttons\r\n    if (developerModeButton) {\r\n        developerModeButton.onclick = showDeveloperMode;\r\n    } else {\r\n        console.error(\"Could not find button with id='developer-mode-button'\");\r\n    }\r\n    if (clientModeButton) {\r\n        clientModeButton.onclick = showClientMode;\r\n    } else {\r\n        console.error(\"Could not find button with id='client-mode-button'\");\r\n    }\r\n\r\n    // Assign the REVISED async function as the handler\r\n    const button = document.getElementById(\"insert-and-run\");\r\n    if (button) {\r\n        button.onclick = insertSheetsAndRunCodes; // Use the revised function\r\n    } else {\r\n        console.error(\"Could not find button with id='insert-and-run'\");\r\n    }\r\n\r\n    // ... (rest of your Office.onReady remains the same) ...\r\n\r\n    // Keep the setup for your other buttons (send-button, reset-button, etc.)\r\n    const sendButton = document.getElementById('send');\r\n    if (sendButton) sendButton.onclick = handleSend;\r\n\r\n    const writeButton = document.getElementById('write-to-excel');\r\n    if (writeButton) writeButton.onclick = writeToExcel;\r\n\r\n    const resetButton = document.getElementById('reset-chat');\r\n    if (resetButton) resetButton.onclick = resetChat;\r\n\r\n    // >>> ADDED: Setup for Client Mode Chat Buttons\r\n    const sendClientButton = document.getElementById('send-client');\r\n    if (sendClientButton) sendClientButton.onclick = handleSendClient;\r\n\r\n    const resetChatClientButton = document.getElementById('reset-chat-client');\r\n    if (resetChatClientButton) resetChatClientButton.onclick = resetChatClient;\r\n\r\n    const writeToExcelClientButton = document.getElementById('write-to-excel-client');\r\n    if (writeToExcelClientButton) {\r\n        writeToExcelClientButton.onclick = () => alert('Client Mode \\\"Write to Excel\\\" is not yet implemented.');\r\n    }\r\n    const insertToEditorClientButton = document.getElementById('insert-to-editor-client');\r\n    if (insertToEditorClientButton) {\r\n        insertToEditorClientButton.onclick = () => alert('Client Mode \\\"Insert to Editor\\\" is not yet implemented.');\r\n    }\r\n    // <<< END ADDED\r\n\r\n    // >>> ADDED: Setup for Generate Tab String button\r\n    const generateTabStringButton = document.getElementById('generate-tab-string-button');\r\n    if (generateTabStringButton) {\r\n        generateTabStringButton.onclick = generateTabString; // Assign the imported function\r\n    } else {\r\n        console.error(\"Could not find button with id='generate-tab-string-button'\");\r\n    }\r\n    // <<< END ADDED CODE\r\n\r\n    const codesTextarea = document.getElementById('codes-textarea');\r\n    const editParamsButton = document.getElementById('edit-code-params-button');\r\n    const paramsModal = document.getElementById('code-params-modal');\r\n    const paramsModalForm = document.getElementById('code-params-modal-form');\r\n    const closeModalButton = paramsModal.querySelector('.close-button');\r\n    const applyParamsButton = document.getElementById('apply-code-params-button');\r\n    const cancelParamsButton = document.getElementById('cancel-code-params-button');\r\n\r\n    // Modal Find/Replace elements\r\n    const modalFindInput = document.getElementById('modal-find-input');\r\n    const modalReplaceInput = document.getElementById('modal-replace-input');\r\n    const modalReplaceAllButton = document.getElementById('modal-replace-all-button');\r\n    const modalSearchStatus = document.getElementById('modal-search-status');\r\n\r\n    let currentCodeStringRange = null; // To store {start, end} of the code string being edited\r\n    let currentCodeStringType = ''; // To store the type like 'VOL-EV'\r\n\r\n    // State for modal find/replace (Simplified)\r\n    let modalSearchableElements = []; // Stores {element, originalValue}\r\n    // Removed modalSearchTerm, modalCurrentMatchIndex, modalAllMatches\r\n\r\n    // Function to reset modal search state (Simplified)\r\n    const resetModalSearchState = () => {\r\n        modalSearchableElements = Array.from(paramsModalForm.querySelectorAll('input[data-param-key], textarea[data-param-key]'));\r\n        if (modalSearchStatus) modalSearchStatus.textContent = '';\r\n        // Clear input fields as well?\r\n        // if (modalFindInput) modalFindInput.value = '';\r\n        // if (modalReplaceInput) modalReplaceInput.value = '';\r\n        console.log(\"Modal search state reset.\");\r\n    };\r\n\r\n    // Function to update modal search status\r\n    const updateModalSearchStatus = (message) => {\r\n        if (modalSearchStatus) {\r\n            modalSearchStatus.textContent = message;\r\n        }\r\n    };\r\n\r\n    // Removed findAllMatchesInModal function\r\n\r\n    // Function to show the modal\r\n    const showParamsModal = () => {\r\n        if (paramsModal) {\r\n            paramsModal.style.display = 'block';\r\n            resetModalSearchState(); // Reset search when modal opens\r\n        }\r\n    };\r\n\r\n    // Function to hide the modal\r\n    const hideParamsModal = () => {\r\n        if (paramsModal) {\r\n            paramsModal.style.display = 'none';\r\n            paramsModalForm.innerHTML = ''; // Clear the form\r\n            currentCodeStringRange = null; // Reset state\r\n            currentCodeStringType = '';\r\n            resetModalSearchState(); // Also reset search state on close\r\n        }\r\n    };\r\n\r\n    // Function to find the <...> block around the cursor\r\n    const findCodeStringAroundCursor = (text, cursorPos) => {\r\n        const textBeforeCursor = text.substring(0, cursorPos);\r\n        const textAfterCursor = text.substring(cursorPos);\r\n\r\n        const lastOpenBracket = textBeforeCursor.lastIndexOf('<');\r\n        const lastCloseBracketBefore = textBeforeCursor.lastIndexOf('>');\r\n\r\n        // Check if cursor is potentially inside brackets\r\n        if (lastOpenBracket > lastCloseBracketBefore) {\r\n            const firstCloseBracketAfter = textAfterCursor.indexOf('>');\r\n            if (firstCloseBracketAfter !== -1) {\r\n                const start = lastOpenBracket;\r\n                const end = cursorPos + firstCloseBracketAfter + 1; // +1 to include '>'\r\n                const codeString = text.substring(start, end);\r\n                console.log(`Found code string: ${codeString} at range [${start}, ${end})`);\r\n                return { codeString, start, end };\r\n            }\r\n        }\r\n        console.log(\"Cursor not inside a <...> block.\");\r\n        return null; // Cursor is not inside a valid <...> block\r\n    };\r\n\r\n    // Function to parse parameters from the code string content (inside <...>)\r\n    const parseCodeParameters = (content) => {\r\n        const parts = content.split(';');\r\n        if (parts.length < 1) return { type: '', params: {} };\r\n\r\n        const type = parts[0].trim();\r\n        const params = {};\r\n        // Regex to match key=\"value\" or key=value (no quotes)\r\n        const paramRegex = /\\s*([^=\\s]+)\\s*=\\s*(?:\"([^\"]*)\"|([^;]*))/g;\r\n\r\n        for (let i = 1; i < parts.length; i++) {\r\n            const part = parts[i].trim();\r\n            if (!part) continue;\r\n\r\n            // Reset regex index before each exec\r\n            paramRegex.lastIndex = 0;\r\n            const match = paramRegex.exec(part);\r\n\r\n            if (match) {\r\n                const key = match[1];\r\n                // Value could be in group 2 (quoted) or group 3 (unquoted)\r\n                const value = match[2] !== undefined ? match[2] : match[3];\r\n                 if (key) { // Ensure key is valid\r\n                    params[key] = value.trim();\r\n                }\r\n            } else {\r\n                console.warn(`Could not parse parameter part: '${part}'`);\r\n            }\r\n        }\r\n        console.log(`Parsed type: ${type}, params:`, params);\r\n        return { type, params };\r\n    };\r\n\r\n    // Function to populate the modal form (needs to update searchable elements)\r\n    const populateParamsModal = (type, params) => {\r\n        paramsModalForm.innerHTML = ''; // Clear previous form items\r\n        currentCodeStringType = type; // Store the type\r\n\r\n        Object.entries(params).forEach(([key, value]) => {\r\n            const paramEntryDiv = document.createElement('div');\r\n            paramEntryDiv.className = 'param-entry';\r\n\r\n            const label = document.createElement('label');\r\n            label.htmlFor = `param-${key}`;\r\n            label.textContent = key;\r\n\r\n            let inputElement;\r\n            const isLongValue = key.toLowerCase().includes('row') || value.length > 60;\r\n            const isLIParam = /LI\\d+\\|/.test(value.trim()); // Check if value starts with LI<digit>|\r\n\r\n            if (isLongValue || isLIParam) { // Use textarea for LI params too, for consistency\r\n                inputElement = document.createElement('textarea');\r\n                inputElement.rows = isLIParam ? 2 : 3; // Slightly smaller for LI rows initially\r\n            } else {\r\n                inputElement = document.createElement('input');\r\n                inputElement.type = 'text';\r\n            }\r\n\r\n            inputElement.id = `param-${key}`;\r\n            inputElement.value = value;\r\n            inputElement.dataset.paramKey = key;\r\n            if (isLIParam) {\r\n                inputElement.dataset.isOriginalLi = \"true\"; // Mark original LI fields\r\n            }\r\n\r\n            paramEntryDiv.appendChild(label);\r\n\r\n            if (isLIParam) {\r\n                // Create a container for the LI field and its add button\r\n                const liContainer = document.createElement('div');\r\n                liContainer.className = 'li-parameter-container';\r\n                liContainer.dataset.originalLiKey = key; // Link container to original key\r\n\r\n                liContainer.appendChild(inputElement); // Add the input field first\r\n\r\n                // Create the Add button\r\n                const addButton = document.createElement('button');\r\n                addButton.type = 'button'; // Important: prevent form submission\r\n                addButton.textContent = '+';\r\n                addButton.className = 'ms-Button ms-Button--icon add-li-button'; // Add specific class\r\n                addButton.title = 'Add another LI item based on this one';\r\n                addButton.dataset.targetLiKey = key; // Link button to the input's key\r\n\r\n                addButton.onclick = (event) => {\r\n                    const sourceInput = document.getElementById(`param-${key}`);\r\n                    if (!sourceInput) return;\r\n\r\n                    const newValueContainer = document.createElement('div');\r\n                    newValueContainer.className = 'added-li-item';\r\n\r\n                    const newInput = sourceInput.cloneNode(true); // Clone the original input/textarea\r\n                    // Clear ID, mark as added, remove original marker\r\n                    newInput.id = '';\r\n                    newInput.dataset.isAddedLi = \"true\";\r\n                    delete newInput.dataset.isOriginalLi;\r\n                    newInput.dataset.originalLiKey = key; // Link back to the original key\r\n                    // Keep the same value as the original initially\r\n                    newInput.value = sourceInput.value; // Duplicate the content\r\n\r\n                    // Add a remove button for the added item\r\n                    const removeButton = document.createElement('button');\r\n                    removeButton.type = 'button';\r\n                    removeButton.textContent = '-';\r\n                    removeButton.className = 'ms-Button ms-Button--icon remove-li-button';\r\n                    removeButton.title = 'Remove this added LI item';\r\n                    removeButton.onclick = () => {\r\n                        newValueContainer.remove();\r\n                    };\r\n\r\n                    newValueContainer.appendChild(newInput);\r\n                    newValueContainer.appendChild(removeButton);\r\n\r\n                    // Insert the new container after the clicked button\r\n                    // or after the last added item within this container\r\n                    event.target.parentNode.appendChild(newValueContainer);\r\n                     // Maybe scroll container? paramsModalForm.scrollTop = paramsModalForm.scrollHeight;\r\n                };\r\n\r\n                liContainer.appendChild(addButton); // Add button after input\r\n                paramEntryDiv.appendChild(liContainer); // Add container to entry div\r\n\r\n            } else {\r\n                 paramEntryDiv.appendChild(inputElement); // Non-LI params added directly\r\n            }\r\n\r\n            paramsModalForm.appendChild(paramEntryDiv);\r\n        });\r\n        // IMPORTANT: Update searchable elements after populating\r\n        resetModalSearchState(); // Reset search state after populating form\r\n    };\r\n\r\n    // --- Event Listener for the Edit Parameters Button ---\r\n    if (editParamsButton && codesTextarea && paramsModal) {\r\n        editParamsButton.onclick = () => {\r\n            const text = codesTextarea.value;\r\n            const cursorPos = codesTextarea.selectionStart;\r\n\r\n            const codeInfo = findCodeStringAroundCursor(text, cursorPos);\r\n\r\n            if (codeInfo) {\r\n                // Extract content within < >\r\n                const content = codeInfo.codeString.substring(1, codeInfo.codeString.length - 1);\r\n                const { type, params } = parseCodeParameters(content);\r\n\r\n                if (type) {\r\n                    currentCodeStringRange = { start: codeInfo.start, end: codeInfo.end };\r\n                    populateParamsModal(type, params);\r\n                    showParamsModal();\r\n                } else {\r\n                    showError(\"Could not parse the code string structure.\");\r\n                }\r\n            } else {\r\n                showError(\"Place cursor inside a <...> code block to edit parameters.\");\r\n            }\r\n        };\r\n    }\r\n\r\n    // --- Event Listeners for Modal Actions ---\r\n    if (closeModalButton) {\r\n        closeModalButton.onclick = hideParamsModal;\r\n    }\r\n    if (cancelParamsButton) {\r\n        cancelParamsButton.onclick = hideParamsModal;\r\n    }\r\n\r\n    // --- APPLY CHANGES LOGIC (MODIFIED) ---\r\n    if (applyParamsButton && codesTextarea) {\r\n        applyParamsButton.onclick = () => {\r\n            if (!currentCodeStringRange || !currentCodeStringType) return; // Safety check\r\n\r\n            // Use a map to reconstruct parameters, handling LI aggregation\r\n            const paramValues = {};\r\n\r\n            // Process all input/textarea fields in the form\r\n            const formElements = paramsModalForm.querySelectorAll('input[data-param-key], textarea[data-param-key]');\r\n\r\n            formElements.forEach(input => {\r\n                const key = input.dataset.paramKey;\r\n                const isOriginalLI = input.dataset.isOriginalLi === \"true\";\r\n                const isAddedLI = input.dataset.isAddedLi === \"true\";\r\n                const value = input.value;\r\n\r\n                if (isOriginalLI) {\r\n                    // If it's an original LI, initialize its value in the map\r\n                    if (!paramValues[key]) {\r\n                        paramValues[key] = value; // Start with the original value\r\n                    }\r\n                } else if (isAddedLI) {\r\n                    // This case handled below by finding related elements\r\n                    // We only need to store original keys first\r\n                } else if (key && !isAddedLI) {\r\n                    // Standard parameter, just store its value\r\n                     if (!paramValues[key]) { // Check prevents overwriting if key appears twice (shouldn't happen)\r\n                       paramValues[key] = value;\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Now, aggregate added LI items\r\n            const addedLiElements = paramsModalForm.querySelectorAll('textarea[data-is-added-li=\"true\"]');\r\n            addedLiElements.forEach(addedInput => {\r\n                 const originalKey = addedInput.dataset.originalLiKey;\r\n                 if (originalKey && paramValues[originalKey]) {\r\n                      // Append the added value, prefixed with *\r\n                      paramValues[originalKey] += ` *${addedInput.value}`;\r\n                 }\r\n            });\r\n\r\n            // Build the final parameter string parts\r\n            const updatedParams = Object.entries(paramValues).map(([key, finalValue]) => {\r\n                 // Re-add quotes around the final aggregated value\r\n                 return `${key}=\"${finalValue}\"`;\r\n            });\r\n\r\n            // Reconstruct the code string\r\n            const newCodeStringContent = `${currentCodeStringType}; ${updatedParams.join('; ')}`;\r\n            const newCodeString = `<${newCodeStringContent}>`;\r\n\r\n            // Update the textarea content\r\n            const currentText = codesTextarea.value;\r\n            const textBefore = currentText.substring(0, currentCodeStringRange.start);\r\n            const textAfter = currentText.substring(currentCodeStringRange.end);\r\n\r\n            codesTextarea.value = textBefore + newCodeString + textAfter;\r\n\r\n            console.log(`Updated code string at [${currentCodeStringRange.start}, ${currentCodeStringRange.start + newCodeString.length})`);\r\n            console.log(\"New string:\", newCodeString);\r\n\r\n            // Optionally, update cursor position\r\n            const newCursorPos = currentCodeStringRange.start + newCodeString.length;\r\n            codesTextarea.focus();\r\n            codesTextarea.setSelectionRange(newCursorPos, newCursorPos);\r\n\r\n            hideParamsModal(); // Close modal after applying\r\n        };\r\n    }\r\n\r\n    // --- Modal Find/Replace Logic (Simplified) ---\r\n\r\n    const modalReplaceAll = () => {\r\n        const searchTerm = modalFindInput.value;\r\n        const replaceTerm = modalReplaceInput.value;\r\n        if (!searchTerm) {\r\n            updateModalSearchStatus(\"Enter search term.\");\r\n            return;\r\n        }\r\n\r\n        // Ensure searchable elements are up-to-date\r\n        modalSearchableElements = Array.from(paramsModalForm.querySelectorAll('input[data-param-key], textarea[data-param-key]'));\r\n\r\n        let replacementsMade = 0;\r\n        modalSearchableElements.forEach((element, index) => {\r\n            let currentValue = element.value;\r\n            // Escape regex special characters in search term\r\n            const escapedSearchTerm = searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n            let newValue = currentValue.replace(new RegExp(escapedSearchTerm, 'g'), () => {\r\n                replacementsMade++;\r\n                return replaceTerm;\r\n            });\r\n            if (currentValue !== newValue) {\r\n                element.value = newValue;\r\n                console.log(`Modal Replace All: Made replacements in element ${index}`);\r\n            }\r\n        });\r\n\r\n        if (replacementsMade > 0) {\r\n            updateModalSearchStatus(`Replaced ${replacementsMade} occurrence(s).`);\r\n            // No need to reset search state as there's no find next\r\n        } else {\r\n            updateModalSearchStatus(`\"${searchTerm}\" not found.`);\r\n        }\r\n    };\r\n\r\n    // Add event listeners for modal find/replace buttons (Simplified)\r\n    // Removed listeners for Find Next and Replace\r\n    if (modalReplaceAllButton) modalReplaceAllButton.onclick = modalReplaceAll;\r\n    // Removed input listener for modalFindInput\r\n\r\n    // --- Event Listeners for Modal Actions ---\r\n    if (closeModalButton) {\r\n        closeModalButton.onclick = hideParamsModal;\r\n    }\r\n\r\n    // ... (rest of your Office.onReady, including suggestion logic, initializations)\r\n\r\n    // Make sure initialization runs after setting up modal logic\r\n    Promise.all([\r\n        initializeAPIKeys(),\r\n        loadCodeDatabase()\r\n    ]).then(([keys]) => {\r\n      if (!keys) {\r\n        showError(\"Failed to load API keys. Please check configuration.\");\r\n      } else {\r\n        // >>> ADDED: Set the API keys in AIcalls module\r\n        setAPIKeys(keys);\r\n      }\r\n      conversationHistory = loadConversationHistory();\r\n\r\n      try {\r\n          const storedCodes = localStorage.getItem('userCodeStrings');\r\n          if (storedCodes !== null) {\r\n              loadedCodeStrings = storedCodes;\r\n              if (codesTextarea) {\r\n                  codesTextarea.value = loadedCodeStrings;\r\n              }\r\n              console.log(\"Code strings loaded from localStorage into global variable.\");\r\n          } else {\r\n              console.log(\"No code strings found in localStorage, initializing global variable as empty.\");\r\n              loadedCodeStrings = \"\";\r\n          }\r\n          // Also load the previous run codes if available\r\n           const storedPreviousCodes = localStorage.getItem('previousRunCodeStrings');\r\n           if (storedPreviousCodes) {\r\n               console.log(\"Previous run code strings loaded from localStorage.\");\r\n           }\r\n\r\n      } catch (error) {\r\n          console.error(\"Error loading code strings from localStorage:\", error);\r\n          showError(`Error loading codes from storage: ${error.message}`);\r\n          loadedCodeStrings = \"\";\r\n      }\r\n\r\n      // >>> MOVED: Assign event listeners AFTER initialization is complete\r\n      // Setup cursor position tracking\r\n      if (codesTextarea) {\r\n          const updateCursorPosition = () => {\r\n              lastEditorCursorPosition = codesTextarea.selectionStart;\r\n              // console.log(`Cursor position updated: ${lastEditorCursorPosition}`); // Optional debug log\r\n          };\r\n          codesTextarea.addEventListener('keyup', updateCursorPosition); // Update on key release\r\n          codesTextarea.addEventListener('mouseup', updateCursorPosition); // Update on mouse click release\r\n          codesTextarea.addEventListener('focus', updateCursorPosition);   // Update when focus is gained\r\n          // codesTextarea.addEventListener('blur', updateCursorPosition); // Maybe don't update on blur?\r\n          console.log(\"[Office.onReady] Added event listeners to codesTextarea for cursor tracking.\"); // <<< DEBUG LOG\r\n      }\r\n\r\n      // Setup Insert to Editor button\r\n      const insertToEditorButton = document.getElementById('insert-to-editor');\r\n      if (insertToEditorButton) {\r\n          console.log(\"[Office.onReady] Found insert-to-editor button.\"); // <<< DEBUG LOG\r\n          insertToEditorButton.onclick = insertResponseToEditor;\r\n          console.log(\"[Office.onReady] Assigned onclick for insert-to-editor button.\"); // <<< DEBUG LOG\r\n      } else {\r\n          console.error(\"[Office.onReady] Could not find button with id='insert-to-editor'\");\r\n      }\r\n      // <<< END MOVED CODE\r\n\r\n      // Startup Menu Logic - Placed before Promise.all to ensure elements are handled\r\n      const startupMenu = document.getElementById('startup-menu');\r\n      const developerModeButton = document.getElementById('developer-mode-button');\r\n      const clientModeButton = document.getElementById('client-mode-button');\r\n      // appBody and clientModeView will be fetched inside showDeveloperMode/showClientMode\r\n      // or assume they are accessible if defined earlier in Office.onReady\r\n\r\n      if (developerModeButton) {\r\n          developerModeButton.onclick = showDeveloperMode; // Assumes showDeveloperMode is globally accessible\r\n      } else {\r\n          console.error(\"[Office.onReady] Could not find button with id='developer-mode-button'\");\r\n      }\r\n      if (clientModeButton) {\r\n          clientModeButton.onclick = showClientMode; // Assumes showClientMode is globally accessible\r\n      } else {\r\n          console.error(\"[Office.onReady] Could not find button with id='client-mode-button'\");\r\n      }\r\n\r\n      // Get references and assign handlers for Back to Menu buttons\r\n      const backToMenuDevButton = document.getElementById('back-to-menu-dev-button');\r\n      const backToMenuClientButton = document.getElementById('back-to-menu-client-button');\r\n\r\n      if (backToMenuDevButton) {\r\n          backToMenuDevButton.onclick = showStartupMenu; // Assumes showStartupMenu is globally accessible\r\n      } else {\r\n          console.error(\"[Office.onReady] Could not find button with id='back-to-menu-dev-button'\");\r\n      }\r\n      if (backToMenuClientButton) {\r\n          backToMenuClientButton.onclick = showStartupMenu; // Assumes showStartupMenu is globally accessible\r\n      } else {\r\n          console.error(\"[Office.onReady] Could not find button with id='back-to-menu-client-button'\");\r\n      }\r\n\r\n      document.getElementById(\"sideload-msg\").style.display = \"none\";\r\n      const appBody = document.getElementById('app-body');\r\n      const clientModeView = document.getElementById('client-mode-view');\r\n\r\n      if (startupMenu) startupMenu.style.display = \"flex\";\r\n      if (appBody) appBody.style.display = \"none\";\r\n      if (clientModeView) clientModeView.style.display = \"none\";\r\n      // End Startup Menu Logic\r\n\r\n    }).catch(error => {\r\n        console.error(\"Error during initialization:\", error);\r\n        showError(\"Error during initialization: \" + error.message);\r\n    });\r\n\r\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\r\n    // document.getElementById(\"app-body\").style.display = \"block\"; // Keep app-body hidden initially\r\n    if (startupMenu) startupMenu.style.display = \"flex\"; // Show startup menu instead\r\n    if (appBody) appBody.style.display = \"none\";\r\n    if (clientModeView) clientModeView.style.display = \"none\";\r\n\r\n    // ... (existing modal logic: applyParamsButton.onclick, window.onclick)\r\n\r\n    // --- Code Suggestion Logic (Restored) ---\r\n    let dynamicSuggestionsContainer = document.getElementById('dynamic-suggestions-container');\r\n    if (!dynamicSuggestionsContainer) {\r\n        dynamicSuggestionsContainer = document.createElement('div');\r\n        dynamicSuggestionsContainer.id = 'dynamic-suggestions-container';\r\n        dynamicSuggestionsContainer.className = 'code-suggestions'; // Reuse class if styling exists\r\n        dynamicSuggestionsContainer.style.display = 'none';\r\n        // Basic positioning styles (adjust in CSS for better control)\r\n        dynamicSuggestionsContainer.style.position = 'absolute';\r\n        dynamicSuggestionsContainer.style.border = '1px solid #ccc';\r\n        dynamicSuggestionsContainer.style.backgroundColor = 'white';\r\n        dynamicSuggestionsContainer.style.maxHeight = '150px';\r\n        dynamicSuggestionsContainer.style.overflowY = 'auto';\r\n        dynamicSuggestionsContainer.style.zIndex = '1000';\r\n\r\n        // Insert after the textarea's container or adjust as needed\r\n        if (codesTextarea && codesTextarea.parentNode) { // Check if codesTextarea exists\r\n            codesTextarea.parentNode.insertBefore(dynamicSuggestionsContainer, codesTextarea.nextSibling);\r\n        } else {\r\n            // Fallback: Append to body, though less ideal positioning\r\n            document.body.appendChild(dynamicSuggestionsContainer);\r\n        }\r\n\r\n        // Function to update position and width\r\n        const updateSuggestionPosition = () => {\r\n          if (dynamicSuggestionsContainer.style.display === 'block' && codesTextarea) {\r\n              const rect = codesTextarea.getBoundingClientRect();\r\n              dynamicSuggestionsContainer.style.width = codesTextarea.offsetWidth + 'px';\r\n              dynamicSuggestionsContainer.style.top = (rect.bottom + window.scrollY) + 'px';\r\n              dynamicSuggestionsContainer.style.left = (rect.left + window.scrollX) + 'px';\r\n          }\r\n        };\r\n\r\n        // Update on resize and scroll\r\n        window.addEventListener('resize', updateSuggestionPosition);\r\n        window.addEventListener('scroll', updateSuggestionPosition, true); // Use capture phase for scroll\r\n    }\r\n\r\n    let highlightedSuggestionIndex = -1;\r\n    let currentSuggestions = [];\r\n\r\n    const updateHighlight = (newIndex) => {\r\n      if (!dynamicSuggestionsContainer) return; // Guard against null\r\n      const suggestionItems = dynamicSuggestionsContainer.querySelectorAll('.code-suggestion-item');\r\n      if (highlightedSuggestionIndex >= 0 && highlightedSuggestionIndex < suggestionItems.length) {\r\n        suggestionItems[highlightedSuggestionIndex].classList.remove('suggestion-highlight');\r\n      }\r\n      if (newIndex >= 0 && newIndex < suggestionItems.length) {\r\n        suggestionItems[newIndex].classList.add('suggestion-highlight');\r\n        suggestionItems[newIndex].scrollIntoView({ block: 'nearest' });\r\n      }\r\n      highlightedSuggestionIndex = newIndex;\r\n    };\r\n\r\n    const showSuggestionsForTerm = (searchTerm) => {\r\n        if (!dynamicSuggestionsContainer || !codesTextarea) return; // Guard against null\r\n\r\n        searchTerm = searchTerm.toLowerCase().trim();\r\n        console.log(`[showSuggestionsForTerm] Search Term: '${searchTerm}'`);\r\n\r\n        dynamicSuggestionsContainer.innerHTML = '';\r\n        highlightedSuggestionIndex = -1;\r\n        currentSuggestions = [];\r\n\r\n        if (searchTerm.length < 2) {\r\n            console.log(\"[showSuggestionsForTerm] Search term too short, hiding suggestions.\");\r\n            dynamicSuggestionsContainer.style.display = 'none';\r\n            return;\r\n        }\r\n\r\n        console.log(\"[showSuggestionsForTerm] Filtering code database...\");\r\n        const suggestions = codeDatabase\r\n            .filter(item => {\r\n                const hasName = item && typeof item.name === 'string';\r\n                return hasName && item.name.toLowerCase().includes(searchTerm);\r\n            })\r\n            .slice(0, 10);\r\n\r\n        currentSuggestions = suggestions;\r\n        console.log(`[showSuggestionsForTerm] Found ${currentSuggestions.length} suggestions:`, currentSuggestions);\r\n\r\n        if (currentSuggestions.length > 0) {\r\n            console.log(\"[showSuggestionsForTerm] Populating suggestions container...\");\r\n            currentSuggestions.forEach((item, i) => {\r\n                const suggestionDiv = document.createElement('div');\r\n                suggestionDiv.className = 'code-suggestion-item';\r\n                suggestionDiv.textContent = item.name;\r\n                suggestionDiv.dataset.index = i;\r\n\r\n                suggestionDiv.onclick = () => {\r\n                    console.log(`Suggestion clicked: '${item.name}'`);\r\n                    const currentText = codesTextarea.value;\r\n                    const cursorPosition = codesTextarea.selectionStart;\r\n                    let codeToAdd = item.code;\r\n\r\n                    let insertionPosition = cursorPosition;\r\n                    let wasAdjusted = false;\r\n                    const textBeforeCursor = currentText.substring(0, cursorPosition);\r\n                    const lastOpenBracket = textBeforeCursor.lastIndexOf('<');\r\n                    const lastCloseBracket = textBeforeCursor.lastIndexOf('>');\r\n\r\n                    if (lastOpenBracket > lastCloseBracket) {\r\n                        const textAfterCursor = currentText.substring(cursorPosition);\r\n                        const nextCloseBracket = textAfterCursor.indexOf('>');\r\n                        if (nextCloseBracket !== -1) {\r\n                            insertionPosition = cursorPosition + nextCloseBracket + 1;\r\n                            wasAdjusted = true;\r\n                            console.log(`Cursor inside <>, adjusting insertion point to after > at ${insertionPosition}`);\r\n                        }\r\n                    }\r\n\r\n                    const maxNumbers = getMaxDriverNumbers(currentText);\r\n                    // Corrected regex - double escapes not needed in string literal here\r\n                    const driverRegex = /(row\\d+\\s*=\\s*\")([A-Z]+)(\\d*)(\\|)/g;\r\n                    const nextNumbers = { ...maxNumbers };\r\n\r\n                    codeToAdd = codeToAdd.replace(driverRegex, (match, rowPart, prefix, existingNumberStr, pipePart) => {\r\n                        nextNumbers[prefix] = (nextNumbers[prefix] || 0) + 1;\r\n                        const newNumber = nextNumbers[prefix];\r\n                        const replacement = `${rowPart}${prefix}${newNumber}${pipePart}`;\r\n                        console.log(`Replacing driver: '${prefix}${existingNumberStr || ''}|' with '${prefix}${newNumber}|'`);\r\n                        return replacement;\r\n                    });\r\n\r\n                    console.log(\"Modified code to add:\", codeToAdd);\r\n\r\n                    const textAfterInsertion = currentText.substring(insertionPosition);\r\n                    let textBeforeFinal = \"\";\r\n                    let searchStartIndex = insertionPosition;\r\n\r\n                    if (!wasAdjusted) {\r\n                        const textBeforeInsertion = currentText.substring(0, insertionPosition);\r\n                        let tempSearchStart = cursorPosition - 1;\r\n                        while (tempSearchStart >= 0) {\r\n                            const char = textBeforeCursor[tempSearchStart];\r\n                             // CORRECTED REGEX IN ONCLICK:\r\n                            if (/\\s|\\n|>|<|;|\\|/.test(char)) {\r\n                                tempSearchStart++;\r\n                                break;\r\n                            }\r\n                            tempSearchStart--;\r\n                        }\r\n                        if (tempSearchStart < 0) tempSearchStart = 0;\r\n\r\n                        searchStartIndex = tempSearchStart;\r\n                        const searchTermToRemove = textBeforeCursor.substring(searchStartIndex, cursorPosition);\r\n                        console.log(`Attempting to replace term: '${searchTermToRemove}' starting at index ${searchStartIndex}`);\r\n                        textBeforeFinal = currentText.substring(0, searchStartIndex);\r\n                    } else {\r\n                         textBeforeFinal = currentText.substring(0, insertionPosition);\r\n                         searchStartIndex = insertionPosition;\r\n                    }\r\n\r\n                    const firstNewlineIndexInSuffix = textAfterInsertion.indexOf('\\n');\r\n                    let remainderOfOriginalLine = \"\";\r\n                    let subsequentLines = \"\";\r\n\r\n                    if (firstNewlineIndexInSuffix === -1) {\r\n                        remainderOfOriginalLine = textAfterInsertion;\r\n                    } else {\r\n                        remainderOfOriginalLine = textAfterInsertion.substring(0, firstNewlineIndexInSuffix);\r\n                        subsequentLines = textAfterInsertion.substring(firstNewlineIndexInSuffix);\r\n                    }\r\n\r\n                    const newText = textBeforeFinal +\r\n                                    codeToAdd +\r\n                                    (remainderOfOriginalLine.length > 0 ? '\\n' : '') +\r\n                                    remainderOfOriginalLine +\r\n                                    subsequentLines;\r\n\r\n                    codesTextarea.value = newText;\r\n\r\n                    const newCursorPos = (textBeforeFinal + codeToAdd).length;\r\n                    codesTextarea.focus();\r\n                    codesTextarea.setSelectionRange(newCursorPos, newCursorPos);\r\n\r\n                    dynamicSuggestionsContainer.innerHTML = '';\r\n                    dynamicSuggestionsContainer.style.display = 'none';\r\n                    highlightedSuggestionIndex = -1;\r\n                    currentSuggestions = [];\r\n                };\r\n\r\n                suggestionDiv.onmouseover = () => {\r\n                    updateHighlight(i);\r\n                };\r\n\r\n                dynamicSuggestionsContainer.appendChild(suggestionDiv);\r\n            });\r\n            console.log(\"[showSuggestionsForTerm] Setting suggestions display to 'block'\");\r\n\r\n            const rect = codesTextarea.getBoundingClientRect();\r\n            dynamicSuggestionsContainer.style.width = codesTextarea.offsetWidth + 'px';\r\n            dynamicSuggestionsContainer.style.top = (rect.bottom + window.scrollY) + 'px';\r\n            dynamicSuggestionsContainer.style.left = (rect.left + window.scrollX) + 'px';\r\n            dynamicSuggestionsContainer.style.display = 'block';\r\n        } else {\r\n            console.log(\"[showSuggestionsForTerm] No suggestions found, hiding container.\");\r\n            dynamicSuggestionsContainer.style.display = 'none';\r\n        }\r\n    };\r\n\r\n    if (codesTextarea && dynamicSuggestionsContainer) {\r\n        codesTextarea.oninput = (event) => {\r\n             if (!event.isTrusted || !dynamicSuggestionsContainer) {\r\n                 return;\r\n             }\r\n            const cursorPosition = codesTextarea.selectionStart;\r\n            const currentText = codesTextarea.value;\r\n\r\n            const textBeforeCursor = currentText.substring(0, cursorPosition);\r\n            const lastOpenBracket = textBeforeCursor.lastIndexOf('<');\r\n            const lastCloseBracket = textBeforeCursor.lastIndexOf('>');\r\n            let isInsideBrackets = false;\r\n            if (lastOpenBracket > lastCloseBracket) {\r\n                const textAfterCursor = currentText.substring(cursorPosition);\r\n                const nextCloseBracket = textAfterCursor.indexOf('>');\r\n                if (nextCloseBracket !== -1 ) {\r\n                    isInsideBrackets = true;\r\n                }\r\n            }\r\n\r\n            if (isInsideBrackets) {\r\n                console.log(\"[Textarea Input] Cursor inside <>, hiding suggestions.\");\r\n                dynamicSuggestionsContainer.style.display = 'none';\r\n                highlightedSuggestionIndex = -1;\r\n                currentSuggestions = [];\r\n            } else {\r\n                let searchStart = cursorPosition - 1;\r\n                while (searchStart >= 0) {\r\n                    const char = textBeforeCursor[searchStart];\r\n                    // CORRECTED REGEX: No double escapes needed\r\n                    if (/\\s|\\n|>|<|;|\\|/.test(char)) {\r\n                        searchStart++;\r\n                        break;\r\n                    }\r\n                    searchStart--;\r\n                }\r\n                if (searchStart < 0) searchStart = 0;\r\n\r\n                console.log(`[Textarea Input Debug] cursorPosition: ${cursorPosition}, calculated searchStart: ${searchStart}, char at searchStart: '${searchStart < currentText.length ? textBeforeCursor[searchStart] : 'EOF'}'`);\r\n\r\n                const searchTerm = textBeforeCursor.substring(searchStart, cursorPosition);\r\n                const trimmedSearchTerm = searchTerm.trim();\r\n\r\n                if (trimmedSearchTerm.length === 0 || !/^[a-zA-Z]/.test(trimmedSearchTerm)) {\r\n                     if (trimmedSearchTerm.length === 0) {\r\n                         console.log(`[Textarea Input] Hiding suggestions (empty term detected immediately after delimiter)`);\r\n                     } else {\r\n                         console.log(`[Textarea Input] Hiding suggestions (term does not start with letter: '${searchTerm}')`);\r\n                     }\r\n                    dynamicSuggestionsContainer.style.display = 'none';\r\n                    highlightedSuggestionIndex = -1;\r\n                    currentSuggestions = [];\r\n                } else {\r\n                    console.log(`[Textarea Input] Cursor outside <>, potential search term: '${searchTerm}'`);\r\n                    showSuggestionsForTerm(searchTerm);\r\n                }\r\n            }\r\n        };\r\n\r\n        codesTextarea.onkeydown = (event) => {\r\n            if (!dynamicSuggestionsContainer || dynamicSuggestionsContainer.style.display !== 'block' || currentSuggestions.length === 0) {\r\n                return;\r\n            }\r\n\r\n            const suggestionItems = dynamicSuggestionsContainer.querySelectorAll('.code-suggestion-item');\r\n            let newIndex = highlightedSuggestionIndex;\r\n\r\n            switch (event.key) {\r\n                case 'ArrowDown':\r\n                case 'ArrowUp':\r\n                    event.preventDefault();\r\n                    newIndex = event.key === 'ArrowDown'\r\n                        ? (highlightedSuggestionIndex + 1) % currentSuggestions.length\r\n                        : (highlightedSuggestionIndex - 1 + currentSuggestions.length) % currentSuggestions.length;\r\n                    updateHighlight(newIndex);\r\n                    break;\r\n\r\n                case 'Enter':\r\n                 case 'Tab':\r\n                    event.preventDefault();\r\n                    if (highlightedSuggestionIndex >= 0 && highlightedSuggestionIndex < suggestionItems.length) {\r\n                        suggestionItems[highlightedSuggestionIndex].click();\r\n                    } else if (currentSuggestions.length > 0 && suggestionItems.length > 0) {\r\n                         suggestionItems[0].click(); // Select first if none highlighted\r\n                    }\r\n                    // Suggestion click handles hiding\r\n                    break;\r\n\r\n                case 'Escape':\r\n                    event.preventDefault();\r\n                    dynamicSuggestionsContainer.style.display = 'none';\r\n                    highlightedSuggestionIndex = -1;\r\n                    currentSuggestions = [];\r\n                    break;\r\n\r\n                default:\r\n                    if (!event.ctrlKey && !event.altKey && !event.metaKey && event.key.length === 1) {\r\n                       updateHighlight(-1);\r\n                    }\r\n                    break;\r\n            }\r\n        };\r\n\r\n         codesTextarea.addEventListener('blur', () => {\r\n             if (!dynamicSuggestionsContainer) return;\r\n             setTimeout(() => {\r\n                 if (!dynamicSuggestionsContainer.contains(document.activeElement)) {\r\n                      dynamicSuggestionsContainer.style.display = 'none';\r\n                      highlightedSuggestionIndex = -1;\r\n                 }\r\n             }, 150);\r\n         });\r\n    }\r\n    // --- End of Code Suggestion Logic ---\r\n\r\n\r\n    // ... (rest of your Office.onReady, e.g., Promise.all)\r\n\r\n    // Make sure initialization runs after setting up modal logic\r\n  }\r\n});\r\n\r\n// >>> ADDED: Function definition moved here\r\nasync function insertResponseToEditor() {\r\n    console.log(\"[insertResponseToEditor] Function called.\");\r\n    if (!lastResponse) {\r\n        console.log(\"[insertResponseToEditor] Exiting: lastResponse is null or empty.\");\r\n        showError('No response to insert');\r\n        return;\r\n    }\r\n\r\n    console.log(\"[insertResponseToEditor] lastResponse:\", lastResponse);\r\n\r\n    const codesTextarea = document.getElementById('codes-textarea');\r\n    if (!codesTextarea) {\r\n        console.error(\"[insertResponseToEditor] Exiting: Could not find codes-textarea.\");\r\n        showError('Could not find the code editor textarea');\r\n        return;\r\n    }\r\n\r\n    console.log(\"[insertResponseToEditor] Found codesTextarea.\");\r\n\r\n    try {\r\n        // Check for valid cursor position FIRST\r\n        if (lastEditorCursorPosition === null) {\r\n             console.log(\"[insertResponseToEditor] Exiting: lastEditorCursorPosition is null.\");\r\n             showError(\"Please click in the code editor first to set the insertion point.\");\r\n             return;\r\n        }\r\n\r\n        let responseText = \"\";\r\n        // >>> MODIFIED: Extract <...> strings and ensure each is on a new line\r\n        let codeStringsToInsert = [];\r\n        if (Array.isArray(lastResponse)) {\r\n            // Filter out empty strings just in case\r\n            codeStringsToInsert = lastResponse.filter(item => typeof item === 'string' && item.trim().length > 0);\r\n        } else if (typeof lastResponse === 'string') {\r\n            const matches = lastResponse.match(/<[^>]+>/g); // Find all <...> patterns\r\n            if (matches) {\r\n                codeStringsToInsert = matches;\r\n            } else if (lastResponse.trim().length > 0) {\r\n                 // Fallback: If it's a string but no <...> found, maybe insert the whole string?\r\n                 // For now, let's only insert if <...> are found based on the requirement.\r\n                 console.log(\"[insertResponseToEditor] lastResponse is a string but no <...> tags found.\");\r\n            }\r\n        } else {\r\n            // Log if the format is unexpected\r\n             console.warn(\"[insertResponseToEditor] lastResponse is not an array or string:\", lastResponse);\r\n        }\r\n\r\n        if (codeStringsToInsert.length === 0) {\r\n            showMessage(\"No code strings found in the response to insert.\");\r\n            console.log(\"[insertResponseToEditor] No <...> strings extracted from lastResponse.\");\r\n            return;\r\n        }\r\n\r\n        // Join the extracted strings, each on its own line\r\n        responseText = codeStringsToInsert.join('\\n');\r\n        // <<< END MODIFIED BLOCK\r\n\r\n        if (!responseText) {\r\n            showMessage(\"Response is empty, nothing to insert.\");\r\n            return;\r\n        }\r\n\r\n        const currentText = codesTextarea.value;\r\n        // Define insertionPoint using the validated cursor position\r\n        const insertionPoint = lastEditorCursorPosition;\r\n\r\n        // >>> ADDED: Check for <TAB; prefix if missing\r\n        const tabPrefix = '<TAB; ';\r\n        const defaultTabString = '<TAB; label1=\"Calcs\";>';\r\n        let addDefaultTab = false;\r\n        if (!currentText.includes(tabPrefix) && !responseText.includes(tabPrefix)) {\r\n            addDefaultTab = true;\r\n            console.log(\"[insertResponseToEditor] Neither editor nor response contains '<TAB; '. Prepending default tab.\");\r\n        }\r\n        // <<< END ADDED CHECK\r\n\r\n        // Validate insertionPoint is within bounds (safety check)\r\n        if (insertionPoint < 0 || insertionPoint > currentText.length) {\r\n             console.error(`[insertResponseToEditor] Invalid insertionPoint: ${insertionPoint}, currentText length: ${currentText.length}`);\r\n             showError(\"Invalid cursor position detected. Please click in the editor again.\");\r\n             lastEditorCursorPosition = null; // Reset invalid position\r\n             return;\r\n        }\r\n\r\n        const textBefore = currentText.substring(0, insertionPoint);\r\n        const textAfter = currentText.substring(insertionPoint);\r\n\r\n        // Insert the response, adding a newline before if inserting mid-text and not at the start or after a newline\r\n        let textToInsert = (addDefaultTab ? defaultTabString + '\\n' : '') + responseText; // Prepend default tab if needed\r\n        if (insertionPoint > 0 && textBefore.charAt(textBefore.length - 1) !== '\\n') {\r\n             textToInsert = '\\n' + textToInsert; // Add leading newline to the combined string (tab + response)\r\n        }\r\n        // Add a newline after if not inserting at the very end or before an existing newline\r\n        if (insertionPoint < currentText.length && textAfter.charAt(0) !== '\\n') {\r\n             textToInsert += '\\n';\r\n        } else if (insertionPoint === currentText.length && currentText.length > 0 && textBefore.charAt(textBefore.length - 1) !== '\\n') {\r\n             // Special case: inserting exactly at the end, ensure newline separation from previous content\r\n             textToInsert = '\\n' + textToInsert;\r\n        }\r\n\r\n\r\n        codesTextarea.value = textBefore + textToInsert + textAfter;\r\n\r\n        // Update the last cursor position to be after the inserted text\r\n        const newCursorPos = insertionPoint + textToInsert.length;\r\n        codesTextarea.focus();\r\n        codesTextarea.setSelectionRange(newCursorPos, newCursorPos);\r\n        lastEditorCursorPosition = newCursorPos; // Update tracked position\r\n\r\n        showMessage(\"Response inserted into editor.\");\r\n        console.log(`Response inserted at position: ${insertionPoint}`);\r\n\r\n    } catch (error) {\r\n        console.error(\"Error inserting response to editor:\", error);\r\n        showError(`Failed to insert response: ${error.message}`);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./taskpane.js\", import.meta.url);\n// Module\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Projectify Task Pane</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <\" + \"script src=\\\"https://cdn.sheetjs.com/xlsx-0.20.1/package/dist/xlsx.full.min.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-Fabric\\\" dir=\\\"ltr\\\"> <div id=\\\"sideload-msg\\\" class=\\\"ms-Rule ms-font-xl\\\"> <p>Please <a target=\\\"_blank\\\" href=\\\"https://learn.microsoft.com/office/dev/add-ins/testing/sideload-office-add-ins-for-testing\\\" rel=\\\"noopener\\\">sideload</a> your add-in to see app body.</p> </div> <div id=\\\"startup-menu\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none;justify-content:center;align-items:center;flex-direction:column;height:100vh\\\"> <h1 class=\\\"ms-fontSize-su ms-fontWeight-light ms-fontColor-neutralPrimary\\\">Choose Mode</h1> <div style=\\\"margin-top:20px\\\"> <button id=\\\"developer-mode-button\\\" class=\\\"ms-Button ms-Button--primary\\\" style=\\\"margin-right:10px\\\"> <span class=\\\"ms-Button-label\\\">Developer Mode</span> </button> <button id=\\\"client-mode-button\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Client Mode</span> </button> </div> </div> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none\\\"> <button id=\\\"back-to-menu-dev-button\\\" class=\\\"ms-Button back-to-menu-button\\\"> <span class=\\\"ms-Button-label\\\">Back to Menu</span> </button> <div class=\\\"container\\\"> <div id=\\\"chat-log\\\" class=\\\"chat-log\\\"> <div id=\\\"welcome-message\\\" class=\\\"welcome-message\\\"> <h1>What would you like to model?</h1> </div> </div> <div class=\\\"input-area\\\"> <input type=\\\"text\\\" id=\\\"user-input\\\" placeholder=\\\"Enter your request here...\\\"> <button id=\\\"send\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Send</span> </button> <div id=\\\"loading-animation\\\" class=\\\"loading-animation\\\"></div> <button id=\\\"write-to-excel\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Write Response to Excel</span> </button> <button id=\\\"insert-to-editor\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Insert to Editor</span> </button> <button id=\\\"reset-chat\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Reset Chat</span> </button> </div> <div class=\\\"code-area\\\"> <h2>Codes</h2> <textarea id=\\\"codes-textarea\\\" rows=\\\"15\\\" placeholder=\\\"Code strings will appear here after generation or can be pasted...\\\"></textarea> <div id=\\\"dynamic-suggestions-container\\\" class=\\\"code-suggestions\\\"></div> <div class=\\\"code-area-buttons\\\"> <button id=\\\"edit-code-params-button\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Edit Params</span> </button> <button id=\\\"insert-and-run\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Run Codes</span> </button> <button id=\\\"generate-tab-string-button\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Generate Tab Index</span> </button> </div> </div> <div id=\\\"code-params-modal\\\" class=\\\"modal\\\"> <div class=\\\"modal-content\\\"> <span class=\\\"close-button\\\">&times;</span> <h2>Edit Code Parameters</h2> <div class=\\\"modal-find-replace\\\"> <input type=\\\"text\\\" id=\\\"modal-find-input\\\" placeholder=\\\"Find in Params\\\"> <input type=\\\"text\\\" id=\\\"modal-replace-input\\\" placeholder=\\\"Replace With\\\"> <button id=\\\"modal-replace-all-button\\\" class=\\\"ms-Button\\\">Replace All</button> <span id=\\\"modal-search-status\\\"></span> </div> <form id=\\\"code-params-modal-form\\\"> </form> <div class=\\\"modal-actions\\\"> <button id=\\\"apply-code-params-button\\\" class=\\\"ms-Button ms-Button--primary\\\">Apply</button> <button id=\\\"cancel-code-params-button\\\" class=\\\"ms-Button\\\">Cancel</button> </div> </div> </div> </div> </main> <div id=\\\"client-mode-view\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none;justify-content:center;align-items:center;height:100vh;position:relative;flex-direction:column\\\"> <button id=\\\"back-to-menu-client-button\\\" class=\\\"ms-Button back-to-menu-button\\\"> <span class=\\\"ms-Button-label\\\">Back to Menu</span> </button> <h1 class=\\\"ms-fontSize-su ms-fontWeight-light ms-fontColor-neutralPrimary\\\" style=\\\"margin-bottom:20px\\\">Client Mode Chat</h1> <div class=\\\"container\\\" style=\\\"width:90%;max-width:800px;height:70%;border:1px solid #ccc;padding:10px;box-sizing:border-box;display:flex;flex-direction:column\\\"> <div id=\\\"chat-log-client\\\" class=\\\"chat-log\\\" style=\\\"flex-grow:1;overflow-y:auto;border-bottom:1px solid #eee;margin-bottom:10px\\\"> <div id=\\\"welcome-message-client\\\" class=\\\"welcome-message\\\"> <h1>Ask me anything (Client Mode)</h1> </div> </div> <div class=\\\"input-area\\\"> <input type=\\\"text\\\" id=\\\"user-input-client\\\" placeholder=\\\"Enter your request here...\\\"> <button id=\\\"send-client\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Send</span> </button> <div id=\\\"loading-animation-client\\\" class=\\\"loading-animation\\\" style=\\\"display:none\\\"></div> <button id=\\\"write-to-excel-client\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Write to Excel</span> </button> <button id=\\\"insert-to-editor-client\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Insert to Editor</span> </button> <button id=\\\"reset-chat-client\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Reset Chat</span> </button> </div> </div> </div> <\" + \"script src=\\\"\" + ___HTML_LOADER_IMPORT_1___ + \"\\\"><\" + \"/script> </body> </html>\";\n// Exports\nexport default code;"],"names":["Object","defineProperty","exports","value","BasePineconeError","Error","constructor","message","cause","super","setPrototypeOf","this","prototype","captureStackTrace","name","getFetch","errors_1","config","fetchApi","g","fetch","PineconeConfigurationError","extractMessage","async","error","response","text","messageJSON","JSON","parse","e","__createBinding","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","__exportStar","p","hasOwnProperty","call","handleApiError","PineconeArgumentError","PineconeRequestError","PineconeConnectionError","PineconeUnableToResolveHostError","PineconeEnvironmentVarsNotSupportedError","PineconeUnexpectedResponseError","config_1","request_1","base_1","validation_1","utils_1","handling_1","__setModuleDefault","v","__importStar","mod","result","buildUserAgent","environment_1","packageInfo","userAgentParts","version","isEdge","push","process","sourceTag","normalizeSourceTag","join","toLowerCase","replace","trim","ChatStream","convertKeys_1","stream","Symbol","asyncIterator","buffer","chunk","newlineIndex","toString","indexOf","line","slice","startsWith","json","parsedJson","convertedJson","convertKeysToCamelCase","err","console","debug","RetryOnServerFailure","asyncFn","maxRetries","calculateRetryDelay","attempt","baseDelay","maxDelay","jitterFactor","delay","Math","random","min","max","execute","args","isRetryError","mappedError","mapErrorIfNeeded","shouldStopRetrying","PineconeMaxRetriesExceededError","includes","status","delayTime","Promise","resolve","setTimeout","mapHttpStatusError","queryParamsStringify","params","prefix","keys","map","key","querystringSingleKey","filter","part","length","keyPrefix","fullKey","Array","isArray","multiValue","singleValue","encodeURIComponent","String","Set","from","Date","toISOString","url","urlMessage","context","init","method","debugLog","str","PINECONE_DEBUG","log","body","normalizeUrl","cachedSetTimeout","cachedClearTimeout","module","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","arguments","i","apply","title","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","PineconeUnmappedHttpError","PineconeNotImplementedError","PineconeUnavailableError","PineconeInternalServerError","PineconeConflictError","PineconeNotFoundError","PineconeAuthorizationError","PineconeBadRequestError","CONFIG_HELP","failedRequest","retries","requestInfo","failedRequestInfo","isBrowser","EdgeRuntime","window","object","item","entries","reduce","acc","toCamelCase","_","letter","toUpperCase","http_1","customMessage","responseError","rawMessage","statusCode","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis","Function","obj","prop","scriptUrl","importScripts","location","document","currentScript","tagName","src","scripts","getElementsByTagName","test","b","baseURI","self","href","_regeneratorRuntime","t","r","n","a","iterator","c","u","toStringTag","define","wrap","Generator","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","__await","then","callInvokeWithMethodAndArg","done","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","__proto__","awrap","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","catch","delegateYield","_toConsumableArray","_arrayLikeToArray","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","_createForOfIteratorHelper","_n","F","asyncGeneratorStep","_asyncToGenerator","_next","_throw","validateCodeStrings","_x","_validateCodeStrings","_callee","inputCodeStrings","errors","tabLabels","rowValues","codeTypes","vvCodes","vrCodes","rrCodes","rvCodes","evCodes","erCodes","validCodes","fileContent","_iterator","_step","codeString","rowMatches","codeMatch","codeType","_i","_arr","code","_i2","_arr2","_code","_iterator2","_step2","_codeString","_codeMatch","_codeType","labelMatch","label","_rowMatches","_iterator3","_step3","_codeString2","driverMatches","_context","match","ok","split","t0","endsWith","parts","trimmedPart","afterAsterisk","substring","add","t1","size","has","rowContent","t2","driverValue","validateCodeStringsForRun","_x3","_validateCodeStringsForRun","_callee3","_iterator4","_step4","_i3","_arr3","_i4","_arr4","_code2","_iterator5","_step5","_codeString3","_codeMatch2","_codeType2","_rowMatches2","_iterator6","_step6","_codeString4","_context3","ownKeys","getOwnPropertySymbols","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","toPrimitive","_toPrimitive","_toPropertyKey","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","populateCodeCollection","inputText","codeCollection","paramsString","matchAll","rowNum","rowValue","paramName","paramValue","runCodes","_runCodes","_callee4","currentWorksheetName","assumptionTabs","_loop","finalResult","_context5","processedCodes","createdTabs","tabName","_context4","label1","Label1","Excel","_ref3","sheets","existingSheet","financialsSheet","newSheet","sourceSheetName","sourceCalcsWS","usedRange","lastColIndex","lastColLetter","linkRangeAddress","linkRange","cellValue","colLetter","cellAddress","formula","headerFormatRangeAddress","workbook","worksheets","load","sync","items","find","sheet","getItem","position","copy","warn","getRange","clear","ClearApplyTo","all","getUsedRange","columnCount","columnIndexToLetter","formulas","format","font","color","tabColor","worksheet","_x26","codeIndex","_ref4","codesWS","currentWS","lastUsedRow","pasteRow","firstRow","lastRow","columnD","row","currentWorksheet","rowCount","getLastRow","rowIndex","_ref5","_callee2","sourceRange","_context2","copyFrom","RangeCopyType","_x28","driverAndAssumptionInputs","_x27","tab","_x2","_x4","_driverAndAssumptionInputs","_callee10","calcsPasteRow","worksheetName","_context11","_ref7","_callee7","_context8","_x30","_ref8","_callee8","lastRowRange","_context9","_x31","_ref9","_callee9","determinedLastRow","TARGET_COL","processStartRow","processEndRow","formulaRangeAddress","formulaRange","targetColIndex","formulasUpdated","origFormulas","newFormulas","rowFormulas","cellRefRegex","originalFormula","columnSequence","codeValue","searchRow","searchRange","searchRangeAddress","checkRow","isGreen","cellB","targetRow","driverParam","labelParam","currentCheckRowForInserts","rowParam","rowItems","numNewRows","baseRowForThisG","insertStartAddress","sourceRowNum","targetRowNum","sourceRowRange","targetRowRange","yy","currentRowNum","splitArray","x","valueToWrite","cellToWrite","numValue","_context10","columnLetterToIndex","col","fill","financialsdriver","insert","InsertShiftDirection","down","formats","Number","_x32","getLastUsedRow","_x5","_x6","_getLastUsedRow","_callee11","columnLetter","fullColumn","lastCell","lastRowIndex","_context12","getLastCell","adjustDriversJS","_x7","_x8","_adjustDriversJS","_callee12","START_ROW","DRIVER_CODE_COL","LOOKUP_COL","driverCodeRangeAddress","lookupRangeAddress","driverCodeRange","lookupRange","driverCodeValues","lookupValues","lookupMap","outputValues","foundCount","notFoundCount","driverCode","currentRow","foundRow","targetAddress","targetRangeAddress","targetRange","_context13","Map","set","replaceIndirectsJS","_x9","_x10","_replaceIndirectsJS","_callee13","originalFormulas","referencesToLookup","formulaData","searchStartIndex","upperFormula","indirectStartIndex","parenStartIndex","parenEndIndex","argString","_step5$value","refString","data","_step6$value","_refString","_data","cellText","_i5","_formulaData","currentFormula","loopCount","MAX_LOOPS","_upperFormula","_indirectStartIndex","_parenStartIndex","_parenEndIndex","indString","_argString","directRef","_context14","index","range","rangeError","debugInfo","valueError","populateFinancialsJS","_x11","_x12","_x13","_populateFinancialsJS","_callee14","CALCS_FIRST_ROW","ASSUMPTION_CODE_COL","ASSUMPTION_LINK_COL_B","ASSUMPTION_LINK_COL_D","ASSUMPTION_MONTHS_START_COL","FINANCIALS_CODE_COLUMN","FINANCIALS_TARGET_COL_B","FINANCIALS_TARGET_COL_D","FINANCIALS_ANNUALS_START_COL","FINANCIALS_MONTHS_START_COL","ANNUALS_END_COL","MONTHS_END_COL","GREEN_COLOR","CURRENCY_FORMAT","_assumptionCodes$leng","assumptionCodeRange","financialsSearchCol","financialsUsedRange","financialsLastRow","fallbackRange","lastRowB","financialsCodeMap","financialsCodeRange","_i6","upperCode","tasks","assumptionCodes","_i7","_assumptionCodes$leng2","assumptionRow","linkFormulaB","linkFormulaD","linkFormulaMonths","_upperCode","_i8","_tasks","task","originalTargetRowsAsc","taskAdjustedRows","totalShift","_i9","_tasks2","_task","populateRow","cellD","cellAnnualsStart","cellMonthsStart","codePrefix","formulaJ","actualsRange","numCols","formulasArray","_i10","_tasks3","_task2","_populateRow","sourceAnnuals","destAnnuals","sourceMonths","destMonths","codeColRange","currentCodeValues","modifiedCodeValues","modifiedCount","_i11","originalValue","_context15","addressB","addressD","addressMonths","sort","uniqueRow","tasksAtThisRow","currentAdjustedRowForGroup","bold","italic","indentLevel","formulasR1C1","numberFormat","sumifsError","autoFill","AutoFillType","fillDefault","autofillError","t3","t4","processAssumptionTabs","_x15","_processAssumptionTabs","_callee18","assumptionTabNames","FINANCIALS_SHEET_NAME","AUTOFILL_START_COLUMN","_iterator7","_step7","_loop2","_context20","_context19","_ref11","_callee17","updatedLastRow","finalLastRow","fillRange","_context18","setColumnAFontWhite","applyIndexGrowthCurveJS","deleteGreenRows","_x34","_ref10","_callee16","finSheet","_context17","_x33","_x16","_x17","_x18","_deleteGreenRows","_callee19","startRow","rowsToDelete","cell","_iterator8","_step8","_rowNum","newLastRow","_context21","delete","DeleteShiftDirection","up","_x19","_x20","_x21","_setColumnAFontWhite","_callee20","_context22","fromCharCode","charCodeAt","floor","hideColumnsAndNavigate","_x22","_hideColumnsAndNavigate","_callee22","ACTUALS_START_COL","ACTUALS_END_COL","targetSheetNames","_context24","_ref12","_callee21","hideAttempted","actualsEndIndex","actualsEndMinusOneCol","_iterator9","_step9","sheetName","_iterator10","_step10","_sheetName","_worksheet","_iterator11","_step11","_sheetName2","_worksheet2","_context23","rowHidden","columnHidden","stringify","activate","select","t5","_x35","handleInsertWorksheetsFromBase64","_x23","_handleInsertWorksheetsFromBase","_callee26","base64String","sheetNames","_args28","_context28","_ref14","_callee25","_context27","insertWorksheetsFromBase64","_x37","_x24","_x25","_applyIndexGrowthCurveJS","_callee27","initialLastRow","BEGIN_MARKER","END_MARKER","DATA_COL","OUTPUT_COL_B","OUTPUT_COL_C","OUTPUT_COL_D","CHECK_COL_B","VALUE_COL_A","DRIVER_REF_COL","SUMIF_START_COL","SUMIF_END_COL","SUMPRODUCT_COL","MONTHS_START_COL","LIGHT_BLUE_COLOR","LIGHT_GREEN_COLOR","indexEndRow","indexRows","dataColRangeAddress","formatCheckStartRow","formatCheckEndRow","checkColorRange","_i12","_currentRow","newRowStart","newRowEnd","sourceBlockRange","outputDataBC","outputDataD","sourceValues","_i13","_indexRows","originalRow","rowIndexInBlock","valB","valC","sourceColCRange","sourceColARange","sourceValuesC","sourceValuesA","numSumifCols","sumifFormulas","_i14","_originalRow","_rowIndexInBlock","codeC","valueA","baseFormula","driverCell","driverRangeString","_i15","_originalRow2","dataRangeString","sumproductFormula","_i16","sourceRow","_targetRow","_i17","_indexRows2","_originalRow3","_context29","borders","border","style","contents","buildRowArrayString","valuesRow","formulasRow","formulaCols","_cols","colIndex","valueString","processCodeBlock","startDataRowIndex","endDataRowIndex","codeName","rangeStartRowExcel","blockString","rowArrayString","generateTabString","_generateTabString","_ref","finalResultString","sheetCodeBlocks","lastUsedRowInB","bottomCellInB","lastUsedCellInB","dynamicRangeAddress","loadedRowCount","hasDataInD","manualRowCount","_r","currentBlockStartDataRow","currentBlockCodeName","_r2","dValue","tabLine","getRangeEdge","KeyboardDirection","OfficeExtension","modelPlannerConversationHistory","AI_MODEL_PLANNER_OPENAI_API_KEY","lastPlannerResponseForClient","setAIModelPlannerOpenApiKey","getAIModelPlanningSystemPrompt","_getAIModelPlanningSystemPrompt","promptKey","paths","_paths","path","statusText","callOpenAIForModelPlanner","_callOpenAIForModelPlanner","messages","model","temperature","systemMessage","userMessages","lastUserMessage","errorData","_args2","msg","role","content","headers","choices","processAIModelPlannerPromptInternal","_processAIModelPlannerPromptInternal","userInput","systemPrompt","_ref$history","history","responseContent","displayInClientChatLogPlanner","isUser","chatLog","getElementById","welcomeMessage","display","messageElement","createElement","className","contentElement","textContent","whiteSpace","appendChild","scrollTop","scrollHeight","setClientLoadingStatePlanner","isLoading","sendButton","loadingAnimation","disabled","_handleAIModelPlannerConversation","_handleAIModelPlannerConversation3","isFollowUp","assistantResponseContent","_context7","_executePlannerCodes","_executePlannerCodes2","modelCodesString","runResult","_runResult","validationErrors","errorMsg","worksheetsResponse","wsArrayBuffer","wsUint8Array","wsBinaryString","codesResponse","codesArrayBuffer","codesUint8Array","codesBinaryString","collection","_ref2","application","calculationMode","CalculationMode","manual","arrayBuffer","Uint8Array","btoa","ErrorCodes","itemNotFound","automatic","plannerHandleSend","_plannerHandleSend","userInputElement","resultResponse","jsonObjectToProcess","parsedResponse","ModelCodes","tabLabel","lowerCaseTabLabel","tabDescription","tabDescriptionString","aiResponseForTabArray","formattedAiResponse","alert","getAICallsProcessedResponse","plannerHandleReset","innerHTML","newWelcome","id","plannerHandleWriteToExcel","contentToWrite","plannerHandleInsertToEditor","contentToInsert","API_KEYS","OPENAI_API_KEY","PINECONE_API_KEY","INTERNAL_API_KEYS","performance","now","srcPaths","initializeAPIKeys","_initializeAPIKeys","configResponse","configText","openaiKeyMatch","pineconeKeyMatch","keysFound","configApiKeys","PINECONE_INDEXES","codes","apiEndpoint","call2trainingdata","call2context","call1context","GPT41","saveConversationHistory","localStorage","setItem","callOpenAI","_callOpenAI","_args4","createEmbedding","_createEmbedding","_callee5","input","embedding","loadPromptFromFile","_loadPromptFromFile","_callee6","_context6","getSystemPromptFromFile","_getSystemPromptFromFile","prompt","processPrompt","_processPrompt","parsed","structureDatabasequeries","_structureDatabasequeries","clientprompt","systemStructurePrompt","queryStrings","results","queryString","queryResults","queryVectorDB","queryPrompt","similarityThreshold","indexName","numResults","query","trainingData","call2Context","call1Context","codeOptions","t6","t7","_queryVectorDB","_ref2$indexName","_ref2$numResults","_ref2$similarityThres","indexConfig","errorText","matches","cleanMatches","vector","topK","includeMetadata","namespace","score","extractTextFromJson","jsonInput","_jsonData$metadata","jsonData","metadata","_item$metadata","safeJsonForPrompt","readable","_item$metadata2","toFixed","handleFollowUpConversation","_handleFollowUpConversation","currentHistory","mainPromptText","trainingdataCall2","followUpPrompt","responseArray","updatedHistory","savePromptAnalysis","saveTrainingData","handleInitialConversation","_handleInitialConversation","initialCallPrompt","outputArray","initialHistory","handleConversation","_handleConversation","mainPrompt","validationSystemPrompt","validationMainPrompt","validationResults","analysisData","clientRequest","cleanText","validationCorrection","_x14","_validationCorrection","initialResponse","promptAnalysisData","responseString","validationResultsString","correctionPrompt","correctedResponseArray","correctionOutputPath","correctedResponseString","_getAICallsProcessedResponse","userInputString","dbResults","plainTextResults","enhancedPrompt","combinedInputForAI","_context16","Office","onReady","info","showDeveloperModeView","showClientModeView","showStartupMenuView","sendClientButton","resetClientChatButton","writeToExcelClientButton","insertToEditorClientButton","userInputClient","startupMenu","developerModeButton","clientModeButton","appBody","clientModeView","backToMenuDevButton","backToMenuClientButton","host","HostType","onclick","addEventListener","event","shiftKey","preventDefault","loadedCodeStrings","codeDatabase","lastEditorCursorPosition","loadCodeDatabase","_loadCodeDatabase","lines","showError","conversationHistory","isResponse","conversationHistoryClient","showMessage","messageDiv","padding","margin","borderRadius","insertBefore","firstChild","remove","errorDiv","setButtonLoading","newDisplay","setButtonLoadingClient","lastResponse","writeToExcel","_writeToExcel","startCol","codeStrings","fullText","getSelectedRange","columnIndex","getRangeByIndexes","appendMessage","chatLogId","welcomeMessageId","messageContent","handleSend","_handleSend","conversationResult","handleSendClient","_handleSendClient","clientResponse","user","assistant","resetChat","welcomeTitle","resetChatClient","chatLogClient","welcomeMessageClient","welcomeTitleClient","getTabBlocks","tabBlocks","tabRegex","indices","exec","tag","start","end","blockText","insertSheetsAndRunCodes","_insertSheetsAndRunCodes","_callee15","codesTextarea","codesToRun","previousCodes","allCodeContentToProcess","_runResult2","financialsSheetExists","worksheetsArrayBuffer","worksheetsUint8Array","worksheetsBinaryString","worksheetsBase64String","currentTabs","previousTabs","previousTabMap","hasAnyChanges","codeRegex","currentTab","currentTag","currentText","previousText","newTabCodes","currentCodes","previousCodesSet","tabHasChanges","codesToAddForThisTab","currentCode","_validationErrors","_errorMsg","block","_ref13","insertResponseToEditor","_insertResponseToEditor","responseText","codeStringsToInsert","insertionPoint","tabPrefix","defaultTabString","addDefaultTab","textBefore","textAfter","textToInsert","newCursorPos","focus","setSelectionRange","showDeveloperMode","showClientMode","button","writeButton","resetButton","resetChatClientButton","generateTabStringButton","editParamsButton","paramsModal","paramsModalForm","closeModalButton","querySelector","applyParamsButton","cancelParamsButton","modalFindInput","modalReplaceInput","modalReplaceAllButton","modalSearchStatus","currentCodeStringRange","currentCodeStringType","modalSearchableElements","resetModalSearchState","querySelectorAll","updateModalSearchStatus","hideParamsModal","codeInfo","cursorPos","textBeforeCursor","textAfterCursor","lastOpenBracket","lastIndexOf","firstCloseBracketAfter","findCodeStringAroundCursor","selectionStart","_parseCodeParameters","paramRegex","lastIndex","parseCodeParameters","paramEntryDiv","inputElement","htmlFor","isLongValue","isLIParam","rows","dataset","paramKey","isOriginalLi","liContainer","originalLiKey","addButton","targetLiKey","sourceInput","newValueContainer","newInput","cloneNode","isAddedLi","removeButton","target","parentNode","populateParamsModal","paramValues","isOriginalLI","isAddedLI","addedInput","originalKey","updatedParams","finalValue","newCodeStringContent","newCodeString","searchTerm","replaceTerm","replacementsMade","element","currentValue","escapedSearchTerm","newValue","RegExp","setAPIKeys","parsedHistory","loadConversationHistory","storedCodes","updateCursorPosition","insertToEditorButton","showStartupMenu","dynamicSuggestionsContainer","backgroundColor","maxHeight","overflowY","zIndex","nextSibling","updateSuggestionPosition","rect","getBoundingClientRect","width","offsetWidth","top","bottom","scrollY","left","scrollX","highlightedSuggestionIndex","currentSuggestions","updateHighlight","newIndex","suggestionItems","classList","scrollIntoView","oninput","isTrusted","cursorPosition","isInsideBrackets","searchStart","char","trimmedSearchTerm","suggestions","suggestionDiv","codeToAdd","insertionPosition","wasAdjusted","nextCloseBracket","nextNumbers","maxNumbers","regex","numberStr","number","parseInt","getMaxDriverNumbers","rowPart","existingNumberStr","pipePart","newNumber","replacement","textAfterInsertion","textBeforeFinal","tempSearchStart","searchTermToRemove","firstNewlineIndexInSuffix","remainderOfOriginalLine","subsequentLines","newText","onmouseover","showSuggestionsForTerm","onkeydown","click","ctrlKey","altKey","metaKey","contains","activeElement","URL"],"sourceRoot":""}