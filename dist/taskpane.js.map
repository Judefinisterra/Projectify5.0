{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/handling.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/assistant/chatStream.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/http.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/fetch.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/index.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/retries.js","webpack://excel-custom-functions-js/../../../node_modules/process/browser.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/config.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/normalizeUrl.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/request.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/base.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/debugLog.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/environment.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/index.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/convertKeys.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/utils.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/user-agent.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/queryParamsStringify.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/validation.js","webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/webpack/runtime/global","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions-js/webpack/runtime/publicPath","webpack://excel-custom-functions-js/webpack/runtime/jsonp chunk loading","webpack://excel-custom-functions-js/./src/taskpane/Validation.js","webpack://excel-custom-functions-js/./src/taskpane/CodeCollection.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.html"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleApiError = void 0;\nconst utils_1 = require(\"./utils\");\nconst http_1 = require(\"./http\");\nconst request_1 = require(\"./request\");\n/** @internal */\nconst handleApiError = async (e, customMessage, url) => {\n    if (e instanceof Error && e.name === 'ResponseError') {\n        const responseError = e;\n        const rawMessage = await (0, utils_1.extractMessage)(responseError);\n        const statusCode = responseError.response.status;\n        const message = customMessage\n            ? await customMessage(statusCode, rawMessage)\n            : rawMessage;\n        return (0, http_1.mapHttpStatusError)({\n            status: responseError.response.status,\n            url: responseError.response.url || url,\n            message: message,\n        });\n    }\n    else if (e instanceof request_1.PineconeConnectionError) {\n        // If we've already wrapped this error, just return it\n        return e;\n    }\n    else {\n        // There seem to be some situations where \"e instanceof Error\" is erroneously\n        // false (perhaps the custom errors emitted by cross-fetch do not extend Error?)\n        // but we can still cast it to an Error type because all we're going to do\n        // with it is store off a reference to whatever it is under the \"cause\"\n        const err = e;\n        return new request_1.PineconeConnectionError(err);\n    }\n};\nexports.handleApiError = handleApiError;\n//# sourceMappingURL=handling.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChatStream = void 0;\nconst convertKeys_1 = require(\"../utils/convertKeys\");\n/**\n * Implements an async iterable that processes the readable stream of an assistant chat response.\n *\n * This class expects each chunk of data in the stream to begin with `data:` and be followed by a valid chunk of JSON.\n * If a chunk contains malformed JSON, it is skipped, and a debug message is logged.\n *\n * @template Item - The type of items yielded by the iterable.\n */\nclass ChatStream {\n    constructor(stream) {\n        this.stream = stream;\n    }\n    async *[Symbol.asyncIterator]() {\n        let buffer = '';\n        for await (const chunk of this.stream) {\n            buffer += chunk.toString();\n            let newlineIndex;\n            while ((newlineIndex = buffer.indexOf('\\n')) !== -1) {\n                const line = buffer.slice(0, newlineIndex).trim();\n                buffer = buffer.slice(newlineIndex + 1);\n                // each chunk of json should begin with 'data:'\n                if (line && line.startsWith('data:')) {\n                    const json = line.slice(5).trim();\n                    try {\n                        const parsedJson = JSON.parse(json);\n                        const convertedJson = (0, convertKeys_1.convertKeysToCamelCase)(parsedJson);\n                        yield convertedJson;\n                    }\n                    catch (err) {\n                        console.debug(`Skipping malformed JSON:${line}`);\n                        continue;\n                    }\n                }\n            }\n        }\n        if (buffer.trim()) {\n            try {\n                const parsedJson = JSON.parse(buffer);\n                const convertedJson = (0, convertKeys_1.convertKeysToCamelCase)(parsedJson);\n                yield convertedJson;\n            }\n            catch (err) {\n                console.debug(`Skipping malformed JSON:${buffer}`);\n            }\n        }\n    }\n}\nexports.ChatStream = ChatStream;\n//# sourceMappingURL=chatStream.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mapHttpStatusError = exports.PineconeUnmappedHttpError = exports.PineconeNotImplementedError = exports.PineconeUnavailableError = exports.PineconeMaxRetriesExceededError = exports.PineconeInternalServerError = exports.PineconeConflictError = exports.PineconeNotFoundError = exports.PineconeAuthorizationError = exports.PineconeBadRequestError = void 0;\nconst base_1 = require(\"./base\");\nconst CONFIG_HELP = `You can find the configuration values for your project in the Pinecone developer console at https://app.pinecone.io`;\n/** This error is thrown when API requests return with status 400. Typically this is due to some aspect of the request being incorrect or invalid.\n *\n * Some examples when this error could occur:\n * - While attempting to create an index with no available quota in your project.\n * - While upserting records that do not match the `dimension` of your index\n * - While attempting to create an index using an invalid name (\"!@#$%\")\n */\nclass PineconeBadRequestError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { message } = failedRequest;\n        super(message);\n        this.name = 'PineconeBadRequestError';\n    }\n}\nexports.PineconeBadRequestError = PineconeBadRequestError;\n/**\n * This error occurs when API requests are attempted using invalid configurations such as a mispelled or revoked API key.\n *\n * Log in to https://app.pinecone.io to verify you have configured the { @link Pinecone }\n * client using the correct values.\n */\nclass PineconeAuthorizationError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url } = failedRequest;\n        if (url) {\n            super(`The API key you provided was rejected while calling ${url}. Please check your configuration values and try again. ${CONFIG_HELP}`);\n        }\n        else {\n            super(`The API key you provided was rejected. Please check your configuration values and try again. ${CONFIG_HELP}`);\n        }\n        this.name = 'PineconeAuthorizationError';\n    }\n}\nexports.PineconeAuthorizationError = PineconeAuthorizationError;\n/**\n * This error is thrown when interacting with a resource such as an index or collection\n * that cannot be found.\n */\nclass PineconeNotFoundError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url } = failedRequest;\n        if (url) {\n            super(`A call to ${url} returned HTTP status 404.`);\n        }\n        else {\n            super('The requested resource could not be found.');\n        }\n        this.name = 'PineconeNotFoundError';\n    }\n}\nexports.PineconeNotFoundError = PineconeNotFoundError;\n/**\n * This error is thrown when attempting to create a resource such as an index or\n * collection with a name that is already in use.\n * */\nclass PineconeConflictError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, message } = failedRequest;\n        if (url) {\n            super(`A call to ${url} returned HTTP status 409. ${message ? message : ''}`);\n        }\n        else {\n            super('The resource you are attempting to create already exists.');\n        }\n        this.name = 'PineconeConflictError';\n    }\n}\nexports.PineconeConflictError = PineconeConflictError;\n/**\n * This error indicates API responses are returning with status 500 and\n * something is wrong with Pinecone. Check the [status page](https://status.pinecone.io/)\n * for information about current or recent outages.\n *\n * @see [Pinecone's status page](https://status.pinecone.io/)\n */\nclass PineconeInternalServerError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, body, status } = failedRequest;\n        const intro = url\n            ? `An internal server error occurred while calling the ${url} endpoint.`\n            : '';\n        const help = `To see overall service health and learn whether this seems like a large-scale problem or one specific to your request, please go to https://status.pinecone.io/ to view our status page. If you believe the error reflects a problem with this client, please file a bug report in the github issue tracker at https://github.com/pinecone-io/pinecone-ts-client`;\n        const statusMessage = status ? `Status Code: ${status}.` : '';\n        const bodyMessage = body ? `Body: ${body}` : '';\n        super([intro, statusMessage, help, bodyMessage].join(' ').trim());\n        this.name = 'PineconeInternalServerError';\n    }\n}\nexports.PineconeInternalServerError = PineconeInternalServerError;\n/* We can choose to throw this error when we want to limit requests to the server. When instantiated, pass the\n number of retries the user has made already. */\nclass PineconeMaxRetriesExceededError extends base_1.BasePineconeError {\n    constructor(retries) {\n        const intro = `You have exceeded the max configured retries (${retries}). `;\n        const help = 'Increase the maxRetries field in the RetryOptions object to retry more times. If you believe the' +\n            ' error reflects a problem with this client, please file a bug report in the github issue tracker at https://github.com/pinecone-io/pinecone-ts-client';\n        super([intro, help].join(' ').trim());\n        this.name = 'PineconeMaxRetriesExceededError';\n    }\n}\nexports.PineconeMaxRetriesExceededError = PineconeMaxRetriesExceededError;\n/**\n * This error indicates API responses are returning with status 503 and\n * Pinecone itself is down. Check the [status page](https://status.pinecone.io/)\n * for information about current or recent outages.\n *\n * The difference between this error (503) and a PineconeInternalServerError (500) is that this error does NOT indicate\n * that the server is _unable_ to process the request, just that the server will not process the request.\n *\n * @see [Pinecone's status page](https://status.pinecone.io/)\n */\nclass PineconeUnavailableError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, body, status } = failedRequest;\n        const intro = url\n            ? `The Pinecone service (${url}) is temporarily unavailable.`\n            : '';\n        const statusMessage = status ? `Status Code: ${status}.` : '';\n        const help = `To see overall service health and learn whether this seems like a large-scale problem or one specific to your request, please go to https://status.pinecone.io/ to view our status page. If you believe the error reflects a problem with this client, please file a bug report in the github issue tracker at https://github.com/pinecone-io/pinecone-ts-client`;\n        const bodyMessage = body ? `Body: ${body}` : '';\n        super([intro, statusMessage, help, bodyMessage].join(' ').trim());\n        this.name = 'PineconeUnavailableError';\n    }\n}\nexports.PineconeUnavailableError = PineconeUnavailableError;\n/**\n * This error is thrown when you are attempting to use a feature that is\n * not implemented or unavailable to you on your current plan. Free indexes\n * only support a subset of Pinecone's capabilities, and if you are seeing\n * these exceptions then you should consult the\n * [pricing page](https://www.pinecone.io/pricing/) to see whether upgrading\n * makes sense for your use case.\n */\nclass PineconeNotImplementedError extends base_1.BasePineconeError {\n    constructor(requestInfo) {\n        const { url, message } = requestInfo;\n        if (url) {\n            super(`A call to ${url} returned HTTP status 501. ${message ? message : ''}`);\n        }\n        else {\n            super();\n        }\n        this.name = 'PineconeNotImplementedError';\n    }\n}\nexports.PineconeNotImplementedError = PineconeNotImplementedError;\n/**\n * This catch-all exception is thrown when a request error that is not\n * specifically mapped to another exception is thrown.\n */\nclass PineconeUnmappedHttpError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, status, body, message } = failedRequest;\n        const intro = url\n            ? `An unexpected error occured while calling the ${url} endpoint. `\n            : '';\n        const statusMsg = status ? `Status: ${status}. ` : '';\n        const bodyMsg = body ? `Body: ${body}` : '';\n        super([intro, message, statusMsg, bodyMsg].join(' ').trim());\n        this.name = 'PineconeUnmappedHttpError';\n    }\n}\nexports.PineconeUnmappedHttpError = PineconeUnmappedHttpError;\n/** @internal */\nconst mapHttpStatusError = (failedRequestInfo) => {\n    switch (failedRequestInfo.status) {\n        case 400:\n            return new PineconeBadRequestError(failedRequestInfo);\n        case 401:\n            return new PineconeAuthorizationError(failedRequestInfo);\n        case 403:\n            return new PineconeBadRequestError(failedRequestInfo);\n        case 404:\n            return new PineconeNotFoundError(failedRequestInfo);\n        case 409:\n            return new PineconeConflictError(failedRequestInfo);\n        case 500:\n            return new PineconeInternalServerError(failedRequestInfo);\n        case 501:\n            return new PineconeNotImplementedError(failedRequestInfo);\n        case 503:\n            return new PineconeUnavailableError(failedRequestInfo);\n        default:\n            throw new PineconeUnmappedHttpError(failedRequestInfo);\n    }\n};\nexports.mapHttpStatusError = mapHttpStatusError;\n//# sourceMappingURL=http.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFetch = void 0;\nconst errors_1 = require(\"../errors\");\nconst getFetch = (config) => {\n    if (config.fetchApi) {\n        // User-provided fetch implementation, if any, takes precedence.\n        return config.fetchApi;\n    }\n    else if (global.fetch) {\n        // If a fetch implementation is present in the global scope (will work with native fetch in Node18+, Edge runtimes,\n        // etc.), use that. This should prevent confusing failures in\n        // Next.js projects where @vercel/fetch is mandated and\n        // other implementations are stubbed out.\n        return global.fetch;\n    }\n    else {\n        // If no fetch implementation is found, throw an error.\n        throw new errors_1.PineconeConfigurationError('No global or user-provided fetch implementations found. Please supply a fetch implementation.');\n    }\n};\nexports.getFetch = getFetch;\n//# sourceMappingURL=fetch.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChatStream = exports.RetryOnServerFailure = exports.convertKeysToCamelCase = exports.getFetch = exports.buildUserAgent = exports.queryParamsStringify = exports.normalizeUrl = exports.debugLog = void 0;\nconst debugLog_1 = require(\"./debugLog\");\nObject.defineProperty(exports, \"debugLog\", { enumerable: true, get: function () { return debugLog_1.debugLog; } });\nconst normalizeUrl_1 = require(\"./normalizeUrl\");\nObject.defineProperty(exports, \"normalizeUrl\", { enumerable: true, get: function () { return normalizeUrl_1.normalizeUrl; } });\nconst queryParamsStringify_1 = require(\"./queryParamsStringify\");\nObject.defineProperty(exports, \"queryParamsStringify\", { enumerable: true, get: function () { return queryParamsStringify_1.queryParamsStringify; } });\nconst user_agent_1 = require(\"./user-agent\");\nObject.defineProperty(exports, \"buildUserAgent\", { enumerable: true, get: function () { return user_agent_1.buildUserAgent; } });\nconst fetch_1 = require(\"./fetch\");\nObject.defineProperty(exports, \"getFetch\", { enumerable: true, get: function () { return fetch_1.getFetch; } });\nconst retries_1 = require(\"./retries\");\nObject.defineProperty(exports, \"RetryOnServerFailure\", { enumerable: true, get: function () { return retries_1.RetryOnServerFailure; } });\nconst chatStream_1 = require(\"../assistant/chatStream\");\nObject.defineProperty(exports, \"ChatStream\", { enumerable: true, get: function () { return chatStream_1.ChatStream; } });\nconst convertKeys_1 = require(\"./convertKeys\");\nObject.defineProperty(exports, \"convertKeysToCamelCase\", { enumerable: true, get: function () { return convertKeys_1.convertKeysToCamelCase; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RetryOnServerFailure = void 0;\nconst errors_1 = require(\"../errors\");\n// TODO: Parameterize this class to allow for custom error handling (e.g. only retry 400 errors on Chat endpoint,\n//  but not globally\n/* Retry asynchronous operations.\n *\n * @param maxRetries - The maximum number of retries to attempt.\n * @param asyncFn - The asynchronous function to retry.\n */\nclass RetryOnServerFailure {\n    constructor(asyncFn, maxRetries) {\n        /*\n         * Calculate the delay time for retrying an operation.\n         *\n         * @param attempt: The # of times the operation has been attempted.\n         * @param baseDelay: The base delay time in milliseconds.\n         * @param maxDelay: The maximum delay time in milliseconds.\n         * @param jitterFactor: The magnitude of jitter relative to the delay.\n         */\n        this.calculateRetryDelay = (attempt, baseDelay = 200, maxDelay = 20000, jitterFactor = 0.25) => {\n            let delay = baseDelay * 2 ** attempt; // Exponential (baseDelay * 2^attempt)\n            // Apply jitter as a random percentage of the original delay; e.g.: if `jitterFactor` = 0.25 and `baseDelay` = 1000,\n            // then `jitter` is 25% of `baseDelay`\n            const jitter = delay * jitterFactor * (Math.random() - 0.5);\n            delay += jitter;\n            // Ensure delay is not negative or greater than maxDelay\n            return Math.min(maxDelay, Math.max(0, delay));\n        };\n        if (maxRetries) {\n            this.maxRetries = maxRetries;\n        }\n        else {\n            this.maxRetries = 3;\n        }\n        if (this.maxRetries > 10) {\n            throw new Error('Max retries cannot exceed 10');\n        }\n        this.asyncFn = asyncFn;\n    }\n    async execute(...args) {\n        if (this.maxRetries < 1) {\n            return this.asyncFn(...args);\n        }\n        for (let attempt = 0; attempt < this.maxRetries; attempt++) {\n            try {\n                const response = await this.asyncFn(...args);\n                // Return immediately if the response is not a retryable error\n                if (!this.isRetryError(response)) {\n                    return response;\n                }\n                throw response; // Will catch this in next line\n            }\n            catch (error) {\n                const mappedError = this.mapErrorIfNeeded(error);\n                // If the error is not retryable, throw it immediately\n                if (this.shouldStopRetrying(mappedError)) {\n                    throw mappedError;\n                }\n                // On the last retry, throw a MaxRetriesExceededError\n                if (attempt === this.maxRetries - 1) {\n                    throw new errors_1.PineconeMaxRetriesExceededError(this.maxRetries);\n                }\n                // Wait before retrying\n                await this.delay(attempt + 1);\n            }\n        }\n        // This fallback is unnecessary, but included for type safety\n        throw new errors_1.PineconeMaxRetriesExceededError(this.maxRetries);\n    }\n    isRetryError(response) {\n        if (!response) {\n            return false;\n        }\n        if (response) {\n            if (response.name &&\n                ['PineconeUnavailableError', 'PineconeInternalServerError'].includes(response.name)) {\n                return true;\n            }\n            if (response.status && response.status >= 500) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async delay(attempt) {\n        const delayTime = this.calculateRetryDelay(attempt);\n        return new Promise((resolve) => setTimeout(resolve, delayTime));\n    }\n    mapErrorIfNeeded(error) {\n        if (error?.status) {\n            return (0, errors_1.mapHttpStatusError)(error);\n        }\n        return error; // Return original error if no mapping is needed\n    }\n    shouldStopRetrying(error) {\n        if (error.status) {\n            return error.status < 500;\n        }\n        if (error.name) {\n            return (error.name !== 'PineconeUnavailableError' &&\n                error.name !== 'PineconeInternalServerError');\n        }\n        return true;\n    }\n}\nexports.RetryOnServerFailure = RetryOnServerFailure;\n//# sourceMappingURL=retries.js.map","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PineconeUnableToResolveHostError = exports.PineconeEnvironmentVarsNotSupportedError = exports.PineconeUnexpectedResponseError = exports.PineconeConfigurationError = void 0;\nconst base_1 = require(\"./base\");\nconst CONFIG_HELP = `You can find the configuration values for your project in the Pinecone developer console at https://app.pinecone.io.`;\n/**\n * This exception indicates there is a problem with the configuration values\n * you have provided to the client. The error message should contain additional\n * context about what you are missing.\n *\n * @see {@link Pinecone} for information about initializing the client.\n */\nclass PineconeConfigurationError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(`${message} ${CONFIG_HELP}`);\n        this.name = 'PineconeConfigurationError';\n    }\n}\nexports.PineconeConfigurationError = PineconeConfigurationError;\n/**\n * This exception indicates an API call that returned a response that was\n * unable to be parsed or that did not include expected fields. It's not\n * expected to ever occur.\n *\n * If you encounter this error, please [file an issue](https://github.com/pinecone-io/pinecone-ts-client/issues) so we can investigate.\n */\nclass PineconeUnexpectedResponseError extends base_1.BasePineconeError {\n    constructor(url, status, body, message) {\n        super(`Unexpected response while calling ${url}. ${message ? message + ' ' : ''}Status: ${status}. Body: ${body}`);\n        this.name = 'PineconeUnexpectedResponseError';\n    }\n}\nexports.PineconeUnexpectedResponseError = PineconeUnexpectedResponseError;\n/**\n * This error occurs when the client tries to read environment variables in\n * an environment that does not have access to the Node.js global `process.env`.\n *\n * If you are seeing this error, you will need to configure the client by passing\n * configuration values to the `Pinecone` constructor.\n *\n * ```typescript\n * import { Pinecone } from '@pinecone-database/pinecone';\n *\n * const pinecone = new Pinecone({\n *    apiKey: 'YOUR_API_KEY',\n * })\n * ```\n *\n * @see Instructions for configuring { @link Pinecone }\n */\nclass PineconeEnvironmentVarsNotSupportedError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(message);\n        this.name = 'PineconeEnvironmentVarsNotSupportedError';\n    }\n}\nexports.PineconeEnvironmentVarsNotSupportedError = PineconeEnvironmentVarsNotSupportedError;\n/**\n * This error occurs when the client is unable to resolve the database host for a given\n * index. This is unexpected to occur unless there is a problem with the Pinecone service.\n *\n * If you encounter this error, please [file an issue](https://github.com/pinecone-io/pinecone-ts-client/issues) so we can investigate.\n */\nclass PineconeUnableToResolveHostError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(message);\n        this.name = 'PineconeUnableToResolveHostError';\n    }\n}\nexports.PineconeUnableToResolveHostError = PineconeUnableToResolveHostError;\n//# sourceMappingURL=config.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeUrl = void 0;\nfunction normalizeUrl(url) {\n    if (!url || url.trim().length === 0) {\n        return;\n    }\n    if (!url.startsWith('http://') && !url.startsWith('https://')) {\n        return 'https://' + url;\n    }\n    return url;\n}\nexports.normalizeUrl = normalizeUrl;\n//# sourceMappingURL=normalizeUrl.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PineconeRequestError = exports.PineconeConnectionError = void 0;\nconst base_1 = require(\"./base\");\n/**\n * This error is thrown when the client attempts to make a\n * request and never receives any response.\n *\n * This could be due to:\n * - Network problems which prevent the request from being completed.\n * - An outage of Pinecone's APIs. See [Pinecone's status page](https://status.pinecone.io/) to find out whether there is an ongoing incident.\n *\n * The `cause` property will contain a reference to the underlying error. Inspect its value to find out more about the root cause of the error.\n * ```\n * import { Pinecone } from '@pinecone-database/pinecone';\n *\n * const p = new Pinecone({ apiKey: 'invalid-api-key-value' })\n *\n * try {\n *  await p.listIndexes();\n * } catch (e) {\n *  console.log(e.name); // PineconeConnectionError\n *  console.log(e.cause); // Error [FetchError]: The request failed and the interceptors did not return an alternative response\n *  console.log(e.cause.cause); // TypeError: fetch failed\n *  console.log(e.cause.cause.cause); // Error: getaddrinfo ENOTFOUND controller.wrong-environment.pinecone.io\n * }\n * ```\n *\n * @see [Pinecone's status page](https://status.pinecone.io/)\n * */\nclass PineconeConnectionError extends base_1.BasePineconeError {\n    constructor(e, url) {\n        let urlMessage = '';\n        if (url) {\n            urlMessage = ` while calling ${url}`;\n        }\n        super(`Request failed to reach Pinecone${urlMessage}. This can occur for reasons such as network problems that prevent the request from being completed, or a Pinecone API outage. Check your network connection, and visit https://status.pinecone.io/ to see whether any outages are ongoing.`, e);\n        this.name = 'PineconeConnectionError';\n    }\n}\nexports.PineconeConnectionError = PineconeConnectionError;\n/**\n * This error is thrown any time a request to the Pinecone API fails.\n *\n * The `cause` property will contain a reference to the underlying error. Inspect its value to find out more about the root cause.\n */\nclass PineconeRequestError extends base_1.BasePineconeError {\n    constructor(context) {\n        if (context.response) {\n            super(`Request failed during a call to ${context.init.method} ${context.url} with status ${context.response.status}`, context.error);\n        }\n        else {\n            super(`Request failed during a call to ${context.init.method} ${context.url}`, context.error);\n        }\n    }\n}\nexports.PineconeRequestError = PineconeRequestError;\n//# sourceMappingURL=request.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BasePineconeError = void 0;\nclass BasePineconeError extends Error {\n    constructor(message, cause) {\n        super(message);\n        // Set the prototype explicitly to ensure instanceof works correctly\n        Object.setPrototypeOf(this, new.target.prototype);\n        // Maintain a proper stack trace in V8 environments (Chrome and Node.js)\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, new.target);\n        }\n        this.name = this.constructor.name;\n        this.cause = cause;\n    }\n}\nexports.BasePineconeError = BasePineconeError;\n//# sourceMappingURL=base.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.debugLog = void 0;\nconst debugLog = (str) => {\n    if (typeof process !== 'undefined' &&\n        process &&\n        process.env &&\n        process.env.PINECONE_DEBUG) {\n        console.log(str);\n    }\n};\nexports.debugLog = debugLog;\n//# sourceMappingURL=debugLog.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isBrowser = exports.isEdge = void 0;\nconst isEdge = () => {\n    // This is the recommended way to detect\n    // running in the Edge Runtime according\n    // to Vercel docs.\n    return typeof EdgeRuntime === 'string';\n};\nexports.isEdge = isEdge;\nconst isBrowser = () => {\n    return typeof window !== 'undefined';\n};\nexports.isBrowser = isBrowser;\n//# sourceMappingURL=environment.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleApiError = exports.extractMessage = exports.PineconeArgumentError = exports.BasePineconeError = exports.PineconeRequestError = exports.PineconeConnectionError = exports.PineconeUnableToResolveHostError = exports.PineconeEnvironmentVarsNotSupportedError = exports.PineconeUnexpectedResponseError = exports.PineconeConfigurationError = void 0;\nvar config_1 = require(\"./config\");\nObject.defineProperty(exports, \"PineconeConfigurationError\", { enumerable: true, get: function () { return config_1.PineconeConfigurationError; } });\nObject.defineProperty(exports, \"PineconeUnexpectedResponseError\", { enumerable: true, get: function () { return config_1.PineconeUnexpectedResponseError; } });\nObject.defineProperty(exports, \"PineconeEnvironmentVarsNotSupportedError\", { enumerable: true, get: function () { return config_1.PineconeEnvironmentVarsNotSupportedError; } });\nObject.defineProperty(exports, \"PineconeUnableToResolveHostError\", { enumerable: true, get: function () { return config_1.PineconeUnableToResolveHostError; } });\n__exportStar(require(\"./http\"), exports);\nvar request_1 = require(\"./request\");\nObject.defineProperty(exports, \"PineconeConnectionError\", { enumerable: true, get: function () { return request_1.PineconeConnectionError; } });\nObject.defineProperty(exports, \"PineconeRequestError\", { enumerable: true, get: function () { return request_1.PineconeRequestError; } });\nvar base_1 = require(\"./base\");\nObject.defineProperty(exports, \"BasePineconeError\", { enumerable: true, get: function () { return base_1.BasePineconeError; } });\nvar validation_1 = require(\"./validation\");\nObject.defineProperty(exports, \"PineconeArgumentError\", { enumerable: true, get: function () { return validation_1.PineconeArgumentError; } });\nvar utils_1 = require(\"./utils\");\nObject.defineProperty(exports, \"extractMessage\", { enumerable: true, get: function () { return utils_1.extractMessage; } });\nvar handling_1 = require(\"./handling\");\nObject.defineProperty(exports, \"handleApiError\", { enumerable: true, get: function () { return handling_1.handleApiError; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertKeysToCamelCase = void 0;\n// converts keys of a json payload from snake_case to camelCase\nconst convertKeysToCamelCase = (object) => {\n    if (Array.isArray(object)) {\n        return object.map((item) => (0, exports.convertKeysToCamelCase)(item));\n    }\n    else if (object !== null && typeof object === 'object') {\n        return Object.entries(object).reduce((acc, [key, value]) => {\n            const camelKey = toCamelCase(key);\n            acc[camelKey] = (0, exports.convertKeysToCamelCase)(value);\n            return acc;\n        }, {});\n    }\n    return object; // return primitives as is\n};\nexports.convertKeysToCamelCase = convertKeysToCamelCase;\n// converts snake-case keys to camelCase\nconst toCamelCase = (str) => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n//# sourceMappingURL=convertKeys.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extractMessage = void 0;\n/** @internal */\nconst extractMessage = async (error) => {\n    let message = await error.response.text();\n    // Error response is sometimes the raw message, sometimes it's JSON\n    // so we will try to parse out the actual message text, but\n    // we wrap it in a try to avoid crashing in a way that obscures\n    // the actual error if the response format changes in the future.\n    try {\n        const messageJSON = JSON.parse(message);\n        if (messageJSON.message) {\n            message = messageJSON.message;\n        }\n    }\n    catch (e) {\n        // noop\n    }\n    return message;\n};\nexports.extractMessage = extractMessage;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.buildUserAgent = void 0;\nconst environment_1 = require(\"./environment\");\nconst packageInfo = __importStar(require(\"../version.json\"));\nconst buildUserAgent = (config) => {\n    // We always want to include the package name and version\n    // along with the langauge name to help distinguish these\n    // requests from those emitted by other clients\n    const userAgentParts = [\n        `${packageInfo.name} v${packageInfo.version}`,\n        'lang=typescript',\n    ];\n    if ((0, environment_1.isEdge)()) {\n        userAgentParts.push('Edge Runtime');\n    }\n    // If available, capture information about the Node.js version\n    if (typeof process !== 'undefined' && process && process.version) {\n        userAgentParts.push(`node ${process.version}`);\n    }\n    if (config.sourceTag) {\n        userAgentParts.push(`source_tag=${normalizeSourceTag(config.sourceTag)}`);\n    }\n    return userAgentParts.join('; ');\n};\nexports.buildUserAgent = buildUserAgent;\nconst normalizeSourceTag = (sourceTag) => {\n    if (!sourceTag) {\n        return;\n    }\n    /**\n     * normalize sourceTag\n     * 1. Lowercase\n     * 2. Limit charset to [a-z0-9_ :]\n     * 3. Trim left/right spaces\n     * 4. Condense multiple spaces to one, and replace with underscore\n     */\n    return sourceTag\n        .toLowerCase()\n        .replace(/[^a-z0-9_ :]/g, '')\n        .trim()\n        .replace(/[ ]+/g, '_');\n};\n//# sourceMappingURL=user-agent.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.queryParamsStringify = void 0;\n// Everything in this file is lifted from the generated openapi runtime.\n// I need to create a small modification of the generated queryParamStringify\n// function in order to fix an issue with array params.\n//\n// See https://github.com/pinecone-io/pinecone-ts-client/pull/74\nfunction queryParamsStringify(params, prefix = '') {\n    return Object.keys(params)\n        .map((key) => querystringSingleKey(key, params[key], prefix))\n        .filter((part) => part.length > 0)\n        .join('&');\n}\nexports.queryParamsStringify = queryParamsStringify;\nfunction querystringSingleKey(key, value, keyPrefix = '') {\n    const fullKey = keyPrefix + (keyPrefix.length ? `[${key}]` : key);\n    // This is a one line change from the default querystring implementation. Checking\n    // with `Array.isArray` instead of `value instanceof Array` allows us to get the\n    // the correct behavior when stringifying array params.\n    if (Array.isArray(value)) {\n        const multiValue = value\n            .map((singleValue) => encodeURIComponent(String(singleValue)))\n            .join(`&${encodeURIComponent(fullKey)}=`);\n        return `${encodeURIComponent(fullKey)}=${multiValue}`;\n    }\n    if (value instanceof Set) {\n        const valueAsArray = Array.from(value);\n        return querystringSingleKey(key, valueAsArray, keyPrefix);\n    }\n    if (value instanceof Date) {\n        return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;\n    }\n    if (value instanceof Object) {\n        return queryParamsStringify(value, fullKey);\n    }\n    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;\n}\n//# sourceMappingURL=queryParamsStringify.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PineconeArgumentError = void 0;\nconst base_1 = require(\"./base\");\n/**\n * This error is thrown when arguments passed to a Pinecone\n * client method fail a runtime validation.\n */\nclass PineconeArgumentError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(`${message}`);\n        this.name = 'PineconeArgumentError';\n    }\n}\nexports.PineconeArgumentError = PineconeArgumentError;\n//# sourceMappingURL=validation.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Remove all these imports as they're no longer needed\r\n// import { promises as fs } from 'fs';\r\n// import { join } from 'path';\r\n// import { fileURLToPath } from 'url';\r\n// import { dirname } from 'path';\r\n\r\nexport async function validateCodeStrings(inputCodeStrings) {\r\n    const errors = [];\r\n    const tabLabels = new Set();\r\n    const rowValues = new Set();\r\n    const codeTypes = new Set();\r\n    \r\n    // Clean up input strings by removing anything outside angle brackets\r\n    inputCodeStrings = inputCodeStrings.map(str => {\r\n        const match = str.match(/<[^>]+>/);\r\n        return match ? match[0] : str;\r\n    });\r\n\r\n    console.log(\"CleanedInput Code Strings:\", inputCodeStrings);\r\n\r\n    // Track codes by their suffixes\r\n    const vvCodes = new Set();  // codes ending in -VV\r\n    const vrCodes = new Set();  // codes ending in -VR\r\n    const rrCodes = new Set();  // codes ending in -RR\r\n    const rvCodes = new Set();  // codes ending in -RV\r\n    const evCodes = new Set();  // codes ending in -EV\r\n    const erCodes = new Set();  // codes ending in -ER\r\n\r\n    // Load valid codes from the correct location\r\n    let validCodes = new Set();\r\n    try {\r\n        const response = await fetch('../prompts/Codes.txt');\r\n        if (!response.ok) {\r\n            throw new Error('Failed to load Codes.txt file');\r\n        }\r\n        const fileContent = await response.text();\r\n        validCodes = new Set(fileContent.split('\\n')\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0));\r\n    } catch (error) {\r\n        errors.push(`Error reading Codes.txt file: ${error.message}`);\r\n        return errors;\r\n    }\r\n\r\n    // First pass: collect all row values, code types, and suffixes\r\n    for (const codeString of inputCodeStrings) {\r\n        if (!codeString.startsWith('<') || !codeString.endsWith('>')) {\r\n            errors.push(`Invalid code string format: ${codeString}`);\r\n            continue;\r\n        }\r\n        // Extract and store row IDs\r\n        if (codeString.startsWith('<BR>')) {\r\n            // Skip extraction for BR tags\r\n            continue;\r\n        }\r\n\r\n        const rowMatches = codeString.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/)[1];\r\n                // Handle spaces before/after the pipe delimiter\r\n                const parts = rowContent.split('|');\r\n                if (parts.length > 0) {\r\n                    // Extract all potential row IDs including those after asterisks\r\n                    parts.forEach(part => {\r\n                        const trimmedPart = part.trim();\r\n                        if (trimmedPart.startsWith('*')) {\r\n                            // Add the ID after the asterisk\r\n                            const afterAsterisk = trimmedPart.substring(1).trim();\r\n                            if (afterAsterisk) {\r\n                                rowValues.add(afterAsterisk);\r\n                            }\r\n                        } else if (trimmedPart) {\r\n                            // Add regular IDs\r\n                            rowValues.add(trimmedPart);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        \r\n        // console.log(rowMatches);\r\n        // Extract code type and suffix\r\n        const codeMatch = codeString.match(/<([^;]+);/);\r\n        if (codeMatch) {\r\n            const codeType = codeMatch[1].trim();\r\n            codeTypes.add(codeType);\r\n\r\n            // Check for suffixes and store them\r\n            if (codeType.endsWith('-VV')) vvCodes.add(codeType);\r\n            if (codeType.endsWith('-VR')) vrCodes.add(codeType);\r\n            if (codeType.endsWith('-RR')) rrCodes.add(codeType);\r\n            if (codeType.endsWith('-RV')) rvCodes.add(codeType);\r\n            if (codeType.endsWith('-EV')) evCodes.add(codeType);\r\n            if (codeType.endsWith('-ER')) erCodes.add(codeType);\r\n        }\r\n    }\r\n\r\n    // Validate suffix relationships\r\n    // Rule 1: -VV or -VR must have -EV or -RV\r\n    for (const code of [...vvCodes, ...vrCodes]) {\r\n        if (evCodes.size === 0 && rvCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -EV or -RV. Fix by adding another code with the correct suffix or by change to the EV/ER version of the same code.`);\r\n        }\r\n    }\r\n\r\n    // Rule 2: -RR or -RV must have -ER or -VR\r\n    for (const code of [...rrCodes, ...rvCodes]) {\r\n        if (erCodes.size === 0 && vrCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -ER or -VR`);\r\n        }\r\n    }\r\n\r\n// Second pass: detailed validation\r\nfor (const codeString of inputCodeStrings) {\r\n    // Skip BR tags completely\r\n    if (codeString === '<BR>') {\r\n        continue;\r\n    }\r\n    \r\n    const codeMatch = codeString.match(/<([^;]+);/);\r\n    if (!codeMatch) {\r\n        errors.push(`Cannot extract code type from: ${codeString}`);\r\n        continue;\r\n    }\r\n\r\n    const codeType = codeMatch[1].trim();\r\n    \r\n    // Validate code exists in description file\r\n    if (!validCodes.has(codeType)) {\r\n        errors.push(`Invalid code type: \"${codeType}\" not found in valid codes list`);\r\n    }\r\n\r\n\r\n\r\n        // Validate TAB labels\r\n        if (codeType === 'TAB') {\r\n            const labelMatch = codeString.match(/label\\d+=\"([^\"]*)\"/);\r\n            if (!labelMatch) {\r\n                errors.push('TAB code missing label parameter');\r\n                continue;\r\n            }\r\n\r\n            const label = labelMatch[1];\r\n            \r\n            if (label.length > 30) {\r\n                errors.push(`Tab label too long (max 30 chars): \"${label}\"`);\r\n            }\r\n            \r\n            if (/[&,\":;]/.test(label)) {\r\n                errors.push(`Tab label contains illegal characters (&,\":;): \"${label}\"`);\r\n            }\r\n            \r\n            if (tabLabels.has(label)) {\r\n                errors.push(`Duplicate tab label: \"${label}\"`);\r\n            }\r\n            tabLabels.add(label);\r\n        }\r\n\r\n        // Validate row format\r\n        const rowMatches = codeString.match(/row\\d+=\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+=\"([^\"]*)\"/)[1];\r\n                const parts = rowContent.split('|');\r\n                if (parts.length < 2) {\r\n                    errors.push(`Invalid row format (missing required fields): \"${rowContent}\"`);\r\n                }\r\n            });\r\n        }\r\n    } // <-- This is the end of the second pass loop\r\n\r\n    // Third pass: validate driver references after all row IDs are collected\r\n    for (const codeString of inputCodeStrings) {\r\n        const driverMatches = codeString.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (driverMatches) {\r\n            driverMatches.forEach(match => {\r\n                const driverValue = match.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/)[1].trim();\r\n                if (!rowValues.has(driverValue)) {\r\n                    errors.push(`Driver value \"${driverValue}\" not found in any row`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Convert array of errors to a single string with line breaks\r\n    return errors.join('\\n');\r\n}\r\n\r\n// Modified export function\r\nexport async function runValidation(inputStrings) {\r\n    try {\r\n        const cleanedStrings = inputStrings\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0)\r\n            .map(line => line.replace(/^'|',$|,$|^\"|\"$/g, ''));\r\n\r\n        const codeStrings = cleanedStrings.join(' ').match(/<[^>]+>/g) || [];\r\n\r\n        if (codeStrings.length === 0) {\r\n            console.error('Validation run with no codestrings - input is empty');\r\n            return ['No code strings found to validate'];\r\n        }\r\n\r\n        const validationErrors = await validateCodeStrings(codeStrings);\r\n        return validationErrors;\r\n    } catch (error) {\r\n        console.error('Validation failed:', error);\r\n        return [`Validation failed: ${error.message}`];\r\n    }\r\n}\r\n\r\n","/**\r\n * CodeCollection.js\r\n * Functions for processing and managing code collections\r\n */\r\n\r\nimport { convertKeysToCamelCase } from \"@pinecone-database/pinecone/dist/utils\";\r\n\r\n/**\r\n * Parses code strings and creates a code collection\r\n * @param {string} inputText - The input text containing code strings\r\n * @returns {Array} - An array of code objects with type and parameters\r\n */\r\nexport function populateCodeCollection(inputText) {\r\n    try {\r\n        console.log(\"Processing input text for code collection\");\r\n        \r\n        // Initialize an empty code collection\r\n        const codeCollection = [];\r\n        \r\n        // Split the input text by newlines to process each line\r\n        const lines = inputText.split('\\n');\r\n        \r\n        for (const line of lines) {\r\n            // Skip empty lines\r\n            if (!line.trim()) continue;\r\n            \r\n            // Extract the code type and parameters\r\n            const codeMatch = line.match(/<([^;>]+);(.*?)>/);\r\n            if (!codeMatch) continue;\r\n            \r\n            const codeType = codeMatch[1].trim();\r\n            const paramsString = codeMatch[2].trim();\r\n            \r\n            // Parse parameters\r\n            const params = {};\r\n            \r\n            // Handle special case for row parameters with asterisks\r\n            const rowMatches = paramsString.matchAll(/row(\\d+)\\s*=\\s*\"([^\"]*)\"/g);\r\n            for (const match of rowMatches) {\r\n                const rowNum = match[1];\r\n                const rowValue = match[2];\r\n                params[`row${rowNum}`] = rowValue;\r\n            }\r\n            \r\n            // Parse other parameters\r\n            const paramMatches = paramsString.matchAll(/(\\w+)\\s*=\\s*\"([^\"]*)\"/g);\r\n            for (const match of paramMatches) {\r\n                const paramName = match[1].trim();\r\n                const paramValue = match[2].trim();\r\n                \r\n                // Skip row parameters as they're already handled\r\n                if (paramName.startsWith('row')) continue;\r\n                \r\n                params[paramName] = paramValue;\r\n            }\r\n            \r\n            // Add the code to the collection\r\n            codeCollection.push({\r\n                type: codeType,\r\n                params: params\r\n            });\r\n        }\r\n        \r\n        console.log(`Processed ${codeCollection.length} codes`);\r\n        return codeCollection;\r\n    } catch (error) {\r\n        console.error(\"Error in populateCodeCollection:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Exports a code collection to text format\r\n * @param {Array} codeCollection - The code collection to export\r\n * @returns {string} - A formatted text representation of the code collection\r\n */\r\nexport function exportCodeCollectionToText(codeCollection) {\r\n    try {\r\n        if (!codeCollection || !Array.isArray(codeCollection)) {\r\n            throw new Error(\"Invalid code collection\");\r\n        }\r\n        \r\n        let result = \"Code Collection:\\n\";\r\n        result += \"================\\n\\n\";\r\n        \r\n        codeCollection.forEach((code, index) => {\r\n            result += `Code ${index + 1}: ${code.type}\\n`;\r\n            result += \"Parameters:\\n\";\r\n            \r\n            // First display non-row parameters\r\n            for (const [key, value] of Object.entries(code.params)) {\r\n                if (!key.startsWith('row')) {\r\n                    result += `  ${key}: ${value}\\n`;\r\n                }\r\n            }\r\n            \r\n            // Then display row parameters\r\n            const rowParams = Object.entries(code.params)\r\n                .filter(([key]) => key.startsWith('row'))\r\n                .sort((a, b) => {\r\n                    const numA = parseInt(a[0].replace('row', ''));\r\n                    const numB = parseInt(b[0].replace('row', ''));\r\n                    return numA - numB;\r\n                });\r\n            \r\n            if (rowParams.length > 0) {\r\n                result += \"  Rows:\\n\";\r\n                for (const [key, value] of rowParams) {\r\n                    result += `    ${key}: ${value}\\n`;\r\n                }\r\n            }\r\n            \r\n            result += \"\\n\";\r\n        });\r\n        \r\n        return result;\r\n    } catch (error) {\r\n        console.error(\"Error in exportCodeCollectionToText:\", error);\r\n        throw error;\r\n    }\r\n} \r\n\r\n/**\r\n * Processes a code collection and performs operations based on code types\r\n * @param {Array} codeCollection - The code collection to process\r\n * @returns {Object} - Results of processing the code collection\r\n */\r\nexport async function runCodes(codeCollection) {\r\n    try {\r\n        console.log(\"Running code collection processing\");\r\n        \r\n        if (!codeCollection || !Array.isArray(codeCollection)) {\r\n            throw new Error(\"Invalid code collection\");\r\n        }\r\n        \r\n        // Initialize result object\r\n        const result = {\r\n            processedCodes: 0,\r\n            createdTabs: [],\r\n            errors: []\r\n        };\r\n        \r\n        // Initialize state variables (similar to VBA variables)\r\n        let currentWorksheetName = null;\r\n        const assumptionTabs = [];\r\n        \r\n        // Process each code in the collection\r\n        for (let i = 0; i < codeCollection.length; i++) {\r\n            const code = codeCollection[i];\r\n            const codeType = code.type;\r\n            \r\n            try {\r\n                // Handle MODEL code type\r\n                if (codeType === \"MODEL\") {\r\n                    // Skip for now as mentioned in the original VBA code\r\n                    console.log(\"MODEL code type encountered - skipping for now\");\r\n                    continue;\r\n                }\r\n                \r\n                // Handle TAB code type\r\n                if (codeType === \"TAB\") {\r\n                    // Accept both label1 and Label1 for backward compatibility\r\n                    const tabName = code.params.label1 || code.params.Label1 || `Tab_${i}`;\r\n                    \r\n                    // Check if worksheet exists and delete it\r\n                    await Excel.run(async (context) => {\r\n                        try {\r\n                            // Get all worksheets\r\n                            const sheets = context.workbook.worksheets;\r\n                            sheets.load(\"items/name\");\r\n                            console.log(\"sheets\", sheets);\r\n                            await context.sync();\r\n                            \r\n                            // Check if worksheet exists\r\n                            const existingSheet = sheets.items.find(sheet => sheet.name === tabName);\r\n                            console.log(\"existingSheet\", existingSheet);\r\n                            // if (existingSheet) {\r\n                            //     // Delete the worksheet if it exists\r\n                            //     existingSheet.delete();\r\n                            //     await context.sync();\r\n                            // }\r\n                            // console.log(\"existingSheet deleted\");\r\n                            \r\n                            // Get the Calcs worksheet AND the Financials worksheet\r\n                            const sourceCalcsWS = context.workbook.worksheets.getItem(\"Calcs\");\r\n                            const financialsSheet = context.workbook.worksheets.getItem(\"Financials\");\r\n                            financialsSheet.load(\"position\"); // Load Financials sheet position\r\n                            await context.sync(); // Sync to get Financials position\r\n                            console.log(`sourceCalcsWS obtained. Financials sheet is at position ${financialsSheet.position}`);\r\n                            \r\n\r\n                            if (!existingSheet) {\r\n                            // Create a new worksheet by copying the Calcs worksheet\r\n                            const newSheet = sourceCalcsWS.copy();\r\n                            console.log(\"newSheet created by copying Calcs worksheet\");\r\n                            \r\n                            // Rename it\r\n                            newSheet.name = tabName;\r\n                            console.log(\"newSheet renamed to\", tabName);\r\n                            \r\n                            // <<< NEW: Set position relative to Financials sheet >>>\r\n                            newSheet.position = financialsSheet.position + 1;\r\n                            console.log(`Set position of ${tabName} to ${newSheet.position}`);\r\n                               // Add to assumption tabs collection\r\n                               assumptionTabs.push({\r\n                                name: tabName,\r\n                                worksheet: newSheet\r\n                               }); // <-- Added closing brace and semicolon here\r\n\r\n\r\n                                currentWorksheetName = tabName;\r\n                            \r\n                                await context.sync();\r\n                                \r\n                                result.createdTabs.push(tabName);\r\n                                console.log(\"Tab created successfully:\", tabName);\r\n                            // }); <-- Removed this closing parenthesis, it belongs to Excel.run below\r\n                        \r\n                            }\r\n\r\n                            else {\r\n                                console.log(\"Worksheet already exists:\", tabName);\r\n                                assumptionTabs.push({\r\n                                    name: tabName,\r\n                                    worksheet: existingSheet\r\n                                });\r\n                                // Need to set currentWorksheetName here too if the sheet exists\r\n                                currentWorksheetName = tabName; \r\n                            }\r\n                      \r\n       \r\n                            \r\n                         \r\n                            \r\n                            // Set the current worksheet name <-- This comment is now redundant/misplaced\r\n                       \r\n                        } catch (error) {\r\n                            console.error(\"Detailed error in TAB processing:\", error);\r\n                            throw error;\r\n                        }\r\n                    }).catch(error => { // <-- This is the correct closing for Excel.run\r\n                        console.error(`Error processing TAB code: ${error.message}`);\r\n                        result.errors.push({\r\n                            codeIndex: i,\r\n                            codeType: codeType,\r\n                            error: error.message\r\n                        });\r\n                    });\r\n                    \r\n                    continue;\r\n                }\r\n                \r\n                // Handle non-TAB codes\r\n                if (codeType !== \"TAB\") {\r\n                    await Excel.run(async (context) => {\r\n                        try {\r\n                            // Get the Codes worksheet\r\n                            const codesWS = context.workbook.worksheets.getItem(\"Codes\");\r\n                            console.log(\"Got Codes worksheet\");\r\n                            \r\n                            // Get the used range of the Codes worksheet\r\n                            const usedRange = codesWS.getUsedRange();\r\n                            usedRange.load(\"rowCount\");\r\n                            usedRange.load(\"columnCount\");\r\n                            await context.sync();\r\n                            console.log(`Used range: ${usedRange.rowCount} rows x ${usedRange.columnCount} columns`);\r\n                            \r\n                            // Get the current worksheet\r\n                            const currentWS = context.workbook.worksheets.getItem(currentWorksheetName);\r\n                            console.log(\"Got current worksheet:\", currentWorksheetName);\r\n                            \r\n                            // Get the last row in the current worksheet\r\n                            const lastUsedRow = currentWS.getUsedRange().getLastRow();\r\n                            lastUsedRow.load(\"rowIndex\");\r\n                            await context.sync();\r\n                            const pasteRow = lastUsedRow.rowIndex + 2; // Adjusted to paste one row lower\r\n                            console.log(\"Paste row:\", pasteRow);\r\n                            \r\n                            // Search for the code type in column D (index 3)\r\n                            let firstRow = -1;\r\n                            let lastRow = -1;\r\n                            \r\n                            // Load the values of column D\r\n                            const columnD = codesWS.getRange(`D1:D${usedRange.rowCount}`);\r\n                            columnD.load(\"values\");\r\n                            await context.sync();\r\n                            \r\n                            console.log(\"Loaded column D values\");\r\n                            \r\n                            // Check if values are loaded properly\r\n                            if (!columnD.values) {\r\n                                console.error(\"columnD.values is null or undefined\");\r\n                                throw new Error(`Failed to load values from column D in Codes worksheet`);\r\n                            }\r\n                            \r\n                            console.log(`columnD.values length: ${columnD.values.length}`);\r\n                            \r\n                            // Debug print the first few values in column D\r\n                            console.log(\"First 10 values in column D:\");\r\n                            for (let i = 0; i < Math.min(10, columnD.values.length); i++) {\r\n                                console.log(`Row ${i+1}: ${columnD.values[i][0]}`);\r\n                            }\r\n                            \r\n                            // Find the first and last row with the code\r\n                            for (let row = 0; row < columnD.values.length; row++) {\r\n                                if (columnD.values[row][0] === codeType) {\r\n                                    if (firstRow === -1) {\r\n                                        firstRow = row + 1; // Excel rows are 1-indexed\r\n                                    }\r\n                                    lastRow = row + 1;\r\n                                }\r\n                            }\r\n                            \r\n                            // Check if the code type was found\r\n                            const codeTypeFound = firstRow !== -1 && lastRow !== -1;\r\n                            \r\n                            if (!codeTypeFound) {\r\n                                console.warn(`Code type ${codeType} not found in Codes worksheet. Skipping this code.`);\r\n                                result.errors.push({\r\n                                    codeIndex: i,\r\n                                    codeType: codeType,\r\n                                    error: `Code type ${codeType} not found in Codes worksheet`\r\n                                });\r\n                                // Skip to the next code\r\n                                result.processedCodes++;\r\n                            } else {\r\n                                console.log(`Found code type ${codeType} in rows ${firstRow} to ${lastRow}`);\r\n                                \r\n                                // Try the suggested approach to copy the range with all properties\r\n                                await Excel.run(async (context) => {\r\n                                    // Get the source range\r\n                                    const sourceRange = context.workbook.worksheets.getItem(\"Codes\").getRange(`A${firstRow}:CX${lastRow}`);\r\n                                    \r\n                                    // Get the destination range\r\n                                    const destinationRange = context.workbook.worksheets.getItem(currentWorksheetName).getRange(`A${pasteRow}`);\r\n                                    \r\n                                    // Copy the range with all properties\r\n                                    destinationRange.copyFrom(sourceRange, Excel.RangeCopyType.all);\r\n                                    \r\n                                    await context.sync();\r\n                                });\r\n                                \r\n                                await context.sync();\r\n                                \r\n                                // Apply the driver and assumption inputs function to the current worksheet\r\n                                try {\r\n                                    console.log(`Applying driver and assumption inputs to worksheet: ${currentWorksheetName}`);\r\n                                    \r\n                                    // Get the current worksheet and load its properties\r\n                                    const currentWorksheet = context.workbook.worksheets.getItem(currentWorksheetName);\r\n                                    currentWorksheet.load('name');\r\n                                    await context.sync();\r\n                                    \r\n                                    await driverAndAssumptionInputs(\r\n                                        currentWorksheet,\r\n                                        pasteRow,\r\n                                        code\r\n                                    );\r\n                                    console.log(`Successfully applied driver and assumption inputs to worksheet: ${currentWorksheetName}`);\r\n                                } catch (error) {\r\n                                    console.error(`Error applying driver and assumption inputs: ${error.message}`);\r\n                                    result.errors.push({\r\n                                        codeIndex: i,\r\n                                        codeType: codeType,\r\n                                        error: `Error applying driver and assumption inputs: ${error.message}`\r\n                                    });\r\n                                }\r\n                                \r\n                                result.processedCodes++;\r\n                            }\r\n                        } catch (error) {\r\n                            console.error(`Error processing code ${codeType}:`, error);\r\n                            throw error;\r\n                        }\r\n                    }).catch(error => {\r\n                        console.error(`Error processing code ${codeType}: ${error.message}`);\r\n                        result.errors.push({\r\n                            codeIndex: i,\r\n                            codeType: codeType,\r\n                            error: error.message\r\n                        });\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                console.error(`Error processing code ${i}:`, error);\r\n                result.errors.push({\r\n                    codeIndex: i,\r\n                    codeType: codeType,\r\n                    error: error.message\r\n                });\r\n            }\r\n        }\r\n        \r\n        // Prepare the final result object, including the names of assumption tabs\r\n        const finalResult = {\r\n            ...result, // Includes processedCodes, errors\r\n            assumptionTabs: assumptionTabs.map(tab => tab.name) // Return only the names\r\n        };\r\n\r\n        console.log(\"runCodes finished. Returning:\", finalResult);\r\n        return finalResult; // Return the modified result object\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in runCodes:\", error);\r\n        // Consider how to return errors. Throwing stops execution.\r\n        // Returning them in the result allows the caller to decide.\r\n        throw error; // Or return { errors: [error.message], assumptionTabs: [] }\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function to update cell references in formulas when rows are inserted\r\n * @param {string} formula - The formula to update\r\n * @param {number} rowOffset - The number of rows to offset\r\n * @returns {string} - The updated formula\r\n */\r\nfunction updateFormulaReferences(formula, rowOffset) {\r\n    if (!formula || !formula.startsWith('=')) {\r\n        return formula;\r\n    }\r\n    \r\n    // Regular expression to match cell references (e.g., A1, B2, etc.)\r\n    const cellRefRegex = /([A-Z]+)([0-9]+)/g;\r\n    \r\n    // Replace each cell reference with an updated one\r\n    return formula.replace(cellRefRegex, (match, col, row) => {\r\n        const rowNum = parseInt(row);\r\n        return `${col}${rowNum + rowOffset}`;\r\n    });\r\n}\r\n\r\n/**\r\n * Tests if the active cell's fill color is #CCFFCC (light green)\r\n * @returns {Promise<boolean>} - True if the active cell is green, false otherwise\r\n */\r\nexport async function isActiveCellGreen() {\r\n    try {\r\n        console.log(\"Testing if cell B2 is green (#CCFFCC)\");\r\n        \r\n        return await Excel.run(async (context) => {\r\n            // Get cell B2 instead of the active cell\r\n            const cellB2 = context.workbook.worksheets.getActiveWorksheet().getRange(\"B2\");\r\n            \r\n            // Load the fill color property and address\r\n            cellB2.load([\"format/fill/color\", \"address\"]);\r\n            \r\n            // Execute the request\r\n            await context.sync();\r\n            \r\n            // Check if the color is #CCFFCC\r\n            const isGreen = cellB2.format.fill.color === \"#CCFFCC\";\r\n            \r\n            console.log(`Cell B2 address: ${cellB2.address}, color: ${cellB2.format.fill.color}, Is green: ${isGreen}`);\r\n            \r\n            return isGreen;\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error in isActiveCellGreen:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Processes driver and assumption inputs for a worksheet based on code parameters,\r\n * replicating the logic from the VBA Driver_and_Assumption_Inputs function.\r\n * @param {Excel.Worksheet} worksheet - The initial Excel worksheet object.\r\n * @param {number} calcsPasteRow - The starting row for finding the code block.\r\n * @param {Object} code - The code object with type and parameters.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function driverAndAssumptionInputs(worksheet, calcsPasteRow, code) {\r\n    try {\r\n        // --- Load worksheet name before calling helper ---\r\n        // This requires its own context if worksheet object might not have name loaded yet\r\n        let worksheetName = 'unknown';\r\n        try {\r\n             await Excel.run(async (context) => {\r\n                 worksheet.load('name');\r\n                 await context.sync();\r\n                 worksheetName = worksheet.name;\r\n                 \r\n             });\r\n         } catch(nameLoadError) {\r\n             console.error(\"Failed to load worksheet name before calling helper\", nameLoadError);\r\n             throw new Error(\"Cannot determine worksheet name to proceed.\");\r\n         }\r\n\r\n        // Define variable to store lastRow outside Excel.run scope so we can use it later\r\n        let lastRow = 1000; // Default value in case of failure\r\n\r\n        try {\r\n            // Get a fresh worksheet reference and find the last row within a proper Excel.run context\r\n            lastRow = await Excel.run(async (context) => {    \r\n                // Get worksheet reference within THIS context by name\r\n                const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\r\n                \r\n                // Get the used range of the worksheet\r\n                const usedRange = currentWorksheet.getUsedRange();\r\n\r\n                // Get the last row within the used range\r\n                const lastRowRange = usedRange.getLastRow();\r\n\r\n                // Load the rowIndex property of the last row\r\n                lastRowRange.load(\"rowIndex\");\r\n\r\n                // Synchronize the state with the Excel document\r\n                await context.sync();\r\n\r\n                // Calculate the 1-based index of the last row\r\n                const result = lastRowRange.rowIndex + 1;\r\n                console.log('lastRow', result);\r\n                \r\n                // Return the value so it's accessible outside this Excel.run\r\n                return result;\r\n            });\r\n        } catch(lastRowError) {\r\n            console.error(\"Failed to determine last row\", lastRowError);\r\n            throw new Error(\"Cannot determine last row to proceed.\");\r\n        }\r\n\r\n        // Ensure lastRow is a valid number (helper should return 1000 on error)\r\n        if (typeof lastRow !== 'number' || lastRow <= 0) {\r\n            console.error(`Last row determination failed or returned invalid value (${lastRow}). Cannot proceed safely.`);\r\n            throw new Error(\"Failed to determine a valid last row for processing.\");\r\n        }\r\n        // --- End Determine Last Row ---\r\n\r\n        // Now, proceed with the main logic within its own Excel.run\r\n        await Excel.run(async (context) => {\r\n            // Pass the determined lastRow into this context\r\n            const determinedLastRow = lastRow; \r\n            \r\n            // Get worksheet reference within THIS context by name\r\n            const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\r\n            \r\n            // USE calcsPasteRow in console log\r\n            console.log(`Processing driver/assumption inputs for worksheet: ${worksheetName}, Code: ${code.type}, Start Row: ${calcsPasteRow}, Using Last Row: ${determinedLastRow}`);\r\n\r\n            const columnSequence = ['A', 'B', 'C', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'O', 'P', 'R'];\r\n            \r\n            // Get the code value\r\n            const codeValue = code.type;\r\n\r\n            // Find the search row (first row >= calcsPasteRow where CodeValue is found in Col D)\r\n            // Note: Using determinedLastRow obtained from the helper function\r\n            let searchRow = -1; // 1-based index\r\n            let searchRange = null; \r\n            let searchRangeAddress = ''; \r\n\r\n            try {\r\n                // USE calcsPasteRow in console log\r\n                console.log(`Attempting to get searchRange. calcsPasteRow: ${calcsPasteRow}, determinedLastRow: ${determinedLastRow}`);\r\n                // USE calcsPasteRow in condition\r\n                if (typeof calcsPasteRow !== 'number' || typeof determinedLastRow !== 'number' || calcsPasteRow <= 0 || determinedLastRow < calcsPasteRow) {\r\n                     console.error(`Invalid range parameters for searchRange: calcsPasteRow=${calcsPasteRow}, determinedLastRow=${determinedLastRow}. Skipping search.`);\r\n                     searchRow = -1; \r\n                 } else {\r\n                     // USE calcsPasteRow for search range address\r\n                     searchRangeAddress = `D${calcsPasteRow}:D${determinedLastRow}`;\r\n                     console.log(`Creating searchRange with address: ${searchRangeAddress}`);\r\n                     // Need to use the worksheet object available in *this* context\r\n                     searchRange = currentWorksheet.getRange(searchRangeAddress);\r\n\r\n                     console.log(`Loading values for searchRange: ${searchRangeAddress}`);\r\n                     searchRange.load('values');\r\n                     await context.sync();\r\n                     console.log(`Successfully loaded values for searchRange: ${searchRangeAddress}`);\r\n                 }\r\n\r\n            } catch (loadError) {\r\n                 console.error(`Error loading/syncing searchRange (${searchRangeAddress}): ${loadError.message}`, loadError);\r\n                 searchRow = -1; \r\n            }\r\n\r\n            // Check if searchRange was successfully created and loaded before accessing .values\r\n            if (searchRange && searchRange.values) { // Check searchRange first!\r\n                 console.log(`SearchRange (${searchRangeAddress}) has loaded values. Searching for codeValue: ${codeValue}`);\r\n                 for (let i = 0; i < searchRange.values.length; i++) {\r\n                    if (searchRange.values[i][0] === codeValue) {\r\n                        // USE calcsPasteRow to calculate searchRow\r\n                        searchRow = calcsPasteRow + i; // Found the row (1-based)\r\n                        console.log(`Found codeValue '${codeValue}' at index ${i}, resulting searchRow: ${searchRow}`);\r\n                        break;\r\n                    }\r\n                }\r\n                 if (searchRow === -1) { // If loop finished without finding\r\n                     console.log(`CodeValue '${codeValue}' not found within the loaded values of searchRange (${searchRangeAddress}).`);\r\n                 }\r\n            } else if (searchRow !== -1) { // Only log warning if we didn't already hit the loadError or invalid params\r\n                 console.warn(`searchRange (${searchRangeAddress}) object exists but '.values' property is not available after sync. Search cannot be performed.`);\r\n                 searchRow = -1; // Ensure we trigger the \"not found\" logic\r\n            }\r\n\r\n            if (searchRow === -1) {\r\n                 console.warn(`Code type ${codeValue} not found or could not be searched for in column D (Range: ${searchRangeAddress || 'Invalid'}). Skipping inputs for this code.`);\r\n                 return; // Exit if code not found or search failed\r\n            }\r\n            console.log(`Found code ${codeValue} at search row: ${searchRow}`);\r\n\r\n\r\n            // Find the check row (first row >= searchrow where Col B is not light green #CCFFCC)\r\n            // VBA: Do While .Cells(checkrow, 2).Interior.Color = RGB(204, 255, 204)\r\n            let checkRow = searchRow;\r\n            let isGreen = true;\r\n            while (isGreen) {\r\n                const cellB = currentWorksheet.getRange(`B${checkRow}`);\r\n                cellB.load('format/fill/color');\r\n                await context.sync();\r\n                 // Handle potential errors if cell color can't be loaded\r\n                 if (cellB.format && cellB.format.fill) {\r\n                    isGreen = cellB.format.fill.color === '#CCFFCC';\r\n                 } else {\r\n                     console.warn(`Could not read fill color for cell B${checkRow}. Assuming not green.`);\r\n                     isGreen = false; // Assume not green if color cannot be determined\r\n                 }\r\n\r\n                if (isGreen) {\r\n                    checkRow++;\r\n                    // Add a safety break condition?\r\n                    if (checkRow > determinedLastRow + 50) { // Use determinedLastRow\r\n                         console.error(\"Check row exceeded expected limits. Breaking loop.\");\r\n                         throw new Error(\"Failed to find non-green check row within reasonable bounds.\");\r\n                    }\r\n                }\r\n            }\r\n            console.log(`Found check row (first non-green row in B at/after search row): ${checkRow}`);\r\n\r\n\r\n            // Process drivers, labels, and financialsdriver (relative to searchRow)\r\n            for (let k = 1; k <= 9; k++) {\r\n                const targetRow = searchRow + k - 1;\r\n                if (targetRow > determinedLastRow + 20) { // Safety check: Don't write way past the data\r\n                    console.warn(`Target row ${targetRow} seems too high. Skipping write for k=${k}.`);\r\n                    continue;\r\n                }\r\n\r\n                // Financials Driver (only for k=1)\r\n                if (k === 1 && code.params.financialsdriver) {\r\n                    const finDriverCell = currentWorksheet.getRange(`I${targetRow}`);\r\n                    finDriverCell.values = [[code.params.financialsdriver]];\r\n                    console.log(`Set financialsdriver at I${targetRow}: ${code.params.financialsdriver}`);\r\n                }\r\n\r\n                // Driver\r\n                const driverParam = code.params[`driver${k}`];\r\n                if (driverParam) {\r\n                    const driverCell = currentWorksheet.getRange(`F${targetRow}`);\r\n                    driverCell.values = [[driverParam]];\r\n                     console.log(`Set driver${k} at F${targetRow}: ${driverParam}`);\r\n                }\r\n\r\n                // Label\r\n                const labelParam = code.params[`label${k}`];\r\n                if (labelParam) {\r\n                    const labelCell = currentWorksheet.getRange(`B${targetRow}`);\r\n                    labelCell.values = [[labelParam]];\r\n                     console.log(`Set label${k} at B${targetRow}: ${labelParam}`);\r\n                }\r\n            }\r\n            await context.sync(); // Sync after loop for efficiency\r\n\r\n\r\n            // Process row items (inserting rows relative to checkRow)\r\n            let currentCheckRowForInserts = checkRow; // Use a separate variable to track cumulative insertions correctly\r\n            for (let g = 1; g <= 200; g++) { // Max 200 row parameters as in VBA\r\n                const rowParam = code.params[`row${g}`];\r\n                if (!rowParam) continue; // Skip if rowg parameter doesn't exist\r\n\r\n                 console.log(`Processing row${g}: ${rowParam}`);\r\n\r\n                const rowItems = rowParam.split('*');\r\n                const numNewRows = rowItems.length - 1; // Number of rows to insert\r\n\r\n                // Calculate the 1-based row number *before* potential insertions for this 'g' iteration\r\n                // This takes into account rows inserted by previous 'g' loops via currentCheckRowForInserts\r\n                const baseRowForThisG = currentCheckRowForInserts + g - 1;\r\n                console.log(`Base row for row${g}: ${baseRowForThisG}, numNewRows: ${numNewRows}`);\r\n\r\n                if (numNewRows > 0) {\r\n                    // Insert new rows below the baseRowForThisG\r\n                    const insertStartAddress = `${baseRowForThisG + 1}:${baseRowForThisG + numNewRows}`;\r\n                    console.log(`Inserting ${numNewRows} rows at ${insertStartAddress}`);\r\n                    const insertRange = currentWorksheet.getRange(insertStartAddress);\r\n                    insertRange.insert(Excel.InsertShiftDirection.down);\r\n                    await context.sync(); // Sync after insert\r\n\r\n                    // Sequentially copy formats and formulas from the previous row to the newly inserted ones\r\n                    // This helps ensure relative formulas are adjusted correctly step-by-step\r\n                    console.log(`Copying formats/formulas sequentially for inserted rows.`);\r\n                    for (let i = 0; i < numNewRows; i++) {\r\n                        const sourceRowNum = baseRowForThisG + i;\r\n                        const targetRowNum = baseRowForThisG + i + 1; // The newly inserted row\r\n                        const sourceRowRange = currentWorksheet.getRange(`${sourceRowNum}:${sourceRowNum}`);\r\n                        const targetRowRange = currentWorksheet.getRange(`${targetRowNum}:${targetRowNum}`);\r\n\r\n                        // Copy formats\r\n                        console.log(`  Copying formats from row ${sourceRowNum} to ${targetRowNum}`);\r\n                        targetRowRange.copyFrom(sourceRowRange, Excel.RangeCopyType.formats);\r\n\r\n                        // Copy formulas (should adjust relative references)\r\n                        console.log(`  Copying formulas from row ${sourceRowNum} to ${targetRowNum}`);\r\n                        targetRowRange.copyFrom(sourceRowRange, Excel.RangeCopyType.formulas);\r\n\r\n                        // We could use RangeCopyType.all, but separate copy ensures population step overrides values cleanly.\r\n                    }\r\n                    await context.sync(); // Sync after all copies for this 'g' group are done\r\n                    console.log(\"Finished sequential copy for inserted rows.\");\r\n                }\r\n\r\n                // Populate the row(s) (original row + inserted rows)\r\n                // This runs AFTER rows are inserted and structure (formats/formulas) is copied.\r\n                for (let yy = 0; yy <= numNewRows; yy++) {\r\n                    const currentRowNum = baseRowForThisG + yy; // 1-based row number to write to\r\n                    const splitArray = rowItems[yy].split('|');\r\n                    console.log(`Populating row ${currentRowNum} with items: ${rowItems[yy]}`);\r\n\r\n                    for (let x = 0; x < splitArray.length; x++) {\r\n                        // Check bounds for columnSequence\r\n                        if (x >= columnSequence.length) {\r\n                            console.warn(`Data item index ${x} exceeds columnSequence length (${columnSequence.length}). Skipping.`);\r\n                            continue;\r\n                        }\r\n\r\n                        const valueToWrite = splitArray[x];\r\n                        // VBA check: If splitArray(x) <> \"\" And splitArray(x) <> \"F\" Then\r\n                        // 'F' likely means \"Formula\", so we don't overwrite if the value is 'F'.\r\n                        if (valueToWrite && valueToWrite.toUpperCase() !== 'F') {\r\n                            const colLetter = columnSequence[x];\r\n                            const cellToWrite = currentWorksheet.getRange(`${colLetter}${currentRowNum}`);\r\n                            // Attempt to infer data type (basic number check)\r\n                            const numValue = Number(valueToWrite);\r\n                            if (!isNaN(numValue) && valueToWrite.trim() !== '') {\r\n                                cellToWrite.values = [[numValue]];\r\n                            } else {\r\n                                // Preserve existing value if empty string, otherwise write text\r\n                                if (valueToWrite.trim() !== '') {\r\n                                    cellToWrite.values = [[valueToWrite]];\r\n                                }\r\n                            }\r\n                            // console.log(`  Wrote '${valueToWrite}' to ${colLetter}${currentRowNum}`);\r\n                        }\r\n                    }\r\n                }\r\n                await context.sync(); // Sync after populating each 'g' group\r\n\r\n                // Adjust the base check row marker for subsequent 'g' iterations\r\n                // by adding the number of rows inserted in *this* iteration.\r\n                currentCheckRowForInserts += numNewRows;\r\n                console.log(`Finished processing row${g}. currentCheckRowForInserts is now ${currentCheckRowForInserts}`);\r\n\r\n            } // End for g loop\r\n\r\n            console.log(`Completed processing driver and assumption inputs for code ${codeValue} in worksheet ${worksheetName}`);\r\n        }); // End main Excel.run\r\n    } catch (error) {\r\n        console.error(`Error in driverAndAssumptionInputs MAIN CATCH for code '${code.type}' in worksheet '${worksheet?.name || 'unknown'}': ${error.message}`, error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Finds the last used row in a specific column of a worksheet.\r\n * @param {Excel.Worksheet} worksheet - The worksheet to search in.\r\n * @param {string} columnLetter - The column letter (e.g., \"B\").\r\n * @returns {Promise<number>} - The 1-based index of the last used row, or 0 if the column is empty or an error occurs.\r\n */\r\nasync function getLastUsedRow(worksheet, columnLetter) {\r\n    // Re-use worksheet object passed into the function within this Excel.run\r\n    // Need context from the caller's Excel.run or wrap this in its own\r\n    console.log(`Attempting to get last used row for column ${columnLetter} in sheet ${worksheet.name}`);\r\n    try {\r\n        // It's safer to re-get the worksheet by name if this is called outside the main loop's context\r\n        // However, if called within the loop's context, using the passed object is fine.\r\n        // For simplicity assuming it's called within a valid context for now.\r\n        const fullColumn = worksheet.getRange(`${columnLetter}:${columnLetter}`);\r\n        const usedRange = fullColumn.getUsedRange(true); // Use 'true' for valuesOnly parameter\r\n        const lastCell = usedRange.getLastCell();\r\n        lastCell.load(\"rowIndex\");\r\n        await worksheet.context.sync(); // Use the context associated with the worksheet object\r\n        const lastRowIndex = lastCell.rowIndex + 1; // Convert 0-based index to 1-based row number\r\n        console.log(`Last used row in column ${columnLetter} is ${lastRowIndex}`);\r\n        return lastRowIndex;\r\n    } catch (error) {\r\n        // Handle cases where the column might be completely empty or other errors\r\n        if (error.code === \"ItemNotFound\" || error.code === \"GeneralException\") {\r\n            console.warn(`Could not find used range or last cell in column ${columnLetter} of sheet ${worksheet.name}. Assuming empty or header only (returning 0).`);\r\n            return 0; // Return 0 if column is empty or error occurs\r\n        }\r\n        console.error(`Error in getLastUsedRow for column ${columnLetter} on sheet ${worksheet.name}:`, error);\r\n        // It's often better to let the caller handle the error if it's unexpected.\r\n        throw error; // Re-throw other errors\r\n    }\r\n    // Note: Removed the inner Excel.run as it complicates context management.\r\n    // This function now expects to be called *within* an existing Excel.run context.\r\n}\r\n\r\n/**\r\n * Adjusts driver references in column AE based on lookups in column A.\r\n * Replicates the core logic of VBA Adjust_Drivers.\r\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\r\n * @param {number} lastRow - The last row to process (inclusive).\r\n */\r\nasync function adjustDriversJS(worksheet, lastRow) {\r\n    const START_ROW = 10; // <<< CHANGED FROM 9\r\n    const DRIVER_CODE_COL = \"F\"; // Column containing the driver code to look up\r\n    const LOOKUP_COL = \"A\";      // Column to search for the driver code\r\n    const TARGET_COL = \"AE\";     // Column where the result address string is written\r\n\r\n    console.log(`Running adjustDriversJS for sheet: ${worksheet.name} from row ${START_ROW} to ${lastRow}`);\r\n\r\n    // Ensure lastRow is valid before proceeding\r\n    if (lastRow < START_ROW) {\r\n        console.warn(`adjustDriversJS: lastRow (${lastRow}) is less than START_ROW (${START_ROW}). Skipping.`);\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // Define the ranges to load\r\n        const driverCodeRangeAddress = `${DRIVER_CODE_COL}${START_ROW}:${DRIVER_CODE_COL}${lastRow}`;\r\n        const lookupRangeAddress = `${LOOKUP_COL}${START_ROW}:${LOOKUP_COL}${lastRow}`;\r\n        const driverCodeRange = worksheet.getRange(driverCodeRangeAddress);\r\n        const lookupRange = worksheet.getRange(lookupRangeAddress);\r\n\r\n        // Load values from both columns\r\n        driverCodeRange.load(\"values\");\r\n        lookupRange.load(\"values\");\r\n        await worksheet.context.sync(); // Sync to get the values\r\n\r\n        const driverCodeValues = driverCodeRange.values;\r\n        const lookupValues = lookupRange.values;\r\n\r\n        // Create a map for efficient lookup: { lookupValue: rowIndex }\r\n        // Note: rowIndex here is the 1-based Excel row number\r\n        const lookupMap = new Map();\r\n        for (let i = 0; i < lookupValues.length; i++) {\r\n            const value = lookupValues[i][0];\r\n            // Only add non-empty values to the map. Handle potential duplicates?\r\n            // VBA's .Find typically finds the first match. Map naturally stores the last encountered.\r\n            if (value !== null && value !== \"\") {\r\n                 // The row number in Excel is START_ROW + index\r\n                lookupMap.set(value, START_ROW + i);\r\n            }\r\n        }\r\n        console.log(`Built lookup map from ${LOOKUP_COL}${START_ROW}:${LOOKUP_COL}${lastRow} with ${lookupMap.size} entries.`);\r\n\r\n        // Prepare the output values for the target column AE\r\n        // Initialize with nulls or empty strings to clear previous values potentially\r\n        const outputValues = []; // Array of arrays for Excel range: [[value1], [value2], ...]\r\n        let foundCount = 0;\r\n        let notFoundCount = 0;\r\n\r\n        for (let i = 0; i < driverCodeValues.length; i++) {\r\n            const driverCode = driverCodeValues[i][0];\r\n            const currentRow = START_ROW + i; // Current Excel row being processed\r\n\r\n            if (driverCode !== null && driverCode !== \"\") {\r\n                if (lookupMap.has(driverCode)) {\r\n                    const foundRow = lookupMap.get(driverCode);\r\n                    const targetAddress = `${TARGET_COL}${foundRow}`;\r\n                    outputValues.push([targetAddress]); // Store as [[value]] for range write\r\n                    foundCount++;\r\n                    // console.log(`Row ${currentRow} (${DRIVER_CODE_COL}): Found '${driverCode}' in ${LOOKUP_COL} at row ${foundRow}. Setting ${TARGET_COL}${currentRow} = '${targetAddress}'`);\r\n                } else {\r\n                    // Value in F not found in A\r\n                    console.warn(`adjustDriversJS: Driver code '${driverCode}' from cell ${DRIVER_CODE_COL}${currentRow} not found in range ${lookupRangeAddress}.`);\r\n                    outputValues.push([null]); // Or [\"\"] or keep existing? VBA doesn't explicitly clear. Using null.\r\n                    notFoundCount++;\r\n                }\r\n            } else {\r\n                // Empty cell in F, write null to corresponding AE cell\r\n                outputValues.push([null]);\r\n            }\r\n        }\r\n\r\n        // Write the results back to column AE\r\n        if (outputValues.length > 0) {\r\n            const targetRangeAddress = `${TARGET_COL}${START_ROW}:${TARGET_COL}${lastRow}`;\r\n            const targetRange = worksheet.getRange(targetRangeAddress);\r\n            console.log(`Writing ${foundCount} results (${notFoundCount} not found) to ${targetRangeAddress}`);\r\n            targetRange.values = outputValues;\r\n            // Sync will happen in the caller's context\r\n        } else {\r\n             console.log(`adjustDriversJS: No values to write to ${TARGET_COL}.`);\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(`Error in adjustDriversJS for sheet ${worksheet.name}:`, error);\r\n        // Decide if error should be re-thrown to stop the whole process\r\n        // throw error;\r\n    }\r\n    // No context.sync() here - it should be handled by the calling function (processAssumptionTabs)\r\n}\r\n\r\n/**\r\n * Replaces INDIRECT functions in a specified column range with their evaluated values.\r\n * Mimics the VBA Replace_Indirects logic using batched range value lookups.\r\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\r\n * @param {number} lastRow - The last row to process.\r\n */\r\nasync function replaceIndirectsJS(worksheet, lastRow) {\r\n    const START_ROW = 10; // <<< CHANGED FROM 9\r\n    const TARGET_COL = \"AE\";\r\n\r\n    console.log(`Running replaceIndirectsJS for sheet: ${worksheet.name} from row ${START_ROW} to ${lastRow}`);\r\n\r\n    if (lastRow < START_ROW) {\r\n        console.warn(`replaceIndirectsJS: lastRow (${lastRow}) is less than START_ROW (${START_ROW}). Skipping.`);\r\n        return;\r\n    }\r\n\r\n    const targetRangeAddress = `${TARGET_COL}${START_ROW}:${TARGET_COL}${lastRow}`;\r\n    const targetRange = worksheet.getRange(targetRangeAddress);\r\n\r\n    try {\r\n        // 1. Load formulas from the target range\r\n        targetRange.load(\"formulas\");\r\n        await worksheet.context.sync();\r\n\r\n        const originalFormulas = targetRange.formulas; // 2D array [[f1], [f2], ...]\r\n        const referencesToLookup = new Map(); // Map<string, { range: Excel.Range | null, value: any }>\r\n        const formulaData = []; // Array<{ originalFormula: string, index: number }>\r\n\r\n        // 2. First Pass: Identify all unique INDIRECT arguments\r\n        console.log(\"Replace_Indirects: Pass 1 - Identifying INDIRECT arguments\");\r\n        for (let i = 0; i < originalFormulas.length; i++) {\r\n            let formula = originalFormulas[i][0];\r\n            formulaData.push({ originalFormula: formula, index: i }); // Store original formula and index\r\n\r\n            if (typeof formula === 'string') {\r\n                // Use a loop to find all INDIRECT occurrences in a single formula\r\n                let searchStartIndex = 0;\r\n                while (true) {\r\n                    const upperFormula = formula.toUpperCase();\r\n                    const indirectStartIndex = upperFormula.indexOf(\"INDIRECT(\", searchStartIndex);\r\n\r\n                    // Stop if no more INDIRECT found or if it might be part of INDEX\r\n                    if (indirectStartIndex === -1 || upperFormula.includes(\"INDEX(\")) {\r\n                        break;\r\n                    }\r\n\r\n                    // Find the matching closing parenthesis (simple approach)\r\n                    const parenStartIndex = indirectStartIndex + \"INDIRECT(\".length;\r\n                    const parenEndIndex = formula.indexOf(\")\", parenStartIndex);\r\n\r\n                    if (parenEndIndex === -1) {\r\n                        console.warn(`Row ${START_ROW + i}: Malformed INDIRECT found in formula: ${formula}`);\r\n                        break; // Cannot process this INDIRECT\r\n                    }\r\n\r\n                    const argString = formula.substring(parenStartIndex, parenEndIndex).trim();\r\n\r\n                    // Validate argString looks like a cell/range reference (basic check)\r\n                    // This helps avoid trying to load ranges like \"Sheet1!A:A\" which might fail or be slow\r\n                    if (argString && /^[A-Za-z0-9_!$:'\". ]+$/.test(argString) && !referencesToLookup.has(argString)) {\r\n                         console.log(`  Found reference to lookup: ${argString}`);\r\n                         referencesToLookup.set(argString, { range: null, value: undefined }); // Placeholder\r\n                    }\r\n\r\n                    // Continue searching after this INDIRECT\r\n                    searchStartIndex = parenEndIndex + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        // 3. Batch Load Values for identified references\r\n        console.log(`Replace_Indirects: Loading values for ${referencesToLookup.size} unique references.`);\r\n        if (referencesToLookup.size > 0) {\r\n            for (const [refString, data] of referencesToLookup.entries()) {\r\n                try {\r\n                    // Attempt to get the range and load its value\r\n                    data.range = worksheet.getRange(refString);\r\n                    // Load values. Consider loading formulas too if INDIRECT might point to a formula cell.\r\n                    // Loading numberFormat might help distinguish between 0 and empty.\r\n                    data.range.load([\"values\", \"text\"]); // Load text to handle \"DELETE\" easily\r\n                } catch (rangeError) {\r\n                    console.warn(`Replace_Indirects: Error getting range for reference \"${refString}\". It might be invalid or on another sheet.`, rangeError.debugInfo || rangeError.message);\r\n                     // Keep data.range as null, will be handled later\r\n                    referencesToLookup.set(refString, { range: null, value: '#REF!' }); // Mark as error\r\n                }\r\n            }\r\n            await worksheet.context.sync(); // Sync all loaded values\r\n\r\n            // Populate the values in the map\r\n            for (const [refString, data] of referencesToLookup.entries()) {\r\n                 if (data.range) { // If range was successfully retrieved\r\n                     try {\r\n                         // Use .text to directly compare with \"DELETE\"\r\n                         // Use .values for the actual numeric/boolean value if not \"DELETE\"\r\n                        const cellText = data.range.text[0][0];\r\n                        if (cellText === \"DELETE\") {\r\n                            data.value = \"0\"; // Replace \"DELETE\" with \"0\" string as per VBA\r\n                        } else {\r\n                             // Use the actual value (could be string, number, boolean)\r\n                             // Prefer values[0][0] as it respects data types better than text\r\n                             data.value = data.range.values[0][0];\r\n                        }\r\n                     } catch (valueError) {\r\n                         console.warn(`Replace_Indirects: Error reading value for reference \"${refString}\" after sync.`, valueError.debugInfo || valueError.message);\r\n                         data.value = '#VALUE!'; // Or another suitable error indicator\r\n                     }\r\n                 }\r\n                 // If data.range was null or value fetch failed, data.value remains '#REF!' or '#VALUE!'\r\n            }\r\n             console.log(\"Replace_Indirects: Finished loading reference values.\");\r\n        }\r\n\r\n\r\n        // 4. Second Pass: Replace INDIRECT with looked-up values\r\n        console.log(\"Replace_Indirects: Pass 2 - Replacing INDIRECT calls.\");\r\n        const newFormulas = []; // Array of arrays: [[newF1], [newF2], ...]\r\n        for (const item of formulaData) {\r\n            let currentFormula = item.originalFormula;\r\n\r\n            if (typeof currentFormula === 'string') {\r\n                let loopCount = 0; // Safety break\r\n                const MAX_LOOPS = 20; // Prevent infinite loops for complex/circular cases\r\n\r\n                while (loopCount < MAX_LOOPS) {\r\n                    const upperFormula = currentFormula.toUpperCase();\r\n                    const indirectStartIndex = upperFormula.indexOf(\"INDIRECT(\");\r\n\r\n                    if (indirectStartIndex === -1 || upperFormula.includes(\"INDEX(\")) {\r\n                        break; // No more INDIRECTs (or INDEX present)\r\n                    }\r\n\r\n                    const parenStartIndex = indirectStartIndex + \"INDIRECT(\".length;\r\n                    const parenEndIndex = currentFormula.indexOf(\")\", parenStartIndex);\r\n\r\n                    if (parenEndIndex === -1) {\r\n                         // Already warned in pass 1, just break here\r\n                        break;\r\n                    }\r\n\r\n                    const indString = currentFormula.substring(indirectStartIndex, parenEndIndex + 1); // The full INDIRECT(...)\r\n                    const argString = currentFormula.substring(parenStartIndex, parenEndIndex).trim();\r\n\r\n                    let directRef = '#REF!'; // Default if lookup fails\r\n                     if (referencesToLookup.has(argString)) {\r\n                         directRef = referencesToLookup.get(argString).value;\r\n                     } else {\r\n                         // Argument wasn't identified/loaded (maybe invalid?)\r\n                         console.warn(`Row ${START_ROW + item.index}: INDIRECT argument \"${argString}\" not found in lookup map during replacement.`);\r\n                     }\r\n\r\n                    // Handle potential null/undefined values from lookup - treat as 0? VBA doesn't explicitly handle this.\r\n                    // Let's treat null/undefined as 0 for replacement to avoid inserting 'null' or 'undefined' into formulas.\r\n                     // Empty string \"\" should probably remain \"\" unless it was \"DELETE\".\r\n                     if (directRef === null || typeof directRef === 'undefined') {\r\n                         directRef = 0; // Replace null/undefined with numeric 0\r\n                     } else if (directRef === \"\") {\r\n                          // Keep empty string as empty string unless it was originally \"DELETE\"\r\n                          // The map handles \"DELETE\" -> \"0\" already\r\n                     } else if (typeof directRef === 'string') {\r\n                         // If the resolved value is a string, potentially needs quoting if replacing in a formula context?\r\n                         // VBA seems to just concatenate the value directly. Let's follow that.\r\n                         // Example: =SUM(INDIRECT(\"A1\")) where A1 contains \"B2\" becomes =SUM(B2)\r\n                         // Example: =CONCATENATE(\"Result: \",INDIRECT(\"A1\")) where A1 contains \"Success\" becomes =CONCATENATE(\"Result: \",\"Success\") - requires quotes?\r\n                         // VBA appears to handle this implicitly. JS replace won't add quotes.\r\n                         // Let's test behavior, may need adjustment if it breaks formulas expecting strings.\r\n                         // For now, direct replacement. Consider adding quotes if `directRef` is text AND the context requires it.\r\n                     } else if (typeof directRef === 'boolean') {\r\n                         directRef = directRef ? 'TRUE' : 'FALSE'; // Convert boolean to formula text\r\n                     }\r\n                     // Numeric values are fine as is.\r\n\r\n                    // Perform the replacement. Use replace directly on the found indString.\r\n                    currentFormula = currentFormula.replace(indString, String(directRef));\r\n                    loopCount++;\r\n\r\n                } // End while loop for single formula processing\r\n\r\n                if (loopCount === MAX_LOOPS) {\r\n                    console.warn(`Row ${START_ROW + item.index}: Max replacement loops reached for formula. Result might be incomplete: ${currentFormula}`);\r\n                }\r\n            }\r\n            // Add the processed formula (or original if not string/no INDIRECT) to the result array\r\n            newFormulas.push([currentFormula]);\r\n\r\n        } // End for loop processing all formulas\r\n\r\n        // 5. Write the modified formulas back to the range\r\n        console.log(`Replace_Indirects: Writing ${newFormulas.length} updated formulas back to ${targetRangeAddress}`);\r\n        targetRange.formulas = newFormulas;\r\n\r\n        // Sync is handled by the caller (processAssumptionTabs)\r\n\r\n    } catch (error) {\r\n        console.error(`Error in replaceIndirectsJS for sheet ${worksheet.name} range ${targetRangeAddress}:`, error.debugInfo || error);\r\n        // Re-throw the error to allow the calling function to handle it\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Placeholder for Populate_Financials VBA logic.\r\n * Populates the \"Financials\" sheet based on codes in the assumption sheet.\r\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\r\n * @param {number} lastRow - The last row to process in the assumption sheet.\r\n * @param {Excel.Worksheet} financialsSheet - The \"Financials\" worksheet (within the same Excel.run context).\r\n */\r\nasync function populateFinancialsJS(worksheet, lastRow, financialsSheet) {\r\n    console.log(`Running populateFinancialsJS for sheet: ${worksheet.name} (lastRow: ${lastRow}) -> ${financialsSheet.name}`);\r\n    // This function MUST be called within an Excel.run context.\r\n\r\n    const CALCS_FIRST_ROW = 10; // <<< CHANGED FROM 9 // Same as START_ROW elsewhere\r\n    const ASSUMPTION_CODE_COL = \"C\"; // Column with code to lookup on assumption sheet\r\n    const ASSUMPTION_LINK_COL_B = \"B\";\r\n    const ASSUMPTION_LINK_COL_D = \"D\";\r\n    // Column on assumption sheet to link for monthly data\r\n    const ASSUMPTION_MONTHS_START_COL = \"AE\";\r\n\r\n    const FINANCIALS_CODE_COLUMN = \"I\"; // Column to search for code on Financials sheet\r\n    const FINANCIALS_TARGET_COL_B = \"B\";\r\n    const FINANCIALS_TARGET_COL_D = \"D\";\r\n    const FINANCIALS_ANNUALS_START_COL = \"J\"; // Annuals start here\r\n    const FINANCIALS_MONTHS_START_COL = \"AE\"; // Months start here\r\n\r\n    // --- Updated Column Definitions ---\r\n    const ANNUALS_END_COL = \"P\";       // Annuals end here\r\n    const MONTHS_END_COL = \"CX\";       // Months end here\r\n    // --- End Updated Column Definitions ---\r\n\r\n    // Formatting constants\r\n    // const PURPLE_COLOR = \"#800080\"; // RGB(128, 0, 128) - Removed as Actuals section is removed\r\n    const GREEN_COLOR = \"#008000\";  // RGB(0, 128, 0)\r\n    const CURRENCY_FORMAT = '_(* $#,##0_);_(* $(#,##0);_(* \"$\" -_);_(@_)';\r\n\r\n    // Ensure lastRow is valid\r\n    if (lastRow < CALCS_FIRST_ROW) {\r\n        console.warn(`populateFinancialsJS: lastRow (${lastRow}) is less than CALCS_FIRST_ROW (${CALCS_FIRST_ROW}). Skipping.`);\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // 1. Load data from Assumption Sheet\r\n        console.log(`populateFinancialsJS: Loading assumption data up to row ${lastRow}`);\r\n        const assumptionCodeRange = worksheet.getRange(`${ASSUMPTION_CODE_COL}${CALCS_FIRST_ROW}:${ASSUMPTION_CODE_COL}${lastRow}`);\r\n        // No need to load B, D, AE addresses/values here anymore if only used for linking\r\n\r\n        assumptionCodeRange.load(\"values\");\r\n\r\n        // 2. Load data from Financials Sheet (Find last row in code column I)\r\n        const financialsSearchCol = financialsSheet.getRange(`${FINANCIALS_CODE_COLUMN}:${FINANCIALS_CODE_COLUMN}`);\r\n        const financialsUsedRange = financialsSearchCol.getUsedRange(true);\r\n        financialsUsedRange.load(\"rowCount\");\r\n        // It's okay to sync assumption and initial financials loads together\r\n        // await worksheet.context.sync(); // Removed intermediate sync\r\n\r\n        let financialsLastRow = 0;\r\n        // Sync financials rowCount load before calculating financialsLastRow\r\n        await worksheet.context.sync();\r\n        if (financialsUsedRange.rowCount > 0) {\r\n           try {\r\n              const lastCell = financialsUsedRange.getLastCell();\r\n              lastCell.load(\"rowIndex\");\r\n               await worksheet.context.sync();\r\n              financialsLastRow = lastCell.rowIndex + 1;\r\n           } catch(e) {\r\n               console.warn(`Could not get last cell directly for Financials col ${FINANCIALS_CODE_COLUMN}. Error: ${e.message}. Attempting fallback range loading.`);\r\n               try {\r\n                   const fallbackRange = financialsSheet.getRange(`${FINANCIALS_CODE_COLUMN}1:${FINANCIALS_CODE_COLUMN}10000`);\r\n                   fallbackRange.load(\"values\");\r\n                   await worksheet.context.sync();\r\n                   for (let i = fallbackRange.values.length - 1; i >= 0; i--) {\r\n                       if (fallbackRange.values[i][0] !== null && fallbackRange.values[i][0] !== \"\") {\r\n                           financialsLastRow = i + 1;\r\n                           break;\r\n                       }\r\n                   }\r\n                   if (financialsLastRow === 0) console.warn(`Fallback range load for Financials col ${FINANCIALS_CODE_COLUMN} also yielded no data.`);\r\n               } catch (fallbackError) {\r\n                    console.error(`Error during fallback range loading for Financials col ${FINANCIALS_CODE_COLUMN}:`, fallbackError);\r\n                    financialsLastRow = 0;\r\n               }\r\n           }\r\n        }\r\n        console.log(`Financials last relevant row in column ${FINANCIALS_CODE_COLUMN}: ${financialsLastRow}`);\r\n\r\n        // 3. Create Map of Financials Codes (Col I) -> Row Number\r\n        const financialsCodeMap = new Map();\r\n        if (financialsLastRow > 0) {\r\n            const financialsCodeRange = financialsSheet.getRange(`${FINANCIALS_CODE_COLUMN}1:${FINANCIALS_CODE_COLUMN}${financialsLastRow}`);\r\n            financialsCodeRange.load(\"values\");\r\n            await worksheet.context.sync(); // Sync map data load\r\n            for (let i = 0; i < financialsCodeRange.values.length; i++) {\r\n                const code = financialsCodeRange.values[i][0];\r\n                if (code !== null && code !== \"\") {\r\n                    financialsCodeMap.set(code, i + 1);\r\n                }\r\n            }\r\n            console.log(`Built Financials code map with ${financialsCodeMap.size} entries.`);\r\n        } else {\r\n            console.warn(`Financials sheet column ${FINANCIALS_CODE_COLUMN} appears empty or last row not found. No codes loaded.`);\r\n        }\r\n\r\n        // 4. Identify rows to insert and prepare task data\r\n        const tasks = [];\r\n        console.log(\"populateFinancialsJS: Syncing assumption codes load...\");\r\n        await worksheet.context.sync(); // Sync needed for assumptionCodeRange.values\r\n\r\n        const assumptionCodes = assumptionCodeRange.values;\r\n        console.log(`populateFinancialsJS: Processing ${assumptionCodes?.length ?? 0} assumption rows.`);\r\n\r\n        // --- REMOVED Debug logging for row 17 values/addresses ---\r\n\r\n        for (let i = 0; i < (assumptionCodes?.length ?? 0); i++) {\r\n            const code = assumptionCodes[i][0];\r\n            const assumptionRow = CALCS_FIRST_ROW + i; // This is the correct Excel row number\r\n\r\n            if (code !== null && code !== \"\") {\r\n                if (financialsCodeMap.has(code)) {\r\n                    const targetRow = financialsCodeMap.get(code);\r\n\r\n                    // --- Manually construct the address strings ---\r\n                    const cellAddressB = `${ASSUMPTION_LINK_COL_B}${assumptionRow}`;\r\n                    const cellAddressD = `${ASSUMPTION_LINK_COL_D}${assumptionRow}`;\r\n                    const cellAddressMonths = `${ASSUMPTION_MONTHS_START_COL}${assumptionRow}`;\r\n\r\n                    // Construct the full formula links directly\r\n                    const formulaLinkB = `='${worksheet.name}'!${cellAddressB}`;\r\n                    const formulaLinkD = `='${worksheet.name}'!${cellAddressD}`;\r\n                    const formulaLinkMonths = `='${worksheet.name}'!${cellAddressMonths}`;\r\n\r\n                    // --- REMOVED getSimpleAddress helper function and related checks ---\r\n                    console.log(`  Task Prep: Row ${assumptionRow}, Code ${code}`); // Simplified log\r\n\r\n                    tasks.push({\r\n                        targetRow: targetRow,\r\n                        assumptionRow: assumptionRow,\r\n                        code: code,\r\n                        addressB: formulaLinkB,     // Use the constructed formula link\r\n                        addressD: formulaLinkD,     // Use the constructed formula link\r\n                        addressMonths: formulaLinkMonths // Use the constructed formula link\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (tasks.length === 0) {\r\n            console.log(\"No matching codes found. Nothing to insert or populate.\");\r\n            return;\r\n        }\r\n\r\n        // 5. Sort tasks by targetRow DESCENDING\r\n        tasks.sort((a, b) => b.targetRow - a.targetRow);\r\n        console.log(`Sorted ${tasks.length} tasks for insertion.`);\r\n        // --- DEBUG: Log the tasks array --- \r\n        // console.log(\"Tasks array (sorted desc by targetRow):\", JSON.stringify(tasks)); // REMOVED DEBUG\r\n        // --- END DEBUG ---\r\n\r\n        // 6. Perform Insertions (bottom-up)\r\n        console.log(\"Performing row insertions...\");\r\n        for (const task of tasks) { // Uses the DESCENDING sorted tasks\r\n            financialsSheet.getRange(`${task.targetRow}:${task.targetRow}`).insert(Excel.InsertShiftDirection.down);\r\n            // *** It's generally more efficient to sync less often, but syncing after each insert\r\n            // ensures the row model is updated for potential complex dependencies if they existed.\r\n            // Keep sync here for now unless performance becomes an issue. ***\r\n            // await worksheet.context.sync(); // Sync after EACH insertion -- REMOVED THIS LINE\r\n        }\r\n        await worksheet.context.sync(); // Sync AFTER all insertions are queued\r\n        console.log(\"Finished row insertions.\");\r\n\r\n        // Pre-calculate the final adjusted row for each task after all insertions\r\n        console.log(\"Calculating final adjusted rows for population/autofill...\");\r\n        // Get unique original target rows, sorted ascending\r\n        const originalTargetRowsAsc = [...new Set(tasks.map(t => t.targetRow))].sort((a, b) => a - b);\r\n        const taskAdjustedRows = new Map(); // Map to store { assumptionRow: adjustedRow }\r\n        let totalShift = 0; // Total shift accumulated from previous rows\r\n\r\n        // --- DEBUG: Log originalTargetRowsAsc ---\r\n        // console.log(\"Original Target Rows (unique, asc):\", originalTargetRowsAsc); // REMOVED DEBUG\r\n        // --- END DEBUG ---\r\n\r\n        originalTargetRowsAsc.forEach(uniqueRow => {\r\n            // --- DEBUG: Log current uniqueRow ---\r\n            // console.log(`Processing uniqueRow: ${uniqueRow}`); // REMOVED DEBUG\r\n            // --- END DEBUG ---\r\n\r\n            // Find all tasks that originally targeted this unique row\r\n            // CORRECTED PROPERTY NAME IN FILTER: task.targetRow instead of task.originalTargetRow\r\n            const tasksAtThisRow = tasks.filter(task => task.targetRow === uniqueRow);\r\n\r\n            // --- DEBUG: Log tasks found for this uniqueRow ---\r\n            // console.log(`  Tasks found for uniqueRow ${uniqueRow}:`, JSON.stringify(tasksAtThisRow)); // REMOVED DEBUG\r\n            // --- END DEBUG ---\r\n\r\n            // Optional: Sort tasksAtThisRow by assumptionRow for deterministic order, though might not be strictly necessary\r\n            // tasksAtThisRow.sort((a, b) => a.assumptionRow - b.assumptionRow);\r\n\r\n            let currentAdjustedRowForGroup = uniqueRow + totalShift; // Starting adjusted row for this group\r\n\r\n            // Assign consecutive adjusted rows to each task in this group\r\n            tasksAtThisRow.forEach(task => {\r\n                taskAdjustedRows.set(task.assumptionRow, currentAdjustedRowForGroup); // Use assumptionRow as key\r\n                console.log(`  Mapping: Code ${task.code}, Assumption Row ${task.assumptionRow}, Original Target ${uniqueRow}, Final Adjusted Row ${currentAdjustedRowForGroup}`);\r\n                currentAdjustedRowForGroup++; // Increment for the next task inserting at the same original spot\r\n            });\r\n\r\n            // Update the total shift for subsequent unique rows\r\n            totalShift += tasksAtThisRow.length;\r\n        });\r\n\r\n        // --- DEBUG: Log the contents of the map --- \r\n        // console.log(\"taskAdjustedRows map contents:\", taskAdjustedRows); // REMOVED DEBUG\r\n        // --- END DEBUG ---\r\n\r\n        // 7. Populate and Format inserted rows using ADJUSTED row numbers\r\n        console.log(\"Populating inserted rows (using adjusted rows)...\");\r\n        for (const task of tasks) { // Iterates descending sorted tasks (order doesn't strictly matter here, but using the same loop)\r\n            // const originalTargetRow = task.targetRow; // No longer needed for lookup\r\n            const populateRow = taskAdjustedRows.get(task.assumptionRow); // Get the calculated adjusted row using assumptionRow\r\n\r\n            // Check if populateRow was found\r\n            if (typeof populateRow === 'undefined' || populateRow === null) {\r\n                console.error(`Could not find adjusted row for task with Assumption Row ${task.assumptionRow}, Code ${task.code}. Skipping population.`);\r\n                continue; // Skip this task if mapping failed\r\n            }\r\n\r\n            // Use populateRow instead of task.targetRow for getRange calls\r\n            const cellB = financialsSheet.getRange(`${FINANCIALS_TARGET_COL_B}${populateRow}`);\r\n            const cellD = financialsSheet.getRange(`${FINANCIALS_TARGET_COL_D}${populateRow}`);\r\n            const cellAnnualsStart = financialsSheet.getRange(`${FINANCIALS_ANNUALS_START_COL}${populateRow}`);\r\n            const cellMonthsStart = financialsSheet.getRange(`${FINANCIALS_MONTHS_START_COL}${populateRow}`);\r\n\r\n            // --- Populate Column B ---\r\n            cellB.formulas = [[task.addressB]]; // Set formula directly\r\n            cellB.format.font.bold = false;\r\n            cellB.format.font.italic = false;\r\n            cellB.format.indentLevel = 2;\r\n\r\n            // --- Populate Column D ---\r\n            cellD.formulas = [[task.addressD]]; // Set formula directly\r\n            cellD.format.font.bold = false;\r\n            cellD.format.font.italic = false;\r\n            cellD.format.indentLevel = 2;\r\n\r\n            // --- Populate Annuals Start Column (J) with SUMIF ---\r\n            const codePrefix = String(task.code).substring(0, 2).toUpperCase();\r\n            let formulaJ = \"\";\r\n            if (codePrefix === \"IS\" || codePrefix === \"CF\") {\r\n                 // Corrected R2C[1] to R2C: Criteria should reference current column's header (J$2)\r\n                 formulaJ = `=SUMIF(R3,R2C,R[0])`;\r\n            } else {\r\n                 // Corrected R2C[1] to R2C: Criteria should reference current column's header (J$2)\r\n                 formulaJ = `=SUMIF(R4,R2C,R[0])`;\r\n            }\r\n            cellAnnualsStart.formulasR1C1 = [[formulaJ]]; // Use formulasR1C1 for SUMIF\r\n            cellAnnualsStart.format.font.bold = false;\r\n            cellAnnualsStart.format.font.italic = false;\r\n            cellAnnualsStart.format.numberFormat = CURRENCY_FORMAT;\r\n\r\n            // --- Populate Months Start Column (AE) with Link ---\r\n            cellMonthsStart.formulas = [[task.addressMonths]]; // Set formula directly\r\n            cellMonthsStart.format.font.bold = false;\r\n            cellMonthsStart.format.font.italic = false;\r\n            cellMonthsStart.format.font.color = GREEN_COLOR; // Keep green color for month links\r\n            cellMonthsStart.format.numberFormat = CURRENCY_FORMAT;\r\n\r\n            // Removed Actuals column population (was L in previous version)\r\n            \r\n            // --- NEW: Populate Actuals Columns S:AD with SUMIFS formula ---\r\n            try {\r\n                const actualsRange = financialsSheet.getRange(`S${populateRow}:AD${populateRow}`);\r\n                const sumifsFormula = \"=SUMIFS('Actual Data'!$B:$B,'Actual Data'!$D:$D,EOMONTH(INDIRECT(ADDRESS(2,COLUMN())),0),'Actual Data'!$E:$E,@INDIRECT(ADDRESS(ROW(),2)))\";\r\n                \r\n                // Create a 2D array matching the range dimensions\r\n                const numCols = columnLetterToIndex('AD') - columnLetterToIndex('S') + 1;\r\n                const formulasArray = [Array(numCols).fill(sumifsFormula)];\r\n                actualsRange.formulas = formulasArray;\r\n                \r\n                // Apply formatting\r\n                actualsRange.format.numberFormat = CURRENCY_FORMAT;\r\n                actualsRange.format.font.bold = false;\r\n                actualsRange.format.font.italic = false;\r\n                actualsRange.format.font.color = \"#7030A0\"; // Set font color\r\n                console.log(`  Set SUMIFS formula for S${populateRow}:AD${populateRow}`);\r\n            } catch (sumifsError) {\r\n                console.error(`Error setting SUMIFS formula for row ${populateRow} (Code: ${task.code}):`, sumifsError.debugInfo || sumifsError);\r\n            }\r\n            // --- END NEW SECTION ---\r\n        }\r\n        console.log(\"Finished setting values/formulas/formats for inserted rows.\");\r\n        await worksheet.context.sync(); // Sync all population and formatting\r\n\r\n\r\n        // 8. Perform Autofills using ADJUSTED row numbers\r\n        console.log(\"Performing autofills (using adjusted rows)...\");\r\n        for (const task of tasks) { // Uses the DESCENDING sorted tasks again\r\n             // const originalTargetRow = task.targetRow; // No longer needed for lookup\r\n             const populateRow = taskAdjustedRows.get(task.assumptionRow); // Get the calculated adjusted row using assumptionRow\r\n\r\n             // Check if populateRow was found\r\n            if (typeof populateRow === 'undefined' || populateRow === null) {\r\n                console.error(`Could not find adjusted row for task with Assumption Row ${task.assumptionRow}, Code ${task.code}. Skipping autofill.`);\r\n                continue; // Skip this task if mapping failed\r\n            }\r\n\r\n             try {\r\n                // Use populateRow for autofill ranges\r\n                // Autofill Annuals: J -> P\r\n                const sourceAnnuals = financialsSheet.getRange(`${FINANCIALS_ANNUALS_START_COL}${populateRow}`); // Use adjusted row\r\n                const destAnnuals = financialsSheet.getRange(`${FINANCIALS_ANNUALS_START_COL}${populateRow}:${ANNUALS_END_COL}${populateRow}`); // Use adjusted row\r\n                sourceAnnuals.autoFill(destAnnuals, Excel.AutoFillType.fillDefault);\r\n                // console.log(`  Autofilled ${FINANCIALS_ANNUALS_START_COL}${populateRow} to ${ANNUALS_END_COL}${populateRow}`);\r\n\r\n                // Autofill Months: AE -> CX\r\n                const sourceMonths = financialsSheet.getRange(`${FINANCIALS_MONTHS_START_COL}${populateRow}`); // Use adjusted row\r\n                const destMonths = financialsSheet.getRange(`${FINANCIALS_MONTHS_START_COL}${populateRow}:${MONTHS_END_COL}${populateRow}`); // Use adjusted row\r\n                sourceMonths.autoFill(destMonths, Excel.AutoFillType.fillDefault);\r\n                // console.log(`  Autofilled ${FINANCIALS_MONTHS_START_COL}${populateRow} to ${MONTHS_END_COL}${populateRow}`);\r\n\r\n                // Removed Actuals autofill\r\n             } catch(autofillError) {\r\n                 // Update error message to use adjusted row\r\n                 console.error(`Error during autofill for adjusted row ${populateRow} (Code: ${task.code}, Original Target: ${task.targetRow}):`, autofillError.debugInfo || autofillError);\r\n             }\r\n        }\r\n        console.log(\"Finished setting up autofills.\");\r\n        await worksheet.context.sync(); // Sync all autofill operations\r\n        console.log(\"Autofills synced.\");\r\n\r\n        console.log(`populateFinancialsJS successfully completed for ${worksheet.name} -> ${financialsSheet.name}`);\r\n\r\n    } catch (error) {\r\n        console.error(`Error in populateFinancialsJS for sheet ${worksheet.name} -> ${financialsSheet.name}:`, error.debugInfo || error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Placeholder for Format_Changes_In_Working_Capital VBA logic.\r\n * Inserts a row and adjusts formatting in \"Financials\" based on specific codes.\r\n * @param {Excel.Worksheet} financialsSheet - The \"Financials\" worksheet (within an Excel.run context).\r\n */\r\nasync function formatChangesInWorkingCapitalJS(financialsSheet) {\r\n    console.log(`Running formatChangesInWorkingCapitalJS for sheet: ${financialsSheet.name}`);\r\n    // This function MUST be called within an Excel.run context.\r\n    const FIND_TEXT_1 = \"CF: Non-cash\";\r\n    const FIND_TEXT_2 = \"CF: WC\";\r\n    const SEARCH_COLUMN = \"I\";\r\n     // Define ranges for border removal based on VBA (e.g., \"K\" + (foundRow + 1) + \":P\" + (foundRow + 1))\r\n\r\n    // TODO: Implement Format_Changes_In_Working_Capital logic\r\n    // 1. Find FIND_TEXT_1 in SEARCH_COLUMN using range.find\r\n    // 2. If found:\r\n    //    a. Get cell above (offset -1, 0)\r\n    //    b. Load its value\r\n    //    c. Sync\r\n    //    d. Check if value is FIND_TEXT_2\r\n    //    e. If yes:\r\n    //       i. Get the entire row of the found cell (.getEntireRow())\r\n    //       ii. Insert a new row above it (insert(Excel.InsertShiftDirection.down))\r\n    //       iii. Get ranges in the *original* row (now shifted down one) and remove borders.\r\n    financialsSheet.load('name'); // Keep reference valid if needed later in the SAME context\r\n    await financialsSheet.context.sync();\r\n     console.warn(`formatChangesInWorkingCapitalJS on ${financialsSheet.name} not implemented yet.`);\r\n}\r\n\r\n/**\r\n * Processes assumption tabs after runCodes, replicating VBA logic.\r\n * Expects an array of assumption tab names.\r\n * @param {string[]} assumptionTabNames - Array of assumption tab names created by runCodes.\r\n */\r\nexport async function processAssumptionTabs(assumptionTabNames) {\r\n    console.log(`Starting processing for ${assumptionTabNames.length} assumption tabs:`, assumptionTabNames);\r\n    if (!assumptionTabNames || assumptionTabNames.length === 0) {\r\n        console.log(\"No assumption tabs provided to process.\");\r\n        return;\r\n    }\r\n\r\n    const FINANCIALS_SHEET_NAME = \"Financials\"; // Define constant\r\n    const AUTOFILL_START_COLUMN = \"AE\";\r\n    const AUTOFILL_END_COLUMN = \"CX\";\r\n    const START_ROW = 10; // <<< CHANGED FROM 9 // Standard start row for processing\r\n\r\n    try {\r\n        // --- Loop through each assumption tab name ---\r\n        for (const worksheetName of assumptionTabNames) {\r\n             console.log(`\\nProcessing Assumption Tab: ${worksheetName}`);\r\n\r\n            try {\r\n                 // Perform operations for a single tab within one Excel.run for efficiency\r\n                 await Excel.run(async (context) => {\r\n                     // Get worksheet and financials sheet references within THIS context\r\n                     const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\r\n                     const financialsSheet = context.workbook.worksheets.getItem(FINANCIALS_SHEET_NAME);\r\n                     currentWorksheet.load('name'); // Load basic properties\r\n                     financialsSheet.load('name');\r\n                     await context.sync(); // Ensure sheets are loaded\r\n\r\n                     console.log(`Successfully got references for ${currentWorksheet.name} and ${financialsSheet.name}`);\r\n\r\n                     // 1. Get Last Row for the current assumption tab\r\n                     // getLastUsedRow needs context, so call it here\r\n                     const lastRow = await getLastUsedRow(currentWorksheet, \"B\"); // Pass currentWorksheet from this context\r\n                     if (lastRow < START_ROW) {\r\n                         console.warn(`Skipping tab ${worksheetName} as last used row in Col B (${lastRow}) is before start row (${START_ROW}).`);\r\n                         return; // Skip to next tab if empty or too short\r\n                     }\r\n                     console.log(`Last row in Col B for ${worksheetName}: ${lastRow}`);\r\n\r\n                     // --- Call helper functions IN ORDER, passing worksheet objects from this context ---\r\n                     // These helpers now expect to run within this context\r\n\r\n                     // 2. Adjust Drivers\r\n                     await adjustDriversJS(currentWorksheet, lastRow);\r\n\r\n                     // 3. Replace Indirects\r\n                     await replaceIndirectsJS(currentWorksheet, lastRow);\r\n\r\n                     // 4. Get Last Row Again (if Replace_Indirects might change it)\r\n                     // const updatedLastRow = await getLastUsedRow(currentWorksheet, \"B\"); // Recalculate if necessary\r\n                     const updatedLastRow = lastRow; // Assuming Replace_Indirects doesn't change last row for now\r\n                     console.log(`Using last row for subsequent steps: ${updatedLastRow}`);\r\n                     if (updatedLastRow < START_ROW) {\r\n                         console.warn(`Skipping remaining steps for ${worksheetName} as updated last row (${updatedLastRow}) is invalid.`);\r\n                         return;\r\n                     }\r\n\r\n                     // 5. Populate Financials\r\n                     await populateFinancialsJS(currentWorksheet, updatedLastRow, financialsSheet);\r\n\r\n                     // 6. Delete rows with green background (#CCFFCC)\r\n                     console.log(`Deleting green rows in ${worksheetName}...`);\r\n                     const finalLastRow = await deleteGreenRows(currentWorksheet, START_ROW, updatedLastRow);\r\n                     console.log(`After deleting green rows, last row is now: ${finalLastRow}`);\r\n\r\n                     // 6.5 Set font color to white in column A\r\n                     await setColumnAFontWhite(currentWorksheet, START_ROW, finalLastRow);\r\n                     console.log(`Set font color to white in column A from rows ${START_ROW}-${finalLastRow}`);\r\n\r\n                     // 7. Autofill AE9:AE<lastRow> -> CX<lastRow> on Assumption Tab\r\n                     console.log(`Autofilling ${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${finalLastRow} to ${AUTOFILL_END_COLUMN} on ${worksheetName}`);\r\n                     const sourceRange = currentWorksheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${finalLastRow}`);\r\n                     const fillRange = currentWorksheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_END_COLUMN}${finalLastRow}`);\r\n                     sourceRange.autoFill(fillRange, Excel.AutoFillType.fillDefault);\r\n\r\n                     // 8. Set Row 9 interior color to none\r\n                     console.log(`Setting row 9 interior color to none for ${worksheetName}`);\r\n                     const row9Range = currentWorksheet.getRange(\"9:9\");\r\n                     row9Range.format.fill.clear();\r\n\r\n                     // Sync all batched operations for this tab\r\n                     await context.sync();\r\n                     console.log(`Finished processing and syncing for tab ${worksheetName}`);\r\n\r\n                 }); // End Excel.run for single tab processing\r\n\r\n             } catch (tabError) {\r\n                 console.error(`Error processing tab ${worksheetName}:`, tabError);\r\n                 // Optionally add to an error list and continue with the next tab\r\n                 // Be mindful that subsequent tabs might depend on this one succeeding.\r\n             }\r\n        } // --- End loop through assumption tabs ---\r\n\r\n        // --- Final Operations on Financials Sheet ---\r\n        console.log(`\\nPerforming final operations on ${FINANCIALS_SHEET_NAME}`);\r\n        try {\r\n             await Excel.run(async (context) => {\r\n                 const finSheet = context.workbook.worksheets.getItem(FINANCIALS_SHEET_NAME);\r\n                 finSheet.load('name'); // Load name for logging\r\n                 await context.sync(); // Ensure sheet is loaded\r\n\r\n                 // 1. Format Changes In Working Capital\r\n                 // await formatChangesInWorkingCapitalJS(finSheet); // <<< COMMENTED OUT\r\n\r\n                 // 2. Get Last Row for Financials\r\n                 const financialsLastRow = await getLastUsedRow(finSheet, \"B\"); // Pass sheet from this context\r\n                 if (financialsLastRow < START_ROW) {\r\n                     console.warn(`Skipping final autofill on ${FINANCIALS_SHEET_NAME} as last row (${financialsLastRow}) is before start row (${START_ROW}).`);\r\n                     return;\r\n                 }\r\n                 console.log(`Last row in Col B for ${FINANCIALS_SHEET_NAME}: ${financialsLastRow}`);\r\n\r\n                //  // 3. Autofill AE9:AE<lastRow> -> CX<lastRow> on Financials\r\n                //  console.log(`Autofilling ${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${financialsLastRow} to ${AUTOFILL_END_COLUMN} on ${FINANCIALS_SHEET_NAME}`);\r\n                //  const sourceRangeFin = finSheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${financialsLastRow}`);\r\n                //  const fillRangeFin = finSheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_END_COLUMN}${financialsLastRow}`);\r\n                //  sourceRangeFin.autoFill(fillRangeFin, Excel.AutoFillType.fillDefault);\r\n\r\n\r\n                 // Sync final Financials sheet operations\r\n                 await context.sync();\r\n                 console.log(`Finished final operations on ${FINANCIALS_SHEET_NAME}`);\r\n             });\r\n         } catch (financialsError) {\r\n             console.error(`Error during final operations on ${FINANCIALS_SHEET_NAME}:`, financialsError);\r\n         }\r\n\r\n        console.log(\"Finished processing all assumption tabs.\");\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in processAssumptionTabs main function:\", error);\r\n        // Potentially re-throw or handle top-level errors\r\n    }\r\n}\r\n\r\n/**\r\n * Deletes rows with light green background (#CCFFCC) in column B\r\n * @param {Excel.Worksheet} worksheet - The worksheet to process\r\n * @param {number} startRow - The first row to check\r\n * @param {number} lastRow - The last row to check\r\n * @returns {Promise<number>} - The new last row after deletions\r\n */\r\nasync function deleteGreenRows(worksheet, startRow, lastRow) {\r\n    console.log(`Deleting green rows (#CCFFCC) in ${worksheet.name} from row ${startRow} to ${lastRow}`);\r\n    \r\n    try {\r\n        // Create an array to store rows that need deletion (in descending order)\r\n        const rowsToDelete = [];\r\n        \r\n        // Process each row individually instead of as a range to avoid collection issues\r\n        for (let rowNum = startRow; rowNum <= lastRow; rowNum++) {\r\n            const cellAddress = `B${rowNum}`;\r\n            const cell = worksheet.getRange(cellAddress);\r\n            cell.load(\"format/fill/color\");\r\n            \r\n            try {\r\n                await worksheet.context.sync();\r\n                \r\n                // Safely check if properties exist and if color matches\r\n                if (cell.format && \r\n                    cell.format.fill && \r\n                    cell.format.fill.color === \"#CCFFCC\") {\r\n                    rowsToDelete.push(rowNum);\r\n                }\r\n            } catch (cellError) {\r\n                console.warn(`Error checking color for ${cellAddress}: ${cellError.message}`);\r\n                // Continue to next cell if there's an error with this one\r\n            }\r\n        }\r\n        \r\n        // Sort in descending order to delete from bottom to top\r\n        rowsToDelete.sort((a, b) => b - a);\r\n        \r\n        console.log(`Found ${rowsToDelete.length} green rows to delete`);\r\n        \r\n        // Delete each row (from bottom to top)\r\n        if (rowsToDelete.length > 0) {\r\n            for (const rowNum of rowsToDelete) {\r\n                console.log(`Deleting row ${rowNum}`);\r\n                const rowRange = worksheet.getRange(`${rowNum}:${rowNum}`);\r\n                rowRange.delete(Excel.DeleteShiftDirection.up);\r\n            }\r\n            \r\n            await worksheet.context.sync();\r\n            \r\n            // Recalculate the last row\r\n            const newLastRow = await getLastUsedRow(worksheet, \"B\");\r\n            console.log(`New last row after deletions: ${newLastRow}`);\r\n            \r\n            return newLastRow;\r\n        } else {\r\n            console.log(\"No green rows found to delete\");\r\n            return lastRow; // Return original lastRow if no rows deleted\r\n        }\r\n    } catch (error) {\r\n        console.error(`Error in deleteGreenRows: ${error.message}`, error);\r\n        // Return the original lastRow on error\r\n        return lastRow;\r\n    }\r\n}\r\n\r\n/**\r\n * Sets the font color to white for all cells in column A\r\n * @param {Excel.Worksheet} worksheet - The worksheet to process\r\n * @param {number} startRow - The first row to format\r\n * @param {number} lastRow - The last row to format\r\n * @returns {Promise<void>}\r\n */\r\nasync function setColumnAFontWhite(worksheet, startRow, lastRow) {\r\n    console.log(`Setting font color to white in column A for ${worksheet.name} from row ${startRow} to ${lastRow}`);\r\n    \r\n    try {\r\n        // Get the entire range for column A from startRow to lastRow\r\n        const columnARange = worksheet.getRange(`A${startRow}:A${lastRow}`);\r\n        \r\n        // Set the font color to white\r\n        columnARange.format.font.color = \"#FFFFFF\";\r\n        \r\n        await worksheet.context.sync();\r\n        console.log(`Successfully set font color to white in column A for rows ${startRow}-${lastRow}`);\r\n    } catch (error) {\r\n        console.error(`Error in setColumnAFontWhite: ${error.message}`, error);\r\n    }\r\n}\r\n\r\n// --- Helper Functions for Column Conversion ---\r\n\r\n/**\r\n * Converts a 0-based column index into a column letter (e.g., 0 -> A, 1 -> B, 26 -> AA).\r\n * @param {number} index - The 0-based column index.\r\n * @returns {string} The column letter.\r\n */\r\nfunction columnIndexToLetter(index) {\r\n    let letter = '';\r\n    while (index >= 0) {\r\n        letter = String.fromCharCode(index % 26 + 'A'.charCodeAt(0)) + letter;\r\n        index = Math.floor(index / 26) - 1;\r\n    }\r\n    return letter;\r\n}\r\n\r\n/**\r\n * Converts a column letter into a 0-based column index (e.g., A -> 0, B -> 1, AA -> 26).\r\n * @param {string} letter - The column letter (case-insensitive).\r\n * @returns {number} The 0-based column index.\r\n */\r\nfunction columnLetterToIndex(letter) {\r\n    letter = letter.toUpperCase();\r\n    let index = 0;\r\n    for (let i = 0; i < letter.length; i++) {\r\n        index = index * 26 + (letter.charCodeAt(i) - 'A'.charCodeAt(0) + 1);\r\n    }\r\n    return index - 1; // Adjust to 0-based\r\n}\r\n\r\n/**\r\n * Hides Columns C-I, Rows 2-8, and specific Actuals columns on specified sheets,\r\n * then navigates to cell A1 of the Financials sheet.\r\n * @param {string[]} assumptionTabNames - Array of assumption tab names created by runCodes.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function hideColumnsAndNavigate(assumptionTabNames) { // Renamed and added parameter\r\n    // Define Actuals columns\r\n    const ACTUALS_START_COL = \"S\";\r\n    const ACTUALS_END_COL = \"AD\";\r\n\r\n    try {\r\n        const targetSheetNames = [...assumptionTabNames, \"Financials\"]; // Combine assumption tabs and Financials\r\n        console.log(`Attempting to hide specific rows/columns on sheets [${targetSheetNames.join(', ')}] and navigate...`);\r\n\r\n        await Excel.run(async (context) => {\r\n            // Get all worksheets\r\n            const worksheets = context.workbook.worksheets;\r\n            // Load only names needed for matching\r\n            worksheets.load(\"items/name\");\r\n            await context.sync();\r\n\r\n            console.log(`Found ${worksheets.items.length} worksheets. Targeting ${targetSheetNames.length} specific sheets.`);\r\n            let hideAttempted = false;\r\n\r\n            // Calculate actuals end column for assumption tabs\r\n            const actualsEndIndex = columnLetterToIndex(ACTUALS_END_COL);\r\n            const actualsEndMinusOneCol = actualsEndIndex > 0 ? columnIndexToLetter(actualsEndIndex - 1) : ACTUALS_START_COL; // Handle edge case\r\n\r\n            // --- Queue hiding operations for target sheets ---\r\n            for (const worksheet of worksheets.items) {\r\n                const sheetName = worksheet.name;\r\n                if (targetSheetNames.includes(sheetName)) { // Check if sheet is in our target list\r\n                    console.log(`Queueing hide operations for: ${sheetName}`);\r\n                    try {\r\n                        // Hide Columns C:I\r\n                        const colsCI = worksheet.getRange(\"C:I\");\r\n                        colsCI.columnHidden = true;\r\n\r\n                        // Hide Rows 2:8\r\n                        const rows28 = worksheet.getRange(\"2:8\");\r\n                        rows28.rowHidden = true;\r\n\r\n                        // Hide Actuals Columns based on sheet type\r\n                        if (sheetName === \"Financials\") {\r\n                            console.log(`  -> Hiding Actuals range ${ACTUALS_START_COL}:${ACTUALS_END_COL}`);\r\n                            const actualsRangeFin = worksheet.getRange(`${ACTUALS_START_COL}:${ACTUALS_END_COL}`);\r\n                            actualsRangeFin.columnHidden = true;\r\n                        } else if (assumptionTabNames.includes(sheetName)) {\r\n                             console.log(`  -> Hiding Actuals range ${ACTUALS_START_COL}:${actualsEndMinusOneCol}`);\r\n                             const actualsRangeAssum = worksheet.getRange(`${ACTUALS_START_COL}:${actualsEndMinusOneCol}`);\r\n                             actualsRangeAssum.columnHidden = true;\r\n                        }\r\n\r\n                        hideAttempted = true; // Mark that at least one hide was queued\r\n                    } catch (error) {\r\n                        // Log unexpected errors during the queuing attempt\r\n                        console.error(`  Error queuing hide operations for ${sheetName}: ${error.message}`, {\r\n                            code: error.code,\r\n                            debugInfo: error.debugInfo ? JSON.stringify(error.debugInfo) : 'N/A'\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            // --- Sync all queued hide operations ---\r\n            if (hideAttempted) {\r\n                console.log(`Attempting to sync hide columns/rows operations...`);\r\n                try {\r\n                    await context.sync();\r\n                    console.log(\"Successfully synced hide columns/rows operations.\");\r\n                } catch (syncError) {\r\n                    console.error(`Error syncing hide columns/rows operations: ${syncError.message}`, {\r\n                        code: syncError.code,\r\n                        debugInfo: syncError.debugInfo ? JSON.stringify(syncError.debugInfo) : 'N/A'\r\n                    });\r\n                     // Report failure but continue to navigation attempt\r\n                }\r\n            } else {\r\n                 console.log(\"No target sheets found or no hide operations were queued.\");\r\n            }\r\n\r\n            // --- Activate and Select A1 on each assumption tab (mimic Ctrl+Home) ---\r\n            console.log(\"Activating and selecting A1 on assumption tabs...\");\r\n            // Note: This requires syncing inside the loop for the activate/select effect per sheet\r\n            for (const sheetName of assumptionTabNames) {\r\n                try {\r\n                    console.log(`  Activating and selecting A1 for: ${sheetName}`);\r\n                    const worksheet = context.workbook.worksheets.getItem(sheetName);\r\n                    worksheet.activate(); // Activate the sheet first\r\n                    const rangeA1 = worksheet.getRange(\"A1\");\r\n                    rangeA1.select(); // Then select A1\r\n                    await context.sync(); // Sync *immediately* to apply activation and selection for this sheet\r\n                    console.log(`  Synced A1 view reset for ${sheetName}.`);\r\n                } catch (error) {\r\n                     console.error(`  Error resetting view for ${sheetName}: ${error.message}`);\r\n                     // Optionally continue to the next sheet even if one fails\r\n                }\r\n            }\r\n            // No final sync needed for this loop as it happens inside\r\n\r\n            // --- Activate and Select J9 on each assumption tab ---\r\n            console.log(\"Activating and selecting J9 on assumption tabs...\");\r\n            // Note: This requires syncing inside the loop for the activate/select effect per sheet\r\n            for (const sheetName of assumptionTabNames) {\r\n                try {\r\n                    console.log(`  Activating and selecting J9 for: ${sheetName}`);\r\n                    const worksheet = context.workbook.worksheets.getItem(sheetName);\r\n                    worksheet.activate(); // Activate the sheet first\r\n                    const rangeJ9 = worksheet.getRange(\"J9\"); // Get J9\r\n                    rangeJ9.select(); // Then select J9\r\n                    await context.sync(); // Sync *immediately* to apply activation and selection for this sheet\r\n                    console.log(`  Synced J9 view reset for ${sheetName}.`);\r\n                } catch (error) {\r\n                     console.error(`  Error resetting view to J9 for ${sheetName}: ${error.message}`);\r\n                     // Optionally continue to the next sheet even if one fails\r\n                }\r\n            }\r\n            // No final sync needed for this loop as it happens inside\r\n\r\n            // --- Navigate to Financials sheet and select cell J9 ---\r\n            // (This ensures Financials is the final active sheet)\r\n            try {\r\n                console.log(\"Navigating to Financials sheet and selecting J9...\");\r\n                const financialsSheet = context.workbook.worksheets.getItem(\"Financials\");\r\n                // This activate/select sequence overrides the previous active sheet.\r\n                financialsSheet.activate(); \r\n                const rangeJ9 = financialsSheet.getRange(\"J9\"); // Get J9\r\n                rangeJ9.select(); // Select J9\r\n                await context.sync(); // Sync the final activate/select\r\n                console.log(\"Successfully navigated to Financials!J9.\");\r\n            } catch (navError) {\r\n                console.error(`Error navigating to Financials sheet J9: ${navError.message}`, {\r\n                    code: navError.code,\r\n                    debugInfo: navError.debugInfo ? JSON.stringify(navError.debugInfo) : 'N/A'\r\n                });\r\n                // Do not throw here, allow the function to finish\r\n            }\r\n\r\n            console.log(\"Finished hideColumnsAndNavigate function.\");\r\n\r\n        }); // End Excel.run\r\n    } catch (error) {\r\n        // Catch errors from the Excel.run call itself\r\n        console.error(\"Critical error in hideColumnsAndNavigate:\", error);\r\n        throw error; // Re-throw critical errors\r\n    }\r\n}\r\n\r\n/**\r\n * Hides specific rows and columns on all worksheets except for specified exclusions.\r\n * Hides rows 1-8, columns C-I (3-9), and columns S-AC (19-29).\r\n * @param {string[]} excludedSheetNames - An array of sheet names to exclude from hiding.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function hideRowsAndColumnsOnSheets(excludedSheetNames = [\"Actuals Data\", \"Actuals Categorization\"]) {\r\n    try {\r\n        console.log(`Hiding rows/columns on sheets, excluding: ${excludedSheetNames.join(', ')}`);\r\n\r\n        await Excel.run(async (context) => {\r\n            const worksheets = context.workbook.worksheets;\r\n            worksheets.load(\"items/name\");\r\n            await context.sync();\r\n\r\n            for (const worksheet of worksheets.items) {\r\n                const sheetName = worksheet.name;\r\n                if (excludedSheetNames.includes(sheetName)) {\r\n                    console.log(`Skipping sheet: ${sheetName} (excluded)`);\r\n                    continue;\r\n                }\r\n\r\n                console.log(`Processing sheet: ${sheetName}`);\r\n\r\n                try {\r\n                    // Hide Rows 1-8\r\n                    const rowRange = worksheet.getRange(\"1:8\");\r\n                    rowRange.rowHidden = true;\r\n                    console.log(`  Hiding rows 1-8`);\r\n\r\n                    // Hide Columns C-I\r\n                    const colRange1 = worksheet.getRange(\"C:I\");\r\n                    colRange1.columnHidden = true;\r\n                    console.log(`  Hiding columns C-I`);\r\n\r\n                    // Hide Columns S-AC\r\n                    const colRange2 = worksheet.getRange(\"S:AC\");\r\n                    colRange2.columnHidden = true;\r\n                    console.log(`  Hiding columns S-AC`);\r\n\r\n                    // It's often more efficient to batch sync operations,\r\n                    // but sometimes hiding needs immediate effect or separate syncs.\r\n                    // Let's sync after hiding for this sheet.\r\n                    await context.sync();\r\n                    console.log(`  Finished hiding for ${sheetName}`);\r\n\r\n                } catch (hideError) {\r\n                    console.error(`  Error hiding rows/columns on sheet ${sheetName}: ${hideError.message}`, {\r\n                        code: hideError.code,\r\n                        debugInfo: hideError.debugInfo ? JSON.stringify(hideError.debugInfo) : 'N/A'\r\n                    });\r\n                    // Continue to the next sheet even if one fails\r\n                }\r\n            }\r\n\r\n            console.log(\"Finished processing all sheets for hiding rows/columns.\");\r\n        }); // End Excel.run\r\n\r\n    } catch (error) {\r\n        console.error(\"Critical error in hideRowsAndColumnsOnSheets:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// TODO: Implement the actual logic within the JS helper functions (adjustDriversJS, replaceIndirectsJS, etc.).\r\n// TODO: Implement findRowByValue helper function if Retained Earnings logic is needed.\r\n// TODO: Update the calling code (e.g., button handler in taskpane.js) to call `processAssumptionTabs` after `runCodes`.\r\n\r\n/**\r\n * Inserts worksheets from a base64-encoded Excel file into the current workbook\r\n * @param {string} base64String - Base64-encoded string of the source Excel file\r\n * @param {string[]} [sheetNames] - Optional array of sheet names to insert. If not provided, all sheets will be inserted.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function handleInsertWorksheetsFromBase64(base64String, sheetNames = null) {\r\n    try {\r\n        // Validate base64 string\r\n        if (!base64String || typeof base64String !== 'string') {\r\n            throw new Error(\"Invalid base64 string provided\");\r\n        }\r\n\r\n        // Validate base64 format\r\n        if (!/^[A-Za-z0-9+/]*={0,2}$/.test(base64String)) {\r\n            throw new Error(\"Invalid base64 format\");\r\n        }\r\n\r\n        await Excel.run(async (context) => {\r\n            const workbook = context.workbook;\r\n            \r\n            // Check if we have the required API version\r\n            if (!workbook.insertWorksheetsFromBase64) {\r\n                throw new Error(\"This feature requires Excel API requirement set 1.13 or later\");\r\n            }\r\n            \r\n            // Insert the worksheets with error handling\r\n            try {\r\n                await workbook.insertWorksheetsFromBase64(base64String, {\r\n                    sheetNames: sheetNames\r\n                });\r\n                \r\n                await context.sync();\r\n                console.log(\"Worksheets inserted successfully\");\r\n            } catch (error) {\r\n                console.error(\"Error during worksheet insertion:\", error);\r\n                throw new Error(`Failed to insert worksheets: ${error.message}`);\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error inserting worksheets from base64:\", error);\r\n        throw error;\r\n    }\r\n}","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n\n// Remove imports from Langchain to avoid ESM module issues\n// Using direct fetch calls instead\n// Add this test function\nimport { validateCodeStrings } from './Validation.js';\n// Import the spreadsheet utilities\n// import { handleInsertWorksheetsFromBase64 } from './SpreadsheetUtils.js';\n// Import code collection functions\nimport { populateCodeCollection, exportCodeCollectionToText, runCodes, processAssumptionTabs, collapseGroupingsAndNavigateToFinancials, hideColumnsAndNavigate, handleInsertWorksheetsFromBase64 } from './CodeCollection.js';\n// Add the codeStrings variable with the specified content\n// REMOVED hardcoded codeStrings variable\n\n// Mock fs module for browser environment\nconst fs = {\n    writeFileSync: (path, content) => {\n        console.log(`Mock writeFileSync called with path: ${path}`);\n        // In browser, we'll just log the content instead of writing to file\n        console.log(`Content would be written to ${path}:`, content.substring(0, 100) + '...');\n    }\n};\n\n//*********Setup*********\n// Start the timer\nconst startTime = performance.now();\n\n//Debugging Toggle\nconst DEBUG = true; \n\n// Variable to store loaded code strings\nlet loadedCodeStrings = \"\";\n\n// API keys storage\nlet API_KEYS = {\n  OPENAI_API_KEY: \"\",\n  PINECONE_API_KEY: \"\"\n};\n\nconst srcPaths = [\n  'https://localhost:3002/src/prompts/Encoder_System.txt',\n  'https://localhost:3002/src/prompts/Encoder_Main.txt',\n  'https://localhost:3002/src/prompts/Followup_System.txt',\n  'https://localhost:3002/src/prompts/Structure_System.txt',\n  'https://localhost:3002/src/prompts/Validation_System.txt',\n  'https://localhost:3002/src/prompts/Validation_Main.txt'\n];\n\n// Function to load API keys from a config file\n// This allows the keys to be stored in a separate file that's .gitignored\nasync function initializeAPIKeys() {\n  try {\n    console.log(\"Initializing API keys...\");\n    \n    // Try to load config.js which is .gitignored\n    try {\n      const configResponse = await fetch('https://localhost:3002/config.js');\n      if (configResponse.ok) {\n        const configText = await configResponse.text();\n        // Extract keys from the config text using regex\n        const openaiKeyMatch = configText.match(/OPENAI_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\n        const pineconeKeyMatch = configText.match(/PINECONE_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\n        \n        if (openaiKeyMatch && openaiKeyMatch[1]) {\n          API_KEYS.OPENAI_API_KEY = openaiKeyMatch[1];\n          console.log(\"OpenAI API key loaded from config.js\");\n        }\n        \n        if (pineconeKeyMatch && pineconeKeyMatch[1]) {\n          API_KEYS.PINECONE_API_KEY = pineconeKeyMatch[1];\n          console.log(\"Pinecone API key loaded from config.js\");\n        }\n      }\n    } catch (error) {\n      console.warn(\"Could not load config.js, will use empty API keys:\", error);\n    }\n    \n    // Add debug logging with secure masking of keys\n    console.log(\"OPENAI_API_KEY:\", API_KEYS.OPENAI_API_KEY ? \n      `${API_KEYS.OPENAI_API_KEY.substring(0, 3)}...${API_KEYS.OPENAI_API_KEY.substring(API_KEYS.OPENAI_API_KEY.length - 3)}` : \n      \"Not found\");\n    console.log(\"PINECONE_API_KEY:\", API_KEYS.PINECONE_API_KEY ? \n      `${API_KEYS.PINECONE_API_KEY.substring(0, 3)}...${API_KEYS.PINECONE_API_KEY.substring(API_KEYS.PINECONE_API_KEY.length - 3)}` : \n      \"Not found\");\n    \n    return API_KEYS.OPENAI_API_KEY && API_KEYS.PINECONE_API_KEY;\n  } catch (error) {\n    console.error(\"Error initializing API keys:\", error);\n    return false;\n  }\n}\n\n// Update Pinecone configuration to handle multiple indexes\nconst PINECONE_ENVIRONMENT = \"gcp-starter\";\n\n// Define configurations for each index\nconst PINECONE_INDEXES = {\n    codes: {\n        name: \"codes\",\n        apiEndpoint: \"https://codes-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\n    },\n    call2trainingdata: {\n        name: \"call2trainingdata\",\n        apiEndpoint: \"https://call2trainingdata-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\n    },\n    call2context: {\n        name: \"call2context\",\n        apiEndpoint: \"https://call2context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\n    },\n    call1context: {\n        name: \"call1context\",\n        apiEndpoint: \"https://call1context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\n    }\n};\n\n//Models\nconst GPT4O_MINI = \"gpt-4o-mini\"\nconst GPT4O = \"gpt-4o\"\nconst GPT45_TURBO = \"gpt-4.5-turbo\"\nconst GPT35_TURBO = \"gpt-3.5-turbo\"\nconst GPT4_TURBO = \"gpt-4-turbo\"\nconst GPTFT1 =  \"ft:gpt-3.5-turbo-1106:orsi-advisors:cohcolumnsgpt35:B6Wlrql1\"\n\n// Conversation history storage\nlet conversationHistory = [];\n\n// Functions to save and load conversation history\nfunction saveConversationHistory(history) {\n    try {\n        localStorage.setItem('conversationHistory', JSON.stringify(history));\n        if (DEBUG) console.log('Conversation history saved to localStorage');\n    } catch (error) {\n        console.error(\"Error saving conversation history:\", error);\n    }\n}\n\nfunction loadConversationHistory() {\n    try {\n        const history = localStorage.getItem('conversationHistory');\n        if (history) {\n            if (DEBUG) console.log('Loaded conversation history from localStorage');\n            const parsedHistory = JSON.parse(history);\n            \n            if (!Array.isArray(parsedHistory)) {\n                console.error(\"Invalid history format, expected array\");\n                return [];\n            }\n            \n            return parsedHistory;\n        }\n        if (DEBUG) console.log(\"No conversation history found in localStorage\");\n        return [];\n    } catch (error) {\n        console.error(\"Error loading conversation history:\", error);\n        return [];\n    }\n}\n\n// Direct OpenAI API call function (replaces LangChain)\nasync function callOpenAI(messages, model = GPT4O, temperature = 0.7) {\n  try {\n    console.log(`Calling OpenAI API with model: ${model}`);\n    \n    // Check for API key\n    if (!API_KEYS.OPENAI_API_KEY) {\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\n    }\n    \n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${API_KEYS.OPENAI_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: model,\n        messages: messages,\n        temperature: temperature\n      })\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      console.error(\"OpenAI API error response:\", errorData);\n      throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    console.log(\"OpenAI API response received\");\n    \n    return data.choices[0].message.content;\n  } catch (error) {\n    console.error(\"Error calling OpenAI API:\", error);\n    throw error;\n  }\n}\n\n// OpenAI embeddings function (replaces LangChain)\nasync function createEmbedding(text) {\n  try {\n    console.log(\"Creating embedding for text\");\n    \n    // Check for API key\n    if (!API_KEYS.OPENAI_API_KEY) {\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\n    }\n    \n    const response = await fetch('https://api.openai.com/v1/embeddings', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${API_KEYS.OPENAI_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: \"text-embedding-3-large\",\n        input: text\n      })\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      console.error(\"OpenAI Embeddings API error response:\", errorData);\n      throw new Error(`OpenAI Embeddings API error: ${response.status} ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    console.log(\"OpenAI Embeddings API response received\");\n    \n    return data.data[0].embedding;\n  } catch (error) {\n    console.error(\"Error creating embedding:\", error);\n    throw error;\n  }\n}\n\n// Remove the PROMPTS object and add a function to load prompts\nasync function loadPromptFromFile(promptKey) {\n  try {\n    // Use a simplified path approach that works with dev server with correct port\n    const paths = [\n      `https://localhost:3002/prompts/${promptKey}.txt`,\n    ];\n    \n    // Combine all paths to try\n    paths.push(...srcPaths);\n \n    // Try each path until one works\n    let response = null;\n    for (const path of paths) {\n      console.log(`Attempting to load prompt from: ${path}`);\n      try {\n        response = await fetch(path);\n        if (response.ok) {\n          console.log(`Successfully loaded prompt from: ${path}`);\n          break;\n        }\n      } catch (err) {\n        console.log(`Path ${path} failed: ${err.message}`);\n      }\n    }\n    \n    if (!response || !response.ok) {\n      throw new Error(`Failed to load prompt: ${promptKey} (Could not find file in any location)`);\n    }\n    \n    return await response.text();\n  } catch (error) {\n    console.error(`Error loading prompt ${promptKey}:`, error);\n    throw error; // Re-throw the error to be handled by the caller\n  }\n}\n\n// Update the getSystemPromptFromFile function\nconst getSystemPromptFromFile = async (promptKey) => {\n  try {\n    const prompt = await loadPromptFromFile(promptKey);\n    if (!prompt) {\n      throw new Error(`Prompt key \"${promptKey}\" not found`);\n    }\n    return prompt;\n  } catch (error) {\n    console.error(`Error getting prompt for key ${promptKey}:`, error);\n    return null;\n  }\n};\n\n//************Functions************\n// Function 1: OpenAI Call with conversation history support\nasync function processPrompt({ userInput, systemPrompt, model, temperature, history = [] }) {\n    console.log(\"API Key being used:\", API_KEYS.OPENAI_API_KEY ? `${API_KEYS.OPENAI_API_KEY.substring(0, 3)}...` : \"None\");\n    \n    // Format messages in the way OpenAI expects\n    const messages = [\n        { role: \"system\", content: systemPrompt }\n    ];\n    \n    // Add conversation history\n    if (history.length > 0) {\n        history.forEach(message => {\n            messages.push({ \n                role: message[0] === \"human\" ? \"user\" : \"assistant\", \n                content: message[1] \n            });\n        });\n    }\n    \n    // Add current user input\n    messages.push({ role: \"user\", content: userInput });\n    \n    try {\n        // Call OpenAI API directly\n        const responseContent = await callOpenAI(messages, model, temperature);\n        \n        // Try to parse JSON response if applicable\n        try {\n            const parsed = JSON.parse(responseContent);\n            if (Array.isArray(parsed)) {\n                return parsed;\n            }\n            return responseContent.split('\\n').filter(line => line.trim());\n        } catch (e) {\n            // If not JSON, treat as text and split by lines\n            return responseContent.split('\\n').filter(line => line.trim());\n        }\n    } catch (error) {\n        console.error(\"Error in processPrompt:\", error);\n        throw error;\n    }\n}\n\nasync function structureDatabasequeries(clientprompt) {\n  if (DEBUG) console.log(\"Processing structured database queries:\", clientprompt);\n\n  try {\n      console.log(\"Getting structure system prompt\");\n      const systemStructurePrompt = await getSystemPromptFromFile('Structure_System');\n      \n      if (!systemStructurePrompt) {\n          throw new Error(\"Failed to load structure system prompt\");\n      }\n\n      console.log(\"Got system prompt, processing query strings\");\n      const queryStrings = await processPrompt({\n          userInput: clientprompt,\n          systemPrompt: systemStructurePrompt,\n          model: GPT4O,\n          temperature: 1\n      });\n\n      if (!queryStrings || !Array.isArray(queryStrings)) {\n          throw new Error(\"Failed to get valid query strings\");\n      }\n\n      console.log(\"Got query strings:\", queryStrings);\n      const results = [];\n\n      for (const queryString of queryStrings) {\n          console.log(\"Processing query:\", queryString);\n          try {\n              const queryResults = {\n                  query: queryString,\n                  trainingData: await queryVectorDB({\n                      queryPrompt: queryString,\n                      similarityThreshold: .2,\n                      indexName: 'call2trainingdata',\n                      numResults: 3\n                  }),\n                  call2Context: await queryVectorDB({\n                      queryPrompt: queryString,\n                      similarityThreshold: .2,\n                      indexName: 'call2context',\n                      numResults: 5\n                  }),\n                  call1Context: await queryVectorDB({\n                      queryPrompt: queryString,\n                      similarityThreshold: .2,\n                      indexName: 'call1context',\n                      numResults: 5\n                  }),\n                  codeOptions: await queryVectorDB({\n                      queryPrompt: queryString,\n                      indexName: 'codes',\n                      numResults: 3,\n                      similarityThreshold: .1\n                  })\n              };\n\n              results.push(queryResults);\n              console.log(\"Successfully processed query:\", queryString);\n          } catch (error) {\n              console.error(`Error processing query \"${queryString}\":`, error);\n              // Continue with next query instead of failing completely\n              continue;\n          }\n      }\n\n      if (results.length === 0) {\n          throw new Error(\"No valid results were obtained from any queries\");\n      }\n\n      return results;\n  } catch (error) {\n      console.error(\"Error in structureDatabasequeries:\", error);\n      throw error;\n  }\n}\n\n// Function 3: Query Vector Database using Pinecone REST API\nasync function queryVectorDB({ queryPrompt, indexName = 'codes', numResults = 10, similarityThreshold = null }) {\n    try {\n        console.log(\"Generating embeddings for query:\", queryPrompt);\n        \n        // Generate embeddings using our direct API call\n        const embedding = await createEmbedding(queryPrompt);\n        console.log(\"Embeddings generated successfully\");\n        \n        // Get the correct endpoint for the specified index\n        const indexConfig = PINECONE_INDEXES[indexName];\n        if (!indexConfig) {\n            throw new Error(`Invalid index name: ${indexName}`);\n        }\n        \n        const url = `${indexConfig.apiEndpoint}/query`;\n        console.log(\"Making Pinecone API request to:\", url);\n        \n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'api-key': API_KEYS.PINECONE_API_KEY,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                vector: embedding,\n                topK: numResults,\n                includeMetadata: true,\n                namespace: \"ns1\"\n            })\n        });\n\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error(\"Pinecone API error details:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorText\n            });\n            throw new Error(`Pinecone API error: ${response.status} ${response.statusText} - ${errorText}`);\n        }\n\n        const data = await response.json();\n        console.log(\"Pinecone API response received\");\n        \n        let matches = data.matches || [];\n\n        if (similarityThreshold !== null) {\n            matches = matches.filter(match => match.score >= similarityThreshold);\n        }\n\n        matches = matches.slice(0, numResults);\n\n        matches = matches.map(match => {\n            try {\n                if (match.metadata && match.metadata.text) {\n                    return {\n                        ...match,\n                        text: match.metadata.text\n                    };\n                }\n                return match;\n            } catch (error) {\n                console.error(\"Error processing match:\", error);\n                return match;\n            }\n        });\n\n        if (DEBUG) {\n            const matchesDescription = matches\n                .map((match, i) => `Match ${i + 1} (score: ${match.score.toFixed(4)}): ${match.text || JSON.stringify(match.metadata)}`)\n                .join('\\n');\n            console.log(matchesDescription);\n        }\n\n        const cleanMatches = matches.map(match => extractTextFromJson(match));\n        return cleanMatches.filter(text => text !== \"\");\n\n    } catch (error) {\n        console.error(\"Error during vector database query:\", error);\n        throw error;\n    }\n}\n\nfunction extractTextFromJson(jsonInput) {\n   try {\n       const jsonData = typeof jsonInput === 'string' ? JSON.parse(jsonInput) : jsonInput;\n       \n       if (Array.isArray(jsonData)) {\n           for (const item of jsonData) {\n               if (item.metadata && item.metadata.text) {\n                   return item.metadata.text;\n               }\n           }\n           throw new Error(\"No text field found in the JSON array\");\n       } \n       else if (jsonData.metadata && jsonData.metadata.text) {\n           return jsonData.metadata.text;\n       } \n       else {\n           throw new Error(\"Invalid JSON structure: missing metadata.text field\");\n       }\n   } catch (error) {\n       console.error(`Error processing JSON: ${error.message}`);\n       return \"\";\n   }\n}\n\nfunction safeJsonForPrompt(obj, readable = true) {\n    if (!readable) {\n        let jsonString = JSON.stringify(obj);\n        jsonString = jsonString.replace(/\"values\":\\s*\\[\\],\\s*\"metadata\":/g, '');\n        return jsonString\n            .replace(/{/g, '\\\\u007B')\n            .replace(/}/g, '\\\\u007D');\n    }\n    \n    if (Array.isArray(obj)) {\n        return obj.map(item => {\n            if (item.metadata && item.metadata.text) {\n                const text = item.metadata.text.replace(/~/g, ',');\n                const parts = text.split(';');\n                \n                let result = '';\n                if (parts.length >= 1) result += parts[0].trim();\n                if (parts.length >= 2) result += '\\n' + parts[1].trim();\n                if (parts.length >= 3) result += '\\n' + parts[2].trim();\n                \n                if (item.score) {\n                    result += `\\nSimilarity Score: ${item.score.toFixed(4)}`;\n                }\n                \n                return result;\n            }\n            return JSON.stringify(item).replace(/~/g, ',');\n        }).join('\\n\\n');\n    }\n    \n    const jsonString = JSON.stringify(obj, null, 2).replace(/~/g, ',');\n    return jsonString\n        .replace(/{/g, '\\\\u007B')\n        .replace(/}/g, '\\\\u007D');\n}\n\nasync function handleFollowUpConversation(clientprompt) {\n    if (DEBUG) console.log(\"Processing follow-up question. Loading conversation history...\");\n    conversationHistory = loadConversationHistory();\n    \n    if (conversationHistory.length > 0) {\n        if (DEBUG) console.log(\"Processing follow-up question:\", clientprompt);\n        if (DEBUG) console.log(\"Loaded conversation history:\", JSON.stringify(conversationHistory, null, 2));\n        \n        const systemPrompt = await getSystemPromptFromFile('Followup_System');\n        // const MainPrompt = await getSystemPromptFromFile('main');\n        \n        const trainingdataCall2 = await queryVectorDB({\n            queryPrompt: clientprompt,\n            similarityThreshold: .4,\n            indexName: 'call2trainingdata',\n            numResults: 3\n        });\n\n        const call2context = await queryVectorDB({\n            queryPrompt: clientprompt + trainingdataCall2,\n            similarityThreshold: .3,\n            indexName: 'call2context',\n            numResults: 5\n        });\n\n        const call1context = await queryVectorDB({\n            queryPrompt: clientprompt + trainingdataCall2,\n            similarityThreshold: .3,\n            indexName: 'call1context',\n            numResults: 5\n        });\n\n        const codeOptions = await queryVectorDB({\n            queryPrompt: clientprompt + trainingdataCall2 + call1context,\n            indexName: 'codes',\n            numResults: 10,\n            similarityThreshold: .1\n        });\n        \n        const followUpPrompt = \"Client request: \" + clientprompt + \"\\n\" +\n                       \"Main Prompt: \" + MainPrompt + \"\\n\" +\n                       \"Training Data: \" + safeJsonForPrompt(trainingdataCall2).replace(/~/g, ',') + \"\\n\" +\n                       \"Code choosing context: \" + safeJsonForPrompt(call1context) + \"\\n\" +\n                       \"Code editing Context: \" + safeJsonForPrompt(call2context) + \"\\n\" +\n                       \"Code descriptions: \" + safeJsonForPrompt(codeOptions);\n        \n        const response = await processPrompt({\n            userInput: followUpPrompt,\n            systemPrompt: systemPrompt,\n            model: GPT4O,\n            temperature: 1,\n            history: conversationHistory\n        });\n        \n        conversationHistory.push([\"human\", clientprompt]);\n        conversationHistory.push([\"assistant\", response.join(\"\\n\")]);\n        \n        saveConversationHistory(conversationHistory);\n        \n        if (DEBUG) console.log(\"Updated conversation history:\", JSON.stringify(conversationHistory, null, 2));\n        \n        savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, call2context, call1context, trainingdataCall2, codeOptions, response);\n        saveTrainingData(clientprompt, response);\n        \n        return response;\n    } else {\n        if (DEBUG) console.log(\"No conversation history found. Treating as initial question.\");\n        return handleInitialConversation(clientprompt);\n    }\n}\n\nasync function handleConversation(clientprompt, isFollowUp = false) {\n    try {\n        if (isFollowUp) {\n            return await handleFollowUpConversation(clientprompt);\n        } else {\n            return await handleInitialConversation(clientprompt);\n        }\n    } catch (error) {\n        console.error(\"Error in conversation handling:\", error);\n        return [\"Error processing your request: \" + error.message];\n    }\n}\n\nasync function handleInitialConversation(clientprompt) {\n    if (DEBUG) console.log(\"Processing initial question:\", clientprompt);\n    \n    const systemPrompt = await getSystemPromptFromFile('Encoder_System');\n    console.log(\"SYSTEM PROMPT: \", systemPrompt);\n    const MainPrompt = await getSystemPromptFromFile('Encoder_Main');\n    console.log(\"MAIN PROMPT: \", MainPrompt);\n\n\n    const Call2prompt = \"Client request: \" + clientprompt + \"\\n\" +\n                       \"Main Prompt: \" + MainPrompt;\n    \n    const outputArray2 = await processPrompt({\n        userInput: Call2prompt,\n        systemPrompt: systemPrompt,\n        model: GPT4O,\n        temperature: 1 \n    });\n    \n    conversationHistory = [\n        [\"human\", clientprompt],\n        [\"assistant\", outputArray2.join(\"\\n\")]\n    ];\n    \n    saveConversationHistory(conversationHistory);\n    \n    savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, [], [], [], [], outputArray2);\n    saveTrainingData(clientprompt, outputArray2);\n    \n    console.log(\"Initial Response - in the function:\", outputArray2);\n    return outputArray2;\n\n}\n\n\n\nfunction savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, validationSystemPrompt, validationMainPrompt, validationResults, call2context, call1context, trainingdataCall2, codeOptions, outputArray2) {\n    try {\n        const analysisData = {\n            clientRequest: clientprompt,\n            systemPrompt,\n            mainPrompt: MainPrompt,\n            validationSystemPrompt,\n            validationMainPrompt,\n            validationResults,\n            call2context,\n            call1context,\n            trainingdataCall2,\n            codeOptions,\n            outputArray2\n        };\n        \n        localStorage.setItem('promptAnalysis', JSON.stringify(analysisData));\n        if (DEBUG) console.log('Prompt analysis saved to localStorage');\n    } catch (error) {\n        console.error(\"Error saving prompt analysis:\", error);\n    }\n}\n\nfunction saveTrainingData(clientprompt, outputArray2) {\n    try {\n        function cleanText(text) {\n            if (!text) return '';\n            return text.toString()\n                .replace(/\\r?\\n|\\r/g, ' ')\n                .trim();\n        }\n        \n        const trainingData = {\n            prompt: cleanText(clientprompt),\n            response: cleanText(JSON.stringify(outputArray2))\n        };\n        \n        localStorage.setItem('trainingData', JSON.stringify(trainingData));\n        if (DEBUG) console.log('Training data saved to localStorage');\n    } catch (error) {\n        console.error(\"Error saving training data:\", error);\n    }\n}\n\nasync function validationCorrection(clientprompt, initialResponse, validationResults) {\n    try {\n        const conversationHistory = loadConversationHistory();\n        \n        const trainingData = localStorage.getItem('trainingData') || \"\";\n        const codeDescriptions = localStorage.getItem('codeDescriptions') || \"\";\n        const lastCallContext = localStorage.getItem('lastCallContext') || \"\";\n        \n        const validationSystemPrompt = await getSystemPromptFromFile('Validation_System');\n        const validationMainPrompt = await getSystemPromptFromFile('Validation_Main');\n        \n        if (!validationSystemPrompt) {\n            throw new Error(\"Failed to load validation system prompt\");\n        }\n        \n        const responseString = Array.isArray(initialResponse) ? initialResponse.join(\"\\n\") : String(initialResponse);\n        \n        const correctionPrompt = \n            \"Main Prompt: \" + validationMainPrompt + \"\\n\\n\" +\n            \"Original User Input: \" + clientprompt + \"\\n\\n\" +\n            \"Initial Response: \" + responseString + \"\\n\\n\" +\n            \"Validation Results: \" + validationResults + \"\\n\\n\" +\n            \"Training Data: \" + trainingData + \"\\n\\n\" +\n            \"Code Descriptions: \" + codeDescriptions + \"\\n\\n\" +\n            \"Context from Last Call: \" + lastCallContext;\n        \n        if (DEBUG) {\n            console.log(\"====== VALIDATION CORRECTION INPUT ======\");\n            console.log(correctionPrompt.substring(0, 500) + \"...(truncated)\");\n            console.log(\"=========================================\");\n        }\n        \n        const correctedResponse = await processPrompt({\n            userInput: correctionPrompt,\n            systemPrompt: validationSystemPrompt,\n            model: GPT4O,\n            temperature: 0.7\n        });\n        \n        const correctionOutputPath = \"C:\\\\Users\\\\joeor\\\\Dropbox\\\\B - Freelance\\\\C_Projectify\\\\VanPC\\\\Training Data\\\\Main Script Training and Context Data\\\\validation_correction_output.txt\";\n        fs.writeFileSync(correctionOutputPath, Array.isArray(correctedResponse) ? correctedResponse.join(\"\\n\") : correctedResponse);\n        \n        if (DEBUG) console.log(`Validation correction saved to ${correctionOutputPath}`);\n        \n        return correctedResponse;\n    } catch (error) {\n        console.error(\"Error in validation correction:\", error);\n        console.error(error.stack);\n        return [\"Error during validation correction: \" + error.message];\n    }\n}\n\n// Add this function at the top level\nfunction showMessage(message) {\n    const messageDiv = document.createElement('div');\n    messageDiv.style.color = 'green';\n    messageDiv.style.padding = '10px';\n    messageDiv.style.margin = '10px';\n    messageDiv.style.border = '1px solid green';\n    messageDiv.style.borderRadius = '4px';\n    messageDiv.textContent = message;\n    \n    const appBody = document.getElementById('app-body');\n    appBody.insertBefore(messageDiv, appBody.firstChild);\n    \n    // Remove the message after 5 seconds\n    setTimeout(() => {\n        messageDiv.remove();\n    }, 5000);\n}\n\n// Add this function at the top level\nfunction showError(message) {\n    const errorDiv = document.createElement('div');\n    errorDiv.style.color = 'red';\n    errorDiv.style.padding = '10px';\n    errorDiv.style.margin = '10px';\n    errorDiv.style.border = '1px solid red';\n    errorDiv.style.borderRadius = '4px';\n    errorDiv.textContent = `Error: ${message}`;\n    \n    const appBody = document.getElementById('app-body');\n    appBody.insertBefore(errorDiv, appBody.firstChild);\n    \n    // Remove the error message after 5 seconds\n    setTimeout(() => {\n        errorDiv.remove();\n    }, 5000);\n}\n\n// Add this function at the top level\nfunction setButtonLoading(isLoading) {\n    const sendButton = document.getElementById('send');\n    const loadingAnimation = document.getElementById('loading-animation');\n    \n    if (sendButton) {\n        sendButton.disabled = isLoading;\n    }\n    \n    if (loadingAnimation) {\n        loadingAnimation.style.display = isLoading ? 'flex' : 'none';\n    }\n}\n\n// Add this variable to store the last response\nlet lastResponse = null;\n\n// Add this variable to track if the current message is a response\nlet isResponse = false;\n\n// Add this function to write to Excel\nasync function writeToExcel() {\n    if (!lastResponse) {\n        showError('No response to write to Excel');\n        return;\n    }\n\n    try {\n        await Excel.run(async (context) => {\n            const range = context.workbook.getSelectedRange();\n            range.load(\"rowIndex\");\n            range.load(\"columnIndex\");\n            await context.sync();\n            \n            const startRow = range.rowIndex;\n            const startCol = range.columnIndex;\n            \n            // Split the response into individual code strings\n            let codeStrings = [];\n            if (Array.isArray(lastResponse)) {\n                // Join the array elements and then split by brackets\n                const fullText = lastResponse.join(' ');\n                codeStrings = fullText.match(/<[^>]+>/g) || [];\n            } else if (typeof lastResponse === 'string') {\n                codeStrings = lastResponse.match(/<[^>]+>/g) || [];\n            }\n            \n            if (codeStrings.length === 0) {\n                throw new Error(\"No valid code strings found in response\");\n            }\n            \n            // Create a range that spans all the rows we need\n            const targetRange = range.worksheet.getRangeByIndexes(\n                startRow,\n                startCol,\n                codeStrings.length,\n                1\n            );\n            \n            // Set all values at once, with each code string in its own row\n            targetRange.values = codeStrings.map(str => [str]);\n            \n            await context.sync();\n            console.log(\"Response written to Excel\");\n        });\n    } catch (error) {\n        console.error(\"Error writing to Excel:\", error);\n        showError(error.message);\n    }\n}\n\n// Add this function to append messages to the chat log\nfunction appendMessage(content, isUser = false) {\n    const chatLog = document.getElementById('chat-log');\n    const welcomeMessage = document.getElementById('welcome-message');\n    \n    // Hide welcome message when first message is added\n    if (welcomeMessage) {\n        welcomeMessage.style.display = 'none';\n    }\n    \n    const messageDiv = document.createElement('div');\n    messageDiv.className = `chat-message ${isUser ? 'user-message' : 'assistant-message'}`;\n    \n    const messageContent = document.createElement('p');\n    messageContent.className = 'message-content';\n    messageContent.textContent = content;\n    \n    messageDiv.appendChild(messageContent);\n    chatLog.appendChild(messageDiv);\n    \n    // Scroll to bottom\n    chatLog.scrollTop = chatLog.scrollHeight;\n}\n\n// Modify the handleSend function\nasync function handleSend() {\n    const userInput = document.getElementById('user-input').value.trim();\n    \n    if (!userInput) {\n        showError('Please enter a request');\n        return;\n    }\n\n    // Check if this is a response to a previous message\n    isResponse = conversationHistory.length > 0;\n\n    // Add user message to chat\n    appendMessage(userInput, true);\n    \n    // Clear input\n    document.getElementById('user-input').value = '';\n\n    setButtonLoading(true);\n    try {\n        // Process the text through the main function\n        console.log(\"Starting structureDatabasequeries\");\n        const dbResults = await structureDatabasequeries(userInput);\n        console.log(\"Database queries completed\");\n        \n        if (!dbResults || !Array.isArray(dbResults)) {\n            console.error(\"Invalid database results:\", dbResults);\n            throw new Error(\"Failed to get valid database results\");\n        }\n        \n        // Format the database results into a string\n        const plainTextResults = dbResults.map(result => {\n            if (!result) return \"No results found\";\n            \n            return `Query: ${result.query || 'No query'}\\n` +\n                   `Training Data:\\n${(result.trainingData || []).join('\\n')}\\n` +\n                   `Code Options:\\n${(result.codeOptions || []).join('\\n')}\\n` +\n                   `Code Choosing Context:\\n${(result.call1Context || []).join('\\n')}\\n` +\n                   `Code Editing Context:\\n${(result.call2Context || []).join('\\n')}\\n` +\n                   `---\\n`;\n        }).join('\\n');\n\n        const enhancedPrompt = `Client Request: ${userInput}\\n\\nDatabase Results:\\n${plainTextResults}`;\n        console.log(\"Enhanced prompt created\");\n        console.log(\"Enhanced prompt:\", enhancedPrompt);\n\n        console.log(\"Starting handleConversation\");\n        let response = await handleConversation(enhancedPrompt, isResponse);\n        console.log(\"Conversation completed\");\n        console.log(\"Initial Response:\", response);\n\n        if (!response || !Array.isArray(response)) {\n            console.error(\"Invalid response:\", response);\n            throw new Error(\"Failed to get valid response from conversation\");\n        }\n\n        // Run validation and correction if needed\n        console.log(\"Starting validation\");\n        const validationResults = await validateCodeStrings(response);\n        console.log(\"Validation completed:\", validationResults);\n\n        if (validationResults && validationResults.length > 0) {\n            console.log(\"Starting validation correction\");\n            response = await validationCorrection(userInput, response, validationResults);\n            console.log(\"Validation correction completed\");\n        }\n        \n        // Store the response for Excel writing\n        lastResponse = response;\n        \n        // Add assistant message to chat\n        appendMessage(response.join('\\n'));\n        \n    } catch (error) {\n        console.error(\"Error in handleSend:\", error);\n        showError(error.message);\n        // Add error message to chat\n        appendMessage(`Error: ${error.message}`);\n    } finally {\n        setButtonLoading(false);\n    }\n}\n\n// Add this function to reset the chat\nfunction resetChat() {\n    // Clear the chat log\n    const chatLog = document.getElementById('chat-log');\n    chatLog.innerHTML = '';\n    \n    // Restore welcome message\n    const welcomeMessage = document.createElement('div');\n    welcomeMessage.id = 'welcome-message';\n    welcomeMessage.className = 'welcome-message';\n    const welcomeTitle = document.createElement('h1');\n    welcomeTitle.textContent = 'What would you like to model?';\n    welcomeMessage.appendChild(welcomeTitle);\n    chatLog.appendChild(welcomeMessage);\n    \n    // Clear the conversation history\n    conversationHistory = [];\n    saveConversationHistory(conversationHistory);\n    \n    // Reset the response flag and last response\n    isResponse = false;\n    lastResponse = null;\n    \n    // Clear the input field\n    document.getElementById('user-input').value = '';\n    \n    console.log(\"Chat reset completed\");\n}\n\n/**\n * Inserts worksheets from a base64-encoded Excel file\n */\nasync function insertSheetsFromBase64() {\n    try {\n        // Fetch the Excel file\n        const response = await fetch('https://localhost:3002/assets/Worksheets_4.3.25 v1.xlsx');\n        if (!response.ok) {\n            throw new Error('Failed to load Excel file');\n        }\n        \n        // Convert the response to an ArrayBuffer\n        const arrayBuffer = await response.arrayBuffer();\n        \n        // Convert ArrayBuffer to base64 string in chunks\n        const uint8Array = new Uint8Array(arrayBuffer);\n        let binaryString = '';\n        const chunkSize = 8192; // Process in 8KB chunks\n        \n        for (let i = 0; i < uint8Array.length; i += chunkSize) {\n            const chunk = uint8Array.slice(i, Math.min(i + chunkSize, uint8Array.length));\n            binaryString += String.fromCharCode.apply(null, chunk);\n        }\n        \n        const base64String = btoa(binaryString);\n        \n        // Call the function to insert worksheets\n        await handleInsertWorksheetsFromBase64(base64String);\n        console.log(\"Worksheets inserted successfully\");\n    } catch (error) {\n        console.error(\"Error inserting worksheets:\", error);\n        showError(error.message);\n    }\n}\n\n// *** Define Helper Function Globally (BEFORE Office.onReady) ***\nfunction getTabBlocks(codeString) {\n    if (!codeString) return [];\n    const tabBlocks = [];\n    const tabRegex = /(<TAB;[^>]*>)/g;\n    let match;\n    const indices = [];\n    while ((match = tabRegex.exec(codeString)) !== null) {\n        indices.push({ index: match.index, tag: match[1] });\n    }\n    if (indices.length === 0) {\n        if (codeString.trim().length > 0) {\n            console.warn(\"Code string provided but no <TAB;...> tags found. Processing cannot proceed based on Tabs.\");\n        }\n        return []; \n    } \n    for (let i = 0; i < indices.length; i++) {\n        const start = indices[i].index;\n        const tag = indices[i].tag;\n        const end = (i + 1 < indices.length) ? indices[i + 1].index : codeString.length;\n        const blockText = codeString.substring(start, end).trim();\n        if (blockText) {\n            tabBlocks.push({ tag: tag, text: blockText });\n        }\n    }\n    return tabBlocks;\n}\n// *** End Helper Function Definition ***\n\n// Function to insert sheets and then run code collection\nasync function insertSheetsAndRunCodes() {\n\n    let codesToRun = \"\";\n    let previousCodes = null;\n    let codeStringToProcess = \"\"; // This will hold the codes actually run\n\n    // Load current codes\n    try {\n        const storedCodes = localStorage.getItem('userCodeStrings');\n        codesToRun = storedCodes !== null ? storedCodes : \"\";\n        console.log(\"[Run Codes] Initial value loaded for codesToRun (truncated):\", codesToRun.substring(0, 200) + (codesToRun.length > 200 ? '...' : '')); \n        console.log(\"[Run Codes] Initial length for codesToRun: \" + codesToRun.length);\n        if (codesToRun.trim().length === 0) {\n             console.warn(\"[Run Codes] Code string is empty. Nothing to run.\");\n             showMessage(\"Code string is empty. Please add codes via 'View Codes'.\");\n             return;\n        }\n    } catch (error) {\n        console.error(\"[Run Codes] Error loading current codes from localStorage:\", error);\n        showError(\"Error loading codes. Cannot proceed.\");\n        return;\n    }\n\n    // Main processing wrapped in try/catch/finally\n    try {\n        // --- Check Financials Sheet Existence --- \n        let financialsSheetExists = false;\n        await Excel.run(async (context) => {\n            try {\n                const financialsSheet = context.workbook.worksheets.getItem(\"Financials\");\n                financialsSheet.load(\"name\");\n                await context.sync();\n                financialsSheetExists = true;\n            } catch (error) {\n                if (error instanceof OfficeExtension.Error && error.code === Excel.ErrorCodes.itemNotFound) {\n                    financialsSheetExists = false;\n                } else { throw error; } // Rethrow other errors\n            }\n        });\n\n        // Set calculation mode to manual (do this early)\n        await Excel.run(async (context) => {\n            context.application.calculationMode = Excel.CalculationMode.manual;\n            await context.sync();\n        });\n\n        setButtonLoading(true);\n        console.log(\"Starting code processing...\");\n\n        // --- Pass Logic: Determine sheets to insert and codes to process ---\n        if (!financialsSheetExists) {\n            // *** FIRST PASS ***\n            console.log(\"[Run Codes] FIRST PASS: Financials sheet not found.\");\n            console.log(\"Inserting base sheets from Worksheets_4.3.25 v1.xlsx...\");\n            const worksheetsResponse = await fetch('https://localhost:3002/assets/Worksheets_4.3.25 v1.xlsx');\n            if (!worksheetsResponse.ok) throw new Error(`Worksheets load failed: ${worksheetsResponse.statusText}`);\n            const worksheetsArrayBuffer = await worksheetsResponse.arrayBuffer();\n            console.log(\"Converting base file to base64 (using chunks)...\");\n            const worksheetsUint8Array = new Uint8Array(worksheetsArrayBuffer);\n            let worksheetsBinaryString = '';\n            const chunkSize = 8192;\n            for (let i = 0; i < worksheetsUint8Array.length; i += chunkSize) {\n                const chunk = worksheetsUint8Array.slice(i, Math.min(i + chunkSize, worksheetsUint8Array.length));\n                worksheetsBinaryString += String.fromCharCode.apply(null, chunk);\n            }\n            const worksheetsBase64String = btoa(worksheetsBinaryString);\n            console.log(\"Base64 conversion complete.\");\n            await handleInsertWorksheetsFromBase64(worksheetsBase64String);\n            console.log(\"Base sheets inserted.\");\n            \n            // Process ALL codes on first pass\n            codeStringToProcess = codesToRun;\n\n        } else {\n            // *** SECOND PASS (or later) ***\n            console.log(\"[Run Codes] SUBSEQUENT PASS: Financials sheet found.\");\n\n            // Load previous codes for comparison\n            try {\n                previousCodes = localStorage.getItem('previousRunCodeStrings');\n            } catch (error) {\n                 console.error(\"[Run Codes] Error loading previous codes for comparison:\", error);\n                 console.warn(\"[Run Codes] Could not load previous codes. Processing ALL current codes as fallback.\");\n                 previousCodes = null;\n            }\n\n            // Check for NO changes first\n            if (previousCodes !== null && previousCodes === codesToRun) {\n                 console.log(\"[Run Codes] No change in code strings since last run. Nothing to process.\");\n                 // Update previous codes timestamp anyway, then exit\n                 try { localStorage.setItem('previousRunCodeStrings', codesToRun); } catch(e) { console.error(\"Err updating prev codes:\", e); }\n                 showMessage(\"No code changes to run.\"); // <<< Show message to user\n                 setButtonLoading(false); // Ensure button is re-enabled\n                 return; // <<< EXIT EARLY\n            }\n\n            // If changed or first subsequent run, insert codes.xlsx\n            console.log(\"Inserting base sheets from codes.xlsx...\");\n            try {\n                const codesResponse = await fetch('https://localhost:3002/assets/codes.xlsx');\n                if (!codesResponse.ok) throw new Error(`codes.xlsx load failed: ${codesResponse.statusText}`);\n                const codesArrayBuffer = await codesResponse.arrayBuffer();\n                console.log(\"Converting codes.xlsx file to base64 (using chunks)...\");\n                const codesUint8Array = new Uint8Array(codesArrayBuffer);\n                let codesBinaryString = '';\n                const chunkSize_codes = 8192;\n                for (let i = 0; i < codesUint8Array.length; i += chunkSize_codes) {\n                    const chunk = codesUint8Array.slice(i, Math.min(i + chunkSize_codes, codesUint8Array.length));\n                    codesBinaryString += String.fromCharCode.apply(null, chunk);\n                }\n                const codesBase64String = btoa(codesBinaryString);\n                console.log(\"codes.xlsx Base64 conversion complete.\");\n                await handleInsertWorksheetsFromBase64(codesBase64String);\n                console.log(\"codes.xlsx sheets inserted.\");\n            } catch (e) {\n                console.error(\"Failed to insert sheets from codes.xlsx:\", e);\n                showError(\"Failed to insert necessary sheets from codes.xlsx. Aborting.\");\n                setButtonLoading(false);\n                return;\n            }\n\n            // Now determine which codes to process based on comparison\n            if (previousCodes === null) {\n                 console.log(\"[Run Codes] First subsequent run or previous codes missing. Processing all current codes.\");\n                 codeStringToProcess = codesToRun;\n            } else {\n                // Find new tabs (since previousCodes !== codesToRun here)\n                const currentTabs = getTabBlocks(codesToRun);\n                const previousTabs = getTabBlocks(previousCodes);\n                const previousTabTags = new Set(previousTabs.map(block => block.tag));\n                const newTabs = currentTabs.filter(block => !previousTabTags.has(block.tag));\n                \n                if (newTabs.length > 0) {\n                    console.log(`[Run Codes] Found ${newTabs.length} new TAB block(s) to process:`, newTabs.map(t => t.tag));\n                    codeStringToProcess = newTabs.map(block => block.text).join('\\n\\n'); // Join new blocks\n                    console.log(\"[Run Codes] Filtered codeStringToProcess for new tabs (truncated):\", codeStringToProcess.substring(0, 200) + (codeStringToProcess.length > 200 ? '...' : ''));\n                } else {\n                    console.log(\"[Run Codes] Codes changed, but no new TAB blocks detected. Nothing specific to process incrementally.\");\n                    codeStringToProcess = \"\"; // Ensure nothing is processed if only old tabs changed\n                }\n            }\n        } // End of pass logic (if/else financialsSheetExists)\n        \n        // --- Execute Processing --- \n        if (codeStringToProcess.trim().length === 0) {\n             console.log(\"[Run Codes] After filtering/pass logic, there are no codes to process.\");\n             // Only show message if it wasn't already shown by the 'no change' check\n             if (!(previousCodes !== null && previousCodes === codesToRun)) {\n                showMessage(\"No new codes identified to run.\");\n             }\n             // Still update previous state even if nothing ran this time\n             try { localStorage.setItem('previousRunCodeStrings', codesToRun); } catch(e) { console.error(\"Err updating prev codes:\", e); }\n             setButtonLoading(false);\n             return; // Exit if nothing to process\n        }\n         \n        // If we have codes to process, continue...\n        console.log(\"Populating collection for codes to process...\");\n        const collection = populateCodeCollection(codeStringToProcess);\n        console.log(`Collection populated with ${collection.length} code(s)`);\n\n        console.log(\"Running codes...\");\n        const runResult = await runCodes(collection);\n        console.log(\"Codes executed:\", runResult);\n\n        // Post-processing\n        if (runResult && runResult.assumptionTabs && runResult.assumptionTabs.length > 0) {\n            console.log(\"Processing assumption tabs...\");\n            await processAssumptionTabs(runResult.assumptionTabs);\n        }\n        console.log(\"Hiding specific columns and navigating...\");\n        await hideColumnsAndNavigate(runResult?.assumptionTabs || []);\n\n        // Cleanup\n        console.log(\"Deleting Codes sheet / Skipping hiding Calcs sheet...\");\n        await Excel.run(async (context) => {\n            try {\n                const codesSheet = context.workbook.worksheets.getItem(\"Codes\");\n                codesSheet.delete();\n                console.log(\"Codes sheet deleted.\");\n            } catch (e) {\n                if (e instanceof OfficeExtension.Error && e.code === Excel.ErrorCodes.itemNotFound) {\n                     console.warn(\"Codes sheet not found, skipping deletion.\");\n                } else { console.error(\"Error deleting Codes sheet:\", e); }\n            }\n            await context.sync();\n        }).catch(error => { console.error(\"Error during sheet cleanup:\", error); });\n\n        // --- IMPORTANT: Update previous codes state AFTER successful processing --- \n        try {\n            localStorage.setItem('previousRunCodeStrings', codesToRun); \n            console.log(\"[Run Codes] Updated previous run state with full current codes.\");\n        } catch (error) { \n             console.error(\"[Run Codes] Failed to update previous run state:\", error);\n        }\n\n        showMessage(\"Code processing finished successfully!\");\n\n    } catch (error) {\n        console.error(\"An error occurred during the build process:\", error);\n        showError(`Operation failed: ${error.message || error.toString()}`);\n    } finally {\n        // Always set calculation mode back to automatic and hide loading\n        try {\n            await Excel.run(async (context) => {\n                context.application.calculationMode = Excel.CalculationMode.automatic;\n                await context.sync();\n            });\n        } catch (finalError) {\n            console.error(\"Error setting calculation mode to automatic:\", finalError);\n        }\n        setButtonLoading(false);\n    }\n}\n\n// Ensure Office.onReady sets up the button click handler for the REVERTED function\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // ***** ADAPT THIS ID TO YOUR ACTUAL BUTTON *****\n    const button = document.getElementById(\"insert-and-run\"); \n    if (button) {\n        // Assign the REVERTED async function as the handler\n        button.onclick = insertSheetsAndRunCodes; \n    } else {\n        // Update the error message to reflect the ID we were looking for\n        console.error(\"Could not find button with id='insert-and-run'\");\n    }\n\n    // Keep the setup for your other buttons (send-button, reset-button, etc.)\n    // Assign event listeners to the buttons\n    const sendButton = document.getElementById('send');\n    if (sendButton) sendButton.onclick = handleSend;\n\n    const writeButton = document.getElementById('write-to-excel');\n    if (writeButton) writeButton.onclick = writeToExcel;\n    \n    const resetButton = document.getElementById('reset-chat');\n    if (resetButton) resetButton.onclick = resetChat;\n    \n    // Get modal elements\n    const viewCodesButton = document.getElementById('view-codes');\n    const codesModal = document.getElementById('codes-modal');\n    const codesTextarea = document.getElementById('codes-textarea');\n    const closeCodesModalButton = document.getElementById('close-codes-modal');\n    const saveCodesChangesButton = document.getElementById('save-codes-changes');\n\n    // Add event listeners for modal\n    if (viewCodesButton && codesModal && codesTextarea) {\n      viewCodesButton.onclick = () => {\n        // Use the global variable to populate the textarea initially\n        codesTextarea.value = loadedCodeStrings; \n        codesModal.style.display = 'block'; // Show modal\n      };\n    }\n\n    if (closeCodesModalButton && codesModal) {\n      closeCodesModalButton.onclick = () => {\n        codesModal.style.display = 'none'; // Hide modal\n      };\n    }\n\n    if (saveCodesChangesButton && codesModal && codesTextarea) {\n      saveCodesChangesButton.onclick = () => {\n        // Update the global variable first\n        loadedCodeStrings = codesTextarea.value;\n        // Log the update to the global variable\n        console.log('[Save Handler] Global loadedCodeStrings updated to:', loadedCodeStrings.substring(0,100) + '...'); \n        try {\n          // Save the updated global variable to localStorage\n          localStorage.setItem('userCodeStrings', loadedCodeStrings); \n          console.log(\"Code strings saved to localStorage.\");\n          showMessage(\"Code changes saved.\"); // Inform user\n        } catch (error) {\n          console.error(\"Error saving code strings to localStorage:\", error);\n          showError(`Error saving codes: ${error.message}`);\n        }\n        codesModal.style.display = 'none'; // Hide modal\n        // No need to log again here, already logged above\n      };\n    }\n\n    // Close modal if user clicks outside the content area (optional)\n    window.onclick = (event) => {\n      if (event.target == codesModal) {\n        codesModal.style.display = \"none\";\n      }\n    };\n\n    // Test Buttons (Add similar checks if they are essential)\n    // const testGreenCellButton = document.getElementById('test-green-cell');\n    // if (testGreenCellButton) testGreenCellButton.onclick = isActiveCellGreen;\n\n    // Initialize API keys, load history etc.\n    initializeAPIKeys().then(keysLoaded => {\n      if (!keysLoaded) {\n        showError(\"Failed to load API keys. Please check configuration.\");\n      }\n      // Load conversation history after keys are potentially loaded\n      conversationHistory = loadConversationHistory();\n\n      // Load code strings from localStorage into the global variable\n      try {\n          const storedCodes = localStorage.getItem('userCodeStrings');\n          if (storedCodes !== null) {\n              // Initialize the global variable\n              loadedCodeStrings = storedCodes;\n              console.log(\"Code strings loaded from localStorage into global variable.\");\n              if (DEBUG) console.log(\"Initial loaded codes:\", loadedCodeStrings.substring(0, 100) + '...'); \n          } else {\n              console.log(\"No code strings found in localStorage, initializing global variable as empty.\");\n              // Initialize the global variable\n              loadedCodeStrings = \"\"; \n          }\n      } catch (error) {\n          console.error(\"Error loading code strings from localStorage:\", error);\n          showError(`Error loading codes from storage: ${error.message}`);\n          // Initialize the global variable\n          loadedCodeStrings = \"\"; \n      }\n\n    }).catch(error => {\n        console.error(\"Error during initialization:\", error);\n        showError(\"Error during initialization: \" + error.message);\n    });\n    \n    // Hide sideload message and show app body\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"block\";\n  }\n});\n\n// --- Export function (if needed elsewhere, otherwise can be removed) ---\n// Keep the existing exportCurrentCodes function if present\n\n// ... rest of the existing taskpane.js code ...\n\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"../../assets/ChatGPT Image Apr 2, 2025, 10_34_50 PM.png\", import.meta.url);\n// Module\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Contoso Task Pane Add-in</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"><\" + \"/script> <\" + \"script src=\\\"https://cdn.sheetjs.com/xlsx-0.20.1/package/dist/xlsx.full.min.js\\\"><\" + \"/script> <link rel=\\\"stylesheet noopener\\\" href=\\\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.1.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-Fabric\\\"> <section id=\\\"sideload-msg\\\" class=\\\"ms-welcome__main\\\"> <h2 class=\\\"ms-font-xl\\\">Please <a target=\\\"_blank\\\" rel=\\\"noopener\\\" href=\\\"https://learn.microsoft.com/office/dev/add-ins/testing/test-debug-office-add-ins#sideload-an-office-add-in-for-testing\\\">sideload</a> your add-in to see app body.</h2> </section> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none\\\"> <div class=\\\"logo-container\\\"> <img src=\\\"\" + ___HTML_LOADER_IMPORT_1___ + \"\\\" alt=\\\"Projectify.AI Logo\\\" class=\\\"logo-image\\\"> </div> <div id=\\\"chat-log\\\" class=\\\"chat-log\\\"> <div id=\\\"welcome-message\\\" class=\\\"welcome-message\\\"> <h1>What would you like to model?</h1> </div> </div> <div class=\\\"chat-input-container\\\"> <textarea id=\\\"user-input\\\" class=\\\"ms-TextField-field\\\" rows=\\\"4\\\" placeholder=\\\"Type your request here...\\\"></textarea> <div class=\\\"button-container\\\"> <button id=\\\"send\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Send</span> </button> <button id=\\\"write-to-excel\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Write to Excel</span> </button> <button id=\\\"reset-chat\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Reset Chat</span> </button> <button id=\\\"view-codes\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">View Codes</span> </button> <button id=\\\"insert-and-run\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Run Codes</span> </button> </div> <div id=\\\"loading-animation\\\" class=\\\"loading-animation\\\" style=\\\"display:none\\\"> <div class=\\\"spinner\\\"></div> <div class=\\\"loading-text\\\">Processing...</div> </div> </div> <div id=\\\"status-message\\\" class=\\\"status-message\\\"></div> <div id=\\\"error-display-area\\\" class=\\\"error-display-area\\\" style=\\\"display:none\\\"></div> <div id=\\\"response-area\\\" class=\\\"response-area\\\"></div> <div id=\\\"codes-modal\\\" class=\\\"codes-modal\\\" style=\\\"display:none\\\"> <div class=\\\"codes-modal-content\\\"> <h2>Code Strings</h2> <textarea id=\\\"codes-textarea\\\" class=\\\"codes-textarea\\\" rows=\\\"20\\\"></textarea> <div class=\\\"modal-button-container\\\"> <button id=\\\"save-codes-changes\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Save & Close</span> </button> <button id=\\\"close-codes-modal\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Close</span> </button> </div> </div> </div> </main> </body> </html>\";\n// Exports\nexport default code;"],"names":["Object","defineProperty","exports","value","handleApiError","utils_1","http_1","request_1","async","e","customMessage","url","Error","name","responseError","rawMessage","extractMessage","statusCode","response","status","message","mapHttpStatusError","PineconeConnectionError","err","ChatStream","convertKeys_1","constructor","stream","this","Symbol","asyncIterator","buffer","chunk","newlineIndex","toString","indexOf","line","slice","trim","startsWith","json","parsedJson","JSON","parse","convertedJson","convertKeysToCamelCase","console","debug","PineconeUnmappedHttpError","PineconeNotImplementedError","PineconeUnavailableError","PineconeMaxRetriesExceededError","PineconeInternalServerError","PineconeConflictError","PineconeNotFoundError","PineconeAuthorizationError","PineconeBadRequestError","base_1","CONFIG_HELP","BasePineconeError","failedRequest","super","body","join","retries","requestInfo","failedRequestInfo","getFetch","errors_1","config","fetchApi","g","fetch","PineconeConfigurationError","RetryOnServerFailure","asyncFn","maxRetries","calculateRetryDelay","attempt","baseDelay","maxDelay","jitterFactor","delay","Math","random","min","max","execute","args","isRetryError","error","mappedError","mapErrorIfNeeded","shouldStopRetrying","includes","delayTime","Promise","resolve","setTimeout","cachedSetTimeout","cachedClearTimeout","process","module","defaultSetTimout","defaultClearTimeout","runTimeout","fun","call","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","Array","arguments","i","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","PineconeUnableToResolveHostError","PineconeEnvironmentVarsNotSupportedError","PineconeUnexpectedResponseError","normalizeUrl","PineconeRequestError","urlMessage","context","init","method","cause","setPrototypeOf","captureStackTrace","debugLog","str","PINECONE_DEBUG","log","isBrowser","isEdge","EdgeRuntime","window","__createBinding","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","__exportStar","p","hasOwnProperty","PineconeArgumentError","config_1","validation_1","handling_1","object","isArray","map","item","entries","reduce","acc","key","toCamelCase","replace","_","letter","toUpperCase","text","messageJSON","__setModuleDefault","v","__importStar","mod","result","buildUserAgent","environment_1","packageInfo","userAgentParts","sourceTag","normalizeSourceTag","toLowerCase","queryParamsStringify","params","prefix","keys","querystringSingleKey","filter","part","keyPrefix","fullKey","multiValue","singleValue","encodeURIComponent","String","Set","from","Date","toISOString","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis","Function","obj","prop","scriptUrl","importScripts","location","document","currentScript","tagName","src","scripts","getElementsByTagName","test","b","baseURI","self","href","_regeneratorRuntime","t","r","n","a","iterator","c","u","toStringTag","define","wrap","Generator","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","__await","then","callInvokeWithMethodAndArg","done","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","__proto__","awrap","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","catch","delegateYield","_toConsumableArray","_arrayLikeToArray","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","_createForOfIteratorHelper","_n","F","asyncGeneratorStep","validateCodeStrings","_x","_validateCodeStrings","_callee","inputCodeStrings","errors","tabLabels","rowValues","codeTypes","vvCodes","vrCodes","rrCodes","rvCodes","evCodes","erCodes","validCodes","fileContent","_iterator","_step","codeString","rowMatches","codeMatch","codeType","_i","_arr","code","_i2","_arr2","_code","_iterator2","_step2","_codeString","_codeMatch","_codeType","labelMatch","label","_rowMatches","_iterator3","_step3","_codeString2","driverMatches","_context","match","ok","split","t0","endsWith","parts","trimmedPart","afterAsterisk","substring","add","t1","size","has","rowContent","t2","driverValue","_next","_throw","ownKeys","getOwnPropertySymbols","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","toPrimitive","_toPrimitive","_toPropertyKey","_asyncToGenerator","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","populateCodeCollection","inputText","codeCollection","paramsString","matchAll","rowNum","rowValue","paramName","paramValue","runCodes","_runCodes","_callee4","currentWorksheetName","assumptionTabs","_loop","finalResult","_context5","processedCodes","createdTabs","tabName","_context4","label1","Label1","Excel","_ref3","sheets","existingSheet","sourceCalcsWS","financialsSheet","newSheet","workbook","worksheets","load","sync","items","find","sheet","getItem","position","copy","worksheet","_x24","codeIndex","_ref4","_callee3","codesWS","usedRange","currentWS","lastUsedRow","pasteRow","firstRow","lastRow","columnD","row","currentWorksheet","_context3","getUsedRange","rowCount","columnCount","getLastRow","rowIndex","getRange","warn","_ref5","_callee2","sourceRange","_context2","copyFrom","RangeCopyType","all","_x26","driverAndAssumptionInputs","_x25","tab","_x2","_x3","_x4","_driverAndAssumptionInputs","_callee10","calcsPasteRow","worksheetName","_context11","_ref7","_callee7","_context8","_x28","_ref8","_callee8","lastRowRange","_context9","_x29","_ref9","_callee9","determinedLastRow","columnSequence","codeValue","searchRow","searchRange","searchRangeAddress","checkRow","isGreen","cellB","targetRow","driverParam","labelParam","currentCheckRowForInserts","rowParam","rowItems","numNewRows","baseRowForThisG","insertStartAddress","_i3","sourceRowNum","targetRowNum","sourceRowRange","targetRowRange","yy","currentRowNum","splitArray","x","valueToWrite","colLetter","cellToWrite","numValue","_context10","format","fill","color","financialsdriver","insert","InsertShiftDirection","down","formats","formulas","Number","_x30","getLastUsedRow","_x5","_x6","_getLastUsedRow","_callee11","columnLetter","fullColumn","lastCell","lastRowIndex","_context12","getLastCell","adjustDriversJS","_x7","_x8","_adjustDriversJS","_callee12","START_ROW","DRIVER_CODE_COL","LOOKUP_COL","TARGET_COL","driverCodeRangeAddress","lookupRangeAddress","driverCodeRange","lookupRange","driverCodeValues","lookupValues","lookupMap","outputValues","foundCount","notFoundCount","_i4","driverCode","currentRow","foundRow","targetAddress","targetRangeAddress","targetRange","_context13","Map","set","replaceIndirectsJS","_x9","_x10","_replaceIndirectsJS","_callee13","originalFormulas","referencesToLookup","formulaData","formula","searchStartIndex","upperFormula","indirectStartIndex","parenStartIndex","parenEndIndex","argString","_iterator5","_step5","_step5$value","refString","data","_iterator6","_step6","_step6$value","_refString","_data","cellText","newFormulas","_i5","_formulaData","currentFormula","loopCount","MAX_LOOPS","_upperFormula","_indirectStartIndex","_parenStartIndex","_parenEndIndex","indString","_argString","directRef","_context14","originalFormula","index","range","rangeError","debugInfo","valueError","populateFinancialsJS","_x11","_x12","_x13","_populateFinancialsJS","_callee14","CALCS_FIRST_ROW","ASSUMPTION_CODE_COL","ASSUMPTION_LINK_COL_B","ASSUMPTION_LINK_COL_D","ASSUMPTION_MONTHS_START_COL","FINANCIALS_CODE_COLUMN","FINANCIALS_TARGET_COL_B","FINANCIALS_TARGET_COL_D","FINANCIALS_ANNUALS_START_COL","FINANCIALS_MONTHS_START_COL","ANNUALS_END_COL","MONTHS_END_COL","GREEN_COLOR","CURRENCY_FORMAT","_assumptionCodes$leng","assumptionCodeRange","financialsSearchCol","financialsUsedRange","financialsLastRow","fallbackRange","financialsCodeMap","financialsCodeRange","_i6","tasks","assumptionCodes","_i7","_assumptionCodes$leng2","assumptionRow","cellAddressB","cellAddressD","cellAddressMonths","formulaLinkB","formulaLinkD","formulaLinkMonths","_i8","_tasks","task","originalTargetRowsAsc","taskAdjustedRows","totalShift","_i9","_tasks2","_task","populateRow","cellD","cellAnnualsStart","cellMonthsStart","codePrefix","formulaJ","actualsRange","numCols","formulasArray","_i10","_tasks3","_task2","_populateRow","sourceAnnuals","destAnnuals","sourceMonths","destMonths","_context15","addressB","addressD","addressMonths","sort","uniqueRow","tasksAtThisRow","currentAdjustedRowForGroup","font","bold","italic","indentLevel","formulasR1C1","numberFormat","columnLetterToIndex","sumifsError","autoFill","AutoFillType","fillDefault","autofillError","processAssumptionTabs","_x15","_processAssumptionTabs","_callee18","assumptionTabNames","FINANCIALS_SHEET_NAME","AUTOFILL_START_COLUMN","_iterator7","_step7","_loop2","_context20","_context19","_ref11","_callee17","updatedLastRow","finalLastRow","fillRange","_context18","deleteGreenRows","setColumnAFontWhite","clear","_x32","_ref10","_callee16","finSheet","_context17","_x31","t3","_x16","_x17","_x18","_deleteGreenRows","_callee19","startRow","rowsToDelete","cellAddress","cell","_iterator8","_step8","_rowNum","newLastRow","_context21","delete","DeleteShiftDirection","up","_x19","_x20","_x21","_setColumnAFontWhite","_callee20","_context22","columnIndexToLetter","fromCharCode","charCodeAt","floor","hideColumnsAndNavigate","_x22","_hideColumnsAndNavigate","_callee22","ACTUALS_START_COL","ACTUALS_END_COL","targetSheetNames","_context24","_ref12","_callee21","hideAttempted","actualsEndIndex","actualsEndMinusOneCol","_iterator9","_step9","sheetName","_iterator10","_step10","_sheetName","_worksheet","_iterator11","_step11","_sheetName2","_worksheet2","_context23","columnHidden","rowHidden","stringify","activate","select","t4","t5","_x33","handleInsertWorksheetsFromBase64","_x23","_handleInsertWorksheetsFromBase","_callee26","base64String","sheetNames","_args28","_context28","_ref14","_callee25","_context27","insertWorksheetsFromBase64","_x35","loadedCodeStrings","performance","now","API_KEYS","OPENAI_API_KEY","PINECONE_API_KEY","srcPaths","_initializeAPIKeys","configResponse","configText","openaiKeyMatch","pineconeKeyMatch","PINECONE_INDEXES","codes","apiEndpoint","call2trainingdata","call2context","call1context","GPT4O","conversationHistory","saveConversationHistory","history","localStorage","setItem","loadConversationHistory","parsedHistory","callOpenAI","_callOpenAI","messages","model","temperature","errorData","_args3","headers","statusText","choices","content","createEmbedding","_createEmbedding","input","embedding","loadPromptFromFile","_loadPromptFromFile","_callee5","promptKey","paths","_paths","path","getSystemPromptFromFile","_ref","prompt","processPrompt","_processPrompt","_callee6","_ref2","userInput","systemPrompt","_ref2$history","responseContent","parsed","_context6","role","structureDatabasequeries","_structureDatabasequeries","clientprompt","systemStructurePrompt","queryStrings","results","queryString","queryResults","_context7","queryVectorDB","queryPrompt","similarityThreshold","indexName","numResults","query","trainingData","call2Context","call1Context","codeOptions","t6","t7","_queryVectorDB","_ref3$indexName","_ref3$numResults","_ref3$similarityThres","indexConfig","errorText","matches","matchesDescription","cleanMatches","vector","topK","includeMetadata","namespace","score","metadata","toFixed","extractTextFromJson","jsonInput","jsonData","safeJsonForPrompt","jsonString","handleFollowUpConversation","_handleFollowUpConversation","trainingdataCall2","followUpPrompt","MainPrompt","savePromptAnalysis","saveTrainingData","handleInitialConversation","handleConversation","_handleConversation","isFollowUp","_args10","_handleInitialConversation","Call2prompt","outputArray2","validationSystemPrompt","validationMainPrompt","validationResults","analysisData","clientRequest","mainPrompt","cleanText","validationCorrection","_validationCorrection","initialResponse","codeDescriptions","lastCallContext","responseString","correctionPrompt","correctedResponse","stack","showMessage","messageDiv","createElement","style","padding","margin","border","borderRadius","textContent","appBody","getElementById","insertBefore","firstChild","remove","showError","errorDiv","setButtonLoading","isLoading","sendButton","loadingAnimation","disabled","display","lastResponse","isResponse","writeToExcel","_writeToExcel","startCol","codeStrings","fullText","getSelectedRange","columnIndex","getRangeByIndexes","_x14","appendMessage","isUser","chatLog","welcomeMessage","className","messageContent","appendChild","scrollTop","scrollHeight","handleSend","_handleSend","_callee15","dbResults","plainTextResults","enhancedPrompt","resetChat","innerHTML","id","welcomeTitle","getTabBlocks","tabBlocks","tabRegex","indices","exec","tag","start","end","blockText","insertSheetsAndRunCodes","_insertSheetsAndRunCodes","codesToRun","previousCodes","codeStringToProcess","storedCodes","financialsSheetExists","worksheetsResponse","worksheetsArrayBuffer","worksheetsUint8Array","worksheetsBinaryString","worksheetsBase64String","codesResponse","codesArrayBuffer","codesUint8Array","codesBinaryString","_chunk","codesBase64String","currentTabs","previousTabs","previousTabTags","newTabs","collection","runResult","OfficeExtension","ErrorCodes","itemNotFound","_ref6","application","calculationMode","CalculationMode","manual","arrayBuffer","Uint8Array","btoa","block","automatic","Office","onReady","info","host","HostType","button","onclick","writeButton","resetButton","viewCodesButton","codesModal","codesTextarea","closeCodesModalButton","saveCodesChangesButton","event","target","initializeAPIKeys","keysLoaded","URL"],"sourceRoot":""}