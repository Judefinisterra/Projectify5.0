{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/handling.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/assistant/chatStream.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/http.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/fetch.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/index.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/retries.js","webpack://excel-custom-functions-js/../../../node_modules/process/browser.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/config.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/normalizeUrl.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/request.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/base.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/debugLog.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/environment.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/index.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/convertKeys.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/utils.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/user-agent.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/queryParamsStringify.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/validation.js","webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/webpack/runtime/global","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions-js/webpack/runtime/publicPath","webpack://excel-custom-functions-js/webpack/runtime/jsonp chunk loading","webpack://excel-custom-functions-js/./src/taskpane/Validation.js","webpack://excel-custom-functions-js/./src/taskpane/SpreadsheetUtils.js","webpack://excel-custom-functions-js/./src/taskpane/CodeCollection.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.html"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleApiError = void 0;\nconst utils_1 = require(\"./utils\");\nconst http_1 = require(\"./http\");\nconst request_1 = require(\"./request\");\n/** @internal */\nconst handleApiError = async (e, customMessage, url) => {\n    if (e instanceof Error && e.name === 'ResponseError') {\n        const responseError = e;\n        const rawMessage = await (0, utils_1.extractMessage)(responseError);\n        const statusCode = responseError.response.status;\n        const message = customMessage\n            ? await customMessage(statusCode, rawMessage)\n            : rawMessage;\n        return (0, http_1.mapHttpStatusError)({\n            status: responseError.response.status,\n            url: responseError.response.url || url,\n            message: message,\n        });\n    }\n    else if (e instanceof request_1.PineconeConnectionError) {\n        // If we've already wrapped this error, just return it\n        return e;\n    }\n    else {\n        // There seem to be some situations where \"e instanceof Error\" is erroneously\n        // false (perhaps the custom errors emitted by cross-fetch do not extend Error?)\n        // but we can still cast it to an Error type because all we're going to do\n        // with it is store off a reference to whatever it is under the \"cause\"\n        const err = e;\n        return new request_1.PineconeConnectionError(err);\n    }\n};\nexports.handleApiError = handleApiError;\n//# sourceMappingURL=handling.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChatStream = void 0;\nconst convertKeys_1 = require(\"../utils/convertKeys\");\n/**\n * Implements an async iterable that processes the readable stream of an assistant chat response.\n *\n * This class expects each chunk of data in the stream to begin with `data:` and be followed by a valid chunk of JSON.\n * If a chunk contains malformed JSON, it is skipped, and a debug message is logged.\n *\n * @template Item - The type of items yielded by the iterable.\n */\nclass ChatStream {\n    constructor(stream) {\n        this.stream = stream;\n    }\n    async *[Symbol.asyncIterator]() {\n        let buffer = '';\n        for await (const chunk of this.stream) {\n            buffer += chunk.toString();\n            let newlineIndex;\n            while ((newlineIndex = buffer.indexOf('\\n')) !== -1) {\n                const line = buffer.slice(0, newlineIndex).trim();\n                buffer = buffer.slice(newlineIndex + 1);\n                // each chunk of json should begin with 'data:'\n                if (line && line.startsWith('data:')) {\n                    const json = line.slice(5).trim();\n                    try {\n                        const parsedJson = JSON.parse(json);\n                        const convertedJson = (0, convertKeys_1.convertKeysToCamelCase)(parsedJson);\n                        yield convertedJson;\n                    }\n                    catch (err) {\n                        console.debug(`Skipping malformed JSON:${line}`);\n                        continue;\n                    }\n                }\n            }\n        }\n        if (buffer.trim()) {\n            try {\n                const parsedJson = JSON.parse(buffer);\n                const convertedJson = (0, convertKeys_1.convertKeysToCamelCase)(parsedJson);\n                yield convertedJson;\n            }\n            catch (err) {\n                console.debug(`Skipping malformed JSON:${buffer}`);\n            }\n        }\n    }\n}\nexports.ChatStream = ChatStream;\n//# sourceMappingURL=chatStream.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mapHttpStatusError = exports.PineconeUnmappedHttpError = exports.PineconeNotImplementedError = exports.PineconeUnavailableError = exports.PineconeMaxRetriesExceededError = exports.PineconeInternalServerError = exports.PineconeConflictError = exports.PineconeNotFoundError = exports.PineconeAuthorizationError = exports.PineconeBadRequestError = void 0;\nconst base_1 = require(\"./base\");\nconst CONFIG_HELP = `You can find the configuration values for your project in the Pinecone developer console at https://app.pinecone.io`;\n/** This error is thrown when API requests return with status 400. Typically this is due to some aspect of the request being incorrect or invalid.\n *\n * Some examples when this error could occur:\n * - While attempting to create an index with no available quota in your project.\n * - While upserting records that do not match the `dimension` of your index\n * - While attempting to create an index using an invalid name (\"!@#$%\")\n */\nclass PineconeBadRequestError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { message } = failedRequest;\n        super(message);\n        this.name = 'PineconeBadRequestError';\n    }\n}\nexports.PineconeBadRequestError = PineconeBadRequestError;\n/**\n * This error occurs when API requests are attempted using invalid configurations such as a mispelled or revoked API key.\n *\n * Log in to https://app.pinecone.io to verify you have configured the { @link Pinecone }\n * client using the correct values.\n */\nclass PineconeAuthorizationError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url } = failedRequest;\n        if (url) {\n            super(`The API key you provided was rejected while calling ${url}. Please check your configuration values and try again. ${CONFIG_HELP}`);\n        }\n        else {\n            super(`The API key you provided was rejected. Please check your configuration values and try again. ${CONFIG_HELP}`);\n        }\n        this.name = 'PineconeAuthorizationError';\n    }\n}\nexports.PineconeAuthorizationError = PineconeAuthorizationError;\n/**\n * This error is thrown when interacting with a resource such as an index or collection\n * that cannot be found.\n */\nclass PineconeNotFoundError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url } = failedRequest;\n        if (url) {\n            super(`A call to ${url} returned HTTP status 404.`);\n        }\n        else {\n            super('The requested resource could not be found.');\n        }\n        this.name = 'PineconeNotFoundError';\n    }\n}\nexports.PineconeNotFoundError = PineconeNotFoundError;\n/**\n * This error is thrown when attempting to create a resource such as an index or\n * collection with a name that is already in use.\n * */\nclass PineconeConflictError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, message } = failedRequest;\n        if (url) {\n            super(`A call to ${url} returned HTTP status 409. ${message ? message : ''}`);\n        }\n        else {\n            super('The resource you are attempting to create already exists.');\n        }\n        this.name = 'PineconeConflictError';\n    }\n}\nexports.PineconeConflictError = PineconeConflictError;\n/**\n * This error indicates API responses are returning with status 500 and\n * something is wrong with Pinecone. Check the [status page](https://status.pinecone.io/)\n * for information about current or recent outages.\n *\n * @see [Pinecone's status page](https://status.pinecone.io/)\n */\nclass PineconeInternalServerError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, body, status } = failedRequest;\n        const intro = url\n            ? `An internal server error occurred while calling the ${url} endpoint.`\n            : '';\n        const help = `To see overall service health and learn whether this seems like a large-scale problem or one specific to your request, please go to https://status.pinecone.io/ to view our status page. If you believe the error reflects a problem with this client, please file a bug report in the github issue tracker at https://github.com/pinecone-io/pinecone-ts-client`;\n        const statusMessage = status ? `Status Code: ${status}.` : '';\n        const bodyMessage = body ? `Body: ${body}` : '';\n        super([intro, statusMessage, help, bodyMessage].join(' ').trim());\n        this.name = 'PineconeInternalServerError';\n    }\n}\nexports.PineconeInternalServerError = PineconeInternalServerError;\n/* We can choose to throw this error when we want to limit requests to the server. When instantiated, pass the\n number of retries the user has made already. */\nclass PineconeMaxRetriesExceededError extends base_1.BasePineconeError {\n    constructor(retries) {\n        const intro = `You have exceeded the max configured retries (${retries}). `;\n        const help = 'Increase the maxRetries field in the RetryOptions object to retry more times. If you believe the' +\n            ' error reflects a problem with this client, please file a bug report in the github issue tracker at https://github.com/pinecone-io/pinecone-ts-client';\n        super([intro, help].join(' ').trim());\n        this.name = 'PineconeMaxRetriesExceededError';\n    }\n}\nexports.PineconeMaxRetriesExceededError = PineconeMaxRetriesExceededError;\n/**\n * This error indicates API responses are returning with status 503 and\n * Pinecone itself is down. Check the [status page](https://status.pinecone.io/)\n * for information about current or recent outages.\n *\n * The difference between this error (503) and a PineconeInternalServerError (500) is that this error does NOT indicate\n * that the server is _unable_ to process the request, just that the server will not process the request.\n *\n * @see [Pinecone's status page](https://status.pinecone.io/)\n */\nclass PineconeUnavailableError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, body, status } = failedRequest;\n        const intro = url\n            ? `The Pinecone service (${url}) is temporarily unavailable.`\n            : '';\n        const statusMessage = status ? `Status Code: ${status}.` : '';\n        const help = `To see overall service health and learn whether this seems like a large-scale problem or one specific to your request, please go to https://status.pinecone.io/ to view our status page. If you believe the error reflects a problem with this client, please file a bug report in the github issue tracker at https://github.com/pinecone-io/pinecone-ts-client`;\n        const bodyMessage = body ? `Body: ${body}` : '';\n        super([intro, statusMessage, help, bodyMessage].join(' ').trim());\n        this.name = 'PineconeUnavailableError';\n    }\n}\nexports.PineconeUnavailableError = PineconeUnavailableError;\n/**\n * This error is thrown when you are attempting to use a feature that is\n * not implemented or unavailable to you on your current plan. Free indexes\n * only support a subset of Pinecone's capabilities, and if you are seeing\n * these exceptions then you should consult the\n * [pricing page](https://www.pinecone.io/pricing/) to see whether upgrading\n * makes sense for your use case.\n */\nclass PineconeNotImplementedError extends base_1.BasePineconeError {\n    constructor(requestInfo) {\n        const { url, message } = requestInfo;\n        if (url) {\n            super(`A call to ${url} returned HTTP status 501. ${message ? message : ''}`);\n        }\n        else {\n            super();\n        }\n        this.name = 'PineconeNotImplementedError';\n    }\n}\nexports.PineconeNotImplementedError = PineconeNotImplementedError;\n/**\n * This catch-all exception is thrown when a request error that is not\n * specifically mapped to another exception is thrown.\n */\nclass PineconeUnmappedHttpError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, status, body, message } = failedRequest;\n        const intro = url\n            ? `An unexpected error occured while calling the ${url} endpoint. `\n            : '';\n        const statusMsg = status ? `Status: ${status}. ` : '';\n        const bodyMsg = body ? `Body: ${body}` : '';\n        super([intro, message, statusMsg, bodyMsg].join(' ').trim());\n        this.name = 'PineconeUnmappedHttpError';\n    }\n}\nexports.PineconeUnmappedHttpError = PineconeUnmappedHttpError;\n/** @internal */\nconst mapHttpStatusError = (failedRequestInfo) => {\n    switch (failedRequestInfo.status) {\n        case 400:\n            return new PineconeBadRequestError(failedRequestInfo);\n        case 401:\n            return new PineconeAuthorizationError(failedRequestInfo);\n        case 403:\n            return new PineconeBadRequestError(failedRequestInfo);\n        case 404:\n            return new PineconeNotFoundError(failedRequestInfo);\n        case 409:\n            return new PineconeConflictError(failedRequestInfo);\n        case 500:\n            return new PineconeInternalServerError(failedRequestInfo);\n        case 501:\n            return new PineconeNotImplementedError(failedRequestInfo);\n        case 503:\n            return new PineconeUnavailableError(failedRequestInfo);\n        default:\n            throw new PineconeUnmappedHttpError(failedRequestInfo);\n    }\n};\nexports.mapHttpStatusError = mapHttpStatusError;\n//# sourceMappingURL=http.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFetch = void 0;\nconst errors_1 = require(\"../errors\");\nconst getFetch = (config) => {\n    if (config.fetchApi) {\n        // User-provided fetch implementation, if any, takes precedence.\n        return config.fetchApi;\n    }\n    else if (global.fetch) {\n        // If a fetch implementation is present in the global scope (will work with native fetch in Node18+, Edge runtimes,\n        // etc.), use that. This should prevent confusing failures in\n        // Next.js projects where @vercel/fetch is mandated and\n        // other implementations are stubbed out.\n        return global.fetch;\n    }\n    else {\n        // If no fetch implementation is found, throw an error.\n        throw new errors_1.PineconeConfigurationError('No global or user-provided fetch implementations found. Please supply a fetch implementation.');\n    }\n};\nexports.getFetch = getFetch;\n//# sourceMappingURL=fetch.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChatStream = exports.RetryOnServerFailure = exports.convertKeysToCamelCase = exports.getFetch = exports.buildUserAgent = exports.queryParamsStringify = exports.normalizeUrl = exports.debugLog = void 0;\nconst debugLog_1 = require(\"./debugLog\");\nObject.defineProperty(exports, \"debugLog\", { enumerable: true, get: function () { return debugLog_1.debugLog; } });\nconst normalizeUrl_1 = require(\"./normalizeUrl\");\nObject.defineProperty(exports, \"normalizeUrl\", { enumerable: true, get: function () { return normalizeUrl_1.normalizeUrl; } });\nconst queryParamsStringify_1 = require(\"./queryParamsStringify\");\nObject.defineProperty(exports, \"queryParamsStringify\", { enumerable: true, get: function () { return queryParamsStringify_1.queryParamsStringify; } });\nconst user_agent_1 = require(\"./user-agent\");\nObject.defineProperty(exports, \"buildUserAgent\", { enumerable: true, get: function () { return user_agent_1.buildUserAgent; } });\nconst fetch_1 = require(\"./fetch\");\nObject.defineProperty(exports, \"getFetch\", { enumerable: true, get: function () { return fetch_1.getFetch; } });\nconst retries_1 = require(\"./retries\");\nObject.defineProperty(exports, \"RetryOnServerFailure\", { enumerable: true, get: function () { return retries_1.RetryOnServerFailure; } });\nconst chatStream_1 = require(\"../assistant/chatStream\");\nObject.defineProperty(exports, \"ChatStream\", { enumerable: true, get: function () { return chatStream_1.ChatStream; } });\nconst convertKeys_1 = require(\"./convertKeys\");\nObject.defineProperty(exports, \"convertKeysToCamelCase\", { enumerable: true, get: function () { return convertKeys_1.convertKeysToCamelCase; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RetryOnServerFailure = void 0;\nconst errors_1 = require(\"../errors\");\n// TODO: Parameterize this class to allow for custom error handling (e.g. only retry 400 errors on Chat endpoint,\n//  but not globally\n/* Retry asynchronous operations.\n *\n * @param maxRetries - The maximum number of retries to attempt.\n * @param asyncFn - The asynchronous function to retry.\n */\nclass RetryOnServerFailure {\n    constructor(asyncFn, maxRetries) {\n        /*\n         * Calculate the delay time for retrying an operation.\n         *\n         * @param attempt: The # of times the operation has been attempted.\n         * @param baseDelay: The base delay time in milliseconds.\n         * @param maxDelay: The maximum delay time in milliseconds.\n         * @param jitterFactor: The magnitude of jitter relative to the delay.\n         */\n        this.calculateRetryDelay = (attempt, baseDelay = 200, maxDelay = 20000, jitterFactor = 0.25) => {\n            let delay = baseDelay * 2 ** attempt; // Exponential (baseDelay * 2^attempt)\n            // Apply jitter as a random percentage of the original delay; e.g.: if `jitterFactor` = 0.25 and `baseDelay` = 1000,\n            // then `jitter` is 25% of `baseDelay`\n            const jitter = delay * jitterFactor * (Math.random() - 0.5);\n            delay += jitter;\n            // Ensure delay is not negative or greater than maxDelay\n            return Math.min(maxDelay, Math.max(0, delay));\n        };\n        if (maxRetries) {\n            this.maxRetries = maxRetries;\n        }\n        else {\n            this.maxRetries = 3;\n        }\n        if (this.maxRetries > 10) {\n            throw new Error('Max retries cannot exceed 10');\n        }\n        this.asyncFn = asyncFn;\n    }\n    async execute(...args) {\n        if (this.maxRetries < 1) {\n            return this.asyncFn(...args);\n        }\n        for (let attempt = 0; attempt < this.maxRetries; attempt++) {\n            try {\n                const response = await this.asyncFn(...args);\n                // Return immediately if the response is not a retryable error\n                if (!this.isRetryError(response)) {\n                    return response;\n                }\n                throw response; // Will catch this in next line\n            }\n            catch (error) {\n                const mappedError = this.mapErrorIfNeeded(error);\n                // If the error is not retryable, throw it immediately\n                if (this.shouldStopRetrying(mappedError)) {\n                    throw mappedError;\n                }\n                // On the last retry, throw a MaxRetriesExceededError\n                if (attempt === this.maxRetries - 1) {\n                    throw new errors_1.PineconeMaxRetriesExceededError(this.maxRetries);\n                }\n                // Wait before retrying\n                await this.delay(attempt + 1);\n            }\n        }\n        // This fallback is unnecessary, but included for type safety\n        throw new errors_1.PineconeMaxRetriesExceededError(this.maxRetries);\n    }\n    isRetryError(response) {\n        if (!response) {\n            return false;\n        }\n        if (response) {\n            if (response.name &&\n                ['PineconeUnavailableError', 'PineconeInternalServerError'].includes(response.name)) {\n                return true;\n            }\n            if (response.status && response.status >= 500) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async delay(attempt) {\n        const delayTime = this.calculateRetryDelay(attempt);\n        return new Promise((resolve) => setTimeout(resolve, delayTime));\n    }\n    mapErrorIfNeeded(error) {\n        if (error?.status) {\n            return (0, errors_1.mapHttpStatusError)(error);\n        }\n        return error; // Return original error if no mapping is needed\n    }\n    shouldStopRetrying(error) {\n        if (error.status) {\n            return error.status < 500;\n        }\n        if (error.name) {\n            return (error.name !== 'PineconeUnavailableError' &&\n                error.name !== 'PineconeInternalServerError');\n        }\n        return true;\n    }\n}\nexports.RetryOnServerFailure = RetryOnServerFailure;\n//# sourceMappingURL=retries.js.map","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PineconeUnableToResolveHostError = exports.PineconeEnvironmentVarsNotSupportedError = exports.PineconeUnexpectedResponseError = exports.PineconeConfigurationError = void 0;\nconst base_1 = require(\"./base\");\nconst CONFIG_HELP = `You can find the configuration values for your project in the Pinecone developer console at https://app.pinecone.io.`;\n/**\n * This exception indicates there is a problem with the configuration values\n * you have provided to the client. The error message should contain additional\n * context about what you are missing.\n *\n * @see {@link Pinecone} for information about initializing the client.\n */\nclass PineconeConfigurationError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(`${message} ${CONFIG_HELP}`);\n        this.name = 'PineconeConfigurationError';\n    }\n}\nexports.PineconeConfigurationError = PineconeConfigurationError;\n/**\n * This exception indicates an API call that returned a response that was\n * unable to be parsed or that did not include expected fields. It's not\n * expected to ever occur.\n *\n * If you encounter this error, please [file an issue](https://github.com/pinecone-io/pinecone-ts-client/issues) so we can investigate.\n */\nclass PineconeUnexpectedResponseError extends base_1.BasePineconeError {\n    constructor(url, status, body, message) {\n        super(`Unexpected response while calling ${url}. ${message ? message + ' ' : ''}Status: ${status}. Body: ${body}`);\n        this.name = 'PineconeUnexpectedResponseError';\n    }\n}\nexports.PineconeUnexpectedResponseError = PineconeUnexpectedResponseError;\n/**\n * This error occurs when the client tries to read environment variables in\n * an environment that does not have access to the Node.js global `process.env`.\n *\n * If you are seeing this error, you will need to configure the client by passing\n * configuration values to the `Pinecone` constructor.\n *\n * ```typescript\n * import { Pinecone } from '@pinecone-database/pinecone';\n *\n * const pinecone = new Pinecone({\n *    apiKey: 'YOUR_API_KEY',\n * })\n * ```\n *\n * @see Instructions for configuring { @link Pinecone }\n */\nclass PineconeEnvironmentVarsNotSupportedError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(message);\n        this.name = 'PineconeEnvironmentVarsNotSupportedError';\n    }\n}\nexports.PineconeEnvironmentVarsNotSupportedError = PineconeEnvironmentVarsNotSupportedError;\n/**\n * This error occurs when the client is unable to resolve the database host for a given\n * index. This is unexpected to occur unless there is a problem with the Pinecone service.\n *\n * If you encounter this error, please [file an issue](https://github.com/pinecone-io/pinecone-ts-client/issues) so we can investigate.\n */\nclass PineconeUnableToResolveHostError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(message);\n        this.name = 'PineconeUnableToResolveHostError';\n    }\n}\nexports.PineconeUnableToResolveHostError = PineconeUnableToResolveHostError;\n//# sourceMappingURL=config.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeUrl = void 0;\nfunction normalizeUrl(url) {\n    if (!url || url.trim().length === 0) {\n        return;\n    }\n    if (!url.startsWith('http://') && !url.startsWith('https://')) {\n        return 'https://' + url;\n    }\n    return url;\n}\nexports.normalizeUrl = normalizeUrl;\n//# sourceMappingURL=normalizeUrl.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PineconeRequestError = exports.PineconeConnectionError = void 0;\nconst base_1 = require(\"./base\");\n/**\n * This error is thrown when the client attempts to make a\n * request and never receives any response.\n *\n * This could be due to:\n * - Network problems which prevent the request from being completed.\n * - An outage of Pinecone's APIs. See [Pinecone's status page](https://status.pinecone.io/) to find out whether there is an ongoing incident.\n *\n * The `cause` property will contain a reference to the underlying error. Inspect its value to find out more about the root cause of the error.\n * ```\n * import { Pinecone } from '@pinecone-database/pinecone';\n *\n * const p = new Pinecone({ apiKey: 'invalid-api-key-value' })\n *\n * try {\n *  await p.listIndexes();\n * } catch (e) {\n *  console.log(e.name); // PineconeConnectionError\n *  console.log(e.cause); // Error [FetchError]: The request failed and the interceptors did not return an alternative response\n *  console.log(e.cause.cause); // TypeError: fetch failed\n *  console.log(e.cause.cause.cause); // Error: getaddrinfo ENOTFOUND controller.wrong-environment.pinecone.io\n * }\n * ```\n *\n * @see [Pinecone's status page](https://status.pinecone.io/)\n * */\nclass PineconeConnectionError extends base_1.BasePineconeError {\n    constructor(e, url) {\n        let urlMessage = '';\n        if (url) {\n            urlMessage = ` while calling ${url}`;\n        }\n        super(`Request failed to reach Pinecone${urlMessage}. This can occur for reasons such as network problems that prevent the request from being completed, or a Pinecone API outage. Check your network connection, and visit https://status.pinecone.io/ to see whether any outages are ongoing.`, e);\n        this.name = 'PineconeConnectionError';\n    }\n}\nexports.PineconeConnectionError = PineconeConnectionError;\n/**\n * This error is thrown any time a request to the Pinecone API fails.\n *\n * The `cause` property will contain a reference to the underlying error. Inspect its value to find out more about the root cause.\n */\nclass PineconeRequestError extends base_1.BasePineconeError {\n    constructor(context) {\n        if (context.response) {\n            super(`Request failed during a call to ${context.init.method} ${context.url} with status ${context.response.status}`, context.error);\n        }\n        else {\n            super(`Request failed during a call to ${context.init.method} ${context.url}`, context.error);\n        }\n    }\n}\nexports.PineconeRequestError = PineconeRequestError;\n//# sourceMappingURL=request.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BasePineconeError = void 0;\nclass BasePineconeError extends Error {\n    constructor(message, cause) {\n        super(message);\n        // Set the prototype explicitly to ensure instanceof works correctly\n        Object.setPrototypeOf(this, new.target.prototype);\n        // Maintain a proper stack trace in V8 environments (Chrome and Node.js)\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, new.target);\n        }\n        this.name = this.constructor.name;\n        this.cause = cause;\n    }\n}\nexports.BasePineconeError = BasePineconeError;\n//# sourceMappingURL=base.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.debugLog = void 0;\nconst debugLog = (str) => {\n    if (typeof process !== 'undefined' &&\n        process &&\n        process.env &&\n        process.env.PINECONE_DEBUG) {\n        console.log(str);\n    }\n};\nexports.debugLog = debugLog;\n//# sourceMappingURL=debugLog.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isBrowser = exports.isEdge = void 0;\nconst isEdge = () => {\n    // This is the recommended way to detect\n    // running in the Edge Runtime according\n    // to Vercel docs.\n    return typeof EdgeRuntime === 'string';\n};\nexports.isEdge = isEdge;\nconst isBrowser = () => {\n    return typeof window !== 'undefined';\n};\nexports.isBrowser = isBrowser;\n//# sourceMappingURL=environment.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleApiError = exports.extractMessage = exports.PineconeArgumentError = exports.BasePineconeError = exports.PineconeRequestError = exports.PineconeConnectionError = exports.PineconeUnableToResolveHostError = exports.PineconeEnvironmentVarsNotSupportedError = exports.PineconeUnexpectedResponseError = exports.PineconeConfigurationError = void 0;\nvar config_1 = require(\"./config\");\nObject.defineProperty(exports, \"PineconeConfigurationError\", { enumerable: true, get: function () { return config_1.PineconeConfigurationError; } });\nObject.defineProperty(exports, \"PineconeUnexpectedResponseError\", { enumerable: true, get: function () { return config_1.PineconeUnexpectedResponseError; } });\nObject.defineProperty(exports, \"PineconeEnvironmentVarsNotSupportedError\", { enumerable: true, get: function () { return config_1.PineconeEnvironmentVarsNotSupportedError; } });\nObject.defineProperty(exports, \"PineconeUnableToResolveHostError\", { enumerable: true, get: function () { return config_1.PineconeUnableToResolveHostError; } });\n__exportStar(require(\"./http\"), exports);\nvar request_1 = require(\"./request\");\nObject.defineProperty(exports, \"PineconeConnectionError\", { enumerable: true, get: function () { return request_1.PineconeConnectionError; } });\nObject.defineProperty(exports, \"PineconeRequestError\", { enumerable: true, get: function () { return request_1.PineconeRequestError; } });\nvar base_1 = require(\"./base\");\nObject.defineProperty(exports, \"BasePineconeError\", { enumerable: true, get: function () { return base_1.BasePineconeError; } });\nvar validation_1 = require(\"./validation\");\nObject.defineProperty(exports, \"PineconeArgumentError\", { enumerable: true, get: function () { return validation_1.PineconeArgumentError; } });\nvar utils_1 = require(\"./utils\");\nObject.defineProperty(exports, \"extractMessage\", { enumerable: true, get: function () { return utils_1.extractMessage; } });\nvar handling_1 = require(\"./handling\");\nObject.defineProperty(exports, \"handleApiError\", { enumerable: true, get: function () { return handling_1.handleApiError; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertKeysToCamelCase = void 0;\n// converts keys of a json payload from snake_case to camelCase\nconst convertKeysToCamelCase = (object) => {\n    if (Array.isArray(object)) {\n        return object.map((item) => (0, exports.convertKeysToCamelCase)(item));\n    }\n    else if (object !== null && typeof object === 'object') {\n        return Object.entries(object).reduce((acc, [key, value]) => {\n            const camelKey = toCamelCase(key);\n            acc[camelKey] = (0, exports.convertKeysToCamelCase)(value);\n            return acc;\n        }, {});\n    }\n    return object; // return primitives as is\n};\nexports.convertKeysToCamelCase = convertKeysToCamelCase;\n// converts snake-case keys to camelCase\nconst toCamelCase = (str) => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n//# sourceMappingURL=convertKeys.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extractMessage = void 0;\n/** @internal */\nconst extractMessage = async (error) => {\n    let message = await error.response.text();\n    // Error response is sometimes the raw message, sometimes it's JSON\n    // so we will try to parse out the actual message text, but\n    // we wrap it in a try to avoid crashing in a way that obscures\n    // the actual error if the response format changes in the future.\n    try {\n        const messageJSON = JSON.parse(message);\n        if (messageJSON.message) {\n            message = messageJSON.message;\n        }\n    }\n    catch (e) {\n        // noop\n    }\n    return message;\n};\nexports.extractMessage = extractMessage;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.buildUserAgent = void 0;\nconst environment_1 = require(\"./environment\");\nconst packageInfo = __importStar(require(\"../version.json\"));\nconst buildUserAgent = (config) => {\n    // We always want to include the package name and version\n    // along with the langauge name to help distinguish these\n    // requests from those emitted by other clients\n    const userAgentParts = [\n        `${packageInfo.name} v${packageInfo.version}`,\n        'lang=typescript',\n    ];\n    if ((0, environment_1.isEdge)()) {\n        userAgentParts.push('Edge Runtime');\n    }\n    // If available, capture information about the Node.js version\n    if (typeof process !== 'undefined' && process && process.version) {\n        userAgentParts.push(`node ${process.version}`);\n    }\n    if (config.sourceTag) {\n        userAgentParts.push(`source_tag=${normalizeSourceTag(config.sourceTag)}`);\n    }\n    return userAgentParts.join('; ');\n};\nexports.buildUserAgent = buildUserAgent;\nconst normalizeSourceTag = (sourceTag) => {\n    if (!sourceTag) {\n        return;\n    }\n    /**\n     * normalize sourceTag\n     * 1. Lowercase\n     * 2. Limit charset to [a-z0-9_ :]\n     * 3. Trim left/right spaces\n     * 4. Condense multiple spaces to one, and replace with underscore\n     */\n    return sourceTag\n        .toLowerCase()\n        .replace(/[^a-z0-9_ :]/g, '')\n        .trim()\n        .replace(/[ ]+/g, '_');\n};\n//# sourceMappingURL=user-agent.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.queryParamsStringify = void 0;\n// Everything in this file is lifted from the generated openapi runtime.\n// I need to create a small modification of the generated queryParamStringify\n// function in order to fix an issue with array params.\n//\n// See https://github.com/pinecone-io/pinecone-ts-client/pull/74\nfunction queryParamsStringify(params, prefix = '') {\n    return Object.keys(params)\n        .map((key) => querystringSingleKey(key, params[key], prefix))\n        .filter((part) => part.length > 0)\n        .join('&');\n}\nexports.queryParamsStringify = queryParamsStringify;\nfunction querystringSingleKey(key, value, keyPrefix = '') {\n    const fullKey = keyPrefix + (keyPrefix.length ? `[${key}]` : key);\n    // This is a one line change from the default querystring implementation. Checking\n    // with `Array.isArray` instead of `value instanceof Array` allows us to get the\n    // the correct behavior when stringifying array params.\n    if (Array.isArray(value)) {\n        const multiValue = value\n            .map((singleValue) => encodeURIComponent(String(singleValue)))\n            .join(`&${encodeURIComponent(fullKey)}=`);\n        return `${encodeURIComponent(fullKey)}=${multiValue}`;\n    }\n    if (value instanceof Set) {\n        const valueAsArray = Array.from(value);\n        return querystringSingleKey(key, valueAsArray, keyPrefix);\n    }\n    if (value instanceof Date) {\n        return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;\n    }\n    if (value instanceof Object) {\n        return queryParamsStringify(value, fullKey);\n    }\n    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;\n}\n//# sourceMappingURL=queryParamsStringify.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PineconeArgumentError = void 0;\nconst base_1 = require(\"./base\");\n/**\n * This error is thrown when arguments passed to a Pinecone\n * client method fail a runtime validation.\n */\nclass PineconeArgumentError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(`${message}`);\n        this.name = 'PineconeArgumentError';\n    }\n}\nexports.PineconeArgumentError = PineconeArgumentError;\n//# sourceMappingURL=validation.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Remove all these imports as they're no longer needed\r\n// import { promises as fs } from 'fs';\r\n// import { join } from 'path';\r\n// import { fileURLToPath } from 'url';\r\n// import { dirname } from 'path';\r\n\r\nexport async function validateCodeStrings(inputCodeStrings) {\r\n    const errors = [];\r\n    const tabLabels = new Set();\r\n    const rowValues = new Set();\r\n    const codeTypes = new Set();\r\n    \r\n    // Clean up input strings by removing anything outside angle brackets\r\n    inputCodeStrings = inputCodeStrings.map(str => {\r\n        const match = str.match(/<[^>]+>/);\r\n        return match ? match[0] : str;\r\n    });\r\n\r\n    console.log(\"CleanedInput Code Strings:\", inputCodeStrings);\r\n\r\n    // Track codes by their suffixes\r\n    const vvCodes = new Set();  // codes ending in -VV\r\n    const vrCodes = new Set();  // codes ending in -VR\r\n    const rrCodes = new Set();  // codes ending in -RR\r\n    const rvCodes = new Set();  // codes ending in -RV\r\n    const evCodes = new Set();  // codes ending in -EV\r\n    const erCodes = new Set();  // codes ending in -ER\r\n\r\n    // Load valid codes from the correct location\r\n    let validCodes = new Set();\r\n    try {\r\n        const response = await fetch('../prompts/Codes.txt');\r\n        if (!response.ok) {\r\n            throw new Error('Failed to load Codes.txt file');\r\n        }\r\n        const fileContent = await response.text();\r\n        validCodes = new Set(fileContent.split('\\n')\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0));\r\n    } catch (error) {\r\n        errors.push(`Error reading Codes.txt file: ${error.message}`);\r\n        return errors;\r\n    }\r\n\r\n    // First pass: collect all row values, code types, and suffixes\r\n    for (const codeString of inputCodeStrings) {\r\n        if (!codeString.startsWith('<') || !codeString.endsWith('>')) {\r\n            errors.push(`Invalid code string format: ${codeString}`);\r\n            continue;\r\n        }\r\n        // Extract and store row IDs\r\n        if (codeString.startsWith('<BR>')) {\r\n            // Skip extraction for BR tags\r\n            continue;\r\n        }\r\n\r\n        const rowMatches = codeString.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/)[1];\r\n                // Handle spaces before/after the pipe delimiter\r\n                const parts = rowContent.split('|');\r\n                if (parts.length > 0) {\r\n                    // Extract all potential row IDs including those after asterisks\r\n                    parts.forEach(part => {\r\n                        const trimmedPart = part.trim();\r\n                        if (trimmedPart.startsWith('*')) {\r\n                            // Add the ID after the asterisk\r\n                            const afterAsterisk = trimmedPart.substring(1).trim();\r\n                            if (afterAsterisk) {\r\n                                rowValues.add(afterAsterisk);\r\n                            }\r\n                        } else if (trimmedPart) {\r\n                            // Add regular IDs\r\n                            rowValues.add(trimmedPart);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        \r\n        // console.log(rowMatches);\r\n        // Extract code type and suffix\r\n        const codeMatch = codeString.match(/<([^;]+);/);\r\n        if (codeMatch) {\r\n            const codeType = codeMatch[1].trim();\r\n            codeTypes.add(codeType);\r\n\r\n            // Check for suffixes and store them\r\n            if (codeType.endsWith('-VV')) vvCodes.add(codeType);\r\n            if (codeType.endsWith('-VR')) vrCodes.add(codeType);\r\n            if (codeType.endsWith('-RR')) rrCodes.add(codeType);\r\n            if (codeType.endsWith('-RV')) rvCodes.add(codeType);\r\n            if (codeType.endsWith('-EV')) evCodes.add(codeType);\r\n            if (codeType.endsWith('-ER')) erCodes.add(codeType);\r\n        }\r\n    }\r\n\r\n    // Validate suffix relationships\r\n    // Rule 1: -VV or -VR must have -EV or -RV\r\n    for (const code of [...vvCodes, ...vrCodes]) {\r\n        if (evCodes.size === 0 && rvCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -EV or -RV. Fix by adding another code with the correct suffix or by change to the EV/ER version of the same code.`);\r\n        }\r\n    }\r\n\r\n    // Rule 2: -RR or -RV must have -ER or -VR\r\n    for (const code of [...rrCodes, ...rvCodes]) {\r\n        if (erCodes.size === 0 && vrCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -ER or -VR`);\r\n        }\r\n    }\r\n\r\n// Second pass: detailed validation\r\nfor (const codeString of inputCodeStrings) {\r\n    // Skip BR tags completely\r\n    if (codeString === '<BR>') {\r\n        continue;\r\n    }\r\n    \r\n    const codeMatch = codeString.match(/<([^;]+);/);\r\n    if (!codeMatch) {\r\n        errors.push(`Cannot extract code type from: ${codeString}`);\r\n        continue;\r\n    }\r\n\r\n    const codeType = codeMatch[1].trim();\r\n    \r\n    // Validate code exists in description file\r\n    if (!validCodes.has(codeType)) {\r\n        errors.push(`Invalid code type: \"${codeType}\" not found in valid codes list`);\r\n    }\r\n\r\n\r\n\r\n        // Validate TAB labels\r\n        if (codeType === 'TAB') {\r\n            const labelMatch = codeString.match(/label\\d+=\"([^\"]*)\"/);\r\n            if (!labelMatch) {\r\n                errors.push('TAB code missing label parameter');\r\n                continue;\r\n            }\r\n\r\n            const label = labelMatch[1];\r\n            \r\n            if (label.length > 30) {\r\n                errors.push(`Tab label too long (max 30 chars): \"${label}\"`);\r\n            }\r\n            \r\n            if (/[&,\":;]/.test(label)) {\r\n                errors.push(`Tab label contains illegal characters (&,\":;): \"${label}\"`);\r\n            }\r\n            \r\n            if (tabLabels.has(label)) {\r\n                errors.push(`Duplicate tab label: \"${label}\"`);\r\n            }\r\n            tabLabels.add(label);\r\n        }\r\n\r\n        // Validate row format\r\n        const rowMatches = codeString.match(/row\\d+=\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+=\"([^\"]*)\"/)[1];\r\n                const parts = rowContent.split('|');\r\n                if (parts.length < 2) {\r\n                    errors.push(`Invalid row format (missing required fields): \"${rowContent}\"`);\r\n                }\r\n            });\r\n        }\r\n    } // <-- This is the end of the second pass loop\r\n\r\n    // Third pass: validate driver references after all row IDs are collected\r\n    for (const codeString of inputCodeStrings) {\r\n        const driverMatches = codeString.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (driverMatches) {\r\n            driverMatches.forEach(match => {\r\n                const driverValue = match.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/)[1].trim();\r\n                if (!rowValues.has(driverValue)) {\r\n                    errors.push(`Driver value \"${driverValue}\" not found in any row`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Convert array of errors to a single string with line breaks\r\n    return errors.join('\\n');\r\n}\r\n\r\n// Modified export function\r\nexport async function runValidation(inputStrings) {\r\n    try {\r\n        const cleanedStrings = inputStrings\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0)\r\n            .map(line => line.replace(/^'|',$|,$|^\"|\"$/g, ''));\r\n\r\n        const codeStrings = cleanedStrings.join(' ').match(/<[^>]+>/g) || [];\r\n\r\n        if (codeStrings.length === 0) {\r\n            console.error('Validation run with no codestrings - input is empty');\r\n            return ['No code strings found to validate'];\r\n        }\r\n\r\n        const validationErrors = await validateCodeStrings(codeStrings);\r\n        return validationErrors;\r\n    } catch (error) {\r\n        console.error('Validation failed:', error);\r\n        return [`Validation failed: ${error.message}`];\r\n    }\r\n}\r\n\r\n","// SpreadsheetUtils.js - Utility functions for spreadsheet operations\r\n\r\n/**\r\n * Inserts worksheets from a base64-encoded Excel file into the current workbook\r\n * @param {string} base64String - Base64-encoded string of the source Excel file\r\n * @param {string[]} [sheetNames] - Optional array of sheet names to insert. If not provided, all sheets will be inserted.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function handleInsertWorksheetsFromBase64(base64String, sheetNames = null) {\r\n    try {\r\n        // Validate base64 string\r\n        if (!base64String || typeof base64String !== 'string') {\r\n            throw new Error(\"Invalid base64 string provided\");\r\n        }\r\n\r\n        // Validate base64 format\r\n        if (!/^[A-Za-z0-9+/]*={0,2}$/.test(base64String)) {\r\n            throw new Error(\"Invalid base64 format\");\r\n        }\r\n\r\n        await Excel.run(async (context) => {\r\n            const workbook = context.workbook;\r\n            \r\n            // Check if we have the required API version\r\n            if (!workbook.insertWorksheetsFromBase64) {\r\n                throw new Error(\"This feature requires Excel API requirement set 1.13 or later\");\r\n            }\r\n            \r\n            // Insert the worksheets with error handling\r\n            try {\r\n                await workbook.insertWorksheetsFromBase64(base64String, {\r\n                    sheetNames: sheetNames\r\n                });\r\n                \r\n                await context.sync();\r\n                console.log(\"Worksheets inserted successfully\");\r\n            } catch (error) {\r\n                console.error(\"Error during worksheet insertion:\", error);\r\n                throw new Error(`Failed to insert worksheets: ${error.message}`);\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error inserting worksheets from base64:\", error);\r\n        throw error;\r\n    }\r\n} ","/**\r\n * CodeCollection.js\r\n * Functions for processing and managing code collections\r\n */\r\n\r\nimport { convertKeysToCamelCase } from \"@pinecone-database/pinecone/dist/utils\";\r\n\r\n/**\r\n * Parses code strings and creates a code collection\r\n * @param {string} inputText - The input text containing code strings\r\n * @returns {Array} - An array of code objects with type and parameters\r\n */\r\nexport function populateCodeCollection(inputText) {\r\n    try {\r\n        console.log(\"Processing input text for code collection\");\r\n        \r\n        // Initialize an empty code collection\r\n        const codeCollection = [];\r\n        \r\n        // Split the input text by newlines to process each line\r\n        const lines = inputText.split('\\n');\r\n        \r\n        for (const line of lines) {\r\n            // Skip empty lines\r\n            if (!line.trim()) continue;\r\n            \r\n            // Extract the code type and parameters\r\n            const codeMatch = line.match(/<([^;>]+);(.*?)>/);\r\n            if (!codeMatch) continue;\r\n            \r\n            const codeType = codeMatch[1].trim();\r\n            const paramsString = codeMatch[2].trim();\r\n            \r\n            // Parse parameters\r\n            const params = {};\r\n            \r\n            // Handle special case for row parameters with asterisks\r\n            const rowMatches = paramsString.matchAll(/row(\\d+)\\s*=\\s*\"([^\"]*)\"/g);\r\n            for (const match of rowMatches) {\r\n                const rowNum = match[1];\r\n                const rowValue = match[2];\r\n                params[`row${rowNum}`] = rowValue;\r\n            }\r\n            \r\n            // Parse other parameters\r\n            const paramMatches = paramsString.matchAll(/(\\w+)\\s*=\\s*\"([^\"]*)\"/g);\r\n            for (const match of paramMatches) {\r\n                const paramName = match[1].trim();\r\n                const paramValue = match[2].trim();\r\n                \r\n                // Skip row parameters as they're already handled\r\n                if (paramName.startsWith('row')) continue;\r\n                \r\n                params[paramName] = paramValue;\r\n            }\r\n            \r\n            // Add the code to the collection\r\n            codeCollection.push({\r\n                type: codeType,\r\n                params: params\r\n            });\r\n        }\r\n        \r\n        console.log(`Processed ${codeCollection.length} codes`);\r\n        return codeCollection;\r\n    } catch (error) {\r\n        console.error(\"Error in populateCodeCollection:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Exports a code collection to text format\r\n * @param {Array} codeCollection - The code collection to export\r\n * @returns {string} - A formatted text representation of the code collection\r\n */\r\nexport function exportCodeCollectionToText(codeCollection) {\r\n    try {\r\n        if (!codeCollection || !Array.isArray(codeCollection)) {\r\n            throw new Error(\"Invalid code collection\");\r\n        }\r\n        \r\n        let result = \"Code Collection:\\n\";\r\n        result += \"================\\n\\n\";\r\n        \r\n        codeCollection.forEach((code, index) => {\r\n            result += `Code ${index + 1}: ${code.type}\\n`;\r\n            result += \"Parameters:\\n\";\r\n            \r\n            // First display non-row parameters\r\n            for (const [key, value] of Object.entries(code.params)) {\r\n                if (!key.startsWith('row')) {\r\n                    result += `  ${key}: ${value}\\n`;\r\n                }\r\n            }\r\n            \r\n            // Then display row parameters\r\n            const rowParams = Object.entries(code.params)\r\n                .filter(([key]) => key.startsWith('row'))\r\n                .sort((a, b) => {\r\n                    const numA = parseInt(a[0].replace('row', ''));\r\n                    const numB = parseInt(b[0].replace('row', ''));\r\n                    return numA - numB;\r\n                });\r\n            \r\n            if (rowParams.length > 0) {\r\n                result += \"  Rows:\\n\";\r\n                for (const [key, value] of rowParams) {\r\n                    result += `    ${key}: ${value}\\n`;\r\n                }\r\n            }\r\n            \r\n            result += \"\\n\";\r\n        });\r\n        \r\n        return result;\r\n    } catch (error) {\r\n        console.error(\"Error in exportCodeCollectionToText:\", error);\r\n        throw error;\r\n    }\r\n} \r\n\r\n/**\r\n * Processes a code collection and performs operations based on code types\r\n * @param {Array} codeCollection - The code collection to process\r\n * @returns {Object} - Results of processing the code collection\r\n */\r\nexport async function runCodes(codeCollection) {\r\n    try {\r\n        console.log(\"Running code collection processing\");\r\n        \r\n        if (!codeCollection || !Array.isArray(codeCollection)) {\r\n            throw new Error(\"Invalid code collection\");\r\n        }\r\n        \r\n        // Initialize result object\r\n        const result = {\r\n            processedCodes: 0,\r\n            createdTabs: [],\r\n            errors: []\r\n        };\r\n        \r\n        // Initialize state variables (similar to VBA variables)\r\n        let currentWorksheetName = null;\r\n        const assumptionTabs = [];\r\n        \r\n        // Process each code in the collection\r\n        for (let i = 0; i < codeCollection.length; i++) {\r\n            const code = codeCollection[i];\r\n            const codeType = code.type;\r\n            \r\n            try {\r\n                // Handle MODEL code type\r\n                if (codeType === \"MODEL\") {\r\n                    // Skip for now as mentioned in the original VBA code\r\n                    console.log(\"MODEL code type encountered - skipping for now\");\r\n                    continue;\r\n                }\r\n                \r\n                // Handle TAB code type\r\n                if (codeType === \"TAB\") {\r\n                    // Accept both label1 and Label1 for backward compatibility\r\n                    const tabName = code.params.label1 || code.params.Label1 || `Tab_${i}`;\r\n                    \r\n                    // Check if worksheet exists and delete it\r\n                    await Excel.run(async (context) => {\r\n                        try {\r\n                            // Get all worksheets\r\n                            const sheets = context.workbook.worksheets;\r\n                            sheets.load(\"items/name\");\r\n                            console.log(\"sheets\", sheets);\r\n                            await context.sync();\r\n                            \r\n                            // Check if worksheet exists\r\n                            const existingSheet = sheets.items.find(sheet => sheet.name === tabName);\r\n                            console.log(\"existingSheet\", existingSheet);\r\n                            if (existingSheet) {\r\n                                // Delete the worksheet if it exists\r\n                                existingSheet.delete();\r\n                                await context.sync();\r\n                            }\r\n                            console.log(\"existingSheet deleted\");\r\n                            \r\n                            // Get the Calcs worksheet\r\n                            const sourceCalcsWS = context.workbook.worksheets.getItem(\"Calcs\");\r\n                            console.log(\"sourceCalcsWS\", sourceCalcsWS);\r\n                            \r\n                            // Create a new worksheet by copying the Calcs worksheet\r\n                            const newSheet = sourceCalcsWS.copy();\r\n                            console.log(\"newSheet created by copying Calcs worksheet\");\r\n                            \r\n                            // Rename it\r\n                            newSheet.name = tabName;\r\n                            console.log(\"newSheet renamed to\", tabName);\r\n                            \r\n                            // Set the first row\r\n                            const firstRow = 9; // Equivalent to calcsfirstrow in VBA\r\n                            console.log(\"firstRow\", firstRow);\r\n                            \r\n                            // Clear all cells including and below the first row\r\n                            const usedRange = newSheet.getUsedRange();\r\n                            usedRange.load(\"rowCount\");\r\n                            await context.sync();\r\n                            \r\n                            if (usedRange.rowCount >= firstRow) {\r\n                                const clearRange = newSheet.getRange(`${firstRow}:${usedRange.rowCount}`);\r\n                                clearRange.clear();\r\n                                console.log(`Cleared all cells from row ${firstRow} to ${usedRange.rowCount}`);\r\n                            }\r\n                            \r\n                            // Add to assumption tabs collection\r\n                            assumptionTabs.push({\r\n                                name: tabName,\r\n                                worksheet: newSheet\r\n                            });\r\n                            \r\n                            // Set the current worksheet name\r\n                            currentWorksheetName = tabName;\r\n                            \r\n                            await context.sync();\r\n                            \r\n                            result.createdTabs.push(tabName);\r\n                            console.log(\"Tab created successfully:\", tabName);\r\n                        } catch (error) {\r\n                            console.error(\"Detailed error in TAB processing:\", error);\r\n                            throw error;\r\n                        }\r\n                    }).catch(error => {\r\n                        console.error(`Error processing TAB code: ${error.message}`);\r\n                        result.errors.push({\r\n                            codeIndex: i,\r\n                            codeType: codeType,\r\n                            error: error.message\r\n                        });\r\n                    });\r\n                    \r\n                    continue;\r\n                }\r\n                \r\n                // Handle non-TAB codes\r\n                if (codeType !== \"TAB\") {\r\n                    await Excel.run(async (context) => {\r\n                        try {\r\n                            // Get the Codes worksheet\r\n                            const codesWS = context.workbook.worksheets.getItem(\"Codes\");\r\n                            console.log(\"Got Codes worksheet\");\r\n                            \r\n                            // Get the used range of the Codes worksheet\r\n                            const usedRange = codesWS.getUsedRange();\r\n                            usedRange.load(\"rowCount\");\r\n                            usedRange.load(\"columnCount\");\r\n                            await context.sync();\r\n                            console.log(`Used range: ${usedRange.rowCount} rows x ${usedRange.columnCount} columns`);\r\n                            \r\n                            // Get the current worksheet\r\n                            const currentWS = context.workbook.worksheets.getItem(currentWorksheetName);\r\n                            console.log(\"Got current worksheet:\", currentWorksheetName);\r\n                            \r\n                            // Get the last row in the current worksheet\r\n                            const lastUsedRow = currentWS.getUsedRange().getLastRow();\r\n                            lastUsedRow.load(\"rowIndex\");\r\n                            await context.sync();\r\n                            const pasteRow = lastUsedRow.rowIndex + 2; // Adjusted to paste one row lower\r\n                            console.log(\"Paste row:\", pasteRow);\r\n                            \r\n                            // Search for the code type in column D (index 3)\r\n                            let firstRow = -1;\r\n                            let lastRow = -1;\r\n                            \r\n                            // Load the values of column D\r\n                            const columnD = codesWS.getRange(`D1:D${usedRange.rowCount}`);\r\n                            columnD.load(\"values\");\r\n                            await context.sync();\r\n                            \r\n                            console.log(\"Loaded column D values\");\r\n                            \r\n                            // Check if values are loaded properly\r\n                            if (!columnD.values) {\r\n                                console.error(\"columnD.values is null or undefined\");\r\n                                throw new Error(`Failed to load values from column D in Codes worksheet`);\r\n                            }\r\n                            \r\n                            console.log(`columnD.values length: ${columnD.values.length}`);\r\n                            \r\n                            // Debug print the first few values in column D\r\n                            console.log(\"First 10 values in column D:\");\r\n                            for (let i = 0; i < Math.min(10, columnD.values.length); i++) {\r\n                                console.log(`Row ${i+1}: ${columnD.values[i][0]}`);\r\n                            }\r\n                            \r\n                            // Find the first and last row with the code\r\n                            for (let row = 0; row < columnD.values.length; row++) {\r\n                                if (columnD.values[row][0] === codeType) {\r\n                                    if (firstRow === -1) {\r\n                                        firstRow = row + 1; // Excel rows are 1-indexed\r\n                                    }\r\n                                    lastRow = row + 1;\r\n                                }\r\n                            }\r\n                            \r\n                            // Check if the code type was found\r\n                            const codeTypeFound = firstRow !== -1 && lastRow !== -1;\r\n                            \r\n                            if (!codeTypeFound) {\r\n                                console.warn(`Code type ${codeType} not found in Codes worksheet. Skipping this code.`);\r\n                                result.errors.push({\r\n                                    codeIndex: i,\r\n                                    codeType: codeType,\r\n                                    error: `Code type ${codeType} not found in Codes worksheet`\r\n                                });\r\n                                // Skip to the next code\r\n                                result.processedCodes++;\r\n                            } else {\r\n                                console.log(`Found code type ${codeType} in rows ${firstRow} to ${lastRow}`);\r\n                                \r\n                                // Try the suggested approach to copy the range with all properties\r\n                                await Excel.run(async (context) => {\r\n                                    // Get the source range\r\n                                    const sourceRange = context.workbook.worksheets.getItem(\"Codes\").getRange(`A${firstRow}:CX${lastRow}`);\r\n                                    \r\n                                    // Get the destination range\r\n                                    const destinationRange = context.workbook.worksheets.getItem(currentWorksheetName).getRange(`A${pasteRow}`);\r\n                                    \r\n                                    // Copy the range with all properties\r\n                                    destinationRange.copyFrom(sourceRange, Excel.RangeCopyType.all);\r\n                                    \r\n                                    await context.sync();\r\n                                });\r\n                                \r\n                                await context.sync();\r\n                                \r\n                                // Apply the driver and assumption inputs function to the current worksheet\r\n                                try {\r\n                                    console.log(`Applying driver and assumption inputs to worksheet: ${currentWorksheetName}`);\r\n                                    \r\n                                    // Get the current worksheet and load its properties\r\n                                    const currentWorksheet = context.workbook.worksheets.getItem(currentWorksheetName);\r\n                                    currentWorksheet.load('name');\r\n                                    await context.sync();\r\n                                    \r\n                                    await driverAndAssumptionInputs(\r\n                                        currentWorksheet,\r\n                                        pasteRow,\r\n                                        code\r\n                                    );\r\n                                    console.log(`Successfully applied driver and assumption inputs to worksheet: ${currentWorksheetName}`);\r\n                                } catch (error) {\r\n                                    console.error(`Error applying driver and assumption inputs: ${error.message}`);\r\n                                    result.errors.push({\r\n                                        codeIndex: i,\r\n                                        codeType: codeType,\r\n                                        error: `Error applying driver and assumption inputs: ${error.message}`\r\n                                    });\r\n                                }\r\n                                \r\n                                result.processedCodes++;\r\n                            }\r\n                        } catch (error) {\r\n                            console.error(`Error processing code ${codeType}:`, error);\r\n                            throw error;\r\n                        }\r\n                    }).catch(error => {\r\n                        console.error(`Error processing code ${codeType}: ${error.message}`);\r\n                        result.errors.push({\r\n                            codeIndex: i,\r\n                            codeType: codeType,\r\n                            error: error.message\r\n                        });\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                console.error(`Error processing code ${i}:`, error);\r\n                result.errors.push({\r\n                    codeIndex: i,\r\n                    codeType: codeType,\r\n                    error: error.message\r\n                });\r\n            }\r\n        }\r\n        \r\n        // Prepare the final result object, including the names of assumption tabs\r\n        const finalResult = {\r\n            ...result, // Includes processedCodes, errors\r\n            assumptionTabs: assumptionTabs.map(tab => tab.name) // Return only the names\r\n        };\r\n\r\n        console.log(\"runCodes finished. Returning:\", finalResult);\r\n        return finalResult; // Return the modified result object\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in runCodes:\", error);\r\n        // Consider how to return errors. Throwing stops execution.\r\n        // Returning them in the result allows the caller to decide.\r\n        throw error; // Or return { errors: [error.message], assumptionTabs: [] }\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function to update cell references in formulas when rows are inserted\r\n * @param {string} formula - The formula to update\r\n * @param {number} rowOffset - The number of rows to offset\r\n * @returns {string} - The updated formula\r\n */\r\nfunction updateFormulaReferences(formula, rowOffset) {\r\n    if (!formula || !formula.startsWith('=')) {\r\n        return formula;\r\n    }\r\n    \r\n    // Regular expression to match cell references (e.g., A1, B2, etc.)\r\n    const cellRefRegex = /([A-Z]+)([0-9]+)/g;\r\n    \r\n    // Replace each cell reference with an updated one\r\n    return formula.replace(cellRefRegex, (match, col, row) => {\r\n        const rowNum = parseInt(row);\r\n        return `${col}${rowNum + rowOffset}`;\r\n    });\r\n}\r\n\r\n/**\r\n * Tests if the active cell's fill color is #CCFFCC (light green)\r\n * @returns {Promise<boolean>} - True if the active cell is green, false otherwise\r\n */\r\nexport async function isActiveCellGreen() {\r\n    try {\r\n        console.log(\"Testing if cell B2 is green (#CCFFCC)\");\r\n        \r\n        return await Excel.run(async (context) => {\r\n            // Get cell B2 instead of the active cell\r\n            const cellB2 = context.workbook.worksheets.getActiveWorksheet().getRange(\"B2\");\r\n            \r\n            // Load the fill color property and address\r\n            cellB2.load([\"format/fill/color\", \"address\"]);\r\n            \r\n            // Execute the request\r\n            await context.sync();\r\n            \r\n            // Check if the color is #CCFFCC\r\n            const isGreen = cellB2.format.fill.color === \"#CCFFCC\";\r\n            \r\n            console.log(`Cell B2 address: ${cellB2.address}, color: ${cellB2.format.fill.color}, Is green: ${isGreen}`);\r\n            \r\n            return isGreen;\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error in isActiveCellGreen:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Processes driver and assumption inputs for a worksheet based on code parameters,\r\n * replicating the logic from the VBA Driver_and_Assumption_Inputs function.\r\n * @param {Excel.Worksheet} worksheet - The initial Excel worksheet object.\r\n * @param {number} calcsPasteRow - The starting row for finding the code block.\r\n * @param {Object} code - The code object with type and parameters.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function driverAndAssumptionInputs(worksheet, calcsPasteRow, code) {\r\n    try {\r\n        // --- Load worksheet name before calling helper ---\r\n        // This requires its own context if worksheet object might not have name loaded yet\r\n        let worksheetName = 'unknown';\r\n        try {\r\n             await Excel.run(async (context) => {\r\n                 worksheet.load('name');\r\n                 await context.sync();\r\n                 worksheetName = worksheet.name;\r\n                 \r\n             });\r\n         } catch(nameLoadError) {\r\n             console.error(\"Failed to load worksheet name before calling helper\", nameLoadError);\r\n             throw new Error(\"Cannot determine worksheet name to proceed.\");\r\n         }\r\n\r\n        // Define variable to store lastRow outside Excel.run scope so we can use it later\r\n        let lastRow = 1000; // Default value in case of failure\r\n\r\n        try {\r\n            // Get a fresh worksheet reference and find the last row within a proper Excel.run context\r\n            lastRow = await Excel.run(async (context) => {    \r\n                // Get worksheet reference within THIS context by name\r\n                const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\r\n                \r\n                // Get the used range of the worksheet\r\n                const usedRange = currentWorksheet.getUsedRange();\r\n\r\n                // Get the last row within the used range\r\n                const lastRowRange = usedRange.getLastRow();\r\n\r\n                // Load the rowIndex property of the last row\r\n                lastRowRange.load(\"rowIndex\");\r\n\r\n                // Synchronize the state with the Excel document\r\n                await context.sync();\r\n\r\n                // Calculate the 1-based index of the last row\r\n                const result = lastRowRange.rowIndex + 1;\r\n                console.log('lastRow', result);\r\n                \r\n                // Return the value so it's accessible outside this Excel.run\r\n                return result;\r\n            });\r\n        } catch(lastRowError) {\r\n            console.error(\"Failed to determine last row\", lastRowError);\r\n            throw new Error(\"Cannot determine last row to proceed.\");\r\n        }\r\n\r\n        // Ensure lastRow is a valid number (helper should return 1000 on error)\r\n        if (typeof lastRow !== 'number' || lastRow <= 0) {\r\n            console.error(`Last row determination failed or returned invalid value (${lastRow}). Cannot proceed safely.`);\r\n            throw new Error(\"Failed to determine a valid last row for processing.\");\r\n        }\r\n        // --- End Determine Last Row ---\r\n\r\n        // Now, proceed with the main logic within its own Excel.run\r\n        await Excel.run(async (context) => {\r\n            // Pass the determined lastRow into this context\r\n            const determinedLastRow = lastRow; \r\n            \r\n            // Get worksheet reference within THIS context by name\r\n            const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\r\n            \r\n            // USE calcsPasteRow in console log\r\n            console.log(`Processing driver/assumption inputs for worksheet: ${worksheetName}, Code: ${code.type}, Start Row: ${calcsPasteRow}, Using Last Row: ${determinedLastRow}`);\r\n\r\n            const columnSequence = ['A', 'B', 'C', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'O', 'P', 'R'];\r\n            \r\n            // Get the code value\r\n            const codeValue = code.type;\r\n\r\n            // Find the search row (first row >= calcsPasteRow where CodeValue is found in Col D)\r\n            // Note: Using determinedLastRow obtained from the helper function\r\n            let searchRow = -1; // 1-based index\r\n            let searchRange = null; \r\n            let searchRangeAddress = ''; \r\n\r\n            try {\r\n                // USE calcsPasteRow in console log\r\n                console.log(`Attempting to get searchRange. calcsPasteRow: ${calcsPasteRow}, determinedLastRow: ${determinedLastRow}`);\r\n                // USE calcsPasteRow in condition\r\n                if (typeof calcsPasteRow !== 'number' || typeof determinedLastRow !== 'number' || calcsPasteRow <= 0 || determinedLastRow < calcsPasteRow) {\r\n                     console.error(`Invalid range parameters for searchRange: calcsPasteRow=${calcsPasteRow}, determinedLastRow=${determinedLastRow}. Skipping search.`);\r\n                     searchRow = -1; \r\n                 } else {\r\n                     // USE calcsPasteRow for search range address\r\n                     searchRangeAddress = `D${calcsPasteRow}:D${determinedLastRow}`;\r\n                     console.log(`Creating searchRange with address: ${searchRangeAddress}`);\r\n                     // Need to use the worksheet object available in *this* context\r\n                     searchRange = currentWorksheet.getRange(searchRangeAddress);\r\n\r\n                     console.log(`Loading values for searchRange: ${searchRangeAddress}`);\r\n                     searchRange.load('values');\r\n                     await context.sync();\r\n                     console.log(`Successfully loaded values for searchRange: ${searchRangeAddress}`);\r\n                 }\r\n\r\n            } catch (loadError) {\r\n                 console.error(`Error loading/syncing searchRange (${searchRangeAddress}): ${loadError.message}`, loadError);\r\n                 searchRow = -1; \r\n            }\r\n\r\n            // Check if searchRange was successfully created and loaded before accessing .values\r\n            if (searchRange && searchRange.values) { // Check searchRange first!\r\n                 console.log(`SearchRange (${searchRangeAddress}) has loaded values. Searching for codeValue: ${codeValue}`);\r\n                 for (let i = 0; i < searchRange.values.length; i++) {\r\n                    if (searchRange.values[i][0] === codeValue) {\r\n                        // USE calcsPasteRow to calculate searchRow\r\n                        searchRow = calcsPasteRow + i; // Found the row (1-based)\r\n                        console.log(`Found codeValue '${codeValue}' at index ${i}, resulting searchRow: ${searchRow}`);\r\n                        break;\r\n                    }\r\n                }\r\n                 if (searchRow === -1) { // If loop finished without finding\r\n                     console.log(`CodeValue '${codeValue}' not found within the loaded values of searchRange (${searchRangeAddress}).`);\r\n                 }\r\n            } else if (searchRow !== -1) { // Only log warning if we didn't already hit the loadError or invalid params\r\n                 console.warn(`searchRange (${searchRangeAddress}) object exists but '.values' property is not available after sync. Search cannot be performed.`);\r\n                 searchRow = -1; // Ensure we trigger the \"not found\" logic\r\n            }\r\n\r\n            if (searchRow === -1) {\r\n                 console.warn(`Code type ${codeValue} not found or could not be searched for in column D (Range: ${searchRangeAddress || 'Invalid'}). Skipping inputs for this code.`);\r\n                 return; // Exit if code not found or search failed\r\n            }\r\n            console.log(`Found code ${codeValue} at search row: ${searchRow}`);\r\n\r\n\r\n            // Find the check row (first row >= searchrow where Col B is not light green #CCFFCC)\r\n            // VBA: Do While .Cells(checkrow, 2).Interior.Color = RGB(204, 255, 204)\r\n            let checkRow = searchRow;\r\n            let isGreen = true;\r\n            while (isGreen) {\r\n                const cellB = currentWorksheet.getRange(`B${checkRow}`);\r\n                cellB.load('format/fill/color');\r\n                await context.sync();\r\n                 // Handle potential errors if cell color can't be loaded\r\n                 if (cellB.format && cellB.format.fill) {\r\n                    isGreen = cellB.format.fill.color === '#CCFFCC';\r\n                 } else {\r\n                     console.warn(`Could not read fill color for cell B${checkRow}. Assuming not green.`);\r\n                     isGreen = false; // Assume not green if color cannot be determined\r\n                 }\r\n\r\n                if (isGreen) {\r\n                    checkRow++;\r\n                    // Add a safety break condition?\r\n                    if (checkRow > determinedLastRow + 50) { // Use determinedLastRow\r\n                         console.error(\"Check row exceeded expected limits. Breaking loop.\");\r\n                         throw new Error(\"Failed to find non-green check row within reasonable bounds.\");\r\n                    }\r\n                }\r\n            }\r\n            console.log(`Found check row (first non-green row in B at/after search row): ${checkRow}`);\r\n\r\n\r\n            // Process drivers, labels, and financialsdriver (relative to searchRow)\r\n            for (let k = 1; k <= 9; k++) {\r\n                const targetRow = searchRow + k - 1;\r\n                if (targetRow > determinedLastRow + 20) { // Safety check: Don't write way past the data\r\n                    console.warn(`Target row ${targetRow} seems too high. Skipping write for k=${k}.`);\r\n                    continue;\r\n                }\r\n\r\n                // Financials Driver (only for k=1)\r\n                if (k === 1 && code.params.financialsdriver) {\r\n                    const finDriverCell = currentWorksheet.getRange(`I${targetRow}`);\r\n                    finDriverCell.values = [[code.params.financialsdriver]];\r\n                    console.log(`Set financialsdriver at I${targetRow}: ${code.params.financialsdriver}`);\r\n                }\r\n\r\n                // Driver\r\n                const driverParam = code.params[`driver${k}`];\r\n                if (driverParam) {\r\n                    const driverCell = currentWorksheet.getRange(`F${targetRow}`);\r\n                    driverCell.values = [[driverParam]];\r\n                     console.log(`Set driver${k} at F${targetRow}: ${driverParam}`);\r\n                }\r\n\r\n                // Label\r\n                const labelParam = code.params[`label${k}`];\r\n                if (labelParam) {\r\n                    const labelCell = currentWorksheet.getRange(`B${targetRow}`);\r\n                    labelCell.values = [[labelParam]];\r\n                     console.log(`Set label${k} at B${targetRow}: ${labelParam}`);\r\n                }\r\n            }\r\n            await context.sync(); // Sync after loop for efficiency\r\n\r\n\r\n            // Process row items (inserting rows relative to checkRow)\r\n            let currentCheckRowForInserts = checkRow; // Use a separate variable to track cumulative insertions correctly\r\n            for (let g = 1; g <= 200; g++) { // Max 200 row parameters as in VBA\r\n                const rowParam = code.params[`row${g}`];\r\n                if (!rowParam) continue; // Skip if rowg parameter doesn't exist\r\n\r\n                 console.log(`Processing row${g}: ${rowParam}`);\r\n\r\n                const rowItems = rowParam.split('*');\r\n                const numNewRows = rowItems.length - 1; // Number of rows to insert\r\n\r\n                // Calculate the 1-based row number *before* potential insertions for this 'g' iteration\r\n                // This takes into account rows inserted by previous 'g' loops via currentCheckRowForInserts\r\n                const baseRowForThisG = currentCheckRowForInserts + g - 1;\r\n                console.log(`Base row for row${g}: ${baseRowForThisG}, numNewRows: ${numNewRows}`);\r\n\r\n                if (numNewRows > 0) {\r\n                    // Insert new rows below the baseRowForThisG\r\n                    const insertStartAddress = `${baseRowForThisG + 1}:${baseRowForThisG + numNewRows}`;\r\n                    console.log(`Inserting ${numNewRows} rows at ${insertStartAddress}`);\r\n                    const insertRange = currentWorksheet.getRange(insertStartAddress);\r\n                    insertRange.insert(Excel.InsertShiftDirection.down);\r\n                    await context.sync(); // Sync after insert\r\n\r\n                    // Sequentially copy formats and formulas from the previous row to the newly inserted ones\r\n                    // This helps ensure relative formulas are adjusted correctly step-by-step\r\n                    console.log(`Copying formats/formulas sequentially for inserted rows.`);\r\n                    for (let i = 0; i < numNewRows; i++) {\r\n                        const sourceRowNum = baseRowForThisG + i;\r\n                        const targetRowNum = baseRowForThisG + i + 1; // The newly inserted row\r\n                        const sourceRowRange = currentWorksheet.getRange(`${sourceRowNum}:${sourceRowNum}`);\r\n                        const targetRowRange = currentWorksheet.getRange(`${targetRowNum}:${targetRowNum}`);\r\n\r\n                        // Copy formats\r\n                        console.log(`  Copying formats from row ${sourceRowNum} to ${targetRowNum}`);\r\n                        targetRowRange.copyFrom(sourceRowRange, Excel.RangeCopyType.formats);\r\n\r\n                        // Copy formulas (should adjust relative references)\r\n                        console.log(`  Copying formulas from row ${sourceRowNum} to ${targetRowNum}`);\r\n                        targetRowRange.copyFrom(sourceRowRange, Excel.RangeCopyType.formulas);\r\n\r\n                        // We could use RangeCopyType.all, but separate copy ensures population step overrides values cleanly.\r\n                    }\r\n                    await context.sync(); // Sync after all copies for this 'g' group are done\r\n                    console.log(\"Finished sequential copy for inserted rows.\");\r\n                }\r\n\r\n                // Populate the row(s) (original row + inserted rows)\r\n                // This runs AFTER rows are inserted and structure (formats/formulas) is copied.\r\n                for (let yy = 0; yy <= numNewRows; yy++) {\r\n                    const currentRowNum = baseRowForThisG + yy; // 1-based row number to write to\r\n                    const splitArray = rowItems[yy].split('|');\r\n                    console.log(`Populating row ${currentRowNum} with items: ${rowItems[yy]}`);\r\n\r\n                    for (let x = 0; x < splitArray.length; x++) {\r\n                        // Check bounds for columnSequence\r\n                        if (x >= columnSequence.length) {\r\n                            console.warn(`Data item index ${x} exceeds columnSequence length (${columnSequence.length}). Skipping.`);\r\n                            continue;\r\n                        }\r\n\r\n                        const valueToWrite = splitArray[x];\r\n                        // VBA check: If splitArray(x) <> \"\" And splitArray(x) <> \"F\" Then\r\n                        // 'F' likely means \"Formula\", so we don't overwrite if the value is 'F'.\r\n                        if (valueToWrite && valueToWrite.toUpperCase() !== 'F') {\r\n                            const colLetter = columnSequence[x];\r\n                            const cellToWrite = currentWorksheet.getRange(`${colLetter}${currentRowNum}`);\r\n                            // Attempt to infer data type (basic number check)\r\n                            const numValue = Number(valueToWrite);\r\n                            if (!isNaN(numValue) && valueToWrite.trim() !== '') {\r\n                                cellToWrite.values = [[numValue]];\r\n                            } else {\r\n                                // Preserve existing value if empty string, otherwise write text\r\n                                if (valueToWrite.trim() !== '') {\r\n                                    cellToWrite.values = [[valueToWrite]];\r\n                                }\r\n                            }\r\n                            // console.log(`  Wrote '${valueToWrite}' to ${colLetter}${currentRowNum}`);\r\n                        }\r\n                    }\r\n                }\r\n                await context.sync(); // Sync after populating each 'g' group\r\n\r\n                // Adjust the base check row marker for subsequent 'g' iterations\r\n                // by adding the number of rows inserted in *this* iteration.\r\n                currentCheckRowForInserts += numNewRows;\r\n                console.log(`Finished processing row${g}. currentCheckRowForInserts is now ${currentCheckRowForInserts}`);\r\n\r\n            } // End for g loop\r\n\r\n            console.log(`Completed processing driver and assumption inputs for code ${codeValue} in worksheet ${worksheetName}`);\r\n        }); // End main Excel.run\r\n    } catch (error) {\r\n        console.error(`Error in driverAndAssumptionInputs MAIN CATCH for code '${code.type}' in worksheet '${worksheet?.name || 'unknown'}': ${error.message}`, error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Finds the last used row in a specific column of a worksheet.\r\n * @param {Excel.Worksheet} worksheet - The worksheet to search in.\r\n * @param {string} columnLetter - The column letter (e.g., \"B\").\r\n * @returns {Promise<number>} - The 1-based index of the last used row, or 0 if the column is empty or an error occurs.\r\n */\r\nasync function getLastUsedRow(worksheet, columnLetter) {\r\n    // Re-use worksheet object passed into the function within this Excel.run\r\n    // Need context from the caller's Excel.run or wrap this in its own\r\n    console.log(`Attempting to get last used row for column ${columnLetter} in sheet ${worksheet.name}`);\r\n    try {\r\n        // It's safer to re-get the worksheet by name if this is called outside the main loop's context\r\n        // However, if called within the loop's context, using the passed object is fine.\r\n        // For simplicity assuming it's called within a valid context for now.\r\n        const fullColumn = worksheet.getRange(`${columnLetter}:${columnLetter}`);\r\n        const usedRange = fullColumn.getUsedRange(true); // Use 'true' for valuesOnly parameter\r\n        const lastCell = usedRange.getLastCell();\r\n        lastCell.load(\"rowIndex\");\r\n        await worksheet.context.sync(); // Use the context associated with the worksheet object\r\n        const lastRowIndex = lastCell.rowIndex + 1; // Convert 0-based index to 1-based row number\r\n        console.log(`Last used row in column ${columnLetter} is ${lastRowIndex}`);\r\n        return lastRowIndex;\r\n    } catch (error) {\r\n        // Handle cases where the column might be completely empty or other errors\r\n        if (error.code === \"ItemNotFound\" || error.code === \"GeneralException\") {\r\n            console.warn(`Could not find used range or last cell in column ${columnLetter} of sheet ${worksheet.name}. Assuming empty or header only (returning 0).`);\r\n            return 0; // Return 0 if column is empty or error occurs\r\n        }\r\n        console.error(`Error in getLastUsedRow for column ${columnLetter} on sheet ${worksheet.name}:`, error);\r\n        // It's often better to let the caller handle the error if it's unexpected.\r\n        throw error; // Re-throw other errors\r\n    }\r\n    // Note: Removed the inner Excel.run as it complicates context management.\r\n    // This function now expects to be called *within* an existing Excel.run context.\r\n}\r\n\r\n/**\r\n * Adjusts driver references in column AE based on lookups in column A.\r\n * Replicates the core logic of VBA Adjust_Drivers.\r\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\r\n * @param {number} lastRow - The last row to process (inclusive).\r\n */\r\nasync function adjustDriversJS(worksheet, lastRow) {\r\n    const START_ROW = 9;\r\n    const DRIVER_CODE_COL = \"F\"; // Column containing the driver code to look up\r\n    const LOOKUP_COL = \"A\";      // Column to search for the driver code\r\n    const TARGET_COL = \"AE\";     // Column where the result address string is written\r\n\r\n    console.log(`Running adjustDriversJS for sheet: ${worksheet.name} from row ${START_ROW} to ${lastRow}`);\r\n\r\n    // Ensure lastRow is valid before proceeding\r\n    if (lastRow < START_ROW) {\r\n        console.warn(`adjustDriversJS: lastRow (${lastRow}) is less than START_ROW (${START_ROW}). Skipping.`);\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // Define the ranges to load\r\n        const driverCodeRangeAddress = `${DRIVER_CODE_COL}${START_ROW}:${DRIVER_CODE_COL}${lastRow}`;\r\n        const lookupRangeAddress = `${LOOKUP_COL}${START_ROW}:${LOOKUP_COL}${lastRow}`;\r\n        const driverCodeRange = worksheet.getRange(driverCodeRangeAddress);\r\n        const lookupRange = worksheet.getRange(lookupRangeAddress);\r\n\r\n        // Load values from both columns\r\n        driverCodeRange.load(\"values\");\r\n        lookupRange.load(\"values\");\r\n        await worksheet.context.sync(); // Sync to get the values\r\n\r\n        const driverCodeValues = driverCodeRange.values;\r\n        const lookupValues = lookupRange.values;\r\n\r\n        // Create a map for efficient lookup: { lookupValue: rowIndex }\r\n        // Note: rowIndex here is the 1-based Excel row number\r\n        const lookupMap = new Map();\r\n        for (let i = 0; i < lookupValues.length; i++) {\r\n            const value = lookupValues[i][0];\r\n            // Only add non-empty values to the map. Handle potential duplicates?\r\n            // VBA's .Find typically finds the first match. Map naturally stores the last encountered.\r\n            if (value !== null && value !== \"\") {\r\n                 // The row number in Excel is START_ROW + index\r\n                lookupMap.set(value, START_ROW + i);\r\n            }\r\n        }\r\n        console.log(`Built lookup map from ${LOOKUP_COL}${START_ROW}:${LOOKUP_COL}${lastRow} with ${lookupMap.size} entries.`);\r\n\r\n        // Prepare the output values for the target column AE\r\n        // Initialize with nulls or empty strings to clear previous values potentially\r\n        const outputValues = []; // Array of arrays for Excel range: [[value1], [value2], ...]\r\n        let foundCount = 0;\r\n        let notFoundCount = 0;\r\n\r\n        for (let i = 0; i < driverCodeValues.length; i++) {\r\n            const driverCode = driverCodeValues[i][0];\r\n            const currentRow = START_ROW + i; // Current Excel row being processed\r\n\r\n            if (driverCode !== null && driverCode !== \"\") {\r\n                if (lookupMap.has(driverCode)) {\r\n                    const foundRow = lookupMap.get(driverCode);\r\n                    const targetAddress = `${TARGET_COL}${foundRow}`;\r\n                    outputValues.push([targetAddress]); // Store as [[value]] for range write\r\n                    foundCount++;\r\n                    // console.log(`Row ${currentRow} (${DRIVER_CODE_COL}): Found '${driverCode}' in ${LOOKUP_COL} at row ${foundRow}. Setting ${TARGET_COL}${currentRow} = '${targetAddress}'`);\r\n                } else {\r\n                    // Value in F not found in A\r\n                    console.warn(`adjustDriversJS: Driver code '${driverCode}' from cell ${DRIVER_CODE_COL}${currentRow} not found in range ${lookupRangeAddress}.`);\r\n                    outputValues.push([null]); // Or [\"\"] or keep existing? VBA doesn't explicitly clear. Using null.\r\n                    notFoundCount++;\r\n                }\r\n            } else {\r\n                // Empty cell in F, write null to corresponding AE cell\r\n                outputValues.push([null]);\r\n            }\r\n        }\r\n\r\n        // Write the results back to column AE\r\n        if (outputValues.length > 0) {\r\n            const targetRangeAddress = `${TARGET_COL}${START_ROW}:${TARGET_COL}${lastRow}`;\r\n            const targetRange = worksheet.getRange(targetRangeAddress);\r\n            console.log(`Writing ${foundCount} results (${notFoundCount} not found) to ${targetRangeAddress}`);\r\n            targetRange.values = outputValues;\r\n            // Sync will happen in the caller's context\r\n        } else {\r\n             console.log(`adjustDriversJS: No values to write to ${TARGET_COL}.`);\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(`Error in adjustDriversJS for sheet ${worksheet.name}:`, error);\r\n        // Decide if error should be re-thrown to stop the whole process\r\n        // throw error;\r\n    }\r\n    // No context.sync() here - it should be handled by the calling function (processAssumptionTabs)\r\n}\r\n\r\n/**\r\n * Replaces INDIRECT functions in a specified column range with their evaluated values.\r\n * Mimics the VBA Replace_Indirects logic using batched range value lookups.\r\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\r\n * @param {number} lastRow - The last row to process.\r\n */\r\nasync function replaceIndirectsJS(worksheet, lastRow) {\r\n    const START_ROW = 9;\r\n    const TARGET_COL = \"AE\";\r\n\r\n    console.log(`Running replaceIndirectsJS for sheet: ${worksheet.name} from row ${START_ROW} to ${lastRow}`);\r\n\r\n    if (lastRow < START_ROW) {\r\n        console.warn(`replaceIndirectsJS: lastRow (${lastRow}) is less than START_ROW (${START_ROW}). Skipping.`);\r\n        return;\r\n    }\r\n\r\n    const targetRangeAddress = `${TARGET_COL}${START_ROW}:${TARGET_COL}${lastRow}`;\r\n    const targetRange = worksheet.getRange(targetRangeAddress);\r\n\r\n    try {\r\n        // 1. Load formulas from the target range\r\n        targetRange.load(\"formulas\");\r\n        await worksheet.context.sync();\r\n\r\n        const originalFormulas = targetRange.formulas; // 2D array [[f1], [f2], ...]\r\n        const referencesToLookup = new Map(); // Map<string, { range: Excel.Range | null, value: any }>\r\n        const formulaData = []; // Array<{ originalFormula: string, index: number }>\r\n\r\n        // 2. First Pass: Identify all unique INDIRECT arguments\r\n        console.log(\"Replace_Indirects: Pass 1 - Identifying INDIRECT arguments\");\r\n        for (let i = 0; i < originalFormulas.length; i++) {\r\n            let formula = originalFormulas[i][0];\r\n            formulaData.push({ originalFormula: formula, index: i }); // Store original formula and index\r\n\r\n            if (typeof formula === 'string') {\r\n                // Use a loop to find all INDIRECT occurrences in a single formula\r\n                let searchStartIndex = 0;\r\n                while (true) {\r\n                    const upperFormula = formula.toUpperCase();\r\n                    const indirectStartIndex = upperFormula.indexOf(\"INDIRECT(\", searchStartIndex);\r\n\r\n                    // Stop if no more INDIRECT found or if it might be part of INDEX\r\n                    if (indirectStartIndex === -1 || upperFormula.includes(\"INDEX(\")) {\r\n                        break;\r\n                    }\r\n\r\n                    // Find the matching closing parenthesis (simple approach)\r\n                    const parenStartIndex = indirectStartIndex + \"INDIRECT(\".length;\r\n                    const parenEndIndex = formula.indexOf(\")\", parenStartIndex);\r\n\r\n                    if (parenEndIndex === -1) {\r\n                        console.warn(`Row ${START_ROW + i}: Malformed INDIRECT found in formula: ${formula}`);\r\n                        break; // Cannot process this INDIRECT\r\n                    }\r\n\r\n                    const argString = formula.substring(parenStartIndex, parenEndIndex).trim();\r\n\r\n                    // Validate argString looks like a cell/range reference (basic check)\r\n                    // This helps avoid trying to load ranges like \"Sheet1!A:A\" which might fail or be slow\r\n                    if (argString && /^[A-Za-z0-9_!$:'\". ]+$/.test(argString) && !referencesToLookup.has(argString)) {\r\n                         console.log(`  Found reference to lookup: ${argString}`);\r\n                         referencesToLookup.set(argString, { range: null, value: undefined }); // Placeholder\r\n                    }\r\n\r\n                    // Continue searching after this INDIRECT\r\n                    searchStartIndex = parenEndIndex + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        // 3. Batch Load Values for identified references\r\n        console.log(`Replace_Indirects: Loading values for ${referencesToLookup.size} unique references.`);\r\n        if (referencesToLookup.size > 0) {\r\n            for (const [refString, data] of referencesToLookup.entries()) {\r\n                try {\r\n                    // Attempt to get the range and load its value\r\n                    data.range = worksheet.getRange(refString);\r\n                    // Load values. Consider loading formulas too if INDIRECT might point to a formula cell.\r\n                    // Loading numberFormat might help distinguish between 0 and empty.\r\n                    data.range.load([\"values\", \"text\"]); // Load text to handle \"DELETE\" easily\r\n                } catch (rangeError) {\r\n                    console.warn(`Replace_Indirects: Error getting range for reference \"${refString}\". It might be invalid or on another sheet.`, rangeError.debugInfo || rangeError.message);\r\n                     // Keep data.range as null, will be handled later\r\n                    referencesToLookup.set(refString, { range: null, value: '#REF!' }); // Mark as error\r\n                }\r\n            }\r\n            await worksheet.context.sync(); // Sync all loaded values\r\n\r\n            // Populate the values in the map\r\n            for (const [refString, data] of referencesToLookup.entries()) {\r\n                 if (data.range) { // If range was successfully retrieved\r\n                     try {\r\n                         // Use .text to directly compare with \"DELETE\"\r\n                         // Use .values for the actual numeric/boolean value if not \"DELETE\"\r\n                        const cellText = data.range.text[0][0];\r\n                        if (cellText === \"DELETE\") {\r\n                            data.value = \"0\"; // Replace \"DELETE\" with \"0\" string as per VBA\r\n                        } else {\r\n                             // Use the actual value (could be string, number, boolean)\r\n                             // Prefer values[0][0] as it respects data types better than text\r\n                             data.value = data.range.values[0][0];\r\n                        }\r\n                     } catch (valueError) {\r\n                         console.warn(`Replace_Indirects: Error reading value for reference \"${refString}\" after sync.`, valueError.debugInfo || valueError.message);\r\n                         data.value = '#VALUE!'; // Or another suitable error indicator\r\n                     }\r\n                 }\r\n                 // If data.range was null or value fetch failed, data.value remains '#REF!' or '#VALUE!'\r\n            }\r\n             console.log(\"Replace_Indirects: Finished loading reference values.\");\r\n        }\r\n\r\n\r\n        // 4. Second Pass: Replace INDIRECT with looked-up values\r\n        console.log(\"Replace_Indirects: Pass 2 - Replacing INDIRECT calls.\");\r\n        const newFormulas = []; // Array of arrays: [[newF1], [newF2], ...]\r\n        for (const item of formulaData) {\r\n            let currentFormula = item.originalFormula;\r\n\r\n            if (typeof currentFormula === 'string') {\r\n                let loopCount = 0; // Safety break\r\n                const MAX_LOOPS = 20; // Prevent infinite loops for complex/circular cases\r\n\r\n                while (loopCount < MAX_LOOPS) {\r\n                    const upperFormula = currentFormula.toUpperCase();\r\n                    const indirectStartIndex = upperFormula.indexOf(\"INDIRECT(\");\r\n\r\n                    if (indirectStartIndex === -1 || upperFormula.includes(\"INDEX(\")) {\r\n                        break; // No more INDIRECTs (or INDEX present)\r\n                    }\r\n\r\n                    const parenStartIndex = indirectStartIndex + \"INDIRECT(\".length;\r\n                    const parenEndIndex = currentFormula.indexOf(\")\", parenStartIndex);\r\n\r\n                    if (parenEndIndex === -1) {\r\n                         // Already warned in pass 1, just break here\r\n                        break;\r\n                    }\r\n\r\n                    const indString = currentFormula.substring(indirectStartIndex, parenEndIndex + 1); // The full INDIRECT(...)\r\n                    const argString = currentFormula.substring(parenStartIndex, parenEndIndex).trim();\r\n\r\n                    let directRef = '#REF!'; // Default if lookup fails\r\n                     if (referencesToLookup.has(argString)) {\r\n                         directRef = referencesToLookup.get(argString).value;\r\n                     } else {\r\n                         // Argument wasn't identified/loaded (maybe invalid?)\r\n                         console.warn(`Row ${START_ROW + item.index}: INDIRECT argument \"${argString}\" not found in lookup map during replacement.`);\r\n                     }\r\n\r\n                    // Handle potential null/undefined values from lookup - treat as 0? VBA doesn't explicitly handle this.\r\n                    // Let's treat null/undefined as 0 for replacement to avoid inserting 'null' or 'undefined' into formulas.\r\n                     // Empty string \"\" should probably remain \"\" unless it was \"DELETE\".\r\n                     if (directRef === null || typeof directRef === 'undefined') {\r\n                         directRef = 0; // Replace null/undefined with numeric 0\r\n                     } else if (directRef === \"\") {\r\n                          // Keep empty string as empty string unless it was originally \"DELETE\"\r\n                          // The map handles \"DELETE\" -> \"0\" already\r\n                     } else if (typeof directRef === 'string') {\r\n                         // If the resolved value is a string, potentially needs quoting if replacing in a formula context?\r\n                         // VBA seems to just concatenate the value directly. Let's follow that.\r\n                         // Example: =SUM(INDIRECT(\"A1\")) where A1 contains \"B2\" becomes =SUM(B2)\r\n                         // Example: =CONCATENATE(\"Result: \",INDIRECT(\"A1\")) where A1 contains \"Success\" becomes =CONCATENATE(\"Result: \",\"Success\") - requires quotes?\r\n                         // VBA appears to handle this implicitly. JS replace won't add quotes.\r\n                         // Let's test behavior, may need adjustment if it breaks formulas expecting strings.\r\n                         // For now, direct replacement. Consider adding quotes if `directRef` is text AND the context requires it.\r\n                     } else if (typeof directRef === 'boolean') {\r\n                         directRef = directRef ? 'TRUE' : 'FALSE'; // Convert boolean to formula text\r\n                     }\r\n                     // Numeric values are fine as is.\r\n\r\n                    // Perform the replacement. Use replace directly on the found indString.\r\n                    currentFormula = currentFormula.replace(indString, String(directRef));\r\n                    loopCount++;\r\n\r\n                } // End while loop for single formula processing\r\n\r\n                if (loopCount === MAX_LOOPS) {\r\n                    console.warn(`Row ${START_ROW + item.index}: Max replacement loops reached for formula. Result might be incomplete: ${currentFormula}`);\r\n                }\r\n            }\r\n            // Add the processed formula (or original if not string/no INDIRECT) to the result array\r\n            newFormulas.push([currentFormula]);\r\n\r\n        } // End for loop processing all formulas\r\n\r\n        // 5. Write the modified formulas back to the range\r\n        console.log(`Replace_Indirects: Writing ${newFormulas.length} updated formulas back to ${targetRangeAddress}`);\r\n        targetRange.formulas = newFormulas;\r\n\r\n        // Sync is handled by the caller (processAssumptionTabs)\r\n\r\n    } catch (error) {\r\n        console.error(`Error in replaceIndirectsJS for sheet ${worksheet.name} range ${targetRangeAddress}:`, error.debugInfo || error);\r\n        // Re-throw the error to allow the calling function to handle it\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Placeholder for Populate_Financials VBA logic.\r\n * Populates the \"Financials\" sheet based on codes in the assumption sheet.\r\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\r\n * @param {number} lastRow - The last row to process in the assumption sheet.\r\n * @param {Excel.Worksheet} financialsSheet - The \"Financials\" worksheet (within the same Excel.run context).\r\n */\r\nasync function populateFinancialsJS(worksheet, lastRow, financialsSheet) {\r\n    console.log(`Running populateFinancialsJS for sheet: ${worksheet.name} (lastRow: ${lastRow}) -> ${financialsSheet.name}`);\r\n    // This function MUST be called within an Excel.run context.\r\n\r\n    const CALCS_FIRST_ROW = 9; // Same as START_ROW elsewhere\r\n    const ASSUMPTION_CODE_COL = \"C\"; // Column with code to lookup on assumption sheet\r\n    const ASSUMPTION_LINK_COL_B = \"B\";\r\n    const ASSUMPTION_LINK_COL_D = \"D\";\r\n    // Column on assumption sheet to link for monthly data\r\n    const ASSUMPTION_MONTHS_START_COL = \"AE\";\r\n\r\n    const FINANCIALS_CODE_COLUMN = \"I\"; // Column to search for code on Financials sheet\r\n    const FINANCIALS_TARGET_COL_B = \"B\";\r\n    const FINANCIALS_TARGET_COL_D = \"D\";\r\n    const FINANCIALS_ANNUALS_START_COL = \"J\"; // Annuals start here\r\n    const FINANCIALS_MONTHS_START_COL = \"AE\"; // Months start here\r\n\r\n    // --- Updated Column Definitions ---\r\n    const ANNUALS_END_COL = \"P\";       // Annuals end here\r\n    const MONTHS_END_COL = \"CX\";       // Months end here\r\n    // --- End Updated Column Definitions ---\r\n\r\n    // Formatting constants\r\n    // const PURPLE_COLOR = \"#800080\"; // RGB(128, 0, 128) - Removed as Actuals section is removed\r\n    const GREEN_COLOR = \"#008000\";  // RGB(0, 128, 0)\r\n    const CURRENCY_FORMAT = '_(* $#,##0_);_(* $(#,##0);_(* \"$\" -_);_(@_)';\r\n\r\n    // Ensure lastRow is valid\r\n    if (lastRow < CALCS_FIRST_ROW) {\r\n        console.warn(`populateFinancialsJS: lastRow (${lastRow}) is less than CALCS_FIRST_ROW (${CALCS_FIRST_ROW}). Skipping.`);\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // 1. Load data from Assumption Sheet\r\n        console.log(`populateFinancialsJS: Loading assumption data up to row ${lastRow}`);\r\n        const assumptionCodeRange = worksheet.getRange(`${ASSUMPTION_CODE_COL}${CALCS_FIRST_ROW}:${ASSUMPTION_CODE_COL}${lastRow}`);\r\n        // No need to load B, D, AE addresses/values here anymore if only used for linking\r\n\r\n        assumptionCodeRange.load(\"values\");\r\n\r\n        // 2. Load data from Financials Sheet (Find last row in code column I)\r\n        const financialsSearchCol = financialsSheet.getRange(`${FINANCIALS_CODE_COLUMN}:${FINANCIALS_CODE_COLUMN}`);\r\n        const financialsUsedRange = financialsSearchCol.getUsedRange(true);\r\n        financialsUsedRange.load(\"rowCount\");\r\n        // It's okay to sync assumption and initial financials loads together\r\n        // await worksheet.context.sync(); // Removed intermediate sync\r\n\r\n        let financialsLastRow = 0;\r\n        // Sync financials rowCount load before calculating financialsLastRow\r\n        await worksheet.context.sync();\r\n        if (financialsUsedRange.rowCount > 0) {\r\n           try {\r\n              const lastCell = financialsUsedRange.getLastCell();\r\n              lastCell.load(\"rowIndex\");\r\n               await worksheet.context.sync();\r\n              financialsLastRow = lastCell.rowIndex + 1;\r\n           } catch(e) {\r\n               console.warn(`Could not get last cell directly for Financials col ${FINANCIALS_CODE_COLUMN}. Error: ${e.message}. Attempting fallback range loading.`);\r\n               try {\r\n                   const fallbackRange = financialsSheet.getRange(`${FINANCIALS_CODE_COLUMN}1:${FINANCIALS_CODE_COLUMN}10000`);\r\n                   fallbackRange.load(\"values\");\r\n                   await worksheet.context.sync();\r\n                   for (let i = fallbackRange.values.length - 1; i >= 0; i--) {\r\n                       if (fallbackRange.values[i][0] !== null && fallbackRange.values[i][0] !== \"\") {\r\n                           financialsLastRow = i + 1;\r\n                           break;\r\n                       }\r\n                   }\r\n                   if (financialsLastRow === 0) console.warn(`Fallback range load for Financials col ${FINANCIALS_CODE_COLUMN} also yielded no data.`);\r\n               } catch (fallbackError) {\r\n                    console.error(`Error during fallback range loading for Financials col ${FINANCIALS_CODE_COLUMN}:`, fallbackError);\r\n                    financialsLastRow = 0;\r\n               }\r\n           }\r\n        }\r\n        console.log(`Financials last relevant row in column ${FINANCIALS_CODE_COLUMN}: ${financialsLastRow}`);\r\n\r\n        // 3. Create Map of Financials Codes (Col I) -> Row Number\r\n        const financialsCodeMap = new Map();\r\n        if (financialsLastRow > 0) {\r\n            const financialsCodeRange = financialsSheet.getRange(`${FINANCIALS_CODE_COLUMN}1:${FINANCIALS_CODE_COLUMN}${financialsLastRow}`);\r\n            financialsCodeRange.load(\"values\");\r\n            await worksheet.context.sync(); // Sync map data load\r\n            for (let i = 0; i < financialsCodeRange.values.length; i++) {\r\n                const code = financialsCodeRange.values[i][0];\r\n                if (code !== null && code !== \"\") {\r\n                    financialsCodeMap.set(code, i + 1);\r\n                }\r\n            }\r\n            console.log(`Built Financials code map with ${financialsCodeMap.size} entries.`);\r\n        } else {\r\n            console.warn(`Financials sheet column ${FINANCIALS_CODE_COLUMN} appears empty or last row not found. No codes loaded.`);\r\n        }\r\n\r\n        // 4. Identify rows to insert and prepare task data\r\n        const tasks = [];\r\n        console.log(\"populateFinancialsJS: Syncing assumption codes load...\");\r\n        await worksheet.context.sync(); // Sync needed for assumptionCodeRange.values\r\n\r\n        const assumptionCodes = assumptionCodeRange.values;\r\n        console.log(`populateFinancialsJS: Processing ${assumptionCodes?.length ?? 0} assumption rows.`);\r\n\r\n        // --- REMOVED Debug logging for row 17 values/addresses ---\r\n\r\n        for (let i = 0; i < (assumptionCodes?.length ?? 0); i++) {\r\n            const code = assumptionCodes[i][0];\r\n            const assumptionRow = CALCS_FIRST_ROW + i; // This is the correct Excel row number\r\n\r\n            if (code !== null && code !== \"\") {\r\n                if (financialsCodeMap.has(code)) {\r\n                    const targetRow = financialsCodeMap.get(code);\r\n\r\n                    // --- Manually construct the address strings ---\r\n                    const cellAddressB = `${ASSUMPTION_LINK_COL_B}${assumptionRow}`;\r\n                    const cellAddressD = `${ASSUMPTION_LINK_COL_D}${assumptionRow}`;\r\n                    const cellAddressMonths = `${ASSUMPTION_MONTHS_START_COL}${assumptionRow}`;\r\n\r\n                    // Construct the full formula links directly\r\n                    const formulaLinkB = `='${worksheet.name}'!${cellAddressB}`;\r\n                    const formulaLinkD = `='${worksheet.name}'!${cellAddressD}`;\r\n                    const formulaLinkMonths = `='${worksheet.name}'!${cellAddressMonths}`;\r\n\r\n                    // --- REMOVED getSimpleAddress helper function and related checks ---\r\n                    console.log(`  Task Prep: Row ${assumptionRow}, Code ${code}`); // Simplified log\r\n\r\n                    tasks.push({\r\n                        targetRow: targetRow,\r\n                        assumptionRow: assumptionRow,\r\n                        code: code,\r\n                        addressB: formulaLinkB,     // Use the constructed formula link\r\n                        addressD: formulaLinkD,     // Use the constructed formula link\r\n                        addressMonths: formulaLinkMonths // Use the constructed formula link\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (tasks.length === 0) {\r\n            console.log(\"No matching codes found. Nothing to insert or populate.\");\r\n            return;\r\n        }\r\n\r\n        // 5. Sort tasks by targetRow DESCENDING\r\n        tasks.sort((a, b) => b.targetRow - a.targetRow);\r\n        console.log(`Sorted ${tasks.length} tasks for insertion.`);\r\n        // --- DEBUG: Log the tasks array --- \r\n        // console.log(\"Tasks array (sorted desc by targetRow):\", JSON.stringify(tasks)); // REMOVED DEBUG\r\n        // --- END DEBUG ---\r\n\r\n        // 6. Perform Insertions (bottom-up)\r\n        console.log(\"Performing row insertions...\");\r\n        for (const task of tasks) { // Uses the DESCENDING sorted tasks\r\n            financialsSheet.getRange(`${task.targetRow}:${task.targetRow}`).insert(Excel.InsertShiftDirection.down);\r\n            // *** It's generally more efficient to sync less often, but syncing after each insert\r\n            // ensures the row model is updated for potential complex dependencies if they existed.\r\n            // Keep sync here for now unless performance becomes an issue. ***\r\n            // await worksheet.context.sync(); // Sync after EACH insertion -- REMOVED THIS LINE\r\n        }\r\n        await worksheet.context.sync(); // Sync AFTER all insertions are queued\r\n        console.log(\"Finished row insertions.\");\r\n\r\n        // Pre-calculate the final adjusted row for each task after all insertions\r\n        console.log(\"Calculating final adjusted rows for population/autofill...\");\r\n        // Get unique original target rows, sorted ascending\r\n        const originalTargetRowsAsc = [...new Set(tasks.map(t => t.targetRow))].sort((a, b) => a - b);\r\n        const taskAdjustedRows = new Map(); // Map to store { assumptionRow: adjustedRow }\r\n        let totalShift = 0; // Total shift accumulated from previous rows\r\n\r\n        // --- DEBUG: Log originalTargetRowsAsc ---\r\n        // console.log(\"Original Target Rows (unique, asc):\", originalTargetRowsAsc); // REMOVED DEBUG\r\n        // --- END DEBUG ---\r\n\r\n        originalTargetRowsAsc.forEach(uniqueRow => {\r\n            // --- DEBUG: Log current uniqueRow ---\r\n            // console.log(`Processing uniqueRow: ${uniqueRow}`); // REMOVED DEBUG\r\n            // --- END DEBUG ---\r\n\r\n            // Find all tasks that originally targeted this unique row\r\n            // CORRECTED PROPERTY NAME IN FILTER: task.targetRow instead of task.originalTargetRow\r\n            const tasksAtThisRow = tasks.filter(task => task.targetRow === uniqueRow);\r\n\r\n            // --- DEBUG: Log tasks found for this uniqueRow ---\r\n            // console.log(`  Tasks found for uniqueRow ${uniqueRow}:`, JSON.stringify(tasksAtThisRow)); // REMOVED DEBUG\r\n            // --- END DEBUG ---\r\n\r\n            // Optional: Sort tasksAtThisRow by assumptionRow for deterministic order, though might not be strictly necessary\r\n            // tasksAtThisRow.sort((a, b) => a.assumptionRow - b.assumptionRow);\r\n\r\n            let currentAdjustedRowForGroup = uniqueRow + totalShift; // Starting adjusted row for this group\r\n\r\n            // Assign consecutive adjusted rows to each task in this group\r\n            tasksAtThisRow.forEach(task => {\r\n                taskAdjustedRows.set(task.assumptionRow, currentAdjustedRowForGroup); // Use assumptionRow as key\r\n                console.log(`  Mapping: Code ${task.code}, Assumption Row ${task.assumptionRow}, Original Target ${uniqueRow}, Final Adjusted Row ${currentAdjustedRowForGroup}`);\r\n                currentAdjustedRowForGroup++; // Increment for the next task inserting at the same original spot\r\n            });\r\n\r\n            // Update the total shift for subsequent unique rows\r\n            totalShift += tasksAtThisRow.length;\r\n        });\r\n\r\n        // --- DEBUG: Log the contents of the map --- \r\n        // console.log(\"taskAdjustedRows map contents:\", taskAdjustedRows); // REMOVED DEBUG\r\n        // --- END DEBUG ---\r\n\r\n        // 7. Populate and Format inserted rows using ADJUSTED row numbers\r\n        console.log(\"Populating inserted rows (using adjusted rows)...\");\r\n        for (const task of tasks) { // Iterates descending sorted tasks (order doesn't strictly matter here, but using the same loop)\r\n            // const originalTargetRow = task.targetRow; // No longer needed for lookup\r\n            const populateRow = taskAdjustedRows.get(task.assumptionRow); // Get the calculated adjusted row using assumptionRow\r\n\r\n            // Check if populateRow was found\r\n            if (typeof populateRow === 'undefined' || populateRow === null) {\r\n                console.error(`Could not find adjusted row for task with Assumption Row ${task.assumptionRow}, Code ${task.code}. Skipping population.`);\r\n                continue; // Skip this task if mapping failed\r\n            }\r\n\r\n            // Use populateRow instead of task.targetRow for getRange calls\r\n            const cellB = financialsSheet.getRange(`${FINANCIALS_TARGET_COL_B}${populateRow}`);\r\n            const cellD = financialsSheet.getRange(`${FINANCIALS_TARGET_COL_D}${populateRow}`);\r\n            const cellAnnualsStart = financialsSheet.getRange(`${FINANCIALS_ANNUALS_START_COL}${populateRow}`);\r\n            const cellMonthsStart = financialsSheet.getRange(`${FINANCIALS_MONTHS_START_COL}${populateRow}`);\r\n\r\n            // --- Populate Column B ---\r\n            cellB.formulas = [[task.addressB]]; // Set formula directly\r\n            cellB.format.font.bold = false;\r\n            cellB.format.font.italic = false;\r\n            cellB.format.indentLevel = 2;\r\n\r\n            // --- Populate Column D ---\r\n            cellD.formulas = [[task.addressD]]; // Set formula directly\r\n            cellD.format.font.bold = false;\r\n            cellD.format.font.italic = false;\r\n            cellD.format.indentLevel = 2;\r\n\r\n            // --- Populate Annuals Start Column (J) with SUMIF ---\r\n            const codePrefix = String(task.code).substring(0, 2).toUpperCase();\r\n            let formulaJ = \"\";\r\n            if (codePrefix === \"IS\" || codePrefix === \"CF\") {\r\n                 // Corrected R2C[1] to R2C: Criteria should reference current column's header (J$2)\r\n                 formulaJ = `=SUMIF(R3,R2C,R[0])`;\r\n            } else {\r\n                 // Corrected R2C[1] to R2C: Criteria should reference current column's header (J$2)\r\n                 formulaJ = `=SUMIF(R4,R2C,R[0])`;\r\n            }\r\n            cellAnnualsStart.formulasR1C1 = [[formulaJ]]; // Use formulasR1C1 for SUMIF\r\n            cellAnnualsStart.format.font.bold = false;\r\n            cellAnnualsStart.format.font.italic = false;\r\n            cellAnnualsStart.format.numberFormat = CURRENCY_FORMAT;\r\n\r\n            // --- Populate Months Start Column (AE) with Link ---\r\n            cellMonthsStart.formulas = [[task.addressMonths]]; // Set formula directly\r\n            cellMonthsStart.format.font.bold = false;\r\n            cellMonthsStart.format.font.italic = false;\r\n            cellMonthsStart.format.font.color = GREEN_COLOR; // Keep green color for month links\r\n            cellMonthsStart.format.numberFormat = CURRENCY_FORMAT;\r\n\r\n            // Removed Actuals column population (was L in previous version)\r\n        }\r\n        console.log(\"Finished setting values/formulas/formats for inserted rows.\");\r\n        await worksheet.context.sync(); // Sync all population and formatting\r\n\r\n\r\n        // 8. Perform Autofills using ADJUSTED row numbers\r\n        console.log(\"Performing autofills (using adjusted rows)...\");\r\n        for (const task of tasks) { // Uses the DESCENDING sorted tasks again\r\n             // const originalTargetRow = task.targetRow; // No longer needed for lookup\r\n             const populateRow = taskAdjustedRows.get(task.assumptionRow); // Get the calculated adjusted row using assumptionRow\r\n\r\n             // Check if populateRow was found\r\n            if (typeof populateRow === 'undefined' || populateRow === null) {\r\n                console.error(`Could not find adjusted row for task with Assumption Row ${task.assumptionRow}, Code ${task.code}. Skipping autofill.`);\r\n                continue; // Skip this task if mapping failed\r\n            }\r\n\r\n             try {\r\n                // Use populateRow for autofill ranges\r\n                // Autofill Annuals: J -> P\r\n                const sourceAnnuals = financialsSheet.getRange(`${FINANCIALS_ANNUALS_START_COL}${populateRow}`); // Use adjusted row\r\n                const destAnnuals = financialsSheet.getRange(`${FINANCIALS_ANNUALS_START_COL}${populateRow}:${ANNUALS_END_COL}${populateRow}`); // Use adjusted row\r\n                sourceAnnuals.autoFill(destAnnuals, Excel.AutoFillType.fillDefault);\r\n                // console.log(`  Autofilled ${FINANCIALS_ANNUALS_START_COL}${populateRow} to ${ANNUALS_END_COL}${populateRow}`);\r\n\r\n                // Autofill Months: AE -> CX\r\n                const sourceMonths = financialsSheet.getRange(`${FINANCIALS_MONTHS_START_COL}${populateRow}`); // Use adjusted row\r\n                const destMonths = financialsSheet.getRange(`${FINANCIALS_MONTHS_START_COL}${populateRow}:${MONTHS_END_COL}${populateRow}`); // Use adjusted row\r\n                sourceMonths.autoFill(destMonths, Excel.AutoFillType.fillDefault);\r\n                // console.log(`  Autofilled ${FINANCIALS_MONTHS_START_COL}${populateRow} to ${MONTHS_END_COL}${populateRow}`);\r\n\r\n                // Removed Actuals autofill\r\n             } catch(autofillError) {\r\n                 // Update error message to use adjusted row\r\n                 console.error(`Error during autofill for adjusted row ${populateRow} (Code: ${task.code}, Original Target: ${task.targetRow}):`, autofillError.debugInfo || autofillError);\r\n             }\r\n        }\r\n        console.log(\"Finished setting up autofills.\");\r\n        await worksheet.context.sync(); // Sync all autofill operations\r\n        console.log(\"Autofills synced.\");\r\n\r\n        console.log(`populateFinancialsJS successfully completed for ${worksheet.name} -> ${financialsSheet.name}`);\r\n\r\n    } catch (error) {\r\n        console.error(`Error in populateFinancialsJS for sheet ${worksheet.name} -> ${financialsSheet.name}:`, error.debugInfo || error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Links assumption sheet cells (K onwards) to the \"Financials\" sheet based on codes in col E.\r\n * Replicates the core logic of VBA Link_Fin_References.\r\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\r\n * @param {number} lastRow - The last row to process.\r\n * @param {Excel.Worksheet} financialsSheet - The \"Financials\" worksheet (within the same Excel.run context).\r\n */\r\nasync function linkFinReferencesJS(worksheet, lastRow, financialsSheet) {\r\n    console.log(`Running linkFinReferencesJS for sheet: ${worksheet.name} (lastRow: ${lastRow}) -> ${financialsSheet.name}`);\r\n    // This function MUST be called within an Excel.run context.\r\n\r\n    const START_ROW = 9;\r\n    const CHECK_COLUMN = \"E\";\r\n    const FINANCIALS_LOOKUP_COLUMN = \"B\";\r\n    const TARGET_COLUMN_START = \"K\";\r\n    const CLEAR_COLUMN = \"Q\";\r\n    const MONTHS_END_COLUMN = \"CX\"; // As used in populateFinancialsJS\r\n    const NON_GREEN_COLOR_HEX = \"#CCFFCC\"; // VBA: RGB(204, 255, 204) - Must match Excel's hex representation\r\n\r\n    // Ensure lastRow is valid\r\n    if (lastRow < START_ROW) {\r\n        console.warn(`linkFinReferencesJS: lastRow (${lastRow}) is less than START_ROW (${START_ROW}). Skipping.`);\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // 1. Load data from Assumption Sheet (Check Column E)\r\n        const checkRangeAddress = `${CHECK_COLUMN}${START_ROW}:${CHECK_COLUMN}${lastRow}`;\r\n        const checkRange = worksheet.getRange(checkRangeAddress);\r\n        checkRange.load([\"values\", \"format/fill/color\"]);\r\n        console.log(`linkFinReferencesJS: Loading assumption data from ${checkRangeAddress}`);\r\n\r\n        // 2. Load data from Financials Sheet (Lookup Column B) & Create Map\r\n        console.log(`linkFinReferencesJS: Loading Financials lookup data from column ${FINANCIALS_LOOKUP_COLUMN}`);\r\n        const financialsLookupMap = new Map();\r\n        const finLookupCol = financialsSheet.getRange(`${FINANCIALS_LOOKUP_COLUMN}:${FINANCIALS_LOOKUP_COLUMN}`);\r\n        const finUsedRange = finLookupCol.getUsedRange(true); // Values only\r\n        finUsedRange.load([\"values\", \"address\"]); // Load address for better error reporting if needed\r\n        // Sync assumption and financials loads together\r\n        await worksheet.context.sync();\r\n        console.log(`linkFinReferencesJS: Synced assumption and financials loads. Financials used range address: ${finUsedRange.address}`);\r\n\r\n        if (finUsedRange.values) {\r\n            for (let i = 0; i < finUsedRange.values.length; i++) {\r\n                const code = finUsedRange.values[i][0];\r\n                if (code !== null && code !== \"\") {\r\n                    // Address gives e.g., \"Financials!B1:B500\". We need the starting row of the used range.\r\n                    // A simpler way is to assume getUsedRange values start from row 1 relative to the range.\r\n                    // Or, parse the address. Let's try the simple approach first.\r\n                    // We need the actual row number on the sheet.\r\n                    // getUsedRange().address often includes the sheet name.\r\n                    // A more robust way: load the row index of the used range.\r\n                    finUsedRange.load(\"rowIndex\");\r\n                    await worksheet.context.sync(); // Need sync for rowIndex\r\n                    const startRowIndex = finUsedRange.rowIndex; // 0-based index of the first row in the range\r\n                    const actualRow = startRowIndex + i + 1; // Calculate 1-based Excel row number\r\n                    financialsLookupMap.set(code, actualRow);\r\n                }\r\n            }\r\n            console.log(`Built Financials lookup map from ${FINANCIALS_LOOKUP_COLUMN} with ${financialsLookupMap.size} entries.`);\r\n        } else {\r\n             console.warn(`linkFinReferencesJS: Could not load values from Financials lookup column ${FINANCIALS_LOOKUP_COLUMN}. Map is empty.`);\r\n        }\r\n\r\n        // 3. Iterate Assumption Rows and Apply Links/Autofill\r\n        console.log(\"linkFinReferencesJS: Processing assumption rows for linking...\");\r\n        const checkValues = checkRange.values;\r\n        const checkColors = checkRange.format.fill.color; // This will be a 2D array matching checkRange\r\n\r\n        for (let i = 0; i < checkValues.length; i++) {\r\n            const currentRow = START_ROW + i;\r\n            const checkValue = checkValues[i][0];\r\n            const checkColor = checkColors[i][0]; // Check the color of the cell in column E\r\n\r\n            // Condition check (matches VBA logic)\r\n            const shouldLink = checkValue !== null &&\r\n                               checkValue !== \"\" &&\r\n                               String(checkValue).toUpperCase() !== \"DASS\" &&\r\n                               checkValue !== 0 &&\r\n                               checkColor !== NON_GREEN_COLOR_HEX;\r\n\r\n            if (shouldLink) {\r\n                const searchCode = String(checkValue); // Ensure it's a string for map lookup\r\n                if (financialsLookupMap.has(searchCode)) {\r\n                    const referenceRow = financialsLookupMap.get(searchCode);\r\n                    const formula = `='${financialsSheet.name}'!${TARGET_COLUMN_START}${referenceRow}`;\r\n                    const targetCellAddress = `${TARGET_COLUMN_START}${currentRow}`;\r\n                    const targetCell = worksheet.getRange(targetCellAddress);\r\n\r\n                    // Set formula in target column (K)\r\n                    targetCell.formulas = [[formula]];\r\n                    // console.log(`  Row ${currentRow}: Linking ${targetCellAddress} to Financials row ${referenceRow} with formula: ${formula}`);\r\n\r\n                    // Queue Autofill K -> CX\r\n                    const fillDestinationAddress = `${TARGET_COLUMN_START}${currentRow}:${MONTHS_END_COLUMN}${currentRow}`;\r\n                    const fillDestinationRange = worksheet.getRange(fillDestinationAddress);\r\n                    targetCell.autoFill(fillDestinationRange, Excel.AutoFillType.fillDefault);\r\n                    // console.log(`  Row ${currentRow}: Queued autofill from ${targetCellAddress} to ${MONTHS_END_COLUMN}${currentRow}`);\r\n\r\n                } else {\r\n                    console.warn(`linkFinReferencesJS: Row ${currentRow} - Code \"${searchCode}\" found in ${CHECK_COLUMN}${currentRow}, but not found in Financials column ${FINANCIALS_LOOKUP_COLUMN}.`);\r\n                }\r\n            }\r\n        }\r\n\r\n        // 4. Clear Column Q\r\n        console.log(`linkFinReferencesJS: Clearing column ${CLEAR_COLUMN} from row ${START_ROW} to ${lastRow}`);\r\n        const clearRangeAddress = `${CLEAR_COLUMN}${START_ROW}:${CLEAR_COLUMN}${lastRow}`;\r\n        const clearRange = worksheet.getRange(clearRangeAddress);\r\n        clearRange.clear(Excel.ClearApplyTo.contents); // Clear only contents, matching VBA .Clear\r\n\r\n        // Note: context.sync() is handled by the calling function (processAssumptionTabs)\r\n        console.log(`linkFinReferencesJS: Finished processing for ${worksheet.name}`);\r\n\r\n    } catch (error) {\r\n        console.error(`Error in linkFinReferencesJS for sheet ${worksheet.name}:`, error.debugInfo || error);\r\n        // Re-throw the error to allow the calling function to handle it\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Placeholder for Format_Changes_In_Working_Capital VBA logic.\r\n * Inserts a row and adjusts formatting in \"Financials\" based on specific codes.\r\n * @param {Excel.Worksheet} financialsSheet - The \"Financials\" worksheet (within an Excel.run context).\r\n */\r\nasync function formatChangesInWorkingCapitalJS(financialsSheet) {\r\n    console.log(`Running formatChangesInWorkingCapitalJS for sheet: ${financialsSheet.name}`);\r\n    // This function MUST be called within an Excel.run context.\r\n    const FIND_TEXT_1 = \"CF: Non-cash\";\r\n    const FIND_TEXT_2 = \"CF: WC\";\r\n    const SEARCH_COLUMN = \"I\";\r\n     // Define ranges for border removal based on VBA (e.g., \"K\" + (foundRow + 1) + \":P\" + (foundRow + 1))\r\n\r\n    // TODO: Implement Format_Changes_In_Working_Capital logic\r\n    // 1. Find FIND_TEXT_1 in SEARCH_COLUMN using range.find\r\n    // 2. If found:\r\n    //    a. Get cell above (offset -1, 0)\r\n    //    b. Load its value\r\n    //    c. Sync\r\n    //    d. Check if value is FIND_TEXT_2\r\n    //    e. If yes:\r\n    //       i. Get the entire row of the found cell (.getEntireRow())\r\n    //       ii. Insert a new row above it (insert(Excel.InsertShiftDirection.down))\r\n    //       iii. Get ranges in the *original* row (now shifted down one) and remove borders.\r\n    financialsSheet.load('name'); // Keep reference valid if needed later in the SAME context\r\n    await financialsSheet.context.sync();\r\n     console.warn(`formatChangesInWorkingCapitalJS on ${financialsSheet.name} not implemented yet.`);\r\n}\r\n\r\n/**\r\n * Processes assumption tabs after runCodes, replicating VBA logic.\r\n * Expects an array of assumption tab names.\r\n * @param {string[]} assumptionTabNames - Array of assumption tab names created by runCodes.\r\n */\r\nexport async function processAssumptionTabs(assumptionTabNames) {\r\n    console.log(`Starting processing for ${assumptionTabNames.length} assumption tabs:`, assumptionTabNames);\r\n    if (!assumptionTabNames || assumptionTabNames.length === 0) {\r\n        console.log(\"No assumption tabs provided to process.\");\r\n        return;\r\n    }\r\n\r\n    const FINANCIALS_SHEET_NAME = \"Financials\"; // Define constant\r\n    const AUTOFILL_START_COLUMN = \"AE\";\r\n    const AUTOFILL_END_COLUMN = \"CX\";\r\n    const START_ROW = 9; // Standard start row for processing\r\n\r\n    try {\r\n        // --- Loop through each assumption tab name ---\r\n        for (const worksheetName of assumptionTabNames) {\r\n             console.log(`\\nProcessing Assumption Tab: ${worksheetName}`);\r\n\r\n            try {\r\n                 // Perform operations for a single tab within one Excel.run for efficiency\r\n                 await Excel.run(async (context) => {\r\n                     // Get worksheet and financials sheet references within THIS context\r\n                     const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\r\n                     const financialsSheet = context.workbook.worksheets.getItem(FINANCIALS_SHEET_NAME);\r\n                     currentWorksheet.load('name'); // Load basic properties\r\n                     financialsSheet.load('name');\r\n                     await context.sync(); // Ensure sheets are loaded\r\n\r\n                     console.log(`Successfully got references for ${currentWorksheet.name} and ${financialsSheet.name}`);\r\n\r\n                     // 1. Get Last Row for the current assumption tab\r\n                     // getLastUsedRow needs context, so call it here\r\n                     const lastRow = await getLastUsedRow(currentWorksheet, \"B\"); // Pass currentWorksheet from this context\r\n                     if (lastRow < START_ROW) {\r\n                         console.warn(`Skipping tab ${worksheetName} as last used row in Col B (${lastRow}) is before start row (${START_ROW}).`);\r\n                         return; // Skip to next tab if empty or too short\r\n                     }\r\n                     console.log(`Last row in Col B for ${worksheetName}: ${lastRow}`);\r\n\r\n                     // --- Call helper functions IN ORDER, passing worksheet objects from this context ---\r\n                     // These helpers now expect to run within this context\r\n\r\n                     // 2. Adjust Drivers\r\n                     await adjustDriversJS(currentWorksheet, lastRow);\r\n\r\n                     // 3. Replace Indirects\r\n                     await replaceIndirectsJS(currentWorksheet, lastRow);\r\n\r\n                     // 4. Get Last Row Again (if Replace_Indirects might change it)\r\n                     // const updatedLastRow = await getLastUsedRow(currentWorksheet, \"B\"); // Recalculate if necessary\r\n                     const updatedLastRow = lastRow; // Assuming Replace_Indirects doesn't change last row for now\r\n                     console.log(`Using last row for subsequent steps: ${updatedLastRow}`);\r\n                     if (updatedLastRow < START_ROW) {\r\n                         console.warn(`Skipping remaining steps for ${worksheetName} as updated last row (${updatedLastRow}) is invalid.`);\r\n                         return;\r\n                     }\r\n\r\n                     // 5. Populate Financials\r\n                     await populateFinancialsJS(currentWorksheet, updatedLastRow, financialsSheet);\r\n\r\n                     // 6. Link Financial References\r\n                     await linkFinReferencesJS(currentWorksheet, updatedLastRow, financialsSheet);\r\n\r\n                     // 7. Autofill AE9:AE<lastRow> -> CX<lastRow> on Assumption Tab\r\n                     console.log(`Autofilling ${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${updatedLastRow} to ${AUTOFILL_END_COLUMN} on ${worksheetName}`);\r\n                     const sourceRange = currentWorksheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${updatedLastRow}`);\r\n                     const fillRange = currentWorksheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_END_COLUMN}${updatedLastRow}`);\r\n                     sourceRange.autoFill(fillRange, Excel.AutoFillType.fillDefault);\r\n\r\n                     // Sync all batched operations for this tab\r\n                     await context.sync();\r\n                     console.log(`Finished processing and syncing for tab ${worksheetName}`);\r\n\r\n                 }); // End Excel.run for single tab processing\r\n\r\n             } catch (tabError) {\r\n                 console.error(`Error processing tab ${worksheetName}:`, tabError);\r\n                 // Optionally add to an error list and continue with the next tab\r\n                 // Be mindful that subsequent tabs might depend on this one succeeding.\r\n             }\r\n        } // --- End loop through assumption tabs ---\r\n\r\n        // --- Final Operations on Financials Sheet ---\r\n        console.log(`\\nPerforming final operations on ${FINANCIALS_SHEET_NAME}`);\r\n        try {\r\n             await Excel.run(async (context) => {\r\n                 const finSheet = context.workbook.worksheets.getItem(FINANCIALS_SHEET_NAME);\r\n                 finSheet.load('name'); // Load name for logging\r\n                 await context.sync(); // Ensure sheet is loaded\r\n\r\n                 // 1. Format Changes In Working Capital\r\n                 await formatChangesInWorkingCapitalJS(finSheet); // Pass sheet from this context\r\n\r\n                 // 2. Get Last Row for Financials\r\n                 const financialsLastRow = await getLastUsedRow(finSheet, \"B\"); // Pass sheet from this context\r\n                 if (financialsLastRow < START_ROW) {\r\n                     console.warn(`Skipping final autofill on ${FINANCIALS_SHEET_NAME} as last row (${financialsLastRow}) is before start row (${START_ROW}).`);\r\n                     return;\r\n                 }\r\n                 console.log(`Last row in Col B for ${FINANCIALS_SHEET_NAME}: ${financialsLastRow}`);\r\n\r\n                 // 3. Autofill AE9:AE<lastRow> -> CX<lastRow> on Financials\r\n                 console.log(`Autofilling ${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${financialsLastRow} to ${AUTOFILL_END_COLUMN} on ${FINANCIALS_SHEET_NAME}`);\r\n                 const sourceRangeFin = finSheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${financialsLastRow}`);\r\n                 const fillRangeFin = finSheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_END_COLUMN}${financialsLastRow}`);\r\n                 sourceRangeFin.autoFill(fillRangeFin, Excel.AutoFillType.fillDefault);\r\n\r\n                 // Commented out VBA Retained Earnings logic - implement if needed\r\n                 // console.log(\"Finding rows for Retained Earnings calculation...\");\r\n                 // const retainedEarningsRow = await findRowByValue(context, finSheet, \"B:B\", \"Retained Earnings\"); // Requires findRowByValue helper\r\n                 // const assetsRow = await findRowByValue(context, finSheet, \"B:B\", \"Total Assets\");\r\n                 // const liabilitiesRow = await findRowByValue(context, finSheet, \"B:B\", \"Total Liabilities\");\r\n                 // console.log(`Found Rows - RE: ${retainedEarningsRow}, Assets: ${assetsRow}, Liab: ${liabilitiesRow}`);\r\n                 // if (retainedEarningsRow > 0 && assetsRow > 0 && liabilitiesRow > 0) {\r\n                 //     const targetCell = finSheet.getRange(`AD${retainedEarningsRow}`); // Assuming AD is the target column\r\n                 //     const formula = `=AD${assetsRow}-AD${liabilitiesRow}`;\r\n                 //     console.log(`Setting Retained Earnings formula in AD${retainedEarningsRow}: ${formula}`);\r\n                 //     targetCell.formulas = [[formula]];\r\n                 // } else {\r\n                 //     console.warn(\"Could not find one or more rows required for Retained Earnings calculation.\");\r\n                 // }\r\n\r\n                 // Sync final Financials sheet operations\r\n                 await context.sync();\r\n                 console.log(`Finished final operations on ${FINANCIALS_SHEET_NAME}`);\r\n             });\r\n         } catch (financialsError) {\r\n             console.error(`Error during final operations on ${FINANCIALS_SHEET_NAME}:`, financialsError);\r\n         }\r\n\r\n        console.log(\"Finished processing all assumption tabs.\");\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in processAssumptionTabs main function:\", error);\r\n        // Potentially re-throw or handle top-level errors\r\n    }\r\n}\r\n\r\n// TODO: Implement the actual logic within the JS helper functions (adjustDriversJS, replaceIndirectsJS, etc.).\r\n// TODO: Implement findRowByValue helper function if Retained Earnings logic is needed.\r\n// TODO: Update the calling code (e.g., button handler in taskpane.js) to call `processAssumptionTabs` after `runCodes`.","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global console, document, Excel, Office */\r\n\r\n// Remove imports from Langchain to avoid ESM module issues\r\n// Using direct fetch calls instead\r\n// Add this test function\r\nimport { validateCodeStrings } from './Validation.js';\r\n// Import the spreadsheet utilities\r\nimport { handleInsertWorksheetsFromBase64 } from './SpreadsheetUtils.js';\r\n// Import code collection functions\r\nimport { populateCodeCollection, exportCodeCollectionToText, runCodes, isActiveCellGreen, testTextFunction as testTextFunctionFromCollection, processAssumptionTabs } from './CodeCollection.js';\r\n// Add the codeStrings variable with the specified content\r\nconst codeStrings = `<TAB; label1=\"Revenue and Direct Costs\">\r\n<VOLLI-EV; labelRow=\"\"; row1 = \"|# of units sold:|||||||||||\"; row2 = \"LI1|# of students|||||100|100|100|100|100|100| *LI1|# of teachers|||||100|100|400|100|100|100| *LI1|# of sites|||||100|100|100|200|340|100|\"; row3 = \"V1|Total # of units sold|||||F|F|F|F|F|F|\";>\r\n<BR>\r\n<UNITREV-VR; driver1=\"LI1\"; row1 = \"AS2|Grant Revenue/Student/Month|||||10|10|10|10|10|10|\"; row2 = \"R1|Total Grant Revenue|IS: revenue||||F|F|F|F|F|F|\">\r\n\r\n<TAB; label1=\"Working Capital\">\r\n<BR>\r\n<LABELH1; row1 = \"|Current Assets:|||||||||||\";>\r\n<BR>\r\n<CURRENTASSETDSO-IS; labelRow=\"\"; financialsdriver=\"Total Revenue\"; row1 = \"|Accounts Receivable:|||||||||||\"; row2 = \"|Driver: Total Revenue|||||100000|100000|100000|100000|100000|100000|\"; row3 = \"AS|# of days sales outstanding|||||30|30|30|30|30|30|\"; row4 = \"A|Accounts Receivable|BS: current assets||||F|F|F|F|F|F|\"; row5 = \"||||||||||||\"; row6 = \"CF|Change in Accounts Receivable|CF: WC||||F|F|F|F|F|F|\";>\r\n<CURRENTASSETDSO-IS; labelRow=\"\"; financialsdriver=\"Total Revenue\"; row1 = \"|Accounts Receivable:|||||||||||\"; row2 = \"|Driver: Total Revenue|||||100000|100000|100000|100000|100000|100000|\"; row3 = \"AS|# of days sales outstanding|||||30|30|30|30|30|30|\"; row4 = \"A|Accounts Receivable|BS: current assets||||F|F|F|F|F|F|\"; row5 = \"||||||||||||\"; row6 = \"CF|Change in Accounts Receivable|CF: WC||||F|F|F|F|F|F|\";>\r\n<FAPPEDATELI-ER; labelRow=\"\"; row1 = \"AS|Years useful life||||3|||||||\"; row2 = \"||||||||||||\"; row3 = \"|Statement of Cash Flows:|||Amount|Date|||||||\"; row4 = \"LI|Capex 1|||-100000|1/1/2027|F|F|F|F|F|F|\"; row5 = \"AS|Capital expenditures - Fixed Asset|CF: CFI||||F|F|F|F|F|F|\"; row6 = \"||||||||||||\"; row7 = \"AS|Depreciation - Fixed Asset|CF: Non-cash||||F|F|F|F|F|F|\"; row8 = \"||||||||||||\"; row9 = \"|Income Statement:|||||||||||\"; row10 = \"C|Depreciation - Fixed Asset|IS: D&A||||F|F|F|F|F|F|\"; row11 = \"||||||||||||\"; row12 = \"|Balance sheet:|||||||||||\"; row13 = \"|Gross PP&E - Fixed Asset|||||F|F|F|F|F|F|\"; row14 = \"|Accumulated depreciation - Fixed Asset|||||F|F|F|F|F|F|\"; row15 = \"A|Net PP&E - Fixed Asset|BS: fixed assets||||F|F|F|F|F|F|\";>\r\n`;\r\n\r\n// Mock fs module for browser environment\r\nconst fs = {\r\n    writeFileSync: (path, content) => {\r\n        console.log(`Mock writeFileSync called with path: ${path}`);\r\n        // In browser, we'll just log the content instead of writing to file\r\n        console.log(`Content would be written to ${path}:`, content.substring(0, 100) + '...');\r\n    }\r\n};\r\n\r\n//*********Setup*********\r\n// Start the timer\r\nconst startTime = performance.now();\r\n\r\n//Debugging Toggle\r\nconst DEBUG = true; \r\n\r\n// API keys storage\r\nlet API_KEYS = {\r\n  OPENAI_API_KEY: \"\",\r\n  PINECONE_API_KEY: \"\"\r\n};\r\n\r\nconst srcPaths = [\r\n  'https://localhost:3002/src/prompts/Encoder_System.txt',\r\n  'https://localhost:3002/src/prompts/Encoder_Main.txt',\r\n  'https://localhost:3002/src/prompts/Followup_System.txt',\r\n  'https://localhost:3002/src/prompts/Structure_System.txt',\r\n  'https://localhost:3002/src/prompts/Validation_System.txt',\r\n  'https://localhost:3002/src/prompts/Validation_Main.txt'\r\n];\r\n\r\n// Function to load API keys from a config file\r\n// This allows the keys to be stored in a separate file that's .gitignored\r\nasync function initializeAPIKeys() {\r\n  try {\r\n    console.log(\"Initializing API keys...\");\r\n    \r\n    // Try to load config.js which is .gitignored\r\n    try {\r\n      const configResponse = await fetch('https://localhost:3002/config.js');\r\n      if (configResponse.ok) {\r\n        const configText = await configResponse.text();\r\n        // Extract keys from the config text using regex\r\n        const openaiKeyMatch = configText.match(/OPENAI_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n        const pineconeKeyMatch = configText.match(/PINECONE_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n        \r\n        if (openaiKeyMatch && openaiKeyMatch[1]) {\r\n          API_KEYS.OPENAI_API_KEY = openaiKeyMatch[1];\r\n          console.log(\"OpenAI API key loaded from config.js\");\r\n        }\r\n        \r\n        if (pineconeKeyMatch && pineconeKeyMatch[1]) {\r\n          API_KEYS.PINECONE_API_KEY = pineconeKeyMatch[1];\r\n          console.log(\"Pinecone API key loaded from config.js\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn(\"Could not load config.js, will use empty API keys:\", error);\r\n    }\r\n    \r\n    // Add debug logging with secure masking of keys\r\n    console.log(\"OPENAI_API_KEY:\", API_KEYS.OPENAI_API_KEY ? \r\n      `${API_KEYS.OPENAI_API_KEY.substring(0, 3)}...${API_KEYS.OPENAI_API_KEY.substring(API_KEYS.OPENAI_API_KEY.length - 3)}` : \r\n      \"Not found\");\r\n    console.log(\"PINECONE_API_KEY:\", API_KEYS.PINECONE_API_KEY ? \r\n      `${API_KEYS.PINECONE_API_KEY.substring(0, 3)}...${API_KEYS.PINECONE_API_KEY.substring(API_KEYS.PINECONE_API_KEY.length - 3)}` : \r\n      \"Not found\");\r\n    \r\n    return API_KEYS.OPENAI_API_KEY && API_KEYS.PINECONE_API_KEY;\r\n  } catch (error) {\r\n    console.error(\"Error initializing API keys:\", error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Update Pinecone configuration to handle multiple indexes\r\nconst PINECONE_ENVIRONMENT = \"gcp-starter\";\r\n\r\n// Define configurations for each index\r\nconst PINECONE_INDEXES = {\r\n    codes: {\r\n        name: \"codes\",\r\n        apiEndpoint: \"https://codes-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call2trainingdata: {\r\n        name: \"call2trainingdata\",\r\n        apiEndpoint: \"https://call2trainingdata-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call2context: {\r\n        name: \"call2context\",\r\n        apiEndpoint: \"https://call2context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call1context: {\r\n        name: \"call1context\",\r\n        apiEndpoint: \"https://call1context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    }\r\n};\r\n\r\n//Models\r\nconst GPT4O_MINI = \"gpt-4o-mini\"\r\nconst GPT4O = \"gpt-4o\"\r\nconst GPT45_TURBO = \"gpt-4.5-turbo\"\r\nconst GPT35_TURBO = \"gpt-3.5-turbo\"\r\nconst GPT4_TURBO = \"gpt-4-turbo\"\r\nconst GPTFT1 =  \"ft:gpt-3.5-turbo-1106:orsi-advisors:cohcolumnsgpt35:B6Wlrql1\"\r\n\r\n// Conversation history storage\r\nlet conversationHistory = [];\r\n\r\n// Functions to save and load conversation history\r\nfunction saveConversationHistory(history) {\r\n    try {\r\n        localStorage.setItem('conversationHistory', JSON.stringify(history));\r\n        if (DEBUG) console.log('Conversation history saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving conversation history:\", error);\r\n    }\r\n}\r\n\r\nfunction loadConversationHistory() {\r\n    try {\r\n        const history = localStorage.getItem('conversationHistory');\r\n        if (history) {\r\n            if (DEBUG) console.log('Loaded conversation history from localStorage');\r\n            const parsedHistory = JSON.parse(history);\r\n            \r\n            if (!Array.isArray(parsedHistory)) {\r\n                console.error(\"Invalid history format, expected array\");\r\n                return [];\r\n            }\r\n            \r\n            return parsedHistory;\r\n        }\r\n        if (DEBUG) console.log(\"No conversation history found in localStorage\");\r\n        return [];\r\n    } catch (error) {\r\n        console.error(\"Error loading conversation history:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\n// Direct OpenAI API call function (replaces LangChain)\r\nasync function callOpenAI(messages, model = GPT4O, temperature = 0.7) {\r\n  try {\r\n    console.log(`Calling OpenAI API with model: ${model}`);\r\n    \r\n    // Check for API key\r\n    if (!API_KEYS.OPENAI_API_KEY) {\r\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\r\n    }\r\n    \r\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${API_KEYS.OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: model,\r\n        messages: messages,\r\n        temperature: temperature\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => null);\r\n      console.error(\"OpenAI API error response:\", errorData);\r\n      throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log(\"OpenAI API response received\");\r\n    \r\n    return data.choices[0].message.content;\r\n  } catch (error) {\r\n    console.error(\"Error calling OpenAI API:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// OpenAI embeddings function (replaces LangChain)\r\nasync function createEmbedding(text) {\r\n  try {\r\n    console.log(\"Creating embedding for text\");\r\n    \r\n    // Check for API key\r\n    if (!API_KEYS.OPENAI_API_KEY) {\r\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\r\n    }\r\n    \r\n    const response = await fetch('https://api.openai.com/v1/embeddings', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${API_KEYS.OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: \"text-embedding-3-large\",\r\n        input: text\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => null);\r\n      console.error(\"OpenAI Embeddings API error response:\", errorData);\r\n      throw new Error(`OpenAI Embeddings API error: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log(\"OpenAI Embeddings API response received\");\r\n    \r\n    return data.data[0].embedding;\r\n  } catch (error) {\r\n    console.error(\"Error creating embedding:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Remove the PROMPTS object and add a function to load prompts\r\nasync function loadPromptFromFile(promptKey) {\r\n  try {\r\n    // Use a simplified path approach that works with dev server with correct port\r\n    const paths = [\r\n      `https://localhost:3002/prompts/${promptKey}.txt`,\r\n    ];\r\n    \r\n    // Combine all paths to try\r\n    paths.push(...srcPaths);\r\n \r\n    // Try each path until one works\r\n    let response = null;\r\n    for (const path of paths) {\r\n      console.log(`Attempting to load prompt from: ${path}`);\r\n      try {\r\n        response = await fetch(path);\r\n        if (response.ok) {\r\n          console.log(`Successfully loaded prompt from: ${path}`);\r\n          break;\r\n        }\r\n      } catch (err) {\r\n        console.log(`Path ${path} failed: ${err.message}`);\r\n      }\r\n    }\r\n    \r\n    if (!response || !response.ok) {\r\n      throw new Error(`Failed to load prompt: ${promptKey} (Could not find file in any location)`);\r\n    }\r\n    \r\n    return await response.text();\r\n  } catch (error) {\r\n    console.error(`Error loading prompt ${promptKey}:`, error);\r\n    throw error; // Re-throw the error to be handled by the caller\r\n  }\r\n}\r\n\r\n// Update the getSystemPromptFromFile function\r\nconst getSystemPromptFromFile = async (promptKey) => {\r\n  try {\r\n    const prompt = await loadPromptFromFile(promptKey);\r\n    if (!prompt) {\r\n      throw new Error(`Prompt key \"${promptKey}\" not found`);\r\n    }\r\n    return prompt;\r\n  } catch (error) {\r\n    console.error(`Error getting prompt for key ${promptKey}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n//************Functions************\r\n// Function 1: OpenAI Call with conversation history support\r\nasync function processPrompt({ userInput, systemPrompt, model, temperature, history = [] }) {\r\n    console.log(\"API Key being used:\", API_KEYS.OPENAI_API_KEY ? `${API_KEYS.OPENAI_API_KEY.substring(0, 3)}...` : \"None\");\r\n    \r\n    // Format messages in the way OpenAI expects\r\n    const messages = [\r\n        { role: \"system\", content: systemPrompt }\r\n    ];\r\n    \r\n    // Add conversation history\r\n    if (history.length > 0) {\r\n        history.forEach(message => {\r\n            messages.push({ \r\n                role: message[0] === \"human\" ? \"user\" : \"assistant\", \r\n                content: message[1] \r\n            });\r\n        });\r\n    }\r\n    \r\n    // Add current user input\r\n    messages.push({ role: \"user\", content: userInput });\r\n    \r\n    try {\r\n        // Call OpenAI API directly\r\n        const responseContent = await callOpenAI(messages, model, temperature);\r\n        \r\n        // Try to parse JSON response if applicable\r\n        try {\r\n            const parsed = JSON.parse(responseContent);\r\n            if (Array.isArray(parsed)) {\r\n                return parsed;\r\n            }\r\n            return responseContent.split('\\n').filter(line => line.trim());\r\n        } catch (e) {\r\n            // If not JSON, treat as text and split by lines\r\n            return responseContent.split('\\n').filter(line => line.trim());\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in processPrompt:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nasync function structureDatabasequeries(clientprompt) {\r\n  if (DEBUG) console.log(\"Processing structured database queries:\", clientprompt);\r\n\r\n  try {\r\n      console.log(\"Getting structure system prompt\");\r\n      const systemStructurePrompt = await getSystemPromptFromFile('Structure_System');\r\n      \r\n      if (!systemStructurePrompt) {\r\n          throw new Error(\"Failed to load structure system prompt\");\r\n      }\r\n\r\n      console.log(\"Got system prompt, processing query strings\");\r\n      const queryStrings = await processPrompt({\r\n          userInput: clientprompt,\r\n          systemPrompt: systemStructurePrompt,\r\n          model: GPT4O,\r\n          temperature: 1\r\n      });\r\n\r\n      if (!queryStrings || !Array.isArray(queryStrings)) {\r\n          throw new Error(\"Failed to get valid query strings\");\r\n      }\r\n\r\n      console.log(\"Got query strings:\", queryStrings);\r\n      const results = [];\r\n\r\n      for (const queryString of queryStrings) {\r\n          console.log(\"Processing query:\", queryString);\r\n          try {\r\n              const queryResults = {\r\n                  query: queryString,\r\n                  trainingData: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call2trainingdata',\r\n                      numResults: 3\r\n                  }),\r\n                  call2Context: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call2context',\r\n                      numResults: 5\r\n                  }),\r\n                  call1Context: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call1context',\r\n                      numResults: 5\r\n                  }),\r\n                  codeOptions: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      indexName: 'codes',\r\n                      numResults: 3,\r\n                      similarityThreshold: .1\r\n                  })\r\n              };\r\n\r\n              results.push(queryResults);\r\n              console.log(\"Successfully processed query:\", queryString);\r\n          } catch (error) {\r\n              console.error(`Error processing query \"${queryString}\":`, error);\r\n              // Continue with next query instead of failing completely\r\n              continue;\r\n          }\r\n      }\r\n\r\n      if (results.length === 0) {\r\n          throw new Error(\"No valid results were obtained from any queries\");\r\n      }\r\n\r\n      return results;\r\n  } catch (error) {\r\n      console.error(\"Error in structureDatabasequeries:\", error);\r\n      throw error;\r\n  }\r\n}\r\n\r\n// Function 3: Query Vector Database using Pinecone REST API\r\nasync function queryVectorDB({ queryPrompt, indexName = 'codes', numResults = 10, similarityThreshold = null }) {\r\n    try {\r\n        console.log(\"Generating embeddings for query:\", queryPrompt);\r\n        \r\n        // Generate embeddings using our direct API call\r\n        const embedding = await createEmbedding(queryPrompt);\r\n        console.log(\"Embeddings generated successfully\");\r\n        \r\n        // Get the correct endpoint for the specified index\r\n        const indexConfig = PINECONE_INDEXES[indexName];\r\n        if (!indexConfig) {\r\n            throw new Error(`Invalid index name: ${indexName}`);\r\n        }\r\n        \r\n        const url = `${indexConfig.apiEndpoint}/query`;\r\n        console.log(\"Making Pinecone API request to:\", url);\r\n        \r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'api-key': API_KEYS.PINECONE_API_KEY,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                vector: embedding,\r\n                topK: numResults,\r\n                includeMetadata: true,\r\n                namespace: \"ns1\"\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorText = await response.text();\r\n            console.error(\"Pinecone API error details:\", {\r\n                status: response.status,\r\n                statusText: response.statusText,\r\n                error: errorText\r\n            });\r\n            throw new Error(`Pinecone API error: ${response.status} ${response.statusText} - ${errorText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log(\"Pinecone API response received\");\r\n        \r\n        let matches = data.matches || [];\r\n\r\n        if (similarityThreshold !== null) {\r\n            matches = matches.filter(match => match.score >= similarityThreshold);\r\n        }\r\n\r\n        matches = matches.slice(0, numResults);\r\n\r\n        matches = matches.map(match => {\r\n            try {\r\n                if (match.metadata && match.metadata.text) {\r\n                    return {\r\n                        ...match,\r\n                        text: match.metadata.text\r\n                    };\r\n                }\r\n                return match;\r\n            } catch (error) {\r\n                console.error(\"Error processing match:\", error);\r\n                return match;\r\n            }\r\n        });\r\n\r\n        if (DEBUG) {\r\n            const matchesDescription = matches\r\n                .map((match, i) => `Match ${i + 1} (score: ${match.score.toFixed(4)}): ${match.text || JSON.stringify(match.metadata)}`)\r\n                .join('\\n');\r\n            console.log(matchesDescription);\r\n        }\r\n\r\n        const cleanMatches = matches.map(match => extractTextFromJson(match));\r\n        return cleanMatches.filter(text => text !== \"\");\r\n\r\n    } catch (error) {\r\n        console.error(\"Error during vector database query:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction extractTextFromJson(jsonInput) {\r\n   try {\r\n       const jsonData = typeof jsonInput === 'string' ? JSON.parse(jsonInput) : jsonInput;\r\n       \r\n       if (Array.isArray(jsonData)) {\r\n           for (const item of jsonData) {\r\n               if (item.metadata && item.metadata.text) {\r\n                   return item.metadata.text;\r\n               }\r\n           }\r\n           throw new Error(\"No text field found in the JSON array\");\r\n       } \r\n       else if (jsonData.metadata && jsonData.metadata.text) {\r\n           return jsonData.metadata.text;\r\n       } \r\n       else {\r\n           throw new Error(\"Invalid JSON structure: missing metadata.text field\");\r\n       }\r\n   } catch (error) {\r\n       console.error(`Error processing JSON: ${error.message}`);\r\n       return \"\";\r\n   }\r\n}\r\n\r\nfunction safeJsonForPrompt(obj, readable = true) {\r\n    if (!readable) {\r\n        let jsonString = JSON.stringify(obj);\r\n        jsonString = jsonString.replace(/\"values\":\\s*\\[\\],\\s*\"metadata\":/g, '');\r\n        return jsonString\r\n            .replace(/{/g, '\\\\u007B')\r\n            .replace(/}/g, '\\\\u007D');\r\n    }\r\n    \r\n    if (Array.isArray(obj)) {\r\n        return obj.map(item => {\r\n            if (item.metadata && item.metadata.text) {\r\n                const text = item.metadata.text.replace(/~/g, ',');\r\n                const parts = text.split(';');\r\n                \r\n                let result = '';\r\n                if (parts.length >= 1) result += parts[0].trim();\r\n                if (parts.length >= 2) result += '\\n' + parts[1].trim();\r\n                if (parts.length >= 3) result += '\\n' + parts[2].trim();\r\n                \r\n                if (item.score) {\r\n                    result += `\\nSimilarity Score: ${item.score.toFixed(4)}`;\r\n                }\r\n                \r\n                return result;\r\n            }\r\n            return JSON.stringify(item).replace(/~/g, ',');\r\n        }).join('\\n\\n');\r\n    }\r\n    \r\n    const jsonString = JSON.stringify(obj, null, 2).replace(/~/g, ',');\r\n    return jsonString\r\n        .replace(/{/g, '\\\\u007B')\r\n        .replace(/}/g, '\\\\u007D');\r\n}\r\n\r\nasync function handleFollowUpConversation(clientprompt) {\r\n    if (DEBUG) console.log(\"Processing follow-up question. Loading conversation history...\");\r\n    conversationHistory = loadConversationHistory();\r\n    \r\n    if (conversationHistory.length > 0) {\r\n        if (DEBUG) console.log(\"Processing follow-up question:\", clientprompt);\r\n        if (DEBUG) console.log(\"Loaded conversation history:\", JSON.stringify(conversationHistory, null, 2));\r\n        \r\n        const systemPrompt = await getSystemPromptFromFile('Followup_System');\r\n        // const MainPrompt = await getSystemPromptFromFile('main');\r\n        \r\n        const trainingdataCall2 = await queryVectorDB({\r\n            queryPrompt: clientprompt,\r\n            similarityThreshold: .4,\r\n            indexName: 'call2trainingdata',\r\n            numResults: 3\r\n        });\r\n\r\n        const call2context = await queryVectorDB({\r\n            queryPrompt: clientprompt + trainingdataCall2,\r\n            similarityThreshold: .3,\r\n            indexName: 'call2context',\r\n            numResults: 5\r\n        });\r\n\r\n        const call1context = await queryVectorDB({\r\n            queryPrompt: clientprompt + trainingdataCall2,\r\n            similarityThreshold: .3,\r\n            indexName: 'call1context',\r\n            numResults: 5\r\n        });\r\n\r\n        const codeOptions = await queryVectorDB({\r\n            queryPrompt: clientprompt + trainingdataCall2 + call1context,\r\n            indexName: 'codes',\r\n            numResults: 10,\r\n            similarityThreshold: .1\r\n        });\r\n        \r\n        const followUpPrompt = \"Client request: \" + clientprompt + \"\\n\" +\r\n                       \"Main Prompt: \" + MainPrompt + \"\\n\" +\r\n                       \"Training Data: \" + safeJsonForPrompt(trainingdataCall2).replace(/~/g, ',') + \"\\n\" +\r\n                       \"Code choosing context: \" + safeJsonForPrompt(call1context) + \"\\n\" +\r\n                       \"Code editing Context: \" + safeJsonForPrompt(call2context) + \"\\n\" +\r\n                       \"Code descriptions: \" + safeJsonForPrompt(codeOptions);\r\n        \r\n        const response = await processPrompt({\r\n            userInput: followUpPrompt,\r\n            systemPrompt: systemPrompt,\r\n            model: GPT4O,\r\n            temperature: 1,\r\n            history: conversationHistory\r\n        });\r\n        \r\n        conversationHistory.push([\"human\", clientprompt]);\r\n        conversationHistory.push([\"assistant\", response.join(\"\\n\")]);\r\n        \r\n        saveConversationHistory(conversationHistory);\r\n        \r\n        if (DEBUG) console.log(\"Updated conversation history:\", JSON.stringify(conversationHistory, null, 2));\r\n        \r\n        savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, call2context, call1context, trainingdataCall2, codeOptions, response);\r\n        saveTrainingData(clientprompt, response);\r\n        \r\n        return response;\r\n    } else {\r\n        if (DEBUG) console.log(\"No conversation history found. Treating as initial question.\");\r\n        return handleInitialConversation(clientprompt);\r\n    }\r\n}\r\n\r\nasync function handleConversation(clientprompt, isFollowUp = false) {\r\n    try {\r\n        if (isFollowUp) {\r\n            return await handleFollowUpConversation(clientprompt);\r\n        } else {\r\n            return await handleInitialConversation(clientprompt);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in conversation handling:\", error);\r\n        return [\"Error processing your request: \" + error.message];\r\n    }\r\n}\r\n\r\nasync function handleInitialConversation(clientprompt) {\r\n    if (DEBUG) console.log(\"Processing initial question:\", clientprompt);\r\n    \r\n    const systemPrompt = await getSystemPromptFromFile('Encoder_System');\r\n    console.log(\"SYSTEM PROMPT: \", systemPrompt);\r\n    const MainPrompt = await getSystemPromptFromFile('Encoder_Main');\r\n    console.log(\"MAIN PROMPT: \", MainPrompt);\r\n\r\n\r\n    const Call2prompt = \"Client request: \" + clientprompt + \"\\n\" +\r\n                       \"Main Prompt: \" + MainPrompt;\r\n    \r\n    const outputArray2 = await processPrompt({\r\n        userInput: Call2prompt,\r\n        systemPrompt: systemPrompt,\r\n        model: GPT4O,\r\n        temperature: 1 \r\n    });\r\n    \r\n    conversationHistory = [\r\n        [\"human\", clientprompt],\r\n        [\"assistant\", outputArray2.join(\"\\n\")]\r\n    ];\r\n    \r\n    saveConversationHistory(conversationHistory);\r\n    \r\n    savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, [], [], [], [], outputArray2);\r\n    saveTrainingData(clientprompt, outputArray2);\r\n    \r\n    console.log(\"Initial Response - in the function:\", outputArray2);\r\n    return outputArray2;\r\n\r\n}\r\n\r\n\r\n\r\nfunction savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, validationSystemPrompt, validationMainPrompt, validationResults, call2context, call1context, trainingdataCall2, codeOptions, outputArray2) {\r\n    try {\r\n        const analysisData = {\r\n            clientRequest: clientprompt,\r\n            systemPrompt,\r\n            mainPrompt: MainPrompt,\r\n            validationSystemPrompt,\r\n            validationMainPrompt,\r\n            validationResults,\r\n            call2context,\r\n            call1context,\r\n            trainingdataCall2,\r\n            codeOptions,\r\n            outputArray2\r\n        };\r\n        \r\n        localStorage.setItem('promptAnalysis', JSON.stringify(analysisData));\r\n        if (DEBUG) console.log('Prompt analysis saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving prompt analysis:\", error);\r\n    }\r\n}\r\n\r\nfunction saveTrainingData(clientprompt, outputArray2) {\r\n    try {\r\n        function cleanText(text) {\r\n            if (!text) return '';\r\n            return text.toString()\r\n                .replace(/\\r?\\n|\\r/g, ' ')\r\n                .trim();\r\n        }\r\n        \r\n        const trainingData = {\r\n            prompt: cleanText(clientprompt),\r\n            response: cleanText(JSON.stringify(outputArray2))\r\n        };\r\n        \r\n        localStorage.setItem('trainingData', JSON.stringify(trainingData));\r\n        if (DEBUG) console.log('Training data saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving training data:\", error);\r\n    }\r\n}\r\n\r\nasync function validationCorrection(clientprompt, initialResponse, validationResults) {\r\n    try {\r\n        const conversationHistory = loadConversationHistory();\r\n        \r\n        const trainingData = localStorage.getItem('trainingData') || \"\";\r\n        const codeDescriptions = localStorage.getItem('codeDescriptions') || \"\";\r\n        const lastCallContext = localStorage.getItem('lastCallContext') || \"\";\r\n        \r\n        const validationSystemPrompt = await getSystemPromptFromFile('Validation_System');\r\n        const validationMainPrompt = await getSystemPromptFromFile('Validation_Main');\r\n        \r\n        if (!validationSystemPrompt) {\r\n            throw new Error(\"Failed to load validation system prompt\");\r\n        }\r\n        \r\n        const responseString = Array.isArray(initialResponse) ? initialResponse.join(\"\\n\") : String(initialResponse);\r\n        \r\n        const correctionPrompt = \r\n            \"Main Prompt: \" + validationMainPrompt + \"\\n\\n\" +\r\n            \"Original User Input: \" + clientprompt + \"\\n\\n\" +\r\n            \"Initial Response: \" + responseString + \"\\n\\n\" +\r\n            \"Validation Results: \" + validationResults + \"\\n\\n\" +\r\n            \"Training Data: \" + trainingData + \"\\n\\n\" +\r\n            \"Code Descriptions: \" + codeDescriptions + \"\\n\\n\" +\r\n            \"Context from Last Call: \" + lastCallContext;\r\n        \r\n        if (DEBUG) {\r\n            console.log(\"====== VALIDATION CORRECTION INPUT ======\");\r\n            console.log(correctionPrompt.substring(0, 500) + \"...(truncated)\");\r\n            console.log(\"=========================================\");\r\n        }\r\n        \r\n        const correctedResponse = await processPrompt({\r\n            userInput: correctionPrompt,\r\n            systemPrompt: validationSystemPrompt,\r\n            model: GPT4O,\r\n            temperature: 0.7\r\n        });\r\n        \r\n        const correctionOutputPath = \"C:\\\\Users\\\\joeor\\\\Dropbox\\\\B - Freelance\\\\C_Projectify\\\\VanPC\\\\Training Data\\\\Main Script Training and Context Data\\\\validation_correction_output.txt\";\r\n        fs.writeFileSync(correctionOutputPath, Array.isArray(correctedResponse) ? correctedResponse.join(\"\\n\") : correctedResponse);\r\n        \r\n        if (DEBUG) console.log(`Validation correction saved to ${correctionOutputPath}`);\r\n        \r\n        return correctedResponse;\r\n    } catch (error) {\r\n        console.error(\"Error in validation correction:\", error);\r\n        console.error(error.stack);\r\n        return [\"Error during validation correction: \" + error.message];\r\n    }\r\n}\r\n\r\n// Add this function at the top level\r\nfunction showMessage(message) {\r\n    const messageDiv = document.createElement('div');\r\n    messageDiv.style.color = 'green';\r\n    messageDiv.style.padding = '10px';\r\n    messageDiv.style.margin = '10px';\r\n    messageDiv.style.border = '1px solid green';\r\n    messageDiv.style.borderRadius = '4px';\r\n    messageDiv.textContent = message;\r\n    \r\n    const appBody = document.getElementById('app-body');\r\n    appBody.insertBefore(messageDiv, appBody.firstChild);\r\n    \r\n    // Remove the message after 5 seconds\r\n    setTimeout(() => {\r\n        messageDiv.remove();\r\n    }, 5000);\r\n}\r\n\r\n// Add this function at the top level\r\nfunction showError(message) {\r\n    const errorDiv = document.createElement('div');\r\n    errorDiv.style.color = 'red';\r\n    errorDiv.style.padding = '10px';\r\n    errorDiv.style.margin = '10px';\r\n    errorDiv.style.border = '1px solid red';\r\n    errorDiv.style.borderRadius = '4px';\r\n    errorDiv.textContent = `Error: ${message}`;\r\n    \r\n    const appBody = document.getElementById('app-body');\r\n    appBody.insertBefore(errorDiv, appBody.firstChild);\r\n    \r\n    // Remove the error message after 5 seconds\r\n    setTimeout(() => {\r\n        errorDiv.remove();\r\n    }, 5000);\r\n}\r\n\r\n// Add this function at the top level\r\nfunction setButtonLoading(isLoading) {\r\n    const sendButton = document.getElementById('send');\r\n    const loadingAnimation = document.getElementById('loading-animation');\r\n    \r\n    if (sendButton) {\r\n        sendButton.disabled = isLoading;\r\n    }\r\n    \r\n    if (loadingAnimation) {\r\n        loadingAnimation.style.display = isLoading ? 'flex' : 'none';\r\n    }\r\n}\r\n\r\n// Add this variable to store the last response\r\nlet lastResponse = null;\r\n\r\n// Add this variable to track if the current message is a response\r\nlet isResponse = false;\r\n\r\n// Add this function to write to Excel\r\nasync function writeToExcel() {\r\n    if (!lastResponse) {\r\n        showError('No response to write to Excel');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        await Excel.run(async (context) => {\r\n            const range = context.workbook.getSelectedRange();\r\n            range.load(\"rowIndex\");\r\n            range.load(\"columnIndex\");\r\n            await context.sync();\r\n            \r\n            const startRow = range.rowIndex;\r\n            const startCol = range.columnIndex;\r\n            \r\n            // Split the response into individual code strings\r\n            let codeStrings = [];\r\n            if (Array.isArray(lastResponse)) {\r\n                // Join the array elements and then split by brackets\r\n                const fullText = lastResponse.join(' ');\r\n                codeStrings = fullText.match(/<[^>]+>/g) || [];\r\n            } else if (typeof lastResponse === 'string') {\r\n                codeStrings = lastResponse.match(/<[^>]+>/g) || [];\r\n            }\r\n            \r\n            if (codeStrings.length === 0) {\r\n                throw new Error(\"No valid code strings found in response\");\r\n            }\r\n            \r\n            // Create a range that spans all the rows we need\r\n            const targetRange = range.worksheet.getRangeByIndexes(\r\n                startRow,\r\n                startCol,\r\n                codeStrings.length,\r\n                1\r\n            );\r\n            \r\n            // Set all values at once, with each code string in its own row\r\n            targetRange.values = codeStrings.map(str => [str]);\r\n            \r\n            await context.sync();\r\n            console.log(\"Response written to Excel\");\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error writing to Excel:\", error);\r\n        showError(error.message);\r\n    }\r\n}\r\n\r\n// Add this function to append messages to the chat log\r\nfunction appendMessage(content, isUser = false) {\r\n    const chatLog = document.getElementById('chat-log');\r\n    const welcomeMessage = document.getElementById('welcome-message');\r\n    \r\n    // Hide welcome message when first message is added\r\n    if (welcomeMessage) {\r\n        welcomeMessage.style.display = 'none';\r\n    }\r\n    \r\n    const messageDiv = document.createElement('div');\r\n    messageDiv.className = `chat-message ${isUser ? 'user-message' : 'assistant-message'}`;\r\n    \r\n    const messageContent = document.createElement('p');\r\n    messageContent.className = 'message-content';\r\n    messageContent.textContent = content;\r\n    \r\n    messageDiv.appendChild(messageContent);\r\n    chatLog.appendChild(messageDiv);\r\n    \r\n    // Scroll to bottom\r\n    chatLog.scrollTop = chatLog.scrollHeight;\r\n}\r\n\r\n// Modify the handleSend function\r\nasync function handleSend() {\r\n    const userInput = document.getElementById('user-input').value.trim();\r\n    \r\n    if (!userInput) {\r\n        showError('Please enter a request');\r\n        return;\r\n    }\r\n\r\n    // Check if this is a response to a previous message\r\n    isResponse = conversationHistory.length > 0;\r\n\r\n    // Add user message to chat\r\n    appendMessage(userInput, true);\r\n    \r\n    // Clear input\r\n    document.getElementById('user-input').value = '';\r\n\r\n    setButtonLoading(true);\r\n    try {\r\n        // Process the text through the main function\r\n        console.log(\"Starting structureDatabasequeries\");\r\n        const dbResults = await structureDatabasequeries(userInput);\r\n        console.log(\"Database queries completed\");\r\n        \r\n        if (!dbResults || !Array.isArray(dbResults)) {\r\n            console.error(\"Invalid database results:\", dbResults);\r\n            throw new Error(\"Failed to get valid database results\");\r\n        }\r\n        \r\n        // Format the database results into a string\r\n        const plainTextResults = dbResults.map(result => {\r\n            if (!result) return \"No results found\";\r\n            \r\n            return `Query: ${result.query || 'No query'}\\n` +\r\n                   `Training Data:\\n${(result.trainingData || []).join('\\n')}\\n` +\r\n                   `Code Options:\\n${(result.codeOptions || []).join('\\n')}\\n` +\r\n                   `Code Choosing Context:\\n${(result.call1Context || []).join('\\n')}\\n` +\r\n                   `Code Editing Context:\\n${(result.call2Context || []).join('\\n')}\\n` +\r\n                   `---\\n`;\r\n        }).join('\\n');\r\n\r\n        const enhancedPrompt = `Client Request: ${userInput}\\n\\nDatabase Results:\\n${plainTextResults}`;\r\n        console.log(\"Enhanced prompt created\");\r\n        console.log(\"Enhanced prompt:\", enhancedPrompt);\r\n\r\n        console.log(\"Starting handleConversation\");\r\n        let response = await handleConversation(enhancedPrompt, isResponse);\r\n        console.log(\"Conversation completed\");\r\n        console.log(\"Initial Response:\", response);\r\n\r\n        if (!response || !Array.isArray(response)) {\r\n            console.error(\"Invalid response:\", response);\r\n            throw new Error(\"Failed to get valid response from conversation\");\r\n        }\r\n\r\n        // Run validation and correction if needed\r\n        console.log(\"Starting validation\");\r\n        const validationResults = await validateCodeStrings(response);\r\n        console.log(\"Validation completed:\", validationResults);\r\n\r\n        if (validationResults && validationResults.length > 0) {\r\n            console.log(\"Starting validation correction\");\r\n            response = await validationCorrection(userInput, response, validationResults);\r\n            console.log(\"Validation correction completed\");\r\n        }\r\n        \r\n        // Store the response for Excel writing\r\n        lastResponse = response;\r\n        \r\n        // Add assistant message to chat\r\n        appendMessage(response.join('\\n'));\r\n        \r\n    } catch (error) {\r\n        console.error(\"Error in handleSend:\", error);\r\n        showError(error.message);\r\n        // Add error message to chat\r\n        appendMessage(`Error: ${error.message}`);\r\n    } finally {\r\n        setButtonLoading(false);\r\n    }\r\n}\r\n\r\n// Add this function to reset the chat\r\nfunction resetChat() {\r\n    // Clear the chat log\r\n    const chatLog = document.getElementById('chat-log');\r\n    chatLog.innerHTML = '';\r\n    \r\n    // Restore welcome message\r\n    const welcomeMessage = document.createElement('div');\r\n    welcomeMessage.id = 'welcome-message';\r\n    welcomeMessage.className = 'welcome-message';\r\n    const welcomeTitle = document.createElement('h1');\r\n    welcomeTitle.textContent = 'What would you like to model?';\r\n    welcomeMessage.appendChild(welcomeTitle);\r\n    chatLog.appendChild(welcomeMessage);\r\n    \r\n    // Clear the conversation history\r\n    conversationHistory = [];\r\n    saveConversationHistory(conversationHistory);\r\n    \r\n    // Reset the response flag and last response\r\n    isResponse = false;\r\n    lastResponse = null;\r\n    \r\n    // Clear the input field\r\n    document.getElementById('user-input').value = '';\r\n    \r\n    console.log(\"Chat reset completed\");\r\n}\r\n\r\n/**\r\n * Inserts worksheets from a base64-encoded Excel file\r\n */\r\nasync function insertSheetsFromBase64() {\r\n    try {\r\n        // Fetch the Excel file\r\n        const response = await fetch('https://localhost:3002/assets/Worksheets_4.3.25 v1.xlsx');\r\n        if (!response.ok) {\r\n            throw new Error('Failed to load Excel file');\r\n        }\r\n        \r\n        // Convert the response to an ArrayBuffer\r\n        const arrayBuffer = await response.arrayBuffer();\r\n        \r\n        // Convert ArrayBuffer to base64 string in chunks\r\n        const uint8Array = new Uint8Array(arrayBuffer);\r\n        let binaryString = '';\r\n        const chunkSize = 8192; // Process in 8KB chunks\r\n        \r\n        for (let i = 0; i < uint8Array.length; i += chunkSize) {\r\n            const chunk = uint8Array.slice(i, Math.min(i + chunkSize, uint8Array.length));\r\n            binaryString += String.fromCharCode.apply(null, chunk);\r\n        }\r\n        \r\n        const base64String = btoa(binaryString);\r\n        \r\n        // Call the function to insert worksheets\r\n        await handleInsertWorksheetsFromBase64(base64String);\r\n        console.log(\"Worksheets inserted successfully\");\r\n    } catch (error) {\r\n        console.error(\"Error inserting worksheets:\", error);\r\n        showError(error.message);\r\n    }\r\n}\r\n\r\n// Function to insert sheets and then run code collection - REVERTED\r\nasync function insertSheetsAndRunCodes() {\r\n    try {\r\n        await Excel.run(async (context) => { // Assuming toggleManualCalculation needs Excel context\r\n            context.application.calculationMode = Excel.CalculationMode.manual;\r\n            await context.sync();\r\n        });\r\n\r\n        // Use the original busy state handling\r\n        setButtonLoading(true);\r\n        console.log(\"Starting sheet insertion and code processing...\");\r\n\r\n        // --- 1. Fetch and Insert Base Sheets ---\r\n        console.log(\"Fetching base Excel file...\");\r\n        const worksheetsResponse = await fetch('https://localhost:3002/assets/Worksheets_4.3.25 v1.xlsx');\r\n        if (!worksheetsResponse.ok) {\r\n            throw new Error(`Failed to load Worksheets Excel file: ${worksheetsResponse.status} ${worksheetsResponse.statusText}`);\r\n        }\r\n        \r\n        console.log(\"Converting file to base64...\");\r\n        const worksheetsArrayBuffer = await worksheetsResponse.arrayBuffer();\r\n        const worksheetsUint8Array = new Uint8Array(worksheetsArrayBuffer);\r\n        let worksheetsBinaryString = '';\r\n        const chunkSize = 8192; // Process in 8KB chunks\r\n        for (let i = 0; i < worksheetsUint8Array.length; i += chunkSize) {\r\n            const chunk = worksheetsUint8Array.slice(i, Math.min(i + chunkSize, worksheetsUint8Array.length));\r\n            worksheetsBinaryString += String.fromCharCode.apply(null, chunk);\r\n        }\r\n        const worksheetsBase64String = btoa(worksheetsBinaryString);\r\n        console.log(\"Base64 conversion complete. Inserting sheets...\");\r\n\r\n        // Call the function to insert worksheets WITH the base64 string\r\n        await handleInsertWorksheetsFromBase64(worksheetsBase64String); \r\n        console.log(\"Base sheets inserted successfully.\");\r\n        \r\n        // // --- 1b. Fetch and Insert Codes Sheets ---\r\n        // console.log(\"Fetching codes Excel file...\");\r\n        // const codesResponse = await fetch('https://localhost:3002/assets/codes.xlsx');\r\n        // if (!codesResponse.ok) {\r\n        //     throw new Error(`Failed to load Codes Excel file: ${codesResponse.status} ${codesResponse.statusText}`);\r\n        // }\r\n        \r\n        // console.log(\"Converting codes file to base64...\");\r\n        // const codesArrayBuffer = await codesResponse.arrayBuffer();\r\n        // const codesUint8Array = new Uint8Array(codesArrayBuffer);\r\n        // let codesBinaryString = '';\r\n        // for (let i = 0; i < codesUint8Array.length; i += chunkSize) {\r\n        //     const chunk = codesUint8Array.slice(i, Math.min(i + chunkSize, codesUint8Array.length));\r\n        //     codesBinaryString += String.fromCharCode.apply(null, chunk);\r\n        // }\r\n        // const codesBase64String = btoa(codesBinaryString);\r\n        // console.log(\"Codes Base64 conversion complete. Inserting codes sheets...\");\r\n\r\n        // // Call the function to insert codes worksheets \r\n        // await handleInsertWorksheetsFromBase64(codesBase64String); \r\n        // console.log(\"Codes sheets inserted successfully.\");\r\n        \r\n        // --- 2. Populate code collection ---\r\n        console.log(\"Populating code collection...\");\r\n        const collection = populateCodeCollection(codeStrings);\r\n        console.log(`Code collection populated with ${collection.length} code(s)`);\r\n        \r\n        // --- 3. Run the codes ---\r\n        console.log(\"Running codes...\");\r\n        const runResult = await runCodes(collection);\r\n        console.log(\"Codes executed:\", runResult);\r\n        \r\n        // --- 4. Process assumption tabs ---\r\n        if (runResult && runResult.assumptionTabs && runResult.assumptionTabs.length > 0) {\r\n            console.log(\"Processing assumption tabs:\", runResult.assumptionTabs);\r\n            await processAssumptionTabs(runResult.assumptionTabs);\r\n            console.log(\"Assumption tabs processed successfully\");\r\n        } else {\r\n            console.warn(\"No assumption tabs to process\");\r\n        }\r\n\r\n        // Show success message\r\n        showMessage(\"Model built successfully!\");\r\n\r\n    } catch (error) {\r\n        console.error(\"An error occurred during the build process:\", error);\r\n        showError(`Operation failed: ${error.message || error.toString()}`);\r\n    } finally {\r\n        await Excel.run(async (context) => { // Assuming toggleManualCalculation needs Excel context\r\n            context.application.calculationMode = Excel.CalculationMode.automatic;\r\n            await context.sync();\r\n        });\r\n        setButtonLoading(false);\r\n    }\r\n}\r\n\r\n// Ensure Office.onReady sets up the button click handler for the REVERTED function\r\nOffice.onReady((info) => {\r\n  if (info.host === Office.HostType.Excel) {\r\n    // ***** ADAPT THIS ID TO YOUR ACTUAL BUTTON *****\r\n    const button = document.getElementById(\"insert-and-run\"); \r\n    if (button) {\r\n        // Assign the REVERTED async function as the handler\r\n        button.onclick = insertSheetsAndRunCodes; \r\n    } else {\r\n        // Update the error message to reflect the ID we were looking for\r\n        console.error(\"Could not find button with id='insert-and-run'\");\r\n    }\r\n\r\n    // Keep the setup for your other buttons (send-button, reset-button, etc.)\r\n    // Assign event listeners to the buttons\r\n    const sendButton = document.getElementById('send');\r\n    if (sendButton) sendButton.onclick = handleSend;\r\n\r\n    const writeButton = document.getElementById('write-to-excel');\r\n    if (writeButton) writeButton.onclick = writeToExcel;\r\n    \r\n    const resetButton = document.getElementById('reset-chat');\r\n    if (resetButton) resetButton.onclick = resetChat;\r\n    \r\n    // Test Buttons (Add similar checks if they are essential)\r\n    const testGreenCellButton = document.getElementById('test-green-cell');\r\n    if (testGreenCellButton) testGreenCellButton.onclick = isActiveCellGreen;\r\n\r\n\r\n\r\n\r\n    // Initialize API keys, load history etc.\r\n    initializeAPIKeys().then(keysLoaded => {\r\n      if (!keysLoaded) {\r\n        showError(\"Failed to load API keys. Please check configuration.\");\r\n      }\r\n      // Load conversation history after keys are potentially loaded\r\n      conversationHistory = loadConversationHistory();\r\n    }).catch(error => {\r\n        console.error(\"Error during API key initialization:\", error);\r\n        showError(\"Error initializing API keys: \" + error.message);\r\n    });\r\n    \r\n    // Hide sideload message and show app body\r\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\r\n    document.getElementById(\"app-body\").style.display = \"block\";\r\n  }\r\n});\r\n\r\n// --- Export function (if needed elsewhere, otherwise can be removed) ---\r\n// Keep the existing exportCurrentCodes function if present\r\n\r\n// ... rest of the existing taskpane.js code ...\r\n\r\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"../../assets/ChatGPT Image Apr 2, 2025, 10_34_50 PM.png\", import.meta.url);\n// Module\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Contoso Task Pane Add-in</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"><\" + \"/script> <\" + \"script src=\\\"https://cdn.sheetjs.com/xlsx-0.20.1/package/dist/xlsx.full.min.js\\\"><\" + \"/script> <link rel=\\\"stylesheet noopener\\\" href=\\\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.1.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-Fabric\\\"> <section id=\\\"sideload-msg\\\" class=\\\"ms-welcome__main\\\"> <h2 class=\\\"ms-font-xl\\\">Please <a target=\\\"_blank\\\" rel=\\\"noopener\\\" href=\\\"https://learn.microsoft.com/office/dev/add-ins/testing/test-debug-office-add-ins#sideload-an-office-add-in-for-testing\\\">sideload</a> your add-in to see app body.</h2> </section> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none\\\"> <div class=\\\"logo-container\\\"> <img src=\\\"\" + ___HTML_LOADER_IMPORT_1___ + \"\\\" alt=\\\"Projectify.AI Logo\\\" class=\\\"logo-image\\\"> </div> <div id=\\\"chat-log\\\" class=\\\"chat-log\\\"> <div id=\\\"welcome-message\\\" class=\\\"welcome-message\\\"> <h1>What would you like to model?</h1> </div> </div> <div class=\\\"chat-input-container\\\"> <textarea id=\\\"user-input\\\" class=\\\"ms-TextField-field\\\" rows=\\\"4\\\" placeholder=\\\"Type your request here...\\\"></textarea> <div class=\\\"button-container\\\"> <button id=\\\"send\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Send</span> </button> <button id=\\\"write-to-excel\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Write to Excel</span> </button> <button id=\\\"reset-chat\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Reset Chat</span> </button> <button id=\\\"insert-and-run\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Insert Sheets & Run Codes</span> </button> <button id=\\\"test-green-cell\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Test Green Cell</span> </button> <button id=\\\"test-text-function\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Test Text Function</span> </button> </div> <div id=\\\"loading-animation\\\" class=\\\"loading-animation\\\" style=\\\"display:none\\\"> <div class=\\\"spinner\\\"></div> <div class=\\\"loading-text\\\">Processing...</div> </div> </div> <div id=\\\"status-message\\\" class=\\\"status-message\\\"></div> <div id=\\\"error-display-area\\\" class=\\\"error-display-area\\\" style=\\\"display:none\\\"></div> <div id=\\\"response-area\\\" class=\\\"response-area\\\"></div> </main> </body> </html>\";\n// Exports\nexport default code;"],"names":["Object","defineProperty","exports","value","handleApiError","utils_1","http_1","request_1","async","e","customMessage","url","Error","name","responseError","rawMessage","extractMessage","statusCode","response","status","message","mapHttpStatusError","PineconeConnectionError","err","ChatStream","convertKeys_1","constructor","stream","this","Symbol","asyncIterator","buffer","chunk","newlineIndex","toString","indexOf","line","slice","trim","startsWith","json","parsedJson","JSON","parse","convertedJson","convertKeysToCamelCase","console","debug","PineconeUnmappedHttpError","PineconeNotImplementedError","PineconeUnavailableError","PineconeMaxRetriesExceededError","PineconeInternalServerError","PineconeConflictError","PineconeNotFoundError","PineconeAuthorizationError","PineconeBadRequestError","base_1","CONFIG_HELP","BasePineconeError","failedRequest","super","body","join","retries","requestInfo","failedRequestInfo","getFetch","errors_1","config","fetchApi","g","fetch","PineconeConfigurationError","RetryOnServerFailure","asyncFn","maxRetries","calculateRetryDelay","attempt","baseDelay","maxDelay","jitterFactor","delay","Math","random","min","max","execute","args","isRetryError","error","mappedError","mapErrorIfNeeded","shouldStopRetrying","includes","delayTime","Promise","resolve","setTimeout","cachedSetTimeout","cachedClearTimeout","process","module","defaultSetTimout","defaultClearTimeout","runTimeout","fun","call","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","Array","arguments","i","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","PineconeUnableToResolveHostError","PineconeEnvironmentVarsNotSupportedError","PineconeUnexpectedResponseError","normalizeUrl","PineconeRequestError","urlMessage","context","init","method","cause","setPrototypeOf","captureStackTrace","debugLog","str","PINECONE_DEBUG","log","isBrowser","isEdge","EdgeRuntime","window","__createBinding","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","__exportStar","p","hasOwnProperty","PineconeArgumentError","config_1","validation_1","handling_1","object","isArray","map","item","entries","reduce","acc","key","toCamelCase","replace","_","letter","toUpperCase","text","messageJSON","__setModuleDefault","v","__importStar","mod","result","buildUserAgent","environment_1","packageInfo","userAgentParts","sourceTag","normalizeSourceTag","toLowerCase","queryParamsStringify","params","prefix","keys","querystringSingleKey","filter","part","keyPrefix","fullKey","multiValue","singleValue","encodeURIComponent","String","Set","from","Date","toISOString","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis","Function","obj","prop","scriptUrl","importScripts","location","document","currentScript","tagName","src","scripts","getElementsByTagName","test","b","baseURI","self","href","_regeneratorRuntime","t","r","n","a","iterator","c","u","toStringTag","define","wrap","Generator","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","__await","then","callInvokeWithMethodAndArg","done","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","__proto__","awrap","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","catch","delegateYield","_toConsumableArray","_arrayLikeToArray","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","_createForOfIteratorHelper","_n","F","asyncGeneratorStep","validateCodeStrings","_x","_validateCodeStrings","_callee","inputCodeStrings","errors","tabLabels","rowValues","codeTypes","vvCodes","vrCodes","rrCodes","rvCodes","evCodes","erCodes","validCodes","fileContent","_iterator","_step","codeString","rowMatches","codeMatch","codeType","_i","_arr","code","_i2","_arr2","_code","_iterator2","_step2","_codeString","_codeMatch","_codeType","labelMatch","label","_rowMatches","_iterator3","_step3","_codeString2","driverMatches","_context","match","ok","split","t0","endsWith","parts","trimmedPart","afterAsterisk","substring","add","t1","size","has","rowContent","t2","driverValue","_next","_throw","_asyncToGenerator","handleInsertWorksheetsFromBase64","_handleInsertWorksheetsFromBase","_callee2","base64String","sheetNames","_args2","_context2","Excel","_ref","workbook","insertWorksheetsFromBase64","sync","_x2","ownKeys","getOwnPropertySymbols","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","toPrimitive","_toPrimitive","_toPropertyKey","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","populateCodeCollection","inputText","codeCollection","paramsString","matchAll","rowNum","rowValue","paramName","paramValue","runCodes","_runCodes","_callee4","currentWorksheetName","assumptionTabs","_loop","finalResult","_context5","processedCodes","createdTabs","tabName","_context4","label1","Label1","_ref3","sheets","existingSheet","sourceCalcsWS","newSheet","firstRow","usedRange","worksheets","load","items","find","sheet","delete","getItem","copy","getUsedRange","rowCount","getRange","clear","worksheet","_x19","codeIndex","_ref4","_callee3","codesWS","currentWS","lastUsedRow","pasteRow","lastRow","columnD","row","currentWorksheet","_context3","columnCount","getLastRow","rowIndex","warn","_ref5","sourceRange","copyFrom","RangeCopyType","all","_x21","driverAndAssumptionInputs","_x20","tab","isActiveCellGreen","_isActiveCellGreen","_callee6","_context7","_ref6","_callee5","cellB2","isGreen","_context6","getActiveWorksheet","format","fill","color","address","_x22","_x3","_x4","_driverAndAssumptionInputs","_callee10","calcsPasteRow","worksheetName","_context11","_ref7","_callee7","_context8","_x23","_ref8","_callee8","lastRowRange","_context9","_x24","_ref9","_callee9","determinedLastRow","columnSequence","codeValue","searchRow","searchRange","searchRangeAddress","checkRow","cellB","targetRow","driverParam","labelParam","currentCheckRowForInserts","rowParam","rowItems","numNewRows","baseRowForThisG","insertStartAddress","_i3","sourceRowNum","targetRowNum","sourceRowRange","targetRowRange","yy","currentRowNum","splitArray","x","valueToWrite","colLetter","cellToWrite","numValue","_context10","financialsdriver","insert","InsertShiftDirection","down","formats","formulas","Number","_x25","getLastUsedRow","_x5","_x6","_getLastUsedRow","_callee11","columnLetter","fullColumn","lastCell","lastRowIndex","_context12","getLastCell","adjustDriversJS","_x7","_x8","_adjustDriversJS","_callee12","START_ROW","DRIVER_CODE_COL","LOOKUP_COL","TARGET_COL","driverCodeRangeAddress","lookupRangeAddress","driverCodeRange","lookupRange","driverCodeValues","lookupValues","lookupMap","outputValues","foundCount","notFoundCount","_i4","driverCode","currentRow","foundRow","targetAddress","targetRangeAddress","targetRange","_context13","Map","set","replaceIndirectsJS","_x9","_x10","_replaceIndirectsJS","_callee13","originalFormulas","referencesToLookup","formulaData","formula","searchStartIndex","upperFormula","indirectStartIndex","parenStartIndex","parenEndIndex","argString","_iterator5","_step5","_step5$value","refString","data","_iterator6","_step6","_step6$value","_refString","_data","cellText","newFormulas","_i5","_formulaData","currentFormula","loopCount","MAX_LOOPS","_upperFormula","_indirectStartIndex","_parenStartIndex","_parenEndIndex","indString","_argString","directRef","_context14","originalFormula","index","range","rangeError","debugInfo","valueError","populateFinancialsJS","_x11","_x12","_x13","_populateFinancialsJS","_callee14","financialsSheet","CALCS_FIRST_ROW","ASSUMPTION_CODE_COL","ASSUMPTION_LINK_COL_B","ASSUMPTION_LINK_COL_D","ASSUMPTION_MONTHS_START_COL","FINANCIALS_CODE_COLUMN","FINANCIALS_TARGET_COL_B","FINANCIALS_TARGET_COL_D","FINANCIALS_ANNUALS_START_COL","FINANCIALS_MONTHS_START_COL","ANNUALS_END_COL","MONTHS_END_COL","GREEN_COLOR","CURRENCY_FORMAT","_assumptionCodes$leng","assumptionCodeRange","financialsSearchCol","financialsUsedRange","financialsLastRow","fallbackRange","financialsCodeMap","financialsCodeRange","_i6","tasks","assumptionCodes","_i7","_assumptionCodes$leng2","assumptionRow","cellAddressB","cellAddressD","cellAddressMonths","formulaLinkB","formulaLinkD","formulaLinkMonths","_i8","_tasks","task","originalTargetRowsAsc","taskAdjustedRows","totalShift","_i9","_tasks2","_task","populateRow","cellD","cellAnnualsStart","cellMonthsStart","codePrefix","formulaJ","_i10","_tasks3","_task2","_populateRow","sourceAnnuals","destAnnuals","sourceMonths","destMonths","_context15","addressB","addressD","addressMonths","sort","uniqueRow","tasksAtThisRow","currentAdjustedRowForGroup","font","bold","italic","indentLevel","formulasR1C1","numberFormat","autoFill","AutoFillType","fillDefault","autofillError","linkFinReferencesJS","_x14","_x15","_x16","_linkFinReferencesJS","_callee15","CHECK_COLUMN","FINANCIALS_LOOKUP_COLUMN","TARGET_COLUMN_START","CLEAR_COLUMN","MONTHS_END_COLUMN","NON_GREEN_COLOR_HEX","checkRangeAddress","checkRange","financialsLookupMap","finLookupCol","finUsedRange","startRowIndex","actualRow","checkValues","checkColors","_i11","checkValue","checkColor","searchCode","referenceRow","targetCellAddress","targetCell","fillDestinationAddress","fillDestinationRange","clearRangeAddress","_context16","ClearApplyTo","contents","formatChangesInWorkingCapitalJS","_x17","_formatChangesInWorkingCapitalJS","_callee16","_context17","processAssumptionTabs","_x18","_processAssumptionTabs","_callee19","assumptionTabNames","FINANCIALS_SHEET_NAME","AUTOFILL_START_COLUMN","AUTOFILL_END_COLUMN","_iterator7","_step7","_loop2","_context21","_context20","_ref11","_callee18","updatedLastRow","fillRange","_context19","_x27","_ref10","_callee17","finSheet","sourceRangeFin","fillRangeFin","_context18","_x26","t3","API_KEYS","performance","now","OPENAI_API_KEY","PINECONE_API_KEY","srcPaths","_initializeAPIKeys","configResponse","configText","openaiKeyMatch","pineconeKeyMatch","PINECONE_INDEXES","codes","apiEndpoint","call2trainingdata","call2context","call1context","GPT4O","conversationHistory","saveConversationHistory","history","localStorage","setItem","stringify","loadConversationHistory","parsedHistory","callOpenAI","_callOpenAI","messages","model","temperature","errorData","_args3","headers","statusText","choices","content","createEmbedding","_createEmbedding","input","embedding","loadPromptFromFile","_loadPromptFromFile","promptKey","paths","_paths","path","getSystemPromptFromFile","prompt","processPrompt","_processPrompt","_ref2","userInput","systemPrompt","_ref2$history","responseContent","parsed","role","structureDatabasequeries","_structureDatabasequeries","clientprompt","systemStructurePrompt","queryStrings","results","queryString","queryResults","queryVectorDB","queryPrompt","similarityThreshold","indexName","numResults","t4","query","trainingData","call2Context","call1Context","codeOptions","t5","t6","t7","_queryVectorDB","_ref3$indexName","_ref3$numResults","_ref3$similarityThres","indexConfig","errorText","matches","matchesDescription","cleanMatches","vector","topK","includeMetadata","namespace","score","metadata","toFixed","extractTextFromJson","jsonInput","jsonData","safeJsonForPrompt","jsonString","handleFollowUpConversation","_handleFollowUpConversation","trainingdataCall2","followUpPrompt","MainPrompt","savePromptAnalysis","saveTrainingData","handleInitialConversation","handleConversation","_handleConversation","isFollowUp","_args10","_handleInitialConversation","Call2prompt","outputArray2","validationSystemPrompt","validationMainPrompt","validationResults","analysisData","clientRequest","mainPrompt","cleanText","validationCorrection","_validationCorrection","initialResponse","codeDescriptions","lastCallContext","responseString","correctionPrompt","correctedResponse","stack","showMessage","messageDiv","createElement","style","padding","margin","border","borderRadius","textContent","appBody","getElementById","insertBefore","firstChild","remove","showError","errorDiv","setButtonLoading","isLoading","sendButton","loadingAnimation","disabled","display","lastResponse","isResponse","writeToExcel","_writeToExcel","startRow","startCol","codeStrings","fullText","getSelectedRange","columnIndex","getRangeByIndexes","appendMessage","isUser","chatLog","welcomeMessage","className","messageContent","appendChild","scrollTop","scrollHeight","handleSend","_handleSend","dbResults","plainTextResults","enhancedPrompt","resetChat","innerHTML","id","welcomeTitle","insertSheetsAndRunCodes","_insertSheetsAndRunCodes","worksheetsResponse","worksheetsArrayBuffer","worksheetsUint8Array","worksheetsBinaryString","worksheetsBase64String","collection","runResult","application","calculationMode","CalculationMode","manual","arrayBuffer","Uint8Array","fromCharCode","btoa","automatic","Office","onReady","info","host","HostType","button","onclick","writeButton","resetButton","testGreenCellButton","initializeAPIKeys","keysLoaded","URL"],"sourceRoot":""}