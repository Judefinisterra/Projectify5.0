{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/errors/base.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/utils/fetch.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/errors/utils.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/errors/index.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/utils/user-agent.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/assistant/chatStream.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/utils/retries.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/utils/queryParamsStringify.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/errors/request.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/utils/debugLog.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/errors/config.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/utils/normalizeUrl.js","webpack://excel-custom-functions-js/./node_modules/process/browser.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/errors/http.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/errors/validation.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/utils/index.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/utils/environment.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/utils/convertKeys.js","webpack://excel-custom-functions-js/./node_modules/@pinecone-database/pinecone/dist/errors/handling.js","webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/webpack/runtime/global","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions-js/webpack/runtime/publicPath","webpack://excel-custom-functions-js/webpack/runtime/jsonp chunk loading","webpack://excel-custom-functions-js/./src/taskpane/Validation.js","webpack://excel-custom-functions-js/./src/taskpane/CodeCollection.js","webpack://excel-custom-functions-js/./src/taskpane/IndexWorksheet.js","webpack://excel-custom-functions-js/./src/taskpane/AIModelPlanner.js","webpack://excel-custom-functions-js/./config.js","webpack://excel-custom-functions-js/./src/taskpane/AIcalls.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.html"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BasePineconeError = void 0;\nclass BasePineconeError extends Error {\n    constructor(message, cause) {\n        super(message);\n        // Set the prototype explicitly to ensure instanceof works correctly\n        Object.setPrototypeOf(this, new.target.prototype);\n        // Maintain a proper stack trace in V8 environments (Chrome and Node.js)\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, new.target);\n        }\n        this.name = this.constructor.name;\n        this.cause = cause;\n    }\n}\nexports.BasePineconeError = BasePineconeError;\n//# sourceMappingURL=base.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFetch = void 0;\nconst errors_1 = require(\"../errors\");\nconst getFetch = (config) => {\n    if (config.fetchApi) {\n        // User-provided fetch implementation, if any, takes precedence.\n        return config.fetchApi;\n    }\n    else if (global.fetch) {\n        // If a fetch implementation is present in the global scope (will work with native fetch in Node18+, Edge runtimes,\n        // etc.), use that. This should prevent confusing failures in\n        // Next.js projects where @vercel/fetch is mandated and\n        // other implementations are stubbed out.\n        return global.fetch;\n    }\n    else {\n        // If no fetch implementation is found, throw an error.\n        throw new errors_1.PineconeConfigurationError('No global or user-provided fetch implementations found. Please supply a fetch implementation.');\n    }\n};\nexports.getFetch = getFetch;\n//# sourceMappingURL=fetch.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extractMessage = void 0;\n/** @internal */\nconst extractMessage = async (error) => {\n    let message = await error.response.text();\n    // Error response is sometimes the raw message, sometimes it's JSON\n    // so we will try to parse out the actual message text, but\n    // we wrap it in a try to avoid crashing in a way that obscures\n    // the actual error if the response format changes in the future.\n    try {\n        const messageJSON = JSON.parse(message);\n        if (messageJSON.message) {\n            message = messageJSON.message;\n        }\n    }\n    catch (e) {\n        // noop\n    }\n    return message;\n};\nexports.extractMessage = extractMessage;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleApiError = exports.extractMessage = exports.PineconeArgumentError = exports.BasePineconeError = exports.PineconeRequestError = exports.PineconeConnectionError = exports.PineconeUnableToResolveHostError = exports.PineconeEnvironmentVarsNotSupportedError = exports.PineconeUnexpectedResponseError = exports.PineconeConfigurationError = void 0;\nvar config_1 = require(\"./config\");\nObject.defineProperty(exports, \"PineconeConfigurationError\", { enumerable: true, get: function () { return config_1.PineconeConfigurationError; } });\nObject.defineProperty(exports, \"PineconeUnexpectedResponseError\", { enumerable: true, get: function () { return config_1.PineconeUnexpectedResponseError; } });\nObject.defineProperty(exports, \"PineconeEnvironmentVarsNotSupportedError\", { enumerable: true, get: function () { return config_1.PineconeEnvironmentVarsNotSupportedError; } });\nObject.defineProperty(exports, \"PineconeUnableToResolveHostError\", { enumerable: true, get: function () { return config_1.PineconeUnableToResolveHostError; } });\n__exportStar(require(\"./http\"), exports);\nvar request_1 = require(\"./request\");\nObject.defineProperty(exports, \"PineconeConnectionError\", { enumerable: true, get: function () { return request_1.PineconeConnectionError; } });\nObject.defineProperty(exports, \"PineconeRequestError\", { enumerable: true, get: function () { return request_1.PineconeRequestError; } });\nvar base_1 = require(\"./base\");\nObject.defineProperty(exports, \"BasePineconeError\", { enumerable: true, get: function () { return base_1.BasePineconeError; } });\nvar validation_1 = require(\"./validation\");\nObject.defineProperty(exports, \"PineconeArgumentError\", { enumerable: true, get: function () { return validation_1.PineconeArgumentError; } });\nvar utils_1 = require(\"./utils\");\nObject.defineProperty(exports, \"extractMessage\", { enumerable: true, get: function () { return utils_1.extractMessage; } });\nvar handling_1 = require(\"./handling\");\nObject.defineProperty(exports, \"handleApiError\", { enumerable: true, get: function () { return handling_1.handleApiError; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.buildUserAgent = void 0;\nconst environment_1 = require(\"./environment\");\nconst packageInfo = __importStar(require(\"../version.json\"));\nconst buildUserAgent = (config) => {\n    // We always want to include the package name and version\n    // along with the langauge name to help distinguish these\n    // requests from those emitted by other clients\n    const userAgentParts = [\n        `${packageInfo.name} v${packageInfo.version}`,\n        'lang=typescript',\n    ];\n    if ((0, environment_1.isEdge)()) {\n        userAgentParts.push('Edge Runtime');\n    }\n    // If available, capture information about the Node.js version\n    if (typeof process !== 'undefined' && process && process.version) {\n        userAgentParts.push(`node ${process.version}`);\n    }\n    if (config.sourceTag) {\n        userAgentParts.push(`source_tag=${normalizeSourceTag(config.sourceTag)}`);\n    }\n    return userAgentParts.join('; ');\n};\nexports.buildUserAgent = buildUserAgent;\nconst normalizeSourceTag = (sourceTag) => {\n    if (!sourceTag) {\n        return;\n    }\n    /**\n     * normalize sourceTag\n     * 1. Lowercase\n     * 2. Limit charset to [a-z0-9_ :]\n     * 3. Trim left/right spaces\n     * 4. Condense multiple spaces to one, and replace with underscore\n     */\n    return sourceTag\n        .toLowerCase()\n        .replace(/[^a-z0-9_ :]/g, '')\n        .trim()\n        .replace(/[ ]+/g, '_');\n};\n//# sourceMappingURL=user-agent.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChatStream = void 0;\nconst convertKeys_1 = require(\"../utils/convertKeys\");\n/**\n * Implements an async iterable that processes the readable stream of an assistant chat response.\n *\n * This class expects each chunk of data in the stream to begin with `data:` and be followed by a valid chunk of JSON.\n * If a chunk contains malformed JSON, it is skipped, and a debug message is logged.\n *\n * @template Item - The type of items yielded by the iterable.\n */\nclass ChatStream {\n    constructor(stream) {\n        this.stream = stream;\n    }\n    async *[Symbol.asyncIterator]() {\n        let buffer = '';\n        for await (const chunk of this.stream) {\n            buffer += chunk.toString();\n            let newlineIndex;\n            while ((newlineIndex = buffer.indexOf('\\n')) !== -1) {\n                const line = buffer.slice(0, newlineIndex).trim();\n                buffer = buffer.slice(newlineIndex + 1);\n                // each chunk of json should begin with 'data:'\n                if (line && line.startsWith('data:')) {\n                    const json = line.slice(5).trim();\n                    try {\n                        const parsedJson = JSON.parse(json);\n                        const convertedJson = (0, convertKeys_1.convertKeysToCamelCase)(parsedJson);\n                        yield convertedJson;\n                    }\n                    catch (err) {\n                        console.debug(`Skipping malformed JSON:${line}`);\n                        continue;\n                    }\n                }\n            }\n        }\n        if (buffer.trim()) {\n            try {\n                const parsedJson = JSON.parse(buffer);\n                const convertedJson = (0, convertKeys_1.convertKeysToCamelCase)(parsedJson);\n                yield convertedJson;\n            }\n            catch (err) {\n                console.debug(`Skipping malformed JSON:${buffer}`);\n            }\n        }\n    }\n}\nexports.ChatStream = ChatStream;\n//# sourceMappingURL=chatStream.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RetryOnServerFailure = void 0;\nconst errors_1 = require(\"../errors\");\n// TODO: Parameterize this class to allow for custom error handling (e.g. only retry 400 errors on Chat endpoint,\n//  but not globally\n/* Retry asynchronous operations.\n *\n * @param maxRetries - The maximum number of retries to attempt.\n * @param asyncFn - The asynchronous function to retry.\n */\nclass RetryOnServerFailure {\n    constructor(asyncFn, maxRetries) {\n        /*\n         * Calculate the delay time for retrying an operation.\n         *\n         * @param attempt: The # of times the operation has been attempted.\n         * @param baseDelay: The base delay time in milliseconds.\n         * @param maxDelay: The maximum delay time in milliseconds.\n         * @param jitterFactor: The magnitude of jitter relative to the delay.\n         */\n        this.calculateRetryDelay = (attempt, baseDelay = 200, maxDelay = 20000, jitterFactor = 0.25) => {\n            let delay = baseDelay * 2 ** attempt; // Exponential (baseDelay * 2^attempt)\n            // Apply jitter as a random percentage of the original delay; e.g.: if `jitterFactor` = 0.25 and `baseDelay` = 1000,\n            // then `jitter` is 25% of `baseDelay`\n            const jitter = delay * jitterFactor * (Math.random() - 0.5);\n            delay += jitter;\n            // Ensure delay is not negative or greater than maxDelay\n            return Math.min(maxDelay, Math.max(0, delay));\n        };\n        if (maxRetries) {\n            this.maxRetries = maxRetries;\n        }\n        else {\n            this.maxRetries = 3;\n        }\n        if (this.maxRetries > 10) {\n            throw new Error('Max retries cannot exceed 10');\n        }\n        this.asyncFn = asyncFn;\n    }\n    async execute(...args) {\n        if (this.maxRetries < 1) {\n            return this.asyncFn(...args);\n        }\n        for (let attempt = 0; attempt < this.maxRetries; attempt++) {\n            try {\n                const response = await this.asyncFn(...args);\n                // Return immediately if the response is not a retryable error\n                if (!this.isRetryError(response)) {\n                    return response;\n                }\n                throw response; // Will catch this in next line\n            }\n            catch (error) {\n                const mappedError = this.mapErrorIfNeeded(error);\n                // If the error is not retryable, throw it immediately\n                if (this.shouldStopRetrying(mappedError)) {\n                    throw mappedError;\n                }\n                // On the last retry, throw a MaxRetriesExceededError\n                if (attempt === this.maxRetries - 1) {\n                    throw new errors_1.PineconeMaxRetriesExceededError(this.maxRetries);\n                }\n                // Wait before retrying\n                await this.delay(attempt + 1);\n            }\n        }\n        // This fallback is unnecessary, but included for type safety\n        throw new errors_1.PineconeMaxRetriesExceededError(this.maxRetries);\n    }\n    isRetryError(response) {\n        if (!response) {\n            return false;\n        }\n        if (response) {\n            if (response.name &&\n                ['PineconeUnavailableError', 'PineconeInternalServerError'].includes(response.name)) {\n                return true;\n            }\n            if (response.status && response.status >= 500) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async delay(attempt) {\n        const delayTime = this.calculateRetryDelay(attempt);\n        return new Promise((resolve) => setTimeout(resolve, delayTime));\n    }\n    mapErrorIfNeeded(error) {\n        if (error?.status) {\n            return (0, errors_1.mapHttpStatusError)(error);\n        }\n        return error; // Return original error if no mapping is needed\n    }\n    shouldStopRetrying(error) {\n        if (error.status) {\n            return error.status < 500;\n        }\n        if (error.name) {\n            return (error.name !== 'PineconeUnavailableError' &&\n                error.name !== 'PineconeInternalServerError');\n        }\n        return true;\n    }\n}\nexports.RetryOnServerFailure = RetryOnServerFailure;\n//# sourceMappingURL=retries.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.queryParamsStringify = void 0;\n// Everything in this file is lifted from the generated openapi runtime.\n// I need to create a small modification of the generated queryParamStringify\n// function in order to fix an issue with array params.\n//\n// See https://github.com/pinecone-io/pinecone-ts-client/pull/74\nfunction queryParamsStringify(params, prefix = '') {\n    return Object.keys(params)\n        .map((key) => querystringSingleKey(key, params[key], prefix))\n        .filter((part) => part.length > 0)\n        .join('&');\n}\nexports.queryParamsStringify = queryParamsStringify;\nfunction querystringSingleKey(key, value, keyPrefix = '') {\n    const fullKey = keyPrefix + (keyPrefix.length ? `[${key}]` : key);\n    // This is a one line change from the default querystring implementation. Checking\n    // with `Array.isArray` instead of `value instanceof Array` allows us to get the\n    // the correct behavior when stringifying array params.\n    if (Array.isArray(value)) {\n        const multiValue = value\n            .map((singleValue) => encodeURIComponent(String(singleValue)))\n            .join(`&${encodeURIComponent(fullKey)}=`);\n        return `${encodeURIComponent(fullKey)}=${multiValue}`;\n    }\n    if (value instanceof Set) {\n        const valueAsArray = Array.from(value);\n        return querystringSingleKey(key, valueAsArray, keyPrefix);\n    }\n    if (value instanceof Date) {\n        return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;\n    }\n    if (value instanceof Object) {\n        return queryParamsStringify(value, fullKey);\n    }\n    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;\n}\n//# sourceMappingURL=queryParamsStringify.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PineconeRequestError = exports.PineconeConnectionError = void 0;\nconst base_1 = require(\"./base\");\n/**\n * This error is thrown when the client attempts to make a\n * request and never receives any response.\n *\n * This could be due to:\n * - Network problems which prevent the request from being completed.\n * - An outage of Pinecone's APIs. See [Pinecone's status page](https://status.pinecone.io/) to find out whether there is an ongoing incident.\n *\n * The `cause` property will contain a reference to the underlying error. Inspect its value to find out more about the root cause of the error.\n * ```\n * import { Pinecone } from '@pinecone-database/pinecone';\n *\n * const p = new Pinecone({ apiKey: 'invalid-api-key-value' })\n *\n * try {\n *  await p.listIndexes();\n * } catch (e) {\n *  console.log(e.name); // PineconeConnectionError\n *  console.log(e.cause); // Error [FetchError]: The request failed and the interceptors did not return an alternative response\n *  console.log(e.cause.cause); // TypeError: fetch failed\n *  console.log(e.cause.cause.cause); // Error: getaddrinfo ENOTFOUND controller.wrong-environment.pinecone.io\n * }\n * ```\n *\n * @see [Pinecone's status page](https://status.pinecone.io/)\n * */\nclass PineconeConnectionError extends base_1.BasePineconeError {\n    constructor(e, url) {\n        let urlMessage = '';\n        if (url) {\n            urlMessage = ` while calling ${url}`;\n        }\n        super(`Request failed to reach Pinecone${urlMessage}. This can occur for reasons such as network problems that prevent the request from being completed, or a Pinecone API outage. Check your network connection, and visit https://status.pinecone.io/ to see whether any outages are ongoing.`, e);\n        this.name = 'PineconeConnectionError';\n    }\n}\nexports.PineconeConnectionError = PineconeConnectionError;\n/**\n * This error is thrown any time a request to the Pinecone API fails.\n *\n * The `cause` property will contain a reference to the underlying error. Inspect its value to find out more about the root cause.\n */\nclass PineconeRequestError extends base_1.BasePineconeError {\n    constructor(context) {\n        if (context.response) {\n            super(`Request failed during a call to ${context.init.method} ${context.url} with status ${context.response.status}`, context.error);\n        }\n        else {\n            super(`Request failed during a call to ${context.init.method} ${context.url}`, context.error);\n        }\n    }\n}\nexports.PineconeRequestError = PineconeRequestError;\n//# sourceMappingURL=request.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.debugLog = void 0;\nconst debugLog = (str) => {\n    if (typeof process !== 'undefined' &&\n        process &&\n        process.env &&\n        process.env.PINECONE_DEBUG) {\n        console.log(str);\n    }\n};\nexports.debugLog = debugLog;\n//# sourceMappingURL=debugLog.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PineconeUnableToResolveHostError = exports.PineconeEnvironmentVarsNotSupportedError = exports.PineconeUnexpectedResponseError = exports.PineconeConfigurationError = void 0;\nconst base_1 = require(\"./base\");\nconst CONFIG_HELP = `You can find the configuration values for your project in the Pinecone developer console at https://app.pinecone.io.`;\n/**\n * This exception indicates there is a problem with the configuration values\n * you have provided to the client. The error message should contain additional\n * context about what you are missing.\n *\n * @see {@link Pinecone} for information about initializing the client.\n */\nclass PineconeConfigurationError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(`${message} ${CONFIG_HELP}`);\n        this.name = 'PineconeConfigurationError';\n    }\n}\nexports.PineconeConfigurationError = PineconeConfigurationError;\n/**\n * This exception indicates an API call that returned a response that was\n * unable to be parsed or that did not include expected fields. It's not\n * expected to ever occur.\n *\n * If you encounter this error, please [file an issue](https://github.com/pinecone-io/pinecone-ts-client/issues) so we can investigate.\n */\nclass PineconeUnexpectedResponseError extends base_1.BasePineconeError {\n    constructor(url, status, body, message) {\n        super(`Unexpected response while calling ${url}. ${message ? message + ' ' : ''}Status: ${status}. Body: ${body}`);\n        this.name = 'PineconeUnexpectedResponseError';\n    }\n}\nexports.PineconeUnexpectedResponseError = PineconeUnexpectedResponseError;\n/**\n * This error occurs when the client tries to read environment variables in\n * an environment that does not have access to the Node.js global `process.env`.\n *\n * If you are seeing this error, you will need to configure the client by passing\n * configuration values to the `Pinecone` constructor.\n *\n * ```typescript\n * import { Pinecone } from '@pinecone-database/pinecone';\n *\n * const pinecone = new Pinecone({\n *    apiKey: 'YOUR_API_KEY',\n * })\n * ```\n *\n * @see Instructions for configuring { @link Pinecone }\n */\nclass PineconeEnvironmentVarsNotSupportedError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(message);\n        this.name = 'PineconeEnvironmentVarsNotSupportedError';\n    }\n}\nexports.PineconeEnvironmentVarsNotSupportedError = PineconeEnvironmentVarsNotSupportedError;\n/**\n * This error occurs when the client is unable to resolve the database host for a given\n * index. This is unexpected to occur unless there is a problem with the Pinecone service.\n *\n * If you encounter this error, please [file an issue](https://github.com/pinecone-io/pinecone-ts-client/issues) so we can investigate.\n */\nclass PineconeUnableToResolveHostError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(message);\n        this.name = 'PineconeUnableToResolveHostError';\n    }\n}\nexports.PineconeUnableToResolveHostError = PineconeUnableToResolveHostError;\n//# sourceMappingURL=config.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeUrl = void 0;\nfunction normalizeUrl(url) {\n    if (!url || url.trim().length === 0) {\n        return;\n    }\n    if (!url.startsWith('http://') && !url.startsWith('https://')) {\n        return 'https://' + url;\n    }\n    return url;\n}\nexports.normalizeUrl = normalizeUrl;\n//# sourceMappingURL=normalizeUrl.js.map","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mapHttpStatusError = exports.PineconeUnmappedHttpError = exports.PineconeNotImplementedError = exports.PineconeUnavailableError = exports.PineconeMaxRetriesExceededError = exports.PineconeInternalServerError = exports.PineconeConflictError = exports.PineconeNotFoundError = exports.PineconeAuthorizationError = exports.PineconeBadRequestError = void 0;\nconst base_1 = require(\"./base\");\nconst CONFIG_HELP = `You can find the configuration values for your project in the Pinecone developer console at https://app.pinecone.io`;\n/** This error is thrown when API requests return with status 400. Typically this is due to some aspect of the request being incorrect or invalid.\n *\n * Some examples when this error could occur:\n * - While attempting to create an index with no available quota in your project.\n * - While upserting records that do not match the `dimension` of your index\n * - While attempting to create an index using an invalid name (\"!@#$%\")\n */\nclass PineconeBadRequestError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { message } = failedRequest;\n        super(message);\n        this.name = 'PineconeBadRequestError';\n    }\n}\nexports.PineconeBadRequestError = PineconeBadRequestError;\n/**\n * This error occurs when API requests are attempted using invalid configurations such as a mispelled or revoked API key.\n *\n * Log in to https://app.pinecone.io to verify you have configured the { @link Pinecone }\n * client using the correct values.\n */\nclass PineconeAuthorizationError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url } = failedRequest;\n        if (url) {\n            super(`The API key you provided was rejected while calling ${url}. Please check your configuration values and try again. ${CONFIG_HELP}`);\n        }\n        else {\n            super(`The API key you provided was rejected. Please check your configuration values and try again. ${CONFIG_HELP}`);\n        }\n        this.name = 'PineconeAuthorizationError';\n    }\n}\nexports.PineconeAuthorizationError = PineconeAuthorizationError;\n/**\n * This error is thrown when interacting with a resource such as an index or collection\n * that cannot be found.\n */\nclass PineconeNotFoundError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url } = failedRequest;\n        if (url) {\n            super(`A call to ${url} returned HTTP status 404.`);\n        }\n        else {\n            super('The requested resource could not be found.');\n        }\n        this.name = 'PineconeNotFoundError';\n    }\n}\nexports.PineconeNotFoundError = PineconeNotFoundError;\n/**\n * This error is thrown when attempting to create a resource such as an index or\n * collection with a name that is already in use.\n * */\nclass PineconeConflictError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, message } = failedRequest;\n        if (url) {\n            super(`A call to ${url} returned HTTP status 409. ${message ? message : ''}`);\n        }\n        else {\n            super('The resource you are attempting to create already exists.');\n        }\n        this.name = 'PineconeConflictError';\n    }\n}\nexports.PineconeConflictError = PineconeConflictError;\n/**\n * This error indicates API responses are returning with status 500 and\n * something is wrong with Pinecone. Check the [status page](https://status.pinecone.io/)\n * for information about current or recent outages.\n *\n * @see [Pinecone's status page](https://status.pinecone.io/)\n */\nclass PineconeInternalServerError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, body, status } = failedRequest;\n        const intro = url\n            ? `An internal server error occurred while calling the ${url} endpoint.`\n            : '';\n        const help = `To see overall service health and learn whether this seems like a large-scale problem or one specific to your request, please go to https://status.pinecone.io/ to view our status page. If you believe the error reflects a problem with this client, please file a bug report in the github issue tracker at https://github.com/pinecone-io/pinecone-ts-client`;\n        const statusMessage = status ? `Status Code: ${status}.` : '';\n        const bodyMessage = body ? `Body: ${body}` : '';\n        super([intro, statusMessage, help, bodyMessage].join(' ').trim());\n        this.name = 'PineconeInternalServerError';\n    }\n}\nexports.PineconeInternalServerError = PineconeInternalServerError;\n/* We can choose to throw this error when we want to limit requests to the server. When instantiated, pass the\n number of retries the user has made already. */\nclass PineconeMaxRetriesExceededError extends base_1.BasePineconeError {\n    constructor(retries) {\n        const intro = `You have exceeded the max configured retries (${retries}). `;\n        const help = 'Increase the maxRetries field in the RetryOptions object to retry more times. If you believe the' +\n            ' error reflects a problem with this client, please file a bug report in the github issue tracker at https://github.com/pinecone-io/pinecone-ts-client';\n        super([intro, help].join(' ').trim());\n        this.name = 'PineconeMaxRetriesExceededError';\n    }\n}\nexports.PineconeMaxRetriesExceededError = PineconeMaxRetriesExceededError;\n/**\n * This error indicates API responses are returning with status 503 and\n * Pinecone itself is down. Check the [status page](https://status.pinecone.io/)\n * for information about current or recent outages.\n *\n * The difference between this error (503) and a PineconeInternalServerError (500) is that this error does NOT indicate\n * that the server is _unable_ to process the request, just that the server will not process the request.\n *\n * @see [Pinecone's status page](https://status.pinecone.io/)\n */\nclass PineconeUnavailableError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, body, status } = failedRequest;\n        const intro = url\n            ? `The Pinecone service (${url}) is temporarily unavailable.`\n            : '';\n        const statusMessage = status ? `Status Code: ${status}.` : '';\n        const help = `To see overall service health and learn whether this seems like a large-scale problem or one specific to your request, please go to https://status.pinecone.io/ to view our status page. If you believe the error reflects a problem with this client, please file a bug report in the github issue tracker at https://github.com/pinecone-io/pinecone-ts-client`;\n        const bodyMessage = body ? `Body: ${body}` : '';\n        super([intro, statusMessage, help, bodyMessage].join(' ').trim());\n        this.name = 'PineconeUnavailableError';\n    }\n}\nexports.PineconeUnavailableError = PineconeUnavailableError;\n/**\n * This error is thrown when you are attempting to use a feature that is\n * not implemented or unavailable to you on your current plan. Free indexes\n * only support a subset of Pinecone's capabilities, and if you are seeing\n * these exceptions then you should consult the\n * [pricing page](https://www.pinecone.io/pricing/) to see whether upgrading\n * makes sense for your use case.\n */\nclass PineconeNotImplementedError extends base_1.BasePineconeError {\n    constructor(requestInfo) {\n        const { url, message } = requestInfo;\n        if (url) {\n            super(`A call to ${url} returned HTTP status 501. ${message ? message : ''}`);\n        }\n        else {\n            super();\n        }\n        this.name = 'PineconeNotImplementedError';\n    }\n}\nexports.PineconeNotImplementedError = PineconeNotImplementedError;\n/**\n * This catch-all exception is thrown when a request error that is not\n * specifically mapped to another exception is thrown.\n */\nclass PineconeUnmappedHttpError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, status, body, message } = failedRequest;\n        const intro = url\n            ? `An unexpected error occured while calling the ${url} endpoint. `\n            : '';\n        const statusMsg = status ? `Status: ${status}. ` : '';\n        const bodyMsg = body ? `Body: ${body}` : '';\n        super([intro, message, statusMsg, bodyMsg].join(' ').trim());\n        this.name = 'PineconeUnmappedHttpError';\n    }\n}\nexports.PineconeUnmappedHttpError = PineconeUnmappedHttpError;\n/** @internal */\nconst mapHttpStatusError = (failedRequestInfo) => {\n    switch (failedRequestInfo.status) {\n        case 400:\n            return new PineconeBadRequestError(failedRequestInfo);\n        case 401:\n            return new PineconeAuthorizationError(failedRequestInfo);\n        case 403:\n            return new PineconeBadRequestError(failedRequestInfo);\n        case 404:\n            return new PineconeNotFoundError(failedRequestInfo);\n        case 409:\n            return new PineconeConflictError(failedRequestInfo);\n        case 500:\n            return new PineconeInternalServerError(failedRequestInfo);\n        case 501:\n            return new PineconeNotImplementedError(failedRequestInfo);\n        case 503:\n            return new PineconeUnavailableError(failedRequestInfo);\n        default:\n            throw new PineconeUnmappedHttpError(failedRequestInfo);\n    }\n};\nexports.mapHttpStatusError = mapHttpStatusError;\n//# sourceMappingURL=http.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PineconeArgumentError = void 0;\nconst base_1 = require(\"./base\");\n/**\n * This error is thrown when arguments passed to a Pinecone\n * client method fail a runtime validation.\n */\nclass PineconeArgumentError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(`${message}`);\n        this.name = 'PineconeArgumentError';\n    }\n}\nexports.PineconeArgumentError = PineconeArgumentError;\n//# sourceMappingURL=validation.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChatStream = exports.RetryOnServerFailure = exports.convertKeysToCamelCase = exports.getFetch = exports.buildUserAgent = exports.queryParamsStringify = exports.normalizeUrl = exports.debugLog = void 0;\nconst debugLog_1 = require(\"./debugLog\");\nObject.defineProperty(exports, \"debugLog\", { enumerable: true, get: function () { return debugLog_1.debugLog; } });\nconst normalizeUrl_1 = require(\"./normalizeUrl\");\nObject.defineProperty(exports, \"normalizeUrl\", { enumerable: true, get: function () { return normalizeUrl_1.normalizeUrl; } });\nconst queryParamsStringify_1 = require(\"./queryParamsStringify\");\nObject.defineProperty(exports, \"queryParamsStringify\", { enumerable: true, get: function () { return queryParamsStringify_1.queryParamsStringify; } });\nconst user_agent_1 = require(\"./user-agent\");\nObject.defineProperty(exports, \"buildUserAgent\", { enumerable: true, get: function () { return user_agent_1.buildUserAgent; } });\nconst fetch_1 = require(\"./fetch\");\nObject.defineProperty(exports, \"getFetch\", { enumerable: true, get: function () { return fetch_1.getFetch; } });\nconst retries_1 = require(\"./retries\");\nObject.defineProperty(exports, \"RetryOnServerFailure\", { enumerable: true, get: function () { return retries_1.RetryOnServerFailure; } });\nconst chatStream_1 = require(\"../assistant/chatStream\");\nObject.defineProperty(exports, \"ChatStream\", { enumerable: true, get: function () { return chatStream_1.ChatStream; } });\nconst convertKeys_1 = require(\"./convertKeys\");\nObject.defineProperty(exports, \"convertKeysToCamelCase\", { enumerable: true, get: function () { return convertKeys_1.convertKeysToCamelCase; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isBrowser = exports.isEdge = void 0;\nconst isEdge = () => {\n    // This is the recommended way to detect\n    // running in the Edge Runtime according\n    // to Vercel docs.\n    return typeof EdgeRuntime === 'string';\n};\nexports.isEdge = isEdge;\nconst isBrowser = () => {\n    return typeof window !== 'undefined';\n};\nexports.isBrowser = isBrowser;\n//# sourceMappingURL=environment.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertKeysToCamelCase = void 0;\n// converts keys of a json payload from snake_case to camelCase\nconst convertKeysToCamelCase = (object) => {\n    if (Array.isArray(object)) {\n        return object.map((item) => (0, exports.convertKeysToCamelCase)(item));\n    }\n    else if (object !== null && typeof object === 'object') {\n        return Object.entries(object).reduce((acc, [key, value]) => {\n            const camelKey = toCamelCase(key);\n            acc[camelKey] = (0, exports.convertKeysToCamelCase)(value);\n            return acc;\n        }, {});\n    }\n    return object; // return primitives as is\n};\nexports.convertKeysToCamelCase = convertKeysToCamelCase;\n// converts snake-case keys to camelCase\nconst toCamelCase = (str) => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n//# sourceMappingURL=convertKeys.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleApiError = void 0;\nconst utils_1 = require(\"./utils\");\nconst http_1 = require(\"./http\");\nconst request_1 = require(\"./request\");\n/** @internal */\nconst handleApiError = async (e, customMessage, url) => {\n    if (e instanceof Error && e.name === 'ResponseError') {\n        const responseError = e;\n        const rawMessage = await (0, utils_1.extractMessage)(responseError);\n        const statusCode = responseError.response.status;\n        const message = customMessage\n            ? await customMessage(statusCode, rawMessage)\n            : rawMessage;\n        return (0, http_1.mapHttpStatusError)({\n            status: responseError.response.status,\n            url: responseError.response.url || url,\n            message: message,\n        });\n    }\n    else if (e instanceof request_1.PineconeConnectionError) {\n        // If we've already wrapped this error, just return it\n        return e;\n    }\n    else {\n        // There seem to be some situations where \"e instanceof Error\" is erroneously\n        // false (perhaps the custom errors emitted by cross-fetch do not extend Error?)\n        // but we can still cast it to an Error type because all we're going to do\n        // with it is store off a reference to whatever it is under the \"cause\"\n        const err = e;\n        return new request_1.PineconeConnectionError(err);\n    }\n};\nexports.handleApiError = handleApiError;\n//# sourceMappingURL=handling.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Remove all these imports as they're no longer needed\r\n// import { promises as fs } from 'fs';\r\n// import { join } from 'path';\r\n// import { fileURLToPath } from 'url';\r\n// import { dirname } from 'path';\r\n\r\nexport async function validateCodeStrings(inputCodeStrings) {\r\n    const errors = [];\r\n    const tabLabels = new Set();\r\n    const rowValues = new Set();\r\n    const codeTypes = new Set();\r\n    \r\n    // Clean up input strings by removing anything outside angle brackets\r\n    inputCodeStrings = inputCodeStrings.map(str => {\r\n        const match = str.match(/<[^>]+>/);\r\n        return match ? match[0] : str;\r\n    });\r\n\r\n    console.log(\"CleanedInput Code Strings:\", inputCodeStrings);\r\n\r\n    // Load valid codes from the correct location\r\n    let validCodes = new Set();\r\n    try {\r\n        const response = await fetch('../prompts/Codes.txt');\r\n        if (!response.ok) {\r\n            throw new Error('Failed to load Codes.txt file');\r\n        }\r\n        const fileContent = await response.text();\r\n        validCodes = new Set(fileContent.split('\\n')\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0));\r\n    } catch (error) {\r\n        errors.push(`Error reading Codes.txt file: ${error.message}`);\r\n        return errors;\r\n    }\r\n\r\n    // First pass: collect all row values, code types, and suffixes\r\n    for (const codeString of inputCodeStrings) {\r\n        if (!codeString.startsWith('<') || !codeString.endsWith('>')) {\r\n            errors.push(`Invalid code string format: ${codeString}`);\r\n            continue;\r\n        }\r\n        // Extract and store row IDs\r\n        if (codeString.startsWith('<BR>')) {\r\n            // Skip extraction for BR tags\r\n            continue;\r\n        }\r\n\r\n        const rowMatches = codeString.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/)[1];\r\n                // Handle spaces before/after the pipe delimiter\r\n                const parts = rowContent.split('|');\r\n                if (parts.length > 0) {\r\n                    // Extract all potential row IDs including those after asterisks\r\n                    parts.forEach(part => {\r\n                        const trimmedPart = part.trim();\r\n                        if (trimmedPart.startsWith('*')) {\r\n                            // Add the ID after the asterisk\r\n                            const afterAsterisk = trimmedPart.substring(1).trim();\r\n                            if (afterAsterisk) {\r\n                                rowValues.add(afterAsterisk);\r\n                            }\r\n                        } else if (trimmedPart) {\r\n                            // Add regular IDs\r\n                            rowValues.add(trimmedPart);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        \r\n        // console.log(rowMatches);\r\n        // Extract code type and suffix\r\n        const codeMatch = codeString.match(/<([^;]+);/);\r\n        if (codeMatch) {\r\n            const codeType = codeMatch[1].trim();\r\n            codeTypes.add(codeType);\r\n        }\r\n    }\r\n\r\n    // Second pass: detailed validation\r\n    for (const codeString of inputCodeStrings) {\r\n        // Skip BR tags completely\r\n        if (codeString === '<BR>') {\r\n            continue;\r\n        }\r\n        \r\n        const codeMatch = codeString.match(/<([^;]+);/);\r\n        if (!codeMatch) {\r\n            errors.push(`Cannot extract code type from: ${codeString}`);\r\n            continue;\r\n        }\r\n\r\n        const codeType = codeMatch[1].trim();\r\n        \r\n        // Validate code exists in description file\r\n        if (!validCodes.has(codeType)) {\r\n            errors.push(`Invalid code type: \"${codeType}\" not found in valid codes list`);\r\n        }\r\n\r\n        // Validate TAB labels\r\n        if (codeType === 'TAB') {\r\n            const labelMatch = codeString.match(/label\\d+=\"([^\"]*)\"/);\r\n            if (!labelMatch) {\r\n                errors.push('TAB code missing label parameter');\r\n                continue;\r\n            }\r\n\r\n            const label = labelMatch[1];\r\n            \r\n            if (label.length > 30) {\r\n                errors.push(`Tab label too long (max 30 chars): \"${label}\"`);\r\n            }\r\n            \r\n            if (/[,\":;]/.test(label)) {\r\n                errors.push(`Tab label contains illegal characters (,\":;): \"${label}\"`);\r\n            }\r\n            \r\n            if (tabLabels.has(label)) {\r\n                errors.push(`Duplicate tab label: \"${label}\"`);\r\n            }\r\n            tabLabels.add(label);\r\n        }\r\n\r\n        // Validate row format\r\n        const rowMatches = codeString.match(/row\\d+=\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+=\"([^\"]*)\"/)[1];\r\n                const parts = rowContent.split('|');\r\n                if (parts.length < 2) {\r\n                    errors.push(`Invalid row format (missing required fields): \"${rowContent}\"`);\r\n                }\r\n            });\r\n        }\r\n    } // <-- This is the end of the second pass loop\r\n\r\n    // Third pass: validate driver references after all row IDs are collected\r\n    for (const codeString of inputCodeStrings) {\r\n        const driverMatches = codeString.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (driverMatches) {\r\n            driverMatches.forEach(match => {\r\n                const driverValue = match.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/)[1].trim();\r\n                if (!rowValues.has(driverValue)) {\r\n                    errors.push(`Driver value \"${driverValue}\" not found in any row`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Convert array of errors to a single string with line breaks\r\n    return errors.join('\\n');\r\n}\r\n\r\n// Modified export function\r\nexport async function runValidation(inputStrings) {\r\n    try {\r\n        const cleanedStrings = inputStrings\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0)\r\n            .map(line => line.replace(/^'|',$|,$|^\"|\"$/g, ''));\r\n\r\n        const codeStrings = cleanedStrings.join(' ').match(/<[^>]+>/g) || [];\r\n\r\n        if (codeStrings.length === 0) {\r\n            console.error('Validation run with no codestrings - input is empty');\r\n            return ['No code strings found to validate'];\r\n        }\r\n\r\n        const validationErrors = await validateCodeStrings(codeStrings);\r\n        return validationErrors;\r\n    } catch (error) {\r\n        console.error('Validation failed:', error);\r\n        return [`Validation failed: ${error.message}`];\r\n    }\r\n}\r\n\r\n// >>> ADDED: New validation function for Run Codes flow (returns array)\r\nexport async function validateCodeStringsForRun(inputCodeStrings) {\r\n    const errors = [];\r\n    const tabLabels = new Set();\r\n    const rowValues = new Set();\r\n    const codeTypes = new Set();\r\n    \r\n    // Clean up input strings by removing anything outside angle brackets\r\n    inputCodeStrings = inputCodeStrings.map(str => {\r\n        const match = str.match(/<[^>]+>/);\r\n        return match ? match[0] : str;\r\n    });\r\n\r\n    console.log(\"[ValidateForRun] CleanedInput Code Strings:\", inputCodeStrings);\r\n\r\n    // Load valid codes from the correct location\r\n    let validCodes = new Set();\r\n    try {\r\n        const response = await fetch('../prompts/Codes.txt');\r\n        if (!response.ok) {\r\n            throw new Error('Failed to load Codes.txt file');\r\n        }\r\n        const fileContent = await response.text();\r\n        validCodes = new Set(fileContent.split('\\n')\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0));\r\n    } catch (error) {\r\n        errors.push(`Error reading Codes.txt file: ${error.message}`);\r\n        return errors; // Return array on critical error\r\n    }\r\n\r\n    // First pass: collect all row values, code types, and suffixes\r\n    for (const codeString of inputCodeStrings) {\r\n        if (!codeString.startsWith('<') || !codeString.endsWith('>')) {\r\n            errors.push(`Invalid code string format: ${codeString}`);\r\n            continue;\r\n        }\r\n        if (codeString.startsWith('<BR>')) {\r\n            continue;\r\n        }\r\n        const rowMatches = codeString.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/)[1];\r\n                const parts = rowContent.split('|');\r\n                if (parts.length > 0) {\r\n                    parts.forEach(part => {\r\n                        const trimmedPart = part.trim();\r\n                        if (trimmedPart.startsWith('*')) {\r\n                            const afterAsterisk = trimmedPart.substring(1).trim();\r\n                            if (afterAsterisk) {\r\n                                rowValues.add(afterAsterisk);\r\n                            }\r\n                        } else if (trimmedPart) {\r\n                            rowValues.add(trimmedPart);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        const codeMatch = codeString.match(/<([^;]+);/);\r\n        if (codeMatch) {\r\n            const codeType = codeMatch[1].trim();\r\n            codeTypes.add(codeType);\r\n        }\r\n    }\r\n\r\n    // Second pass: detailed validation\r\n    for (const codeString of inputCodeStrings) {\r\n        if (codeString === '<BR>') {\r\n            continue;\r\n        }\r\n        const codeMatch = codeString.match(/<([^;]+);/);\r\n        if (!codeMatch) {\r\n            errors.push(`Cannot extract code type from: ${codeString}`);\r\n            continue;\r\n        }\r\n        const codeType = codeMatch[1].trim();\r\n        if (!validCodes.has(codeType)) {\r\n            errors.push(`Invalid code type: \"${codeType}\" not found in valid codes list`);\r\n        }\r\n        if (codeType === 'TAB') {\r\n            const labelMatch = codeString.match(/label\\d+=\"([^\"]*)\"/);\r\n            if (!labelMatch) {\r\n                errors.push('TAB code missing label parameter');\r\n                continue;\r\n            }\r\n            const label = labelMatch[1];\r\n            \r\n            if (label.length > 30) {\r\n                errors.push(`Tab label too long (max 30 chars): \"${label}\"`);\r\n            }\r\n            \r\n            if (/[,\":;]/.test(label)) {\r\n                errors.push(`Tab label contains illegal characters (,\":;): \"${label}\"`);\r\n            }\r\n            \r\n            if (tabLabels.has(label)) {\r\n                errors.push(`Duplicate tab label: \"${label}\"`);\r\n            }\r\n            tabLabels.add(label);\r\n        }\r\n        const rowMatches = codeString.match(/row\\d+=\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+=\"([^\"]*)\"/)[1];\r\n                const parts = rowContent.split('|');\r\n                if (parts.length < 2) {\r\n                    errors.push(`Invalid row format (missing required fields): \"${rowContent}\"`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Third pass: validate driver references\r\n    for (const codeString of inputCodeStrings) {\r\n        const driverMatches = codeString.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (driverMatches) {\r\n            driverMatches.forEach(match => {\r\n                const driverValue = match.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/)[1].trim();\r\n                if (!rowValues.has(driverValue)) {\r\n                    errors.push(`Driver value \"${driverValue}\" not found in any row`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Key Change: Return the array of errors directly\r\n    return errors;\r\n}\r\n// <<< END ADDED FUNCTION\r\n\r\n","/**\r\n * CodeCollection.js\r\n * Functions for processing and managing code collections\r\n */\r\n\r\nimport { convertKeysToCamelCase } from \"@pinecone-database/pinecone/dist/utils\";\r\n\r\n/**\r\n * Parses code strings and creates a code collection\r\n * @param {string} inputText - The input text containing code strings\r\n * @returns {Array} - An array of code objects with type and parameters\r\n */\r\nexport function populateCodeCollection(inputText) {\r\n    try {\r\n        console.log(\"Processing input text for code collection\");\r\n         \r\n        // Initialize an empty code collection\r\n        const codeCollection = [];\r\n        \r\n        // Split the input text by newlines (handles \\n and \\r\\n)\r\n        const lines = inputText.split(/\\r?\\n/);\r\n        \r\n        for (const line of lines) {\r\n            // Skip empty lines\r\n            if (!line.trim()) continue;\r\n            \r\n            // Extract the code type and parameters\r\n            const codeMatch = line.match(/<([^;>]+);(.*?)>/);\r\n            if (!codeMatch) continue;\r\n            \r\n            const codeType = codeMatch[1].trim();\r\n            // Remove potential leftover newline/carriage return characters from the params string\r\n            const paramsString = codeMatch[2].replace(/[\\r\\n]+/g, '').trim();\r\n            \r\n            // Parse parameters\r\n            const params = {};\r\n            \r\n            // Handle special case for row parameters with asterisks\r\n            // Use the cleaned paramsString\r\n            const rowMatches = paramsString.matchAll(/row(\\d+)\\s*=\\s*\"([^\"]*)\"/g);\r\n            for (const match of rowMatches) {\r\n                const rowNum = match[1];\r\n                const rowValue = match[2];\r\n                params[`row${rowNum}`] = rowValue;\r\n            }\r\n            \r\n            // Parse other parameters, including the new \"format\" parameter\r\n            // Use the cleaned paramsString\r\n            const paramMatches = paramsString.matchAll(/(\\w+)\\s*=\\s*\"([^\"]*)\"/g);\r\n            for (const match of paramMatches) {\r\n                const paramName = match[1].trim();\r\n                const paramValue = match[2].trim();\r\n                \r\n                // Skip row parameters as they're already handled\r\n                if (paramName.startsWith('row')) continue;\r\n                \r\n                params[paramName] = paramValue;\r\n            }\r\n            \r\n            // Add the code to the collection\r\n            codeCollection.push({\r\n                type: codeType,\r\n                params: params\r\n            });\r\n        }\r\n        \r\n        console.log(`Processed ${codeCollection.length} codes`);\r\n        return codeCollection;\r\n    } catch (error) {\r\n        console.error(\"Error in populateCodeCollection:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Exports a code collection to text format\r\n * @param {Array} codeCollection - The code collection to export\r\n * @returns {string} - A formatted text representation of the code collection\r\n */\r\nexport function exportCodeCollectionToText(codeCollection) {\r\n    try {\r\n        if (!codeCollection || !Array.isArray(codeCollection)) {\r\n            throw new Error(\"Invalid code collection\");\r\n        }\r\n        \r\n        let result = \"Code Collection:\\n\";\r\n        result += \"================\\n\\n\";\r\n        \r\n        codeCollection.forEach((code, index) => {\r\n            result += `Code ${index + 1}: ${code.type}\\n`;\r\n            result += \"Parameters:\\n\";\r\n            \r\n            // First display non-row parameters\r\n            for (const [key, value] of Object.entries(code.params)) {\r\n                if (!key.startsWith('row')) {\r\n                    result += `  ${key}: ${value}\\n`;\r\n                }\r\n            }\r\n            \r\n            // Then display row parameters\r\n            const rowParams = Object.entries(code.params)\r\n                .filter(([key]) => key.startsWith('row'))\r\n                .sort((a, b) => {\r\n                    const numA = parseInt(a[0].replace('row', ''));\r\n                    const numB = parseInt(b[0].replace('row', ''));\r\n                    return numA - numB;\r\n                });\r\n            \r\n            if (rowParams.length > 0) {\r\n                result += \"  Rows:\\n\";\r\n                for (const [key, value] of rowParams) {\r\n                    result += `    ${key}: ${value}\\n`;\r\n                }\r\n            }\r\n            \r\n            result += \"\\n\";\r\n        });\r\n        \r\n        return result;\r\n    } catch (error) {\r\n        console.error(\"Error in exportCodeCollectionToText:\", error);\r\n        throw error;\r\n    }\r\n} \r\n\r\n/**\r\n * Processes a code collection and performs operations based on code types\r\n * @param {Array} codeCollection - The code collection to process\r\n * @returns {Object} - Results of processing the code collection\r\n */\r\nexport async function runCodes(codeCollection) {\r\n    try {\r\n        console.log(\"Running code collection processing\");\r\n        \r\n        if (!codeCollection || !Array.isArray(codeCollection)) {\r\n            throw new Error(\"Invalid code collection\");\r\n        }\r\n        \r\n        // Initialize result object\r\n        const result = {\r\n            processedCodes: 0,\r\n            createdTabs: [],\r\n            errors: []\r\n        };\r\n        \r\n        // Initialize state variables (similar to VBA variables)\r\n        let currentWorksheetName = null;\r\n        const assumptionTabs = [];\r\n        \r\n        // Process each code in the collection\r\n        for (let i = 0; i < codeCollection.length; i++) {\r\n            const code = codeCollection[i];\r\n            const codeType = code.type;\r\n            \r\n            try {\r\n                // Handle MODEL code type\r\n                if (codeType === \"MODEL\") {\r\n                    // Skip for now as mentioned in the original VBA code\r\n                    console.log(\"MODEL code type encountered - skipping for now\");\r\n                    continue;\r\n                }\r\n                \r\n                // Handle TAB code type\r\n                if (codeType === \"TAB\") {\r\n                    // Accept both label1 and Label1 for backward compatibility\r\n                    const tabName = code.params.label1 || code.params.Label1 || `Tab_${i}`;\r\n                    \r\n                    // Check if worksheet exists and delete it\r\n                    await Excel.run(async (context) => {\r\n                        try {\r\n                            // Get all worksheets\r\n                            const sheets = context.workbook.worksheets;\r\n                            sheets.load(\"items/name\");\r\n                            console.log(\"sheets\", sheets);\r\n                            await context.sync();\r\n                            \r\n                            // Check if worksheet exists\r\n                            const existingSheet = sheets.items.find(sheet => sheet.name === tabName);\r\n                            console.log(\"existingSheet\", existingSheet);\r\n                            // if (existingSheet) {\r\n                            //     // Delete the worksheet if it exists\r\n                            //     existingSheet.delete();\r\n                            //     await context.sync();\r\n                            // }\r\n                            // console.log(\"existingSheet deleted\");\r\n                            \r\n                            // Get the Financials worksheet (needed for position and as fallback template)\r\n                            const financialsSheet = context.workbook.worksheets.getItem(\"Financials\");\r\n                            financialsSheet.load(\"position\"); // Load Financials sheet position\r\n                            await context.sync(); // Sync to get Financials position\r\n                            console.log(`Financials sheet is at position ${financialsSheet.position}`);\r\n                            \r\n                            // Check if the target tab already exists\r\n                            if (!existingSheet) {\r\n                                let newSheet;\r\n                                let sourceSheetName;\r\n\r\n                                // Try to get the Calcs worksheet\r\n                                try {\r\n                                    const sourceCalcsWS = context.workbook.worksheets.getItem(\"Calcs\");\r\n                                    await context.sync(); // Ensure it's loaded if found\r\n                                    console.log(\"Using Calcs worksheet as template.\");\r\n                                    newSheet = sourceCalcsWS.copy();\r\n                                    sourceSheetName = \"Calcs\";\r\n                                } catch (calcsError) {\r\n                                    // If Calcs doesn't exist, use Financials as the template\r\n                                    console.warn(\"Calcs worksheet not found. Using Financials as template.\");\r\n                                    newSheet = financialsSheet.copy();\r\n                                    sourceSheetName = \"Financials\";\r\n                                    // Sync needed *after* copy to reference the new sheet object reliably\r\n                                    await context.sync(); \r\n                                    \r\n                                    // --- Load name before accessing it ---\r\n                                    newSheet.load(\"name\");\r\n                                    await context.sync();\r\n                                    // --- End Load name ---\r\n                                    \r\n                                    // --- Clear rows 10 down if copied from Financials ---\r\n                                    console.log(`Clearing contents and formats from row 10 down in new sheet ${newSheet.name} copied from ${sourceSheetName}`);\r\n                                    // Use a reasonable large row number or get last row if needed, 10000 should suffice\r\n                                    const clearRange = newSheet.getRange(\"10:10000\"); \r\n                                    clearRange.clear(Excel.ClearApplyTo.all);\r\n                                    // Do NOT sync clear yet, batch with linking below\r\n\r\n                                    // --- Link non-empty cells in rows 1-8 back to Financials ---\r\n                                    console.log(`Linking header rows (1-8) in ${newSheet.name} back to Financials`);\r\n                                    // Get used range of the new sheet to find last column\r\n                                    const usedRange = newSheet.getUsedRange(true); // Use valuesOnly = true\r\n                                    usedRange.load([\"columnCount\", \"rowCount\"]);\r\n                                    // Sync to get the used range info *before* calculating link range address\r\n                                    await context.sync();\r\n\r\n                                    const lastColIndex = usedRange.columnCount > 0 ? usedRange.columnCount - 1 : 0; \r\n                                    const lastColLetter = columnIndexToLetter(lastColIndex);\r\n                                    // Process only up to row 8\r\n                                    const linkRangeAddress = `A1:${lastColLetter}8`;\r\n\r\n                                    console.log(`Processing header link range: ${linkRangeAddress}`);\r\n                                    const linkRange = newSheet.getRange(linkRangeAddress);\r\n                                    linkRange.load(\"values\");\r\n                                    // Sync to load the values *before* iterating and setting formulas\r\n                                    await context.sync();\r\n\r\n                                    const values = linkRange.values;\r\n                                    // Batch formula setting directly\r\n                                    for (let r = 0; r < values.length; r++) {\r\n                                        const rowNum = r + 1;\r\n                                        for (let c = 0; c < values[r].length; c++) {\r\n                                            const cellValue = values[r][c];\r\n                                            if (cellValue !== null && cellValue !== \"\") {\r\n                                                const colLetter = columnIndexToLetter(c);\r\n                                                const cellAddress = `${colLetter}${rowNum}`;\r\n                                                const formula = `=Financials!${cellAddress}`;\r\n                                                // Get the specific cell and queue the formula update\r\n                                                const targetCell = newSheet.getRange(cellAddress);\r\n                                                targetCell.formulas = [[formula]];\r\n                                                // console.log(`  Queueing formula for ${cellAddress} to ${formula}`); \r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    // The sync for these formula changes will happen later, along with rename/position.\r\n                                    // --- End Link header rows ---\r\n\r\n                                    // --- Set font color for rows 2-8 ---\r\n                                    console.log(`Setting font color for rows 2-8 in ${newSheet.name}`);\r\n                                    const headerFormatRangeAddress = `A2:${lastColLetter}8`;\r\n                                    const headerFormatRange = newSheet.getRange(headerFormatRangeAddress);\r\n                                    headerFormatRange.format.font.color = \"#008000\"; // Green\r\n                                    // --- End Set font color ---\r\n\r\n                                    // --- Set tab color ---\r\n                                    console.log(`Setting tab color for ${newSheet.name}`);\r\n                                    newSheet.tabColor = \"#4472C4\"; // Blue\r\n                                    // --- End Set tab color ---\r\n                                }\r\n\r\n                                // Sync copy operation if not already synced (e.g., if Calcs was used)\r\n                                // If Financials was used, sync happened before clear. If Calcs was used, sync happens here.\r\n                                if (sourceSheetName === \"Calcs\") {\r\n                                     await context.sync();\r\n                                }\r\n\r\n                                console.log(`newSheet created by copying ${sourceSheetName} worksheet`);\r\n\r\n                                // Rename it\r\n                                newSheet.name = tabName;\r\n                                console.log(\"newSheet renamed to\", tabName);\r\n\r\n                                // <<< NEW: Set position relative to Financials sheet >>>\r\n                                newSheet.position = financialsSheet.position + 1;\r\n                                console.log(`Set position of ${tabName} to ${newSheet.position}`);\r\n                                // Add to assumption tabs collection\r\n                                assumptionTabs.push({\r\n                                    name: tabName,\r\n                                    worksheet: newSheet\r\n                                }); // <-- Added closing brace and semicolon here\r\n\r\n                                currentWorksheetName = tabName;\r\n\r\n                                await context.sync(); // Sync rename and position changes\r\n\r\n                                result.createdTabs.push(tabName);\r\n                                console.log(\"Tab created successfully:\", tabName);\r\n                            // }); <-- Removed this closing parenthesis, it belongs to Excel.run below\r\n\r\n                            }\r\n\r\n                            else {\r\n                                console.log(\"Worksheet already exists:\", tabName);\r\n                                assumptionTabs.push({\r\n                                    name: tabName,\r\n                                    worksheet: existingSheet\r\n                                });\r\n                                // Need to set currentWorksheetName here too if the sheet exists\r\n                                currentWorksheetName = tabName; \r\n                            }\r\n                      \r\n       \r\n                            \r\n                         \r\n                            \r\n                            // Set the current worksheet name <-- This comment is now redundant/misplaced\r\n                       \r\n                        } catch (error) {\r\n                            console.error(\"Detailed error in TAB processing:\", error);\r\n                            throw error;\r\n                        }\r\n                    }).catch(error => { // <-- This is the correct closing for Excel.run\r\n                        console.error(`Error processing TAB code: ${error.message}`);\r\n                        result.errors.push({\r\n                            codeIndex: i,\r\n                            codeType: codeType,\r\n                            error: error.message\r\n                        });\r\n                    });\r\n                    \r\n                    continue;\r\n                }\r\n                \r\n                // Handle non-TAB codes\r\n                if (codeType !== \"TAB\") {\r\n                    await Excel.run(async (context) => {\r\n                        try {\r\n                            // Get the Codes worksheet\r\n                            const codesWS = context.workbook.worksheets.getItem(\"Codes\");\r\n                            console.log(\"Got Codes worksheet\");\r\n                            \r\n                            // Get the used range of the Codes worksheet\r\n                            const usedRange = codesWS.getUsedRange();\r\n                            usedRange.load(\"rowCount\");\r\n                            usedRange.load(\"columnCount\");\r\n                            await context.sync();\r\n                            console.log(`Used range: ${usedRange.rowCount} rows x ${usedRange.columnCount} columns`);\r\n                            \r\n                            // Get the current worksheet\r\n                            const currentWS = context.workbook.worksheets.getItem(currentWorksheetName);\r\n                            console.log(\"Got current worksheet:\", currentWorksheetName);\r\n                            \r\n                            // Get the last row in the current worksheet\r\n                            const lastUsedRow = currentWS.getUsedRange().getLastRow();\r\n                            lastUsedRow.load(\"rowIndex\");\r\n                            await context.sync();\r\n                            const pasteRow = Math.max(lastUsedRow.rowIndex + 2, 10); // Ensure paste starts at row 10 or later\r\n                            console.log(\"Paste row:\", pasteRow);\r\n                            \r\n                            // Search for the code type in column D (index 3)\r\n                            let firstRow = -1;\r\n                            let lastRow = -1;\r\n                            \r\n                            // Load the values of column D\r\n                            const columnD = codesWS.getRange(`D1:D${usedRange.rowCount}`);\r\n                            columnD.load(\"values\");\r\n                            await context.sync();\r\n                            \r\n                            console.log(\"Loaded column D values\");\r\n                            \r\n                            // Check if values are loaded properly\r\n                            if (!columnD.values) {\r\n                                console.error(\"columnD.values is null or undefined\");\r\n                                throw new Error(`Failed to load values from column D in Codes worksheet`);\r\n                            }\r\n                            \r\n                            console.log(`columnD.values length: ${columnD.values.length}`);\r\n                            \r\n                            // Debug print the first few values in column D\r\n                            console.log(\"First 10 values in column D:\");\r\n                            for (let i = 0; i < Math.min(10, columnD.values.length); i++) {\r\n                                console.log(`Row ${i+1}: ${columnD.values[i][0]}`);\r\n                            }\r\n                            \r\n                            // Find the first and last row with the code\r\n                            for (let row = 0; row < columnD.values.length; row++) {\r\n                                if (columnD.values[row][0] === codeType) {\r\n                                    if (firstRow === -1) {\r\n                                        firstRow = row + 1; // Excel rows are 1-indexed\r\n                                    }\r\n                                    lastRow = row + 1;\r\n                                }\r\n                            }\r\n                            \r\n                            // Check if the code type was found\r\n                            const codeTypeFound = firstRow !== -1 && lastRow !== -1;\r\n                            \r\n                            if (!codeTypeFound) {\r\n                                console.warn(`Code type ${codeType} not found in Codes worksheet. Skipping this code.`);\r\n                                result.errors.push({\r\n                                    codeIndex: i,\r\n                                    codeType: codeType,\r\n                                    error: `Code type ${codeType} not found in Codes worksheet`\r\n                                });\r\n                                // Skip to the next code\r\n                                result.processedCodes++;\r\n                            } else {\r\n                                console.log(`Found code type ${codeType} in rows ${firstRow} to ${lastRow}`);\r\n                                \r\n                                // Get the source range from codesWS (already available in this context)\r\n                                const sourceRange = codesWS.getRange(`A${firstRow}:CX${lastRow}`);\r\n                                \r\n                                // Get the destination range in currentWS (already available in this context)\r\n                                const destinationRange = currentWS.getRange(`A${pasteRow}`);\r\n                                \r\n                                // Copy the range with all properties\r\n                                destinationRange.copyFrom(sourceRange, Excel.RangeCopyType.all);\r\n                                \r\n                                await context.sync(); // Sync the copy operation\r\n\r\n                                // NEW: Apply bold formatting if specified\r\n                                if (code.params.bold && String(code.params.bold).toUpperCase() === \"TRUE\") {\r\n                                    const numPastedRows = lastRow - firstRow + 1;\r\n                                    // Ensure endPastedRow is at least pasteRow and calculated correctly\r\n                                    const endPastedRow = pasteRow + Math.max(0, numPastedRows - 1);\r\n                                    \r\n                                    // Assuming CX is a sufficiently wide column, as used in the copy.\r\n                                    const rangeAddressToBold = `A${pasteRow}:CX${endPastedRow}`;\r\n                                    \r\n                                    console.log(`Applying bold formatting to ${rangeAddressToBold} in ${currentWorksheetName} for code ${codeType}`);\r\n                                    const rangeToBold = currentWS.getRange(rangeAddressToBold);\r\n                                    rangeToBold.format.font.bold = true;\r\n                                    await context.sync(); // Sync the bold formatting\r\n                                    console.log(`Bold formatting applied and synced for ${rangeAddressToBold}`);\r\n                                }\r\n\r\n                                // NEW: Apply top border formatting if specified\r\n                                if (code.params.topborder && String(code.params.topborder).toUpperCase() === \"TRUE\") {\r\n                                    const numPastedRows = lastRow - firstRow + 1;\r\n                                    const endPastedRow = pasteRow + Math.max(0, numPastedRows - 1);\r\n\r\n                                    console.log(`Applying top border to K${pasteRow}:P${endPastedRow} and S${pasteRow}:CX${endPastedRow} in ${currentWorksheetName} for code ${codeType}`);\r\n\r\n                                    for (let r = pasteRow; r <= endPastedRow; r++) {\r\n                                        const rangeKtoP = currentWS.getRange(`K${r}:P${r}`);\r\n                                        rangeKtoP.format.borders.getItem('EdgeTop').style = 'Continuous';\r\n                                        rangeKtoP.format.borders.getItem('EdgeTop').weight = 'Thin';\r\n                                        // Color defaults to Automatic (usually black)\r\n\r\n                                        const rangeStoCX = currentWS.getRange(`S${r}:CX${r}`);\r\n                                        rangeStoCX.format.borders.getItem('EdgeTop').style = 'Continuous';\r\n                                        rangeStoCX.format.borders.getItem('EdgeTop').weight = 'Thin';\r\n                                    }\r\n                                    await context.sync(); // Sync the top border formatting\r\n                                    console.log(`Top border formatting applied and synced for K${pasteRow}:P${endPastedRow} and S${pasteRow}:CX${endPastedRow}`);\r\n                                }\r\n                                \r\n                                // NEW: Apply indent formatting if specified\r\n                                if (code.params.indent) {\r\n                                    const indentValue = parseInt(code.params.indent, 10);\r\n                                    if (!isNaN(indentValue) && indentValue > 0) {\r\n                                        const numPastedRows = lastRow - firstRow + 1;\r\n                                        const endPastedRow = pasteRow + Math.max(0, numPastedRows - 1);\r\n                                        const indentRangeAddress = `B${pasteRow}:B${endPastedRow}`;\r\n\r\n                                        console.log(`Applying indent of ${indentValue} to ${indentRangeAddress} in ${currentWorksheetName} for code ${codeType}`);\r\n                                        const rangeToIndent = currentWS.getRange(indentRangeAddress);\r\n                                        rangeToIndent.format.indentLevel = indentValue;\r\n                                        await context.sync(); // Sync the indent formatting\r\n                                        console.log(`Indent formatting applied and synced for ${indentRangeAddress}`);\r\n                                    } else {\r\n                                        console.warn(`Invalid indent value: \"${code.params.indent}\" for code ${codeType}. Indent must be a positive integer.`);\r\n                                    }\r\n                                }\r\n\r\n                                // NEW: Apply negative formatting if specified\r\n                                if (code.params.negative && String(code.params.negative).toUpperCase() === \"TRUE\") {\r\n                                    const numPastedRows = lastRow - firstRow + 1;\r\n                                    const endPastedRow = pasteRow + Math.max(0, numPastedRows - 1); // This is the last row of the pasted block\r\n\r\n                                    console.log(`Applying negative transformation to formulas in AE${endPastedRow}:CX${endPastedRow} for code ${codeType}`);\r\n                                    const formulaRange = currentWS.getRange(`AE${endPastedRow}:CX${endPastedRow}`);\r\n                                    formulaRange.load(\"formulas\");\r\n                                    await context.sync();\r\n\r\n                                    const originalFormulasRow = formulaRange.formulas[0]; // Get the single row of formulas\r\n                                    const newFormulasRow = [];\r\n                                    let formulasChanged = false;\r\n\r\n                                    for (let i = 0; i < originalFormulasRow.length; i++) {\r\n                                        const currentCellFormula = originalFormulasRow[i];\r\n                                        if (typeof currentCellFormula === 'string' && currentCellFormula.startsWith('=')) {\r\n                                            // Construct the new formula: =-(original_content)\r\n                                            newFormulasRow.push(`=-(${currentCellFormula.substring(1)})`);\r\n                                            formulasChanged = true;\r\n                                        } else {\r\n                                            newFormulasRow.push(currentCellFormula); // Keep non-formulas or empty strings as is\r\n                                        }\r\n                                    }\r\n\r\n                                    if (formulasChanged) {\r\n                                        formulaRange.formulas = [newFormulasRow]; // Set as a 2D array\r\n                                        await context.sync();\r\n                                        console.log(`Negative transformation applied and synced for AE${endPastedRow}:CX${endPastedRow}`);\r\n                                    } else {\r\n                                        console.log(`No formulas found to transform in AE${endPastedRow}:CX${endPastedRow}`);\r\n                                    }\r\n                                }\r\n                                \r\n                                // NEW: Apply \"format\" parameter for number formatting and italics\r\n                                if (code.params.format) {\r\n                                    const formatValue = String(code.params.format).toLowerCase();\r\n                                    const numPastedRows = lastRow - firstRow + 1;\r\n                                    const endPastedRow = pasteRow + Math.max(0, numPastedRows - 1);\r\n                                    // Corrected: Apply to K through CX\r\n                                    const formatRangeAddress = `K${pasteRow}:CX${endPastedRow}`;\r\n                                    const rangeToFormat = currentWS.getRange(formatRangeAddress);\r\n                                    let numberFormatString = null;\r\n                                    // Removed applyItalics variable as direct checks on formatValue are clearer for B:CX range\r\n\r\n                                    console.log(`Processing \"format\" parameter: \"${formatValue}\" for range ${formatRangeAddress}`);\r\n\r\n                                    if (formatValue === \"dollar\" || formatValue === \"dollaritalic\") {\r\n                                        numberFormatString = '_(* $ #,##0_);_(* $ (#,##0);_(* \"\"$ -\"\"?_);_(@_)';\r\n                                    } else if (formatValue === \"volume\") {\r\n                                        numberFormatString = '_(* #,##0_);_(* (#,##0);_(* \" -\"?_);_(@_)';\r\n                                    } else if (formatValue === \"percent\") {\r\n                                        numberFormatString = '_(* #,##0.0%;_(* (#,##0.0)%;_(* \" -\"?_)';\r\n                                    } else if (formatValue === \"factor\") {\r\n                                        numberFormatString = '_(* #,##0.0x;_(* (#,##0.0)x;_(* \" -\"?_)';\r\n                                    }\r\n\r\n                                    if (numberFormatString) {\r\n                                        console.log(`Applying number format: \"${numberFormatString}\" to ${formatRangeAddress}`); // K:CX\r\n                                        rangeToFormat.numberFormat = [[numberFormatString]]; // K:CX\r\n                                        \r\n                                        // Italicization logic based on formatValue for the B:CX range\r\n                                        const fullItalicRangeAddress = `B${pasteRow}:CX${endPastedRow}`;\r\n                                        const fullRangeToHandleItalics = currentWS.getRange(fullItalicRangeAddress);\r\n\r\n                                        if (formatValue === \"dollaritalic\" || formatValue === \"volume\" || formatValue === \"percent\" || formatValue === \"factor\") {\r\n                                            console.log(`Applying italics to ${fullItalicRangeAddress} due to format type (${formatValue})`);\r\n                                            fullRangeToHandleItalics.format.font.italic = true;\r\n                                        } else if (formatValue === \"dollar\") {\r\n                                            console.log(`Ensuring ${fullItalicRangeAddress} is NOT italicized due to format type (dollar)`);\r\n                                            fullRangeToHandleItalics.format.font.italic = false;\r\n                                        } else {\r\n                                            // For unrecognized formats that still had a numberFormatString (e.g. if logic changes later),\r\n                                            // or if K:CX needs explicit non-italic default when no B:CX rule applies.\r\n                                            // However, current logic implies if numberFormatString is set, formatValue is one of the known ones.\r\n                                            // If K:CX (rangeToFormat) needs specific non-italic handling for other cases, it would go here.\r\n                                            // For now, this 'else' might not be hit if numberFormatString implies a known formatValue.\r\n                                            // The primary `italic` parameter handles general italic override later anyway.\r\n                                            console.log(`Format type ${formatValue} has number format but no specific B:CX italic rule. K:CX italics remain as previously set or default.`);\r\n                                        }\r\n                                        await context.sync();\r\n                                        console.log(`\"format\" parameter processing (number format and B:CX italics) synced for ${formatRangeAddress}`);\r\n                                    } else {\r\n                                        console.log(`\"format\" parameter value \"${formatValue}\" is not recognized. No formatting applied.`);\r\n                                    }\r\n                                }\r\n\r\n                                // NEW: Apply \"italic\" parameter for font style\r\n                                if (code.params.italic !== undefined) { // Check if the parameter exists\r\n                                    const italicValue = String(code.params.italic).toLowerCase();\r\n                                    const numPastedRows = lastRow - firstRow + 1;\r\n                                    const endPastedRow = pasteRow + Math.max(0, numPastedRows - 1);\r\n                                    const italicRangeAddress = `B${pasteRow}:CX${endPastedRow}`;\r\n                                    const rangeToItalicize = currentWS.getRange(italicRangeAddress);\r\n\r\n                                    console.log(`Processing \"italic\" parameter: \"${italicValue}\" for range ${italicRangeAddress}`);\r\n\r\n                                    if (italicValue === \"true\") {\r\n                                        console.log(`Applying italics to ${italicRangeAddress}`);\r\n                                        rangeToItalicize.format.font.italic = true;\r\n                                        await context.sync();\r\n                                        console.log(`\"italic\" parameter (true) processing synced for ${italicRangeAddress}`);\r\n                                    } else if (italicValue === \"false\") {\r\n                                        console.log(`Removing italics from ${italicRangeAddress}`);\r\n                                        rangeToItalicize.format.font.italic = false;\r\n                                        await context.sync();\r\n                                        console.log(`\"italic\" parameter (false) processing synced for ${italicRangeAddress}`);\r\n                                    } else {\r\n                                        console.log(`\"italic\" parameter value \"${italicValue}\" is not recognized as boolean. No italicization change applied.`);\r\n                                    }\r\n                                }\r\n                                \r\n                                // Apply the driver and assumption inputs function to the current worksheet\r\n                                try {\r\n                                    console.log(`Applying driver and assumption inputs to worksheet: ${currentWorksheetName}`);\r\n                                    \r\n                                    // Get the current worksheet and load its properties\r\n                                    const currentWorksheet = context.workbook.worksheets.getItem(currentWorksheetName);\r\n                                    currentWorksheet.load('name');\r\n                                    await context.sync();\r\n                                    \r\n                                    await driverAndAssumptionInputs(\r\n                                        currentWorksheet,\r\n                                        pasteRow,\r\n                                        code\r\n                                    );\r\n                                    console.log(`Successfully applied driver and assumption inputs to worksheet: ${currentWorksheetName}`);\r\n                                } catch (error) {\r\n                                    console.error(`Error applying driver and assumption inputs: ${error.message}`);\r\n                                    result.errors.push({\r\n                                        codeIndex: i,\r\n                                        codeType: codeType,\r\n                                        error: `Error applying driver and assumption inputs: ${error.message}`\r\n                                    });\r\n                                }\r\n                                \r\n                                result.processedCodes++;\r\n                            }\r\n                        } catch (error) {\r\n                            console.error(`Error processing code ${codeType}:`, error);\r\n                            throw error;\r\n                        }\r\n                    }).catch(error => {\r\n                        console.error(`Error processing code ${codeType}: ${error.message}`);\r\n                        result.errors.push({\r\n                            codeIndex: i,\r\n                            codeType: codeType,\r\n                            error: error.message\r\n                        });\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                console.error(`Error processing code ${i}:`, error);\r\n                result.errors.push({\r\n                    codeIndex: i,\r\n                    codeType: codeType,\r\n                    error: error.message\r\n                });\r\n            }\r\n        }\r\n        \r\n        // Prepare the final result object, including the names of assumption tabs\r\n        const finalResult = {\r\n            ...result, // Includes processedCodes, errors\r\n            assumptionTabs: assumptionTabs.map(tab => tab.name) // Return only the names\r\n        };\r\n\r\n        console.log(\"runCodes finished. Returning:\", finalResult);\r\n        return finalResult; // Return the modified result object\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in runCodes:\", error);\r\n        // Consider how to return errors. Throwing stops execution.\r\n        // Returning them in the result allows the caller to decide.\r\n        throw error; // Or return { errors: [error.message], assumptionTabs: [] }\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function to update cell references in formulas when rows are inserted\r\n * @param {string} formula - The formula to update\r\n * @param {number} rowOffset - The number of rows to offset\r\n * @returns {string} - The updated formula\r\n */\r\nfunction updateFormulaReferences(formula, rowOffset) {\r\n    if (!formula || !formula.startsWith('=')) {\r\n        return formula;\r\n    }\r\n    \r\n    // Regular expression to match cell references (e.g., A1, B2, etc.)\r\n    const cellRefRegex = /([A-Z]+)([0-9]+)/g;\r\n    \r\n    // Replace each cell reference with an updated one\r\n    return formula.replace(cellRefRegex, (match, col, row) => {\r\n        const rowNum = parseInt(row);\r\n        return `${col}${rowNum + rowOffset}`;\r\n    });\r\n}\r\n\r\n/**\r\n * Tests if the active cell's fill color is #CCFFCC (light green)\r\n * @returns {Promise<boolean>} - True if the active cell is green, false otherwise\r\n */\r\nexport async function isActiveCellGreen() {\r\n    try {\r\n        console.log(\"Testing if cell B2 is green (#CCFFCC)\");\r\n        \r\n        return await Excel.run(async (context) => {\r\n            // Get cell B2 instead of the active cell\r\n            const cellB2 = context.workbook.worksheets.getActiveWorksheet().getRange(\"B2\");\r\n            \r\n            // Load the fill color property and address\r\n            cellB2.load([\"format/fill/color\", \"address\"]);\r\n            \r\n            // Execute the request\r\n            await context.sync();\r\n            \r\n            // Check if the color is #CCFFCC\r\n            const isGreen = cellB2.format.fill.color === \"#CCFFCC\";\r\n            \r\n            console.log(`Cell B2 address: ${cellB2.address}, color: ${cellB2.format.fill.color}, Is green: ${isGreen}`);\r\n            \r\n            return isGreen;\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error in isActiveCellGreen:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Processes driver and assumption inputs for a worksheet based on code parameters,\r\n * replicating the logic from the VBA Driver_and_Assumption_Inputs function.\r\n * @param {Excel.Worksheet} worksheet - The initial Excel worksheet object.\r\n * @param {number} calcsPasteRow - The starting row for finding the code block.\r\n * @param {Object} code - The code object with type and parameters.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function driverAndAssumptionInputs(worksheet, calcsPasteRow, code) {\r\n    try {\r\n        // --- Load worksheet name before calling helper ---\r\n        // This requires its own context if worksheet object might not have name loaded yet\r\n        let worksheetName = 'unknown';\r\n        try {\r\n             await Excel.run(async (context) => {\r\n                 worksheet.load('name');\r\n                 await context.sync();\r\n                 worksheetName = worksheet.name;\r\n                 \r\n             });\r\n         } catch(nameLoadError) {\r\n             console.error(\"Failed to load worksheet name before calling helper\", nameLoadError);\r\n             throw new Error(\"Cannot determine worksheet name to proceed.\");\r\n         }\r\n\r\n        // Define variable to store lastRow outside Excel.run scope so we can use it later\r\n        let lastRow = 1000; // Default value in case of failure\r\n\r\n        try {\r\n            // Get a fresh worksheet reference and find the last row within a proper Excel.run context\r\n            lastRow = await Excel.run(async (context) => {    \r\n                // Get worksheet reference within THIS context by name\r\n                const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\r\n                \r\n                // Get the used range of the worksheet\r\n                const usedRange = currentWorksheet.getUsedRange();\r\n\r\n                // Get the last row within the used range\r\n                const lastRowRange = usedRange.getLastRow();\r\n\r\n                // Load the rowIndex property of the last row\r\n                lastRowRange.load(\"rowIndex\");\r\n\r\n                // Synchronize the state with the Excel document\r\n                await context.sync();\r\n\r\n                // Calculate the 1-based index of the last row\r\n                const result = lastRowRange.rowIndex + 1;\r\n                console.log('lastRow', result);\r\n                \r\n                // Return the value so it's accessible outside this Excel.run\r\n                return result;\r\n            });\r\n        } catch(lastRowError) {\r\n            console.error(\"Failed to determine last row\", lastRowError);\r\n            throw new Error(\"Cannot determine last row to proceed.\");\r\n        }\r\n\r\n        // Ensure lastRow is a valid number (helper should return 1000 on error)\r\n        if (typeof lastRow !== 'number' || lastRow <= 0) {\r\n            console.error(`Last row determination failed or returned invalid value (${lastRow}). Cannot proceed safely.`);\r\n            throw new Error(\"Failed to determine a valid last row for processing.\");\r\n        }\r\n        // --- End Determine Last Row ---\r\n\r\n        // Now, proceed with the main logic within its own Excel.run\r\n        await Excel.run(async (context) => {\r\n            // Pass the determined lastRow into this context\r\n            const determinedLastRow = lastRow; \r\n            \r\n            // Get worksheet reference within THIS context by name\r\n            const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\r\n            \r\n            // USE calcsPasteRow in console log\r\n            console.log(`Processing driver/assumption inputs for worksheet: ${worksheetName}, Code: ${code.type}, Start Row: ${calcsPasteRow}, Using Last Row: ${determinedLastRow}`);\r\n\r\n            // NEW SECTION: Convert row references to absolute for columns >= AE\r\n            // First, load all formulas from columns AE to CX for the range of interest\r\n            console.log(\"Making row references absolute for cell references in columns >= AE before row insertion\");\r\n            \r\n            const START_ROW = 10;\r\n            const TARGET_COL = \"AE\";\r\n            const END_COL = \"CX\";\r\n            \r\n            // Define range to process\r\n            let processStartRow = Math.min(calcsPasteRow, START_ROW);\r\n            let processEndRow = determinedLastRow;\r\n            \r\n            const formulaRangeAddress = `${TARGET_COL}${processStartRow}:${END_COL}${processEndRow}`;\r\n            console.log(`Loading formulas from range: ${formulaRangeAddress}`);\r\n            \r\n            try {\r\n                const formulaRange = currentWorksheet.getRange(formulaRangeAddress);\r\n                formulaRange.load(\"formulas\");\r\n                await context.sync();\r\n                \r\n                // Calculate TARGET_COL index for reference comparisons\r\n                const targetColIndex = columnLetterToIndex(TARGET_COL);\r\n                console.log(`Target column ${TARGET_COL} has index ${targetColIndex}`);\r\n                \r\n                let formulasUpdated = false;\r\n                const origFormulas = formulaRange.formulas;\r\n                const newFormulas = [];\r\n                \r\n                // Process each formula in the range\r\n                for (let r = 0; r < origFormulas.length; r++) {\r\n                    const rowFormulas = [];\r\n                    \r\n                    for (let c = 0; c < origFormulas[r].length; c++) {\r\n                        let formula = origFormulas[r][c];\r\n                        \r\n                        // Only process string formulas\r\n                        if (typeof formula === 'string') {\r\n                            // Skip if it's not a formula\r\n                            if (!formula.startsWith('=')) {\r\n                                rowFormulas.push(formula);\r\n                                continue;\r\n                            }\r\n                            \r\n                            // Find cell references (e.g., A1, B2, AA34) but exclude already absolute refs (e.g., A$1, $A$1)\r\n                            // This regex captures: group 1 = column letter(s), group 2 = row number\r\n                            // It skips references that already have $ before the row number\r\n                            const cellRefRegex = /([A-Z]+)(\\d+)(?![^\\W_])/g;\r\n                            \r\n                            // Replace with absolute row references where needed\r\n                            const originalFormula = formula;\r\n                            formula = formula.replace(cellRefRegex, (match, col, row) => {\r\n                                // Get column index\r\n                                const colIndex = columnLetterToIndex(col);\r\n                                \r\n                                // If column index is >= target column index, make row reference absolute\r\n                                if (colIndex >= targetColIndex) {\r\n                                    return `${col}$${row}`;\r\n                                }\r\n                                return match; // Keep as is for columns before TARGET_COL\r\n                            });\r\n                            \r\n                            if (formula !== originalFormula) {\r\n                                formulasUpdated = true;\r\n                                //console.log(`  Row ${processStartRow + r}, Col ${columnIndexToLetter(c + targetColIndex)}: Formula changed from '${originalFormula}' to '${formula}'`);\r\n                            }\r\n                        }\r\n                        \r\n                        rowFormulas.push(formula);\r\n                    }\r\n                    \r\n                    newFormulas.push(rowFormulas);\r\n                }\r\n                \r\n                // Only update if changes were made\r\n                if (formulasUpdated) {\r\n                    console.log(`Updating formulas with absolute row references in range ${formulaRangeAddress}`);\r\n                    formulaRange.formulas = newFormulas;\r\n                    await context.sync();\r\n                    console.log(\"Formula updates completed\");\r\n                } else {\r\n                    console.log(\"No formulas needed absolute row reference updates\");\r\n                }\r\n            } catch (formulaError) {\r\n                console.error(`Error processing formulas for absolute row references: ${formulaError.message}`, formulaError);\r\n                // Continue with the function, don't let this conversion stop the flow\r\n            }\r\n            // END NEW SECTION\r\n\r\n            const columnSequence = ['A', 'B', 'C', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'O', 'P', 'R'];\r\n            \r\n            // Get the code value\r\n            const codeValue = code.type;\r\n\r\n            // Find the search row (first row >= calcsPasteRow where CodeValue is found in Col D)\r\n            // Note: Using determinedLastRow obtained from the helper function\r\n            let searchRow = -1; // 1-based index\r\n            let searchRange = null; \r\n            let searchRangeAddress = ''; \r\n\r\n            try {\r\n                // USE calcsPasteRow in console log\r\n                console.log(`Attempting to get searchRange. calcsPasteRow: ${calcsPasteRow}, determinedLastRow: ${determinedLastRow}`);\r\n                // USE calcsPasteRow in condition\r\n                if (typeof calcsPasteRow !== 'number' || typeof determinedLastRow !== 'number' || calcsPasteRow <= 0 || determinedLastRow < calcsPasteRow) {\r\n                     console.error(`Invalid range parameters for searchRange: calcsPasteRow=${calcsPasteRow}, determinedLastRow=${determinedLastRow}. Skipping search.`);\r\n                     searchRow = -1; \r\n                 } else {\r\n                     // USE calcsPasteRow for search range address\r\n                     searchRangeAddress = `D${calcsPasteRow}:D${determinedLastRow}`;\r\n                     console.log(`Creating searchRange with address: ${searchRangeAddress}`);\r\n                     // Need to use the worksheet object available in *this* context\r\n                     searchRange = currentWorksheet.getRange(searchRangeAddress);\r\n\r\n                     console.log(`Loading values for searchRange: ${searchRangeAddress}`);\r\n                     searchRange.load('values');\r\n                     await context.sync();\r\n                     console.log(`Successfully loaded values for searchRange: ${searchRangeAddress}`);\r\n                 }\r\n\r\n            } catch (loadError) {\r\n                 console.error(`Error loading/syncing searchRange (${searchRangeAddress}): ${loadError.message}`, loadError);\r\n                 searchRow = -1; \r\n            }\r\n\r\n            // Check if searchRange was successfully created and loaded before accessing .values\r\n            if (searchRange && searchRange.values) { // Check searchRange first!\r\n                 console.log(`SearchRange (${searchRangeAddress}) has loaded values. Searching for codeValue: ${codeValue}`);\r\n                 for (let i = 0; i < searchRange.values.length; i++) {\r\n                    if (searchRange.values[i][0] === codeValue) {\r\n                        // USE calcsPasteRow to calculate searchRow\r\n                        searchRow = calcsPasteRow + i; // Found the row (1-based)\r\n                        console.log(`Found codeValue '${codeValue}' at index ${i}, resulting searchRow: ${searchRow}`);\r\n                        break;\r\n                    }\r\n                }\r\n                 if (searchRow === -1) { // If loop finished without finding\r\n                     console.log(`CodeValue '${codeValue}' not found within the loaded values of searchRange (${searchRangeAddress}).`);\r\n                 }\r\n            } else if (searchRow !== -1) { // Only log warning if we didn't already hit the loadError or invalid params\r\n                 console.warn(`searchRange (${searchRangeAddress}) object exists but '.values' property is not available after sync. Search cannot be performed.`);\r\n                 searchRow = -1; // Ensure we trigger the \"not found\" logic\r\n            }\r\n\r\n            if (searchRow === -1) {\r\n                 console.warn(`Code type ${codeValue} not found or could not be searched for in column D (Range: ${searchRangeAddress || 'Invalid'}). Skipping inputs for this code.`);\r\n                 return; // Exit if code not found or search failed\r\n            }\r\n            console.log(`Found code ${codeValue} at search row: ${searchRow}`);\r\n\r\n\r\n            // Find the check row (first row >= searchrow where Col B is not light green #CCFFCC)\r\n            // VBA: Do While .Cells(checkrow, 2).Interior.Color = RGB(204, 255, 204)\r\n            let checkRow = searchRow;\r\n            let isGreen = true;\r\n            while (isGreen) {\r\n                const cellB = currentWorksheet.getRange(`B${checkRow}`);\r\n                cellB.load('format/fill/color');\r\n                await context.sync();\r\n                 // Handle potential errors if cell color can't be loaded\r\n                 if (cellB.format && cellB.format.fill) {\r\n                    isGreen = cellB.format.fill.color === '#CCFFCC';\r\n                 } else {\r\n                     console.warn(`Could not read fill color for cell B${checkRow}. Assuming not green.`);\r\n                     isGreen = false; // Assume not green if color cannot be determined\r\n                 }\r\n\r\n                if (isGreen) {\r\n                    checkRow++;\r\n                    // Add a safety break condition?\r\n                    if (checkRow > determinedLastRow + 50) { // Use determinedLastRow\r\n                         console.error(\"Check row exceeded expected limits. Breaking loop.\");\r\n                         throw new Error(\"Failed to find non-green check row within reasonable bounds.\");\r\n                    }\r\n                }\r\n            }\r\n            console.log(`Found check row (first non-green row in B at/after search row): ${checkRow}`);\r\n\r\n\r\n            // Process drivers, labels, and financialsdriver (relative to searchRow)\r\n            for (let k = 1; k <= 9; k++) {\r\n                const targetRow = searchRow + k - 1;\r\n                if (targetRow > determinedLastRow + 20) { // Safety check: Don't write way past the data\r\n                    console.warn(`Target row ${targetRow} seems too high. Skipping write for k=${k}.`);\r\n                    continue;\r\n                }\r\n\r\n                // Financials Driver (only for k=1)\r\n                if (k === 1 && code.params.financialsdriver) {\r\n                    const finDriverCell = currentWorksheet.getRange(`I${targetRow}`);\r\n                    finDriverCell.values = [[code.params.financialsdriver]];\r\n                    console.log(`Set financialsdriver at I${targetRow}: ${code.params.financialsdriver}`);\r\n                }\r\n\r\n                // Driver\r\n                const driverParam = code.params[`driver${k}`];\r\n                if (driverParam) {\r\n                    const driverCell = currentWorksheet.getRange(`F${targetRow}`);\r\n                    driverCell.values = [[driverParam]];\r\n                     console.log(`Set driver${k} at F${targetRow}: ${driverParam}`);\r\n                }\r\n\r\n                // Label\r\n                const labelParam = code.params[`label${k}`];\r\n                if (labelParam) {\r\n                    const labelCell = currentWorksheet.getRange(`B${targetRow}`);\r\n                    labelCell.values = [[labelParam]];\r\n                     console.log(`Set label${k} at B${targetRow}: ${labelParam}`);\r\n                }\r\n            }\r\n            await context.sync(); // Sync after loop for efficiency\r\n\r\n\r\n            // Process row items (inserting rows relative to checkRow)\r\n            let currentCheckRowForInserts = checkRow; // Use a separate variable to track cumulative insertions correctly\r\n            for (let g = 1; g <= 200; g++) { // Max 200 row parameters as in VBA\r\n                const rowParam = code.params[`row${g}`];\r\n                if (!rowParam) continue; // Skip if rowg parameter doesn't exist\r\n\r\n                 console.log(`Processing row${g}: ${rowParam}`);\r\n\r\n                const rowItems = rowParam.split('*');\r\n                const numNewRows = rowItems.length - 1; // Number of rows to insert\r\n\r\n                // Calculate the 1-based row number *before* potential insertions for this 'g' iteration\r\n                // This takes into account rows inserted by previous 'g' loops via currentCheckRowForInserts\r\n                const baseRowForThisG = currentCheckRowForInserts + g - 1;\r\n                console.log(`Base row for row${g}: ${baseRowForThisG}, numNewRows: ${numNewRows}`);\r\n\r\n                if (numNewRows > 0) {\r\n                    // Insert new rows below the baseRowForThisG\r\n                    const insertStartAddress = `${baseRowForThisG + 1}:${baseRowForThisG + numNewRows}`;\r\n                    console.log(`Inserting ${numNewRows} rows at ${insertStartAddress}`);\r\n                    const insertRange = currentWorksheet.getRange(insertStartAddress);\r\n                    insertRange.insert(Excel.InsertShiftDirection.down);\r\n                    await context.sync(); // Sync after insert\r\n\r\n                    // Sequentially copy formats and formulas from the previous row to the newly inserted ones\r\n                    // This helps ensure relative formulas are adjusted correctly step-by-step\r\n                    console.log(`Copying formats/formulas sequentially for inserted rows.`);\r\n                    for (let i = 0; i < numNewRows; i++) {\r\n                        const sourceRowNum = baseRowForThisG + i;\r\n                        const targetRowNum = baseRowForThisG + i + 1; // The newly inserted row\r\n                        const sourceRowRange = currentWorksheet.getRange(`${sourceRowNum}:${sourceRowNum}`);\r\n                        const targetRowRange = currentWorksheet.getRange(`${targetRowNum}:${targetRowNum}`);\r\n\r\n                        // Copy formats\r\n                        console.log(`  Copying formats from row ${sourceRowNum} to ${targetRowNum}`);\r\n                        targetRowRange.copyFrom(sourceRowRange, Excel.RangeCopyType.formats);\r\n\r\n                        // Copy formulas (should adjust relative references)\r\n                        console.log(`  Copying formulas from row ${sourceRowNum} to ${targetRowNum}`);\r\n                        targetRowRange.copyFrom(sourceRowRange, Excel.RangeCopyType.formulas);\r\n\r\n                        // We could use RangeCopyType.all, but separate copy ensures population step overrides values cleanly.\r\n                    }\r\n                    await context.sync(); // Sync after all copies for this 'g' group are done\r\n                    console.log(\"Finished sequential copy for inserted rows.\");\r\n                }\r\n\r\n                // Populate the row(s) (original row + inserted rows)\r\n                // This runs AFTER rows are inserted and structure (formats/formulas) is copied.\r\n                for (let yy = 0; yy <= numNewRows; yy++) {\r\n                    const currentRowNum = baseRowForThisG + yy; // 1-based row number to write to\r\n                    const splitArray = rowItems[yy].split('|');\r\n                    console.log(`Populating row ${currentRowNum} with items: ${rowItems[yy]}`);\r\n\r\n                    for (let x = 0; x < splitArray.length; x++) {\r\n                        // Check bounds for columnSequence\r\n                        if (x >= columnSequence.length) {\r\n                            console.warn(`Data item index ${x} exceeds columnSequence length (${columnSequence.length}). Skipping.`);\r\n                            continue;\r\n                        }\r\n\r\n                        const valueToWrite = splitArray[x];\r\n                        // VBA check: If splitArray(x) <> \"\" And splitArray(x) <> \"F\" Then\r\n                        // 'F' likely means \"Formula\", so we don't overwrite if the value is 'F'.\r\n                        if (valueToWrite && valueToWrite.toUpperCase() !== 'F') {\r\n                            const colLetter = columnSequence[x];\r\n                            const cellToWrite = currentWorksheet.getRange(`${colLetter}${currentRowNum}`);\r\n                            // Attempt to infer data type (basic number check)\r\n                            const numValue = Number(valueToWrite);\r\n                            if (!isNaN(numValue) && valueToWrite.trim() !== '') {\r\n                                cellToWrite.values = [[numValue]];\r\n                            } else {\r\n                                // Preserve existing value if empty string, otherwise write text\r\n                                if (valueToWrite.trim() !== '') {\r\n                                    cellToWrite.values = [[valueToWrite]];\r\n                                }\r\n                            }\r\n                            // console.log(`  Wrote '${valueToWrite}' to ${colLetter}${currentRowNum}`);\r\n                        }\r\n                    }\r\n                }\r\n                await context.sync(); // Sync after populating each 'g' group\r\n\r\n                // Adjust the base check row marker for subsequent 'g' iterations\r\n                // by adding the number of rows inserted in *this* iteration.\r\n                currentCheckRowForInserts += numNewRows;\r\n                console.log(`Finished processing row${g}. currentCheckRowForInserts is now ${currentCheckRowForInserts}`);\r\n\r\n            } // End for g loop\r\n\r\n            console.log(`Completed processing driver and assumption inputs for code ${codeValue} in worksheet ${worksheetName}`);\r\n        }); // End main Excel.run\r\n    } catch (error) {\r\n        console.error(`Error in driverAndAssumptionInputs MAIN CATCH for code '${code.type}' in worksheet '${worksheet?.name || 'unknown'}': ${error.message}`, error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Finds the last used row in a specific column of a worksheet.\r\n * @param {Excel.Worksheet} worksheet - The worksheet to search in.\r\n * @param {string} columnLetter - The column letter (e.g., \"B\").\r\n * @returns {Promise<number>} - The 1-based index of the last used row, or 0 if the column is empty or an error occurs.\r\n */\r\nasync function getLastUsedRow(worksheet, columnLetter) {\r\n    // Re-use worksheet object passed into the function within this Excel.run\r\n    // Need context from the caller's Excel.run or wrap this in its own\r\n    console.log(`Attempting to get last used row for column ${columnLetter} in sheet ${worksheet.name}`);\r\n    try {\r\n        // It's safer to re-get the worksheet by name if this is called outside the main loop's context\r\n        // However, if called within the loop's context, using the passed object is fine.\r\n        // For simplicity assuming it's called within a valid context for now.\r\n        const fullColumn = worksheet.getRange(`${columnLetter}:${columnLetter}`);\r\n        const usedRange = fullColumn.getUsedRange(true); // Use 'true' for valuesOnly parameter\r\n        const lastCell = usedRange.getLastCell();\r\n        lastCell.load(\"rowIndex\");\r\n        await worksheet.context.sync(); // Use the context associated with the worksheet object\r\n        const lastRowIndex = lastCell.rowIndex + 1; // Convert 0-based index to 1-based row number\r\n        console.log(`Last used row in column ${columnLetter} is ${lastRowIndex}`);\r\n        return lastRowIndex;\r\n    } catch (error) {\r\n        // Handle cases where the column might be completely empty or other errors\r\n        if (error.code === \"ItemNotFound\" || error.code === \"GeneralException\") {\r\n            console.warn(`Could not find used range or last cell in column ${columnLetter} of sheet ${worksheet.name}. Assuming empty or header only (returning 0).`);\r\n            return 0; // Return 0 if column is empty or error occurs\r\n        }\r\n        console.error(`Error in getLastUsedRow for column ${columnLetter} on sheet ${worksheet.name}:`, error);\r\n        // It's often better to let the caller handle the error if it's unexpected.\r\n        throw error; // Re-throw other errors\r\n    }\r\n    // Note: Removed the inner Excel.run as it complicates context management.\r\n    // This function now expects to be called *within* an existing Excel.run context.\r\n}\r\n\r\n/**\r\n * Adjusts driver references in column AE based on lookups in column A.\r\n * Replicates the core logic of VBA Adjust_Drivers.\r\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\r\n * @param {number} lastRow - The last row to process (inclusive).\r\n */\r\nasync function adjustDriversJS(worksheet, lastRow) {\r\n    const START_ROW = 10; // <<< CHANGED FROM 9\r\n    const DRIVER_CODE_COL = \"F\"; // Column containing the driver code to look up\r\n    const LOOKUP_COL = \"A\";      // Column to search for the driver code\r\n    const TARGET_COL = \"AE\";     // Column where the result address string is written\r\n\r\n    console.log(`Running adjustDriversJS for sheet: ${worksheet.name} from row ${START_ROW} to ${lastRow}`);\r\n\r\n    // Ensure lastRow is valid before proceeding\r\n    if (lastRow < START_ROW) {\r\n        console.warn(`adjustDriversJS: lastRow (${lastRow}) is less than START_ROW (${START_ROW}). Skipping.`);\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // Define the ranges to load\r\n        const driverCodeRangeAddress = `${DRIVER_CODE_COL}${START_ROW}:${DRIVER_CODE_COL}${lastRow}`;\r\n        const lookupRangeAddress = `${LOOKUP_COL}${START_ROW}:${LOOKUP_COL}${lastRow}`;\r\n        const driverCodeRange = worksheet.getRange(driverCodeRangeAddress);\r\n        const lookupRange = worksheet.getRange(lookupRangeAddress);\r\n\r\n        // Load values from both columns\r\n        driverCodeRange.load(\"values\");\r\n        lookupRange.load(\"values\");\r\n        await worksheet.context.sync(); // Sync to get the values\r\n\r\n        const driverCodeValues = driverCodeRange.values;\r\n        const lookupValues = lookupRange.values;\r\n\r\n        // Create a map for efficient lookup: { lookupValue: rowIndex }\r\n        // Note: rowIndex here is the 1-based Excel row number\r\n        const lookupMap = new Map();\r\n        for (let i = 0; i < lookupValues.length; i++) {\r\n            const value = lookupValues[i][0];\r\n            // Only add non-empty values to the map. Handle potential duplicates?\r\n            // VBA's .Find typically finds the first match. Map naturally stores the last encountered.\r\n            if (value !== null && value !== \"\") {\r\n                 // The row number in Excel is START_ROW + index\r\n                lookupMap.set(value, START_ROW + i);\r\n            }\r\n        }\r\n        console.log(`Built lookup map from ${LOOKUP_COL}${START_ROW}:${LOOKUP_COL}${lastRow} with ${lookupMap.size} entries.`);\r\n\r\n        // Prepare the output values for the target column AE\r\n        // Initialize with nulls or empty strings to clear previous values potentially\r\n        const outputValues = []; // Array of arrays for Excel range: [[value1], [value2], ...]\r\n        let foundCount = 0;\r\n        let notFoundCount = 0;\r\n\r\n        for (let i = 0; i < driverCodeValues.length; i++) {\r\n            const driverCode = driverCodeValues[i][0];\r\n            const currentRow = START_ROW + i; // Current Excel row being processed\r\n\r\n            if (driverCode !== null && driverCode !== \"\") {\r\n                if (lookupMap.has(driverCode)) {\r\n                    const foundRow = lookupMap.get(driverCode);\r\n                    const targetAddress = `${TARGET_COL}${foundRow}`;\r\n                    outputValues.push([targetAddress]); // Store as [[value]] for range write\r\n                    foundCount++;\r\n                    // console.log(`Row ${currentRow} (${DRIVER_CODE_COL}): Found '${driverCode}' in ${LOOKUP_COL} at row ${foundRow}. Setting ${TARGET_COL}${currentRow} = '${targetAddress}'`);\r\n                } else {\r\n                    // Value in F not found in A\r\n                    console.warn(`adjustDriversJS: Driver code '${driverCode}' from cell ${DRIVER_CODE_COL}${currentRow} not found in range ${lookupRangeAddress}.`);\r\n                    outputValues.push([null]); // Or [\"\"] or keep existing? VBA doesn't explicitly clear. Using null.\r\n                    notFoundCount++;\r\n                }\r\n            } else {\r\n                // Empty cell in F, write null to corresponding AE cell\r\n                outputValues.push([null]);\r\n            }\r\n        }\r\n\r\n        // Write the results back to column AE\r\n        if (outputValues.length > 0) {\r\n            const targetRangeAddress = `${TARGET_COL}${START_ROW}:${TARGET_COL}${lastRow}`;\r\n            const targetRange = worksheet.getRange(targetRangeAddress);\r\n            console.log(`Writing ${foundCount} results (${notFoundCount} not found) to ${targetRangeAddress}`);\r\n            targetRange.values = outputValues;\r\n            // Sync will happen in the caller's context\r\n        } else {\r\n             console.log(`adjustDriversJS: No values to write to ${TARGET_COL}.`);\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(`Error in adjustDriversJS for sheet ${worksheet.name}:`, error);\r\n        // Decide if error should be re-thrown to stop the whole process\r\n        // throw error;\r\n    }\r\n    // No context.sync() here - it should be handled by the calling function (processAssumptionTabs)\r\n}\r\n\r\n/**\r\n * Replaces INDIRECT functions in a specified column range with their evaluated values.\r\n * Mimics the VBA Replace_Indirects logic using batched range value lookups.\r\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\r\n * @param {number} lastRow - The last row to process.\r\n */\r\nasync function replaceIndirectsJS(worksheet, lastRow) {\r\n    const START_ROW = 10; // <<< CHANGED FROM 9\r\n    const TARGET_COL = \"AE\";\r\n\r\n    console.log(`Running replaceIndirectsJS for sheet: ${worksheet.name} from row ${START_ROW} to ${lastRow}`);\r\n\r\n    if (lastRow < START_ROW) {\r\n        console.warn(`replaceIndirectsJS: lastRow (${lastRow}) is less than START_ROW (${START_ROW}). Skipping.`);\r\n        return;\r\n    }\r\n\r\n    const targetRangeAddress = `${TARGET_COL}${START_ROW}:${TARGET_COL}${lastRow}`;\r\n    const targetRange = worksheet.getRange(targetRangeAddress);\r\n\r\n    try {\r\n        // 1. Load formulas from the target range\r\n        targetRange.load(\"formulas\");\r\n        await worksheet.context.sync();\r\n\r\n        const originalFormulas = targetRange.formulas; // 2D array [[f1], [f2], ...]\r\n        const referencesToLookup = new Map(); // Map<string, { range: Excel.Range | null, value: any }>\r\n        const formulaData = []; // Array<{ originalFormula: string, index: number }>\r\n\r\n        // 2. First Pass: Identify all unique INDIRECT arguments\r\n        console.log(\"Replace_Indirects: Pass 1 - Identifying INDIRECT arguments\");\r\n        for (let i = 0; i < originalFormulas.length; i++) {\r\n            let formula = originalFormulas[i][0];\r\n            formulaData.push({ originalFormula: formula, index: i }); // Store original formula and index\r\n\r\n            if (typeof formula === 'string') {\r\n                // Use a loop to find all INDIRECT occurrences in a single formula\r\n                let searchStartIndex = 0;\r\n                while (true) {\r\n                    const upperFormula = formula.toUpperCase();\r\n                    const indirectStartIndex = upperFormula.indexOf(\"INDIRECT(\", searchStartIndex);\r\n\r\n                    // Stop if no more INDIRECT found or if it might be part of INDEX\r\n                    if (indirectStartIndex === -1 || upperFormula.includes(\"INDEX(\")) {\r\n                        break;\r\n                    }\r\n\r\n                    // Find the matching closing parenthesis (simple approach)\r\n                    const parenStartIndex = indirectStartIndex + \"INDIRECT(\".length;\r\n                    const parenEndIndex = formula.indexOf(\")\", parenStartIndex);\r\n\r\n                    if (parenEndIndex === -1) {\r\n                        console.warn(`Row ${START_ROW + i}: Malformed INDIRECT found in formula: ${formula}`);\r\n                        break; // Cannot process this INDIRECT\r\n                    }\r\n\r\n                    const argString = formula.substring(parenStartIndex, parenEndIndex).trim();\r\n\r\n                    // Validate argString looks like a cell/range reference (basic check)\r\n                    // This helps avoid trying to load ranges like \"Sheet1!A:A\" which might fail or be slow\r\n                    if (argString && /^[A-Za-z0-9_!$:'\". ]+$/.test(argString) && !referencesToLookup.has(argString)) {\r\n                         console.log(`  Found reference to lookup: ${argString}`);\r\n                         referencesToLookup.set(argString, { range: null, value: undefined }); // Placeholder\r\n                    }\r\n\r\n                    // Continue searching after this INDIRECT\r\n                    searchStartIndex = parenEndIndex + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        // 3. Batch Load Values for identified references\r\n        console.log(`Replace_Indirects: Loading values for ${referencesToLookup.size} unique references.`);\r\n        if (referencesToLookup.size > 0) {\r\n            for (const [refString, data] of referencesToLookup.entries()) {\r\n                try {\r\n                    // Attempt to get the range and load its value\r\n                    data.range = worksheet.getRange(refString);\r\n                    // Load values. Consider loading formulas too if INDIRECT might point to a formula cell.\r\n                    // Loading numberFormat might help distinguish between 0 and empty.\r\n                    data.range.load([\"values\", \"text\"]); // Load text to handle \"DELETE\" easily\r\n                } catch (rangeError) {\r\n                    console.warn(`Replace_Indirects: Error getting range for reference \"${refString}\". It might be invalid or on another sheet.`, rangeError.debugInfo || rangeError.message);\r\n                     // Keep data.range as null, will be handled later\r\n                    referencesToLookup.set(refString, { range: null, value: '#REF!' }); // Mark as error\r\n                }\r\n            }\r\n            await worksheet.context.sync(); // Sync all loaded values\r\n\r\n            // Populate the values in the map\r\n            for (const [refString, data] of referencesToLookup.entries()) {\r\n                 if (data.range) { // If range was successfully retrieved\r\n                     try {\r\n                         // Use .text to directly compare with \"DELETE\"\r\n                         // Use .values for the actual numeric/boolean value if not \"DELETE\"\r\n                        const cellText = data.range.text[0][0];\r\n                        if (cellText === \"DELETE\") {\r\n                            data.value = \"0\"; // Replace \"DELETE\" with \"0\" string as per VBA\r\n                        } else {\r\n                             // Use the actual value (could be string, number, boolean)\r\n                             // Prefer values[0][0] as it respects data types better than text\r\n                             data.value = data.range.values[0][0];\r\n                        }\r\n                     } catch (valueError) {\r\n                         console.warn(`Replace_Indirects: Error reading value for reference \"${refString}\" after sync.`, valueError.debugInfo || valueError.message);\r\n                         data.value = '#VALUE!'; // Or another suitable error indicator\r\n                     }\r\n                 }\r\n                 // If data.range was null or value fetch failed, data.value remains '#REF!' or '#VALUE!'\r\n            }\r\n             console.log(\"Replace_Indirects: Finished loading reference values.\");\r\n        }\r\n\r\n\r\n        // 4. Second Pass: Replace INDIRECT with looked-up values\r\n        console.log(\"Replace_Indirects: Pass 2 - Replacing INDIRECT calls.\");\r\n        const newFormulas = []; // Array of arrays: [[newF1], [newF2], ...]\r\n        \r\n        // Calculate TARGET_COL index for reference comparisons\r\n        const targetColIndex = columnLetterToIndex(TARGET_COL);\r\n        console.log(`Target column ${TARGET_COL} has index ${targetColIndex}`);\r\n        \r\n        for (const item of formulaData) {\r\n            let currentFormula = item.originalFormula;\r\n\r\n            if (typeof currentFormula === 'string') {\r\n                let loopCount = 0; // Safety break\r\n                const MAX_LOOPS = 20; // Prevent infinite loops for complex/circular cases\r\n\r\n                while (loopCount < MAX_LOOPS) {\r\n                    const upperFormula = currentFormula.toUpperCase();\r\n                    const indirectStartIndex = upperFormula.indexOf(\"INDIRECT(\");\r\n\r\n                    if (indirectStartIndex === -1 || upperFormula.includes(\"INDEX(\")) {\r\n                        break; // No more INDIRECTs (or INDEX present)\r\n                    }\r\n\r\n                    const parenStartIndex = indirectStartIndex + \"INDIRECT(\".length;\r\n                    const parenEndIndex = currentFormula.indexOf(\")\", parenStartIndex);\r\n\r\n                    if (parenEndIndex === -1) {\r\n                         // Already warned in pass 1, just break here\r\n                        break;\r\n                    }\r\n\r\n                    const indString = currentFormula.substring(indirectStartIndex, parenEndIndex + 1); // The full INDIRECT(...)\r\n                    const argString = currentFormula.substring(parenStartIndex, parenEndIndex).trim();\r\n\r\n                    let directRef = '#REF!'; // Default if lookup fails\r\n                     if (referencesToLookup.has(argString)) {\r\n                         directRef = referencesToLookup.get(argString).value;\r\n                     } else {\r\n                         // Argument wasn't identified/loaded (maybe invalid?)\r\n                         console.warn(`Row ${START_ROW + item.index}: INDIRECT argument \"${argString}\" not found in lookup map during replacement.`);\r\n                     }\r\n\r\n                    // Handle potential null/undefined values from lookup - treat as 0? VBA doesn't explicitly handle this.\r\n                    // Let's treat null/undefined as 0 for replacement to avoid inserting 'null' or 'undefined' into formulas.\r\n                     // Empty string \"\" should probably remain \"\" unless it was \"DELETE\".\r\n                     if (directRef === null || typeof directRef === 'undefined') {\r\n                         directRef = 0; // Replace null/undefined with numeric 0\r\n                     } else if (directRef === \"\") {\r\n                          // Keep empty string as empty string unless it was originally \"DELETE\"\r\n                          // The map handles \"DELETE\" -> \"0\" already\r\n                     } else if (typeof directRef === 'string') {\r\n                         // If the resolved value is a string, potentially needs quoting if replacing in a formula context?\r\n                         // VBA seems to just concatenate the value directly. Let's follow that.\r\n                         // Example: =SUM(INDIRECT(\"A1\")) where A1 contains \"B2\" becomes =SUM(B2)\r\n                         // Example: =CONCATENATE(\"Result: \",INDIRECT(\"A1\")) where A1 contains \"Success\" becomes =CONCATENATE(\"Result: \",\"Success\") - requires quotes?\r\n                         // VBA appears to handle this implicitly. JS replace won't add quotes.\r\n                         // Let's test behavior, may need adjustment if it breaks formulas expecting strings.\r\n                         // For now, direct replacement. Consider adding quotes if `directRef` is text AND the context requires it.\r\n                     } else if (typeof directRef === 'boolean') {\r\n                         directRef = directRef ? 'TRUE' : 'FALSE'; // Convert boolean to formula text\r\n                     }\r\n                     // Numeric values are fine as is.\r\n\r\n                    // Perform the replacement. Use replace directly on the found indString.\r\n                    currentFormula = currentFormula.replace(indString, String(directRef));\r\n                    loopCount++;\r\n\r\n                } // End while loop for single formula processing\r\n\r\n                if (loopCount === MAX_LOOPS) {\r\n                    console.warn(`Row ${START_ROW + item.index}: Max replacement loops reached for formula. Result might be incomplete: ${currentFormula}`);\r\n                }\r\n                \r\n                // NEW SECTION: Convert row references to absolute for columns >= TARGET_COL\r\n                if (typeof currentFormula === 'string') {\r\n                    console.log(`Making row references absolute for cell references in columns >= ${TARGET_COL} in row ${START_ROW + item.index}`);\r\n                    \r\n                    // Find cell references (e.g., A1, B2, AA34) but exclude already absolute refs (e.g., A$1, $A$1)\r\n                    // This regex captures: group 1 = column letter(s), group 2 = row number\r\n                    // It skips references that already have $ before the row number\r\n                    const cellRefRegex = /([A-Z]+)(\\d+)(?![^\\W_])/g;\r\n                    \r\n                    // Replace with absolute row references where needed\r\n                    currentFormula = currentFormula.replace(cellRefRegex, (match, col, row) => {\r\n                        // Get column index\r\n                        const colIndex = columnLetterToIndex(col);\r\n                        \r\n                        // If column index is >= target column index, make row reference absolute\r\n                        if (colIndex >= targetColIndex) {\r\n                            return `${col}$${row}`;\r\n                        }\r\n                        return match; // Keep as is for columns before TARGET_COL\r\n                    });\r\n                    \r\n                    console.log(`  Formula after converting to absolute row refs: ${currentFormula}`);\r\n                }\r\n                // END NEW SECTION\r\n            }\r\n            \r\n            // Add the processed formula (or original if not string/no INDIRECT) to the result array\r\n            newFormulas.push([currentFormula]);\r\n\r\n        } // End for loop processing all formulas\r\n\r\n        // 5. Write the modified formulas back to the range\r\n        console.log(`Replace_Indirects: Writing ${newFormulas.length} updated formulas back to ${targetRangeAddress}`);\r\n        targetRange.formulas = newFormulas;\r\n\r\n        // Sync is handled by the caller (processAssumptionTabs)\r\n\r\n    } catch (error) {\r\n        console.error(`Error in replaceIndirectsJS for sheet ${worksheet.name} range ${targetRangeAddress}:`, error.debugInfo || error);\r\n        // Re-throw the error to allow the calling function to handle it\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Placeholder for Populate_Financials VBA logic.\r\n * Populates the \"Financials\" sheet based on codes in the assumption sheet.\r\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\r\n * @param {number} lastRow - The last row to process in the assumption sheet.\r\n * @param {Excel.Worksheet} financialsSheet - The \"Financials\" worksheet (within the same Excel.run context).\r\n */\r\nasync function populateFinancialsJS(worksheet, lastRow, financialsSheet) {\r\n    console.log(`Running populateFinancialsJS for sheet: ${worksheet.name} (lastRow: ${lastRow}) -> ${financialsSheet.name}`);\r\n    // This function MUST be called within an Excel.run context.\r\n\r\n    const CALCS_FIRST_ROW = 10; // <<< CHANGED FROM 9 // Same as START_ROW elsewhere\r\n    const ASSUMPTION_CODE_COL = \"C\"; // Column with code to lookup on assumption sheet\r\n    const ASSUMPTION_LINK_COL_B = \"B\";\r\n    const ASSUMPTION_LINK_COL_D = \"D\";\r\n    // Column on assumption sheet to link for monthly data\r\n    const ASSUMPTION_MONTHS_START_COL = \"AE\";\r\n\r\n    const FINANCIALS_CODE_COLUMN = \"I\"; // Column to search for code on Financials sheet\r\n    const FINANCIALS_TARGET_COL_B = \"B\";\r\n    const FINANCIALS_TARGET_COL_D = \"D\";\r\n    const FINANCIALS_ANNUALS_START_COL = \"J\"; // Annuals start here\r\n    const FINANCIALS_MONTHS_START_COL = \"AE\"; // Months start here\r\n\r\n    // --- Updated Column Definitions ---\r\n    const ANNUALS_END_COL = \"P\";       // Annuals end here\r\n    const MONTHS_END_COL = \"CX\";       // Months end here\r\n    // --- End Updated Column Definitions ---\r\n\r\n    // Formatting constants\r\n    // const PURPLE_COLOR = \"#800080\"; // RGB(128, 0, 128) - Removed as Actuals section is removed\r\n    const GREEN_COLOR = \"#008000\";  // RGB(0, 128, 0)\r\n    const CURRENCY_FORMAT = '_(* $#,##0_);_(* $(#,##0);_(* \"$\" -_);_(@_)';\r\n\r\n    // Ensure lastRow is valid\r\n    if (lastRow < CALCS_FIRST_ROW) {\r\n        console.warn(`populateFinancialsJS: lastRow (${lastRow}) is less than CALCS_FIRST_ROW (${CALCS_FIRST_ROW}). Skipping.`);\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // 1. Load data from Assumption Sheet\r\n        console.log(`populateFinancialsJS: Loading assumption data up to row ${lastRow}`);\r\n        const assumptionCodeRange = worksheet.getRange(`${ASSUMPTION_CODE_COL}${CALCS_FIRST_ROW}:${ASSUMPTION_CODE_COL}${lastRow}`);\r\n        // No need to load B, D, AE addresses/values here anymore if only used for linking\r\n\r\n        assumptionCodeRange.load(\"values\");\r\n\r\n        // 2. Load data from Financials Sheet (Find last row in code column I)\r\n        const financialsSearchCol = financialsSheet.getRange(`${FINANCIALS_CODE_COLUMN}:${FINANCIALS_CODE_COLUMN}`);\r\n        const financialsUsedRange = financialsSearchCol.getUsedRange(true);\r\n        financialsUsedRange.load(\"rowCount\");\r\n        // It's okay to sync assumption and initial financials loads together\r\n        // await worksheet.context.sync(); // Removed intermediate sync\r\n\r\n        let financialsLastRow = 0;\r\n        // Sync financials rowCount load before calculating financialsLastRow\r\n        await worksheet.context.sync();\r\n        if (financialsUsedRange.rowCount > 0) {\r\n           try {\r\n              const lastCell = financialsUsedRange.getLastCell();\r\n              lastCell.load(\"rowIndex\");\r\n               await worksheet.context.sync();\r\n              financialsLastRow = lastCell.rowIndex + 1;\r\n           } catch(e) {\r\n               console.warn(`Could not get last cell directly for Financials col ${FINANCIALS_CODE_COLUMN}. Error: ${e.message}. Attempting fallback range loading.`);\r\n               try {\r\n                   // Use a potentially more reliable column like B for last row fallback\r\n                   const fallbackRange = financialsSheet.getRange(`${FINANCIALS_TARGET_COL_B}1:${FINANCIALS_TARGET_COL_B}10000`); // Check Col B\r\n                   fallbackRange.load(\"values\");\r\n                   await worksheet.context.sync();\r\n                   for (let i = fallbackRange.values.length - 1; i >= 0; i--) {\r\n                       if (fallbackRange.values[i][0] !== null && fallbackRange.values[i][0] !== \"\") {\r\n                           financialsLastRow = i + 1;\r\n                           break;\r\n                       }\r\n                   }\r\n                   if (financialsLastRow === 0) console.warn(`Fallback range load for Financials col ${FINANCIALS_TARGET_COL_B} also yielded no data.`);\r\n               } catch (fallbackError) {\r\n                    console.error(`Error during fallback range loading for Financials col ${FINANCIALS_TARGET_COL_B}:`, fallbackError);\r\n                    financialsLastRow = 0; // Keep it 0 if fallback fails\r\n               }\r\n           }\r\n        }\r\n        // Recalculate financialsLastRow based on Col B if it's potentially larger\r\n        try {\r\n            const lastRowB = await getLastUsedRow(financialsSheet, FINANCIALS_TARGET_COL_B);\r\n            financialsLastRow = Math.max(financialsLastRow, lastRowB);\r\n        } catch (lastRowBErr) {\r\n            console.warn(`Could not get last row from Col B: ${lastRowBErr.message}`);\r\n        }\r\n\r\n        console.log(`Financials last relevant row used for processing: ${financialsLastRow}`);\r\n\r\n\r\n        // 3. Create Map of Financials Codes (Col I) -> Row Number\r\n        // MODIFIED: Use a case-insensitive map for codes\r\n        const financialsCodeMap = new Map();\r\n        if (financialsLastRow > 0) {\r\n            const financialsCodeRange = financialsSheet.getRange(`${FINANCIALS_CODE_COLUMN}1:${FINANCIALS_CODE_COLUMN}${financialsLastRow}`);\r\n            financialsCodeRange.load(\"values\");\r\n            await worksheet.context.sync(); // Sync map data load\r\n            for (let i = 0; i < financialsCodeRange.values.length; i++) {\r\n                const code = financialsCodeRange.values[i][0];\r\n                if (code !== null && code !== \"\") {\r\n                    // Convert code to uppercase for case-insensitive comparison\r\n                    const upperCode = String(code).toUpperCase();\r\n                    // Only map the first occurrence of a code, like .Find would\r\n                    if (!financialsCodeMap.has(upperCode)) {\r\n                         financialsCodeMap.set(upperCode, i + 1);\r\n                    }\r\n                }\r\n            }\r\n            console.log(`Built Financials code map with ${financialsCodeMap.size} entries.`);\r\n        } else {\r\n            console.warn(`Financials sheet column ${FINANCIALS_CODE_COLUMN} appears empty or last row not found. No codes loaded for map.`);\r\n        }\r\n\r\n        // *** REMOVED: Logic for existingDataLinks Set ***\r\n        // const existingDataLinks = new Set();\r\n        // if (financialsLastRow > 0) {\r\n        //     ... load formulas from Financials Col B ...\r\n        //     ... populate existingDataLinks set ...\r\n        // }\r\n        // *** END REMOVED ***\r\n\r\n        // 4. Identify rows to insert and prepare task data\r\n        const tasks = [];\r\n        console.log(\"populateFinancialsJS: Syncing assumption codes load...\");\r\n        await worksheet.context.sync(); // Sync needed for assumptionCodeRange.values\r\n\r\n        // *** RELOAD assumption codes here AFTER the sync above, just in case ***\r\n        // It's safer to reload after any potential sync/modification, though unlikely needed here.\r\n        // Keeping the original load before the Financials code map creation seems okay.\r\n        const assumptionCodes = assumptionCodeRange.values; // Use the already loaded values\r\n\r\n        console.log(`populateFinancialsJS: Processing ${assumptionCodes?.length ?? 0} assumption rows.`);\r\n\r\n        // --- REMOVED Debug logging for row 17 values/addresses ---\r\n\r\n        for (let i = 0; i < (assumptionCodes?.length ?? 0); i++) {\r\n            const code = assumptionCodes[i][0];\r\n            const assumptionRow = CALCS_FIRST_ROW + i; // This is the correct Excel row number\r\n\r\n            if (code !== null && code !== \"\") {\r\n                // Construct the potential link formulas first\r\n                const linkFormulaB = `='${worksheet.name}'!${ASSUMPTION_LINK_COL_B}${assumptionRow}`;\r\n                const linkFormulaD = `='${worksheet.name}'!${ASSUMPTION_LINK_COL_D}${assumptionRow}`;\r\n                const linkFormulaMonths = `='${worksheet.name}'!${ASSUMPTION_MONTHS_START_COL}${assumptionRow}`;\r\n\r\n                // *** REMOVED CHECK 1: Skip if this assumption row link already exists in Financials Col B ***\r\n                // if (existingDataLinks.has(linkFormulaB)) {\r\n                //     console.log(`  Skipping Code ${code} (Assumption Row ${assumptionRow}): Link ${linkFormulaB} already exists in Financials!${FINANCIALS_TARGET_COL_B}.`);\r\n                //     continue; // Skip to next assumption code\r\n                // }\r\n\r\n                // *** MODIFIED: Use case-insensitive check for code existence ***\r\n                const upperCode = String(code).toUpperCase();\r\n                if (!financialsCodeMap.has(upperCode)) {\r\n                     console.log(`  Skipping Code ${code} (Assumption Row ${assumptionRow}): Code not found in Financials template column ${FINANCIALS_CODE_COLUMN}. Cannot determine target row.`);\r\n                     continue; // Skip if no template row found\r\n                }\r\n\r\n                // If the code exists in the map, proceed to create the task\r\n                const targetRow = financialsCodeMap.get(upperCode); // Get the row number from the map\r\n                console.log(`  Task Prep: Code ${code} (Assumption Row ${assumptionRow}) -> Target Financials Row (for insertion): ${targetRow}`);\r\n\r\n                tasks.push({\r\n                    targetRow: targetRow,\r\n                    assumptionRow: assumptionRow,\r\n                    code: code,\r\n                    addressB: linkFormulaB,     // Use the constructed formula link\r\n                    addressD: linkFormulaD,     // Use the constructed formula link\r\n                    addressMonths: linkFormulaMonths // Use the constructed formula link\r\n                });\r\n            }\r\n        }\r\n\r\n        if (tasks.length === 0) {\r\n            console.log(\"No matching codes found. Nothing to insert or populate.\");\r\n            return;\r\n        }\r\n\r\n        // 5. Sort tasks by targetRow DESCENDING\r\n        tasks.sort((a, b) => b.targetRow - a.targetRow);\r\n        console.log(`Sorted ${tasks.length} tasks for insertion.`);\r\n        // --- DEBUG: Log the tasks array --- \r\n        // console.log(\"Tasks array (sorted desc by targetRow):\", JSON.stringify(tasks)); // REMOVED DEBUG\r\n        // --- END DEBUG ---\r\n\r\n        // 6. Perform Insertions (bottom-up)\r\n        console.log(\"Performing row insertions...\");\r\n        for (const task of tasks) { // Uses the DESCENDING sorted tasks\r\n            financialsSheet.getRange(`${task.targetRow}:${task.targetRow}`).insert(Excel.InsertShiftDirection.down);\r\n            // *** It's generally more efficient to sync less often, but syncing after each insert\r\n            // ensures the row model is updated for potential complex dependencies if they existed.\r\n            // Keep sync here for now unless performance becomes an issue. ***\r\n            // await worksheet.context.sync(); // Sync after EACH insertion -- REMOVED THIS LINE\r\n        }\r\n        await worksheet.context.sync(); // Sync AFTER all insertions are queued\r\n        console.log(\"Finished row insertions.\");\r\n\r\n        // Pre-calculate the final adjusted row for each task after all insertions\r\n        console.log(\"Calculating final adjusted rows for population/autofill...\");\r\n        // Get unique original target rows, sorted ascending\r\n        const originalTargetRowsAsc = [...new Set(tasks.map(t => t.targetRow))].sort((a, b) => a - b);\r\n        const taskAdjustedRows = new Map(); // Map to store { assumptionRow: adjustedRow }\r\n        let totalShift = 0; // Total shift accumulated from previous rows\r\n\r\n        // --- DEBUG: Log originalTargetRowsAsc ---\r\n        // console.log(\"Original Target Rows (unique, asc):\", originalTargetRowsAsc); // REMOVED DEBUG\r\n        // --- END DEBUG ---\r\n\r\n        originalTargetRowsAsc.forEach(uniqueRow => {\r\n            // --- DEBUG: Log current uniqueRow ---\r\n            // console.log(`Processing uniqueRow: ${uniqueRow}`); // REMOVED DEBUG\r\n            // --- END DEBUG ---\r\n\r\n            // Find all tasks that originally targeted this unique row\r\n            // CORRECTED PROPERTY NAME IN FILTER: task.targetRow instead of task.originalTargetRow\r\n            const tasksAtThisRow = tasks.filter(task => task.targetRow === uniqueRow);\r\n\r\n            // --- DEBUG: Log tasks found for this uniqueRow ---\r\n            // console.log(`  Tasks found for uniqueRow ${uniqueRow}:`, JSON.stringify(tasksAtThisRow)); // REMOVED DEBUG\r\n            // --- END DEBUG ---\r\n\r\n            // Optional: Sort tasksAtThisRow by assumptionRow for deterministic order, though might not be strictly necessary\r\n            // tasksAtThisRow.sort((a, b) => a.assumptionRow - b.assumptionRow);\r\n\r\n            let currentAdjustedRowForGroup = uniqueRow + totalShift; // Starting adjusted row for this group\r\n\r\n            // Assign consecutive adjusted rows to each task in this group\r\n            tasksAtThisRow.forEach(task => {\r\n                taskAdjustedRows.set(task.assumptionRow, currentAdjustedRowForGroup); // Use assumptionRow as key\r\n                console.log(`  Mapping: Code ${task.code}, Assumption Row ${task.assumptionRow}, Original Target ${uniqueRow}, Final Adjusted Row ${currentAdjustedRowForGroup}`);\r\n                currentAdjustedRowForGroup++; // Increment for the next task inserting at the same original spot\r\n            });\r\n\r\n            // Update the total shift for subsequent unique rows\r\n            totalShift += tasksAtThisRow.length;\r\n        });\r\n\r\n        // --- DEBUG: Log the contents of the map --- \r\n        // console.log(\"taskAdjustedRows map contents:\", taskAdjustedRows); // REMOVED DEBUG\r\n        // --- END DEBUG ---\r\n\r\n        // 7. Populate and Format inserted rows using ADJUSTED row numbers\r\n        console.log(\"Populating inserted rows (using adjusted rows)...\");\r\n        for (const task of tasks) { // Iterates descending sorted tasks (order doesn't strictly matter here, but using the same loop)\r\n            // const originalTargetRow = task.targetRow; // No longer needed for lookup\r\n            const populateRow = taskAdjustedRows.get(task.assumptionRow); // Get the calculated adjusted row using assumptionRow\r\n\r\n            // Check if populateRow was found\r\n            if (typeof populateRow === 'undefined' || populateRow === null) {\r\n                console.error(`Could not find adjusted row for task with Assumption Row ${task.assumptionRow}, Code ${task.code}. Skipping population.`);\r\n                continue; // Skip this task if mapping failed\r\n            }\r\n\r\n            // Use populateRow instead of task.targetRow for getRange calls\r\n            const cellB = financialsSheet.getRange(`${FINANCIALS_TARGET_COL_B}${populateRow}`);\r\n            const cellD = financialsSheet.getRange(`${FINANCIALS_TARGET_COL_D}${populateRow}`);\r\n            const cellAnnualsStart = financialsSheet.getRange(`${FINANCIALS_ANNUALS_START_COL}${populateRow}`);\r\n            const cellMonthsStart = financialsSheet.getRange(`${FINANCIALS_MONTHS_START_COL}${populateRow}`);\r\n\r\n            // --- Populate Column B ---\r\n            cellB.formulas = [[task.addressB]]; // Set formula directly\r\n            cellB.format.font.bold = false;\r\n            cellB.format.font.italic = false;\r\n            cellB.format.indentLevel = 2;\r\n\r\n            // --- Populate Column D ---\r\n            cellD.formulas = [[task.addressD]]; // Set formula directly\r\n            cellD.format.font.bold = false;\r\n            cellD.format.font.italic = false;\r\n            cellD.format.indentLevel = 2;\r\n\r\n            // --- Populate Annuals Start Column (J) with SUMIF ---\r\n            // MODIFIED: Make code prefix comparison case-insensitive\r\n            let codePrefix = String(task.code).substring(0, 2).toUpperCase();\r\n            let formulaJ = \"\";\r\n            if (codePrefix === \"IS\" || codePrefix === \"CF\") {\r\n                 // Corrected R2C[1] to R2C: Criteria should reference current column's header (J$2)\r\n                 formulaJ = `=SUMIF(R3,R2C,R[0])`;\r\n            } else {\r\n                 // Corrected R2C[1] to R2C: Criteria should reference current column's header (J$2)\r\n                 formulaJ = `=SUMIF(R4,R2C,R[0])`;\r\n            }\r\n            cellAnnualsStart.formulasR1C1 = [[formulaJ]]; // Use formulasR1C1 for SUMIF\r\n            cellAnnualsStart.format.font.bold = false;\r\n            cellAnnualsStart.format.font.italic = false;\r\n            cellAnnualsStart.format.numberFormat = CURRENCY_FORMAT;\r\n\r\n            // --- Populate Months Start Column (AE) with Link ---\r\n            cellMonthsStart.formulas = [[task.addressMonths]]; // Set formula directly\r\n            cellMonthsStart.format.font.bold = false;\r\n            cellMonthsStart.format.font.italic = false;\r\n            cellMonthsStart.format.font.color = GREEN_COLOR; // Keep green color for month links\r\n            cellMonthsStart.format.numberFormat = CURRENCY_FORMAT;\r\n\r\n            // Removed Actuals column population (was L in previous version)\r\n            \r\n            // --- NEW: Populate Actuals Columns S:AD with SUMIFS formula ---\r\n            try {\r\n                const actualsRange = financialsSheet.getRange(`S${populateRow}:AD${populateRow}`);\r\n                const sumifsFormula = \"=SUMIFS('Actual Data'!$B:$B,'Actual Data'!$D:$D,EOMONTH(INDIRECT(ADDRESS(2,COLUMN())),0),'Actual Data'!$E:$E,@INDIRECT(ADDRESS(ROW(),2)))\";\r\n                \r\n                // Create a 2D array matching the range dimensions\r\n                const numCols = columnLetterToIndex('AD') - columnLetterToIndex('S') + 1;\r\n                const formulasArray = [Array(numCols).fill(sumifsFormula)];\r\n                actualsRange.formulas = formulasArray;\r\n                \r\n                // Apply formatting\r\n                actualsRange.format.numberFormat = CURRENCY_FORMAT;\r\n                actualsRange.format.font.bold = false;\r\n                actualsRange.format.font.italic = false;\r\n                actualsRange.format.font.color = \"#7030A0\"; // Set font color\r\n                console.log(`  Set SUMIFS formula for S${populateRow}:AD${populateRow}`);\r\n            } catch (sumifsError) {\r\n                console.error(`Error setting SUMIFS formula for row ${populateRow} (Code: ${task.code}):`, sumifsError.debugInfo || sumifsError);\r\n            }\r\n            // --- END NEW SECTION ---\r\n        }\r\n        console.log(\"Finished setting values/formulas/formats for inserted rows.\");\r\n        await worksheet.context.sync(); // Sync all population and formatting\r\n\r\n\r\n        // 8. Perform Autofills using ADJUSTED row numbers\r\n        console.log(\"Performing autofills (using adjusted rows)...\");\r\n        for (const task of tasks) { // Uses the DESCENDING sorted tasks again\r\n             // const originalTargetRow = task.targetRow; // No longer needed for lookup\r\n             const populateRow = taskAdjustedRows.get(task.assumptionRow); // Get the calculated adjusted row using assumptionRow\r\n\r\n             // Check if populateRow was found\r\n            if (typeof populateRow === 'undefined' || populateRow === null) {\r\n                console.error(`Could not find adjusted row for task with Assumption Row ${task.assumptionRow}, Code ${task.code}. Skipping autofill.`);\r\n                continue; // Skip this task if mapping failed\r\n            }\r\n\r\n             try {\r\n                // Use populateRow for autofill ranges\r\n                // Autofill Annuals: J -> P\r\n                const sourceAnnuals = financialsSheet.getRange(`${FINANCIALS_ANNUALS_START_COL}${populateRow}`); // Use adjusted row\r\n                const destAnnuals = financialsSheet.getRange(`${FINANCIALS_ANNUALS_START_COL}${populateRow}:${ANNUALS_END_COL}${populateRow}`); // Use adjusted row\r\n                sourceAnnuals.autoFill(destAnnuals, Excel.AutoFillType.fillDefault);\r\n                // console.log(`  Autofilled ${FINANCIALS_ANNUALS_START_COL}${populateRow} to ${ANNUALS_END_COL}${populateRow}`);\r\n\r\n                // Autofill Months: AE -> CX\r\n                const sourceMonths = financialsSheet.getRange(`${FINANCIALS_MONTHS_START_COL}${populateRow}`); // Use adjusted row\r\n                const destMonths = financialsSheet.getRange(`${FINANCIALS_MONTHS_START_COL}${populateRow}:${MONTHS_END_COL}${populateRow}`); // Use adjusted row\r\n                sourceMonths.autoFill(destMonths, Excel.AutoFillType.fillDefault);\r\n                // console.log(`  Autofilled ${FINANCIALS_MONTHS_START_COL}${populateRow} to ${MONTHS_END_COL}${populateRow}`);\r\n\r\n                // Removed Actuals autofill\r\n             } catch(autofillError) {\r\n                 // Update error message to use adjusted row\r\n                 console.error(`Error during autofill for adjusted row ${populateRow} (Code: ${task.code}, Original Target: ${task.targetRow}):`, autofillError.debugInfo || autofillError);\r\n             }\r\n        }\r\n        console.log(\"Finished setting up autofills.\");\r\n        await worksheet.context.sync(); // Sync all autofill operations\r\n        console.log(\"Autofills synced.\");\r\n\r\n        // *** NEW STEP: Modify codes in Assumption Sheet Column C ***\r\n        console.log(`Modifying codes in ${worksheet.name} column ${ASSUMPTION_CODE_COL} (${CALCS_FIRST_ROW}:${lastRow}) by prepending '-'...`);\r\n        try {\r\n            // Re-get the range and load values (ensure we have the latest state)\r\n            const codeColRange = worksheet.getRange(`${ASSUMPTION_CODE_COL}${CALCS_FIRST_ROW}:${ASSUMPTION_CODE_COL}${lastRow}`);\r\n            codeColRange.load(\"values\");\r\n            await worksheet.context.sync(); // Load the values\r\n\r\n            const currentCodeValues = codeColRange.values;\r\n            const modifiedCodeValues = [];\r\n            let modifiedCount = 0;\r\n\r\n            for (let i = 0; i < currentCodeValues.length; i++) {\r\n                const originalValue = currentCodeValues[i][0];\r\n                if (originalValue !== null && originalValue !== \"\" && !String(originalValue).startsWith('-')) {\r\n                    modifiedCodeValues.push([\"-\" + originalValue]); // Prepend \"-\"\r\n                    modifiedCount++;\r\n                } else {\r\n                    modifiedCodeValues.push([originalValue]); // Keep original if empty, null, or already starts with '-'\r\n                }\r\n            }\r\n\r\n            // Write the modified values back if any changes were made\r\n            if (modifiedCount > 0) {\r\n                 console.log(`  Writing ${modifiedCount} modified codes back to ${ASSUMPTION_CODE_COL}${CALCS_FIRST_ROW}:${ASSUMPTION_CODE_COL}${lastRow}`);\r\n                 codeColRange.values = modifiedCodeValues;\r\n                 await worksheet.context.sync(); // Sync the code modifications\r\n                 console.log(\"  Synced code modifications.\");\r\n            } else {\r\n                console.log(\"  No codes needed modification.\");\r\n            }\r\n        } catch (modifyError) {\r\n             console.error(`Error modifying codes in ${worksheet.name} column ${ASSUMPTION_CODE_COL}:`, modifyError.debugInfo || modifyError);\r\n             // Continue even if modification fails? Or throw? Let's log and continue.\r\n        }\r\n        // *** END NEW STEP ***\r\n\r\n\r\n        console.log(`populateFinancialsJS successfully completed for ${worksheet.name} -> ${financialsSheet.name}`);\r\n\r\n    } catch (error) {\r\n        console.error(`Error in populateFinancialsJS for sheet ${worksheet.name} -> ${financialsSheet.name}:`, error.debugInfo || error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Placeholder for Format_Changes_In_Working_Capital VBA logic.\r\n * Inserts a row and adjusts formatting in \"Financials\" based on specific codes.\r\n * @param {Excel.Worksheet} financialsSheet - The \"Financials\" worksheet (within an Excel.run context).\r\n */\r\nasync function formatChangesInWorkingCapitalJS(financialsSheet) {\r\n    console.log(`Running formatChangesInWorkingCapitalJS for sheet: ${financialsSheet.name}`);\r\n    // This function MUST be called within an Excel.run context.\r\n    const FIND_TEXT_1 = \"CF: Non-cash\";\r\n    const FIND_TEXT_2 = \"CF: WC\";\r\n    const SEARCH_COLUMN = \"I\";\r\n     // Define ranges for border removal based on VBA (e.g., \"K\" + (foundRow + 1) + \":P\" + (foundRow + 1))\r\n\r\n    // TODO: Implement Format_Changes_In_Working_Capital logic\r\n    // 1. Find FIND_TEXT_1 in SEARCH_COLUMN using range.find\r\n    // 2. If found:\r\n    //    a. Get cell above (offset -1, 0)\r\n    //    b. Load its value\r\n    //    c. Sync\r\n    //    d. Check if value is FIND_TEXT_2\r\n    //    e. If yes:\r\n    //       i. Get the entire row of the found cell (.getEntireRow())\r\n    //       ii. Insert a new row above it (insert(Excel.InsertShiftDirection.down))\r\n    //       iii. Get ranges in the *original* row (now shifted down one) and remove borders.\r\n    financialsSheet.load('name'); // Keep reference valid if needed later in the SAME context\r\n    await financialsSheet.context.sync();\r\n     console.warn(`formatChangesInWorkingCapitalJS on ${financialsSheet.name} not implemented yet.`);\r\n}\r\n\r\n/**\r\n * Processes assumption tabs after runCodes, replicating VBA logic.\r\n * Expects an array of assumption tab names.\r\n * @param {string[]} assumptionTabNames - Array of assumption tab names created by runCodes.\r\n */\r\nexport async function processAssumptionTabs(assumptionTabNames) {\r\n    console.log(`Starting processing for ${assumptionTabNames.length} assumption tabs:`, assumptionTabNames);\r\n    if (!assumptionTabNames || assumptionTabNames.length === 0) {\r\n        console.log(\"No assumption tabs provided to process.\");\r\n        return;\r\n    }\r\n\r\n    const FINANCIALS_SHEET_NAME = \"Financials\"; // Define constant\r\n    const AUTOFILL_START_COLUMN = \"AE\";\r\n    const AUTOFILL_END_COLUMN = \"CX\";\r\n    const START_ROW = 10; // <<< CHANGED FROM 9 // Standard start row for processing\r\n\r\n    try {\r\n        // --- Loop through each assumption tab name ---\r\n        for (const worksheetName of assumptionTabNames) {\r\n             console.log(`\\nProcessing Assumption Tab: ${worksheetName}`);\r\n\r\n            try {\r\n                 // Perform operations for a single tab within one Excel.run for efficiency\r\n                 await Excel.run(async (context) => {\r\n                     // Get worksheet and financials sheet references within THIS context\r\n                     const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\r\n                     const financialsSheet = context.workbook.worksheets.getItem(FINANCIALS_SHEET_NAME);\r\n                     currentWorksheet.load('name'); // Load basic properties\r\n                     financialsSheet.load('name');\r\n                     await context.sync(); // Ensure sheets are loaded\r\n\r\n                     console.log(`Successfully got references for ${currentWorksheet.name} and ${financialsSheet.name}`);\r\n\r\n                     // 1. Get Last Row for the current assumption tab\r\n                     // getLastUsedRow needs context, so call it here\r\n                     const lastRow = await getLastUsedRow(currentWorksheet, \"B\"); // Pass currentWorksheet from this context\r\n                     if (lastRow < START_ROW) {\r\n                         console.warn(`Skipping tab ${worksheetName} as last used row in Col B (${lastRow}) is before start row (${START_ROW}).`);\r\n                         return; // Skip to next tab if empty or too short\r\n                     }\r\n                     console.log(`Last row in Col B for ${worksheetName}: ${lastRow}`);\r\n\r\n                     // --- Call helper functions IN ORDER, passing worksheet objects from this context ---\r\n                     // These helpers now expect to run within this context\r\n\r\n                     // 2. Adjust Drivers\r\n                     await adjustDriversJS(currentWorksheet, lastRow);\r\n\r\n                     // 3. Replace Indirects\r\n                     await replaceIndirectsJS(currentWorksheet, lastRow);\r\n\r\n                     // 4. Get Last Row Again (if Replace_Indirects might change it)\r\n                     // const updatedLastRow = await getLastUsedRow(currentWorksheet, \"B\"); // Recalculate if necessary\r\n                     const updatedLastRow = lastRow; // Assuming Replace_Indirects doesn't change last row for now\r\n                     console.log(`Using last row for subsequent steps: ${updatedLastRow}`);\r\n                     if (updatedLastRow < START_ROW) {\r\n                         console.warn(`Skipping remaining steps for ${worksheetName} as updated last row (${updatedLastRow}) is invalid.`);\r\n                         return;\r\n                     }\r\n\r\n                     // 5. Populate Financials\r\n                     await populateFinancialsJS(currentWorksheet, updatedLastRow, financialsSheet);\r\n\r\n                     // 6.5 Set font color to white in column A\r\n                     // We use updatedLastRow here, as deletions haven't happened yet\r\n                     await setColumnAFontWhite(currentWorksheet, START_ROW, updatedLastRow); \r\n                     console.log(`Set font color to white in column A from rows ${START_ROW}-${updatedLastRow}`);\r\n  \r\n                     // // Force recalculation before Index Growth Curve (especially if manual calc mode)\r\n                     // console.log(`Performing full workbook recalculation before Index Growth Curve for ${worksheetName}...`);\r\n                     // context.workbook.application.calculate(Excel.CalculationType.fullRebuild);\r\n                     // await context.sync(); // Sync the calculation\r\n                     // console.log(`Recalculation complete for ${worksheetName}.`);\r\n \r\n                      // 6.8 Apply Index Growth Curve logic (if applicable)\r\n                     // Run Index Growth *before* deleting rows. Use updatedLastRow as the boundary.\r\n                     await applyIndexGrowthCurveJS(currentWorksheet, updatedLastRow); \r\n                     \r\n                     // 7. Delete rows with green background (#CCFFCC) - AFTER Index Growth\r\n                     console.log(`Deleting green rows in ${worksheetName}...`);\r\n                     // Changed START_ROW to START_ROW - 1 to include row 9\r\n                     const finalLastRow = await deleteGreenRows(currentWorksheet, START_ROW - 1, updatedLastRow); // Get the new last row AFTER deletions\r\n                     console.log(`After deleting green rows, last row is now: ${finalLastRow}`);\r\n \r\n                     // 8. Autofill AE9:AE<lastRow> -> CX<lastRow> on Assumption Tab - Use finalLastRow\r\n                     console.log(`Autofilling ${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${finalLastRow} to ${AUTOFILL_END_COLUMN} on ${worksheetName}`);\r\n                     const sourceRange = currentWorksheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${finalLastRow}`);\r\n                     const fillRange = currentWorksheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_END_COLUMN}${finalLastRow}`);\r\n                     sourceRange.autoFill(fillRange, Excel.AutoFillType.fillDefault);\r\n \r\n                     // 9. Set Row 9 interior color to none\r\n                     console.log(`Setting row 9 interior color to none for ${worksheetName}`);\r\n                     const row9Range = currentWorksheet.getRange(\"9:9\");\r\n                     row9Range.format.fill.clear();\r\n\r\n                     // Sync all batched operations for this tab\r\n                     await context.sync();\r\n                     console.log(`Finished processing and syncing for tab ${worksheetName}`);\r\n\r\n                 }); // End Excel.run for single tab processing\r\n\r\n             } catch (tabError) {\r\n                 console.error(`Error processing tab ${worksheetName}:`, tabError);\r\n                 // Optionally add to an error list and continue with the next tab\r\n                 // Be mindful that subsequent tabs might depend on this one succeeding.\r\n             }\r\n        } // --- End loop through assumption tabs ---\r\n\r\n        // --- Final Operations on Financials Sheet ---\r\n        console.log(`\\nPerforming final operations on ${FINANCIALS_SHEET_NAME}`);\r\n        try {\r\n             await Excel.run(async (context) => {\r\n                 const finSheet = context.workbook.worksheets.getItem(FINANCIALS_SHEET_NAME);\r\n                 finSheet.load('name'); // Load name for logging\r\n                 await context.sync(); // Ensure sheet is loaded\r\n\r\n                 // 1. Format Changes In Working Capital\r\n                 // await formatChangesInWorkingCapitalJS(finSheet); // <<< COMMENTED OUT\r\n\r\n                 // 2. Get Last Row for Financials\r\n                 const financialsLastRow = await getLastUsedRow(finSheet, \"B\"); // Pass sheet from this context\r\n                 if (financialsLastRow < START_ROW) {\r\n                     console.warn(`Skipping final autofill on ${FINANCIALS_SHEET_NAME} as last row (${financialsLastRow}) is before start row (${START_ROW}).`);\r\n                     return;\r\n                 }\r\n                 console.log(`Last row in Col B for ${FINANCIALS_SHEET_NAME}: ${financialsLastRow}`);\r\n\r\n                //  // 3. Autofill AE9:AE<lastRow> -> CX<lastRow> on Financials\r\n                //  console.log(`Autofilling ${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${financialsLastRow} to ${AUTOFILL_END_COLUMN} on ${FINANCIALS_SHEET_NAME}`);\r\n                //  const sourceRangeFin = finSheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${financialsLastRow}`);\r\n                //  const fillRangeFin = finSheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_END_COLUMN}${financialsLastRow}`);\r\n                //  sourceRangeFin.autoFill(fillRangeFin, Excel.AutoFillType.fillDefault);\r\n\r\n\r\n                 // Sync final Financials sheet operations\r\n                 await context.sync();\r\n                 console.log(`Finished final operations on ${FINANCIALS_SHEET_NAME}`);\r\n             });\r\n         } catch (financialsError) {\r\n             console.error(`Error during final operations on ${FINANCIALS_SHEET_NAME}:`, financialsError);\r\n         }\r\n\r\n        console.log(\"Finished processing all assumption tabs.\");\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in processAssumptionTabs main function:\", error);\r\n        // Potentially re-throw or handle top-level errors\r\n    }\r\n}\r\n\r\n/**\r\n * Deletes rows with light green background (#CCFFCC) in column B\r\n * @param {Excel.Worksheet} worksheet - The worksheet to process\r\n * @param {number} startRow - The first row to check\r\n * @param {number} lastRow - The last row to check\r\n * @returns {Promise<number>} - The new last row after deletions\r\n */\r\nasync function deleteGreenRows(worksheet, startRow, lastRow) {\r\n    console.log(`Deleting green rows (#CCFFCC) in ${worksheet.name} from row ${startRow} to ${lastRow}`);\r\n    \r\n    try {\r\n        // Create an array to store rows that need deletion (in descending order)\r\n        const rowsToDelete = [];\r\n        \r\n        // Process each row individually instead of as a range to avoid collection issues\r\n        for (let rowNum = startRow; rowNum <= lastRow; rowNum++) {\r\n            const cellAddress = `B${rowNum}`;\r\n            const cell = worksheet.getRange(cellAddress);\r\n            cell.load(\"format/fill/color\");\r\n            \r\n            try {\r\n                await worksheet.context.sync();\r\n                \r\n                // Safely check if properties exist and if color matches\r\n                if (cell.format && \r\n                    cell.format.fill && \r\n                    cell.format.fill.color === \"#CCFFCC\") {\r\n                    rowsToDelete.push(rowNum);\r\n                }\r\n            } catch (cellError) {\r\n                console.warn(`Error checking color for ${cellAddress}: ${cellError.message}`);\r\n                // Continue to next cell if there's an error with this one\r\n            }\r\n        }\r\n        \r\n        // Sort in descending order to delete from bottom to top\r\n        rowsToDelete.sort((a, b) => b - a);\r\n        \r\n        console.log(`Found ${rowsToDelete.length} green rows to delete`);\r\n        \r\n        // Delete each row (from bottom to top)\r\n        if (rowsToDelete.length > 0) {\r\n            for (const rowNum of rowsToDelete) {\r\n                console.log(`Deleting row ${rowNum}`);\r\n                const rowRange = worksheet.getRange(`${rowNum}:${rowNum}`);\r\n                rowRange.delete(Excel.DeleteShiftDirection.up);\r\n            }\r\n            \r\n            await worksheet.context.sync();\r\n            \r\n            // Recalculate the last row\r\n            const newLastRow = await getLastUsedRow(worksheet, \"B\");\r\n            console.log(`New last row after deletions: ${newLastRow}`);\r\n            \r\n            return newLastRow;\r\n        } else {\r\n            console.log(\"No green rows found to delete\");\r\n            return lastRow; // Return original lastRow if no rows deleted\r\n        }\r\n    } catch (error) {\r\n        console.error(`Error in deleteGreenRows: ${error.message}`, error);\r\n        // Return the original lastRow on error\r\n        return lastRow;\r\n    }\r\n}\r\n\r\n/**\r\n * Sets the font color to white for all cells in column A\r\n * @param {Excel.Worksheet} worksheet - The worksheet to process\r\n * @param {number} startRow - The first row to format\r\n * @param {number} lastRow - The last row to format\r\n * @returns {Promise<void>}\r\n */\r\nasync function setColumnAFontWhite(worksheet, startRow, lastRow) {\r\n    console.log(`Setting font color to white in column A for ${worksheet.name} from row ${startRow} to ${lastRow}`);\r\n    \r\n    try {\r\n        // Get the entire range for column A from startRow to lastRow\r\n        const columnARange = worksheet.getRange(`A${startRow}:A${lastRow}`);\r\n        \r\n        // Set the font color to white\r\n        columnARange.format.font.color = \"#FFFFFF\";\r\n        \r\n        await worksheet.context.sync();\r\n        console.log(`Successfully set font color to white in column A for rows ${startRow}-${lastRow}`);\r\n    } catch (error) {\r\n        console.error(`Error in setColumnAFontWhite: ${error.message}`, error);\r\n    }\r\n}\r\n\r\n// --- Helper Functions for Column Conversion ---\r\n\r\n/**\r\n * Converts a 0-based column index into a column letter (e.g., 0 -> A, 1 -> B, 26 -> AA).\r\n * @param {number} index - The 0-based column index.\r\n * @returns {string} The column letter.\r\n */\r\nfunction columnIndexToLetter(index) {\r\n    let letter = '';\r\n    while (index >= 0) {\r\n        letter = String.fromCharCode(index % 26 + 'A'.charCodeAt(0)) + letter;\r\n        index = Math.floor(index / 26) - 1;\r\n    }\r\n    return letter;\r\n}\r\n\r\n/**\r\n * Converts a column letter into a 0-based column index (e.g., A -> 0, B -> 1, AA -> 26).\r\n * @param {string} letter - The column letter (case-insensitive).\r\n * @returns {number} The 0-based column index.\r\n */\r\nfunction columnLetterToIndex(letter) {\r\n    letter = letter.toUpperCase();\r\n    let index = 0;\r\n    for (let i = 0; i < letter.length; i++) {\r\n        index = index * 26 + (letter.charCodeAt(i) - 'A'.charCodeAt(0) + 1);\r\n    }\r\n    return index - 1; // Adjust to 0-based\r\n}\r\n\r\n/**\r\n * Hides Columns C-I, Rows 2-8, and specific Actuals columns on specified sheets,\r\n * then navigates to cell A1 of the Financials sheet.\r\n * @param {string[]} assumptionTabNames - Array of assumption tab names created by runCodes.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function hideColumnsAndNavigate(assumptionTabNames) { // Renamed and added parameter\r\n    // Define Actuals columns\r\n    const ACTUALS_START_COL = \"S\";\r\n    const ACTUALS_END_COL = \"AD\";\r\n\r\n    try {\r\n        const targetSheetNames = [...assumptionTabNames, \"Financials\"]; // Combine assumption tabs and Financials\r\n        console.log(`Attempting to hide specific rows/columns on sheets [${targetSheetNames.join(', ')}] and navigate...`);\r\n\r\n        await Excel.run(async (context) => {\r\n            // Get all worksheets\r\n            const worksheets = context.workbook.worksheets;\r\n            // Load only names needed for matching\r\n            worksheets.load(\"items/name\");\r\n            await context.sync();\r\n\r\n            console.log(`Found ${worksheets.items.length} worksheets. Targeting ${targetSheetNames.length} specific sheets.`);\r\n            let hideAttempted = false;\r\n\r\n            // Calculate actuals end column for assumption tabs\r\n            const actualsEndIndex = columnLetterToIndex(ACTUALS_END_COL);\r\n            const actualsEndMinusOneCol = actualsEndIndex > 0 ? columnIndexToLetter(actualsEndIndex - 1) : ACTUALS_START_COL; // Handle edge case\r\n\r\n            // --- Queue hiding operations for target sheets ---\r\n            for (const worksheet of worksheets.items) {\r\n                const sheetName = worksheet.name;\r\n                if (targetSheetNames.includes(sheetName)) { // Check if sheet is in our target list\r\n                    console.log(`Queueing hide operations for: ${sheetName}`);\r\n                    try {\r\n                        // Hide Rows 2:8 (Applies to both)\r\n                        const rows28 = worksheet.getRange(\"2:8\");\r\n                        rows28.rowHidden = true;\r\n\r\n                        // Conditional Column Hiding\r\n                        if (sheetName === \"Financials\") {\r\n                            console.log(`  -> Hiding Columns C:I for Financials`);\r\n                            const colsCI = worksheet.getRange(\"C:I\");\r\n                            colsCI.columnHidden = true;\r\n                        } else {\r\n                            // Hide Columns C:E for Assumption Tabs\r\n                            console.log(`  -> Hiding Columns C:E for ${sheetName}`);\r\n                            const colsCE = worksheet.getRange(\"C:E\");\r\n                            colsCE.columnHidden = true;\r\n                        }\r\n\r\n                        // Hide Actuals Columns based on sheet type\r\n                        if (sheetName === \"Financials\") {\r\n                            console.log(`  -> Hiding Actuals range ${ACTUALS_START_COL}:${ACTUALS_END_COL}`);\r\n                            const actualsRangeFin = worksheet.getRange(`${ACTUALS_START_COL}:${ACTUALS_END_COL}`);\r\n                            actualsRangeFin.columnHidden = true;\r\n                        } else if (assumptionTabNames.includes(sheetName)) {\r\n                             console.log(`  -> Hiding Actuals range ${ACTUALS_START_COL}:${actualsEndMinusOneCol}`);\r\n                             const actualsRangeAssum = worksheet.getRange(`${ACTUALS_START_COL}:${actualsEndMinusOneCol}`);\r\n                             actualsRangeAssum.columnHidden = true;\r\n                        }\r\n\r\n                        hideAttempted = true; // Mark that at least one hide was queued\r\n                    } catch (error) {\r\n                        // Log unexpected errors during the queuing attempt\r\n                        console.error(`  Error queuing hide operations for ${sheetName}: ${error.message}`, {\r\n                            code: error.code,\r\n                            debugInfo: error.debugInfo ? JSON.stringify(error.debugInfo) : 'N/A'\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            // --- Sync all queued hide operations ---\r\n            if (hideAttempted) {\r\n                console.log(`Attempting to sync hide columns/rows operations...`);\r\n                try {\r\n                    await context.sync();\r\n                    console.log(\"Successfully synced hide columns/rows operations.\");\r\n                } catch (syncError) {\r\n                    console.error(`Error syncing hide columns/rows operations: ${syncError.message}`, {\r\n                        code: syncError.code,\r\n                        debugInfo: syncError.debugInfo ? JSON.stringify(syncError.debugInfo) : 'N/A'\r\n                    });\r\n                     // Report failure but continue to navigation attempt\r\n                }\r\n            } else {\r\n                 console.log(\"No target sheets found or no hide operations were queued.\");\r\n            }\r\n\r\n            // --- Activate and Select A1 on each assumption tab (mimic Ctrl+Home) ---\r\n            console.log(\"Activating and selecting A1 on assumption tabs...\");\r\n            // Note: This requires syncing inside the loop for the activate/select effect per sheet\r\n            for (const sheetName of assumptionTabNames) {\r\n                try {\r\n                    console.log(`  Activating and selecting A1 for: ${sheetName}`);\r\n                    const worksheet = context.workbook.worksheets.getItem(sheetName);\r\n                    worksheet.activate(); // Activate the sheet first\r\n                    const rangeA1 = worksheet.getRange(\"A1\");\r\n                    rangeA1.select(); // Then select A1\r\n                    await context.sync(); // Sync *immediately* to apply activation and selection for this sheet\r\n                    console.log(`  Synced A1 view reset for ${sheetName}.`);\r\n                } catch (error) {\r\n                     console.error(`  Error resetting view for ${sheetName}: ${error.message}`);\r\n                     // Optionally continue to the next sheet even if one fails\r\n                }\r\n            }\r\n            // No final sync needed for this loop as it happens inside\r\n\r\n            // --- Activate and Select J9 on each assumption tab ---\r\n            console.log(\"Activating and selecting J9 on assumption tabs...\");\r\n            // Note: This requires syncing inside the loop for the activate/select effect per sheet\r\n            for (const sheetName of assumptionTabNames) {\r\n                try {\r\n                    console.log(`  Activating and selecting J9 for: ${sheetName}`);\r\n                    const worksheet = context.workbook.worksheets.getItem(sheetName);\r\n                    worksheet.activate(); // Activate the sheet first\r\n                    const rangeJ9 = worksheet.getRange(\"J9\"); // Get J9\r\n                    rangeJ9.select(); // Then select J9\r\n                    await context.sync(); // Sync *immediately* to apply activation and selection for this sheet\r\n                    console.log(`  Synced J9 view reset for ${sheetName}.`);\r\n                } catch (error) {\r\n                     console.error(`  Error resetting view to J9 for ${sheetName}: ${error.message}`);\r\n                     // Optionally continue to the next sheet even if one fails\r\n                }\r\n            }\r\n            // No final sync needed for this loop as it happens inside\r\n\r\n            \r\n\r\n            // --- Delete sheets that begin with \"Codes\" or \"Calcs\" ---\r\n            console.log(\"Deleting sheets that begin with 'Codes' or 'Calcs'...\");\r\n            try {\r\n                // Get all worksheets again to ensure we have the latest list\r\n                const allWorksheets = context.workbook.worksheets;\r\n                allWorksheets.load(\"items/name\");\r\n                await context.sync();\r\n                \r\n                const sheetsToDelete = [];\r\n                \r\n                // Identify sheets to delete\r\n                for (const worksheet of allWorksheets.items) {\r\n                    const sheetName = worksheet.name;\r\n                    if (sheetName.startsWith(\"Codes\") || sheetName.startsWith(\"Calcs\")) {\r\n                        sheetsToDelete.push(sheetName);\r\n                    }\r\n                }\r\n                \r\n                // Delete identified sheets\r\n                if (sheetsToDelete.length > 0) {\r\n                    console.log(`Found ${sheetsToDelete.length} sheet(s) to delete: ${sheetsToDelete.join(', ')}`);\r\n                    \r\n                    for (const sheetName of sheetsToDelete) {\r\n                        try {\r\n                            const sheetToDelete = context.workbook.worksheets.getItem(sheetName);\r\n                            sheetToDelete.delete();\r\n                            console.log(`  Queued deletion of sheet: ${sheetName}`);\r\n                        } catch (deleteError) {\r\n                            console.error(`  Error queuing deletion of sheet ${sheetName}: ${deleteError.message}`);\r\n                            // Continue with other deletions even if one fails\r\n                        }\r\n                    }\r\n                    \r\n                    // Sync all deletions\r\n                    try {\r\n                        await context.sync();\r\n                        console.log(`Successfully deleted ${sheetsToDelete.length} sheet(s).`);\r\n                    } catch (syncError) {\r\n                        console.error(`Error syncing sheet deletions: ${syncError.message}`, {\r\n                            code: syncError.code,\r\n                            debugInfo: syncError.debugInfo ? JSON.stringify(syncError.debugInfo) : 'N/A'\r\n                        });\r\n                        // Continue even if sync fails\r\n                    }\r\n                } else {\r\n                    console.log(\"No sheets found starting with 'Codes' or 'Calcs' to delete.\");\r\n                }\r\n            } catch (deletionError) {\r\n                console.error(`Error during sheet deletion process: ${deletionError.message}`, {\r\n                    code: deletionError.code,\r\n                    debugInfo: deletionError.debugInfo ? JSON.stringify(deletionError.debugInfo) : 'N/A'\r\n                });\r\n                // Do not throw here, allow the function to finish\r\n            }\r\n\r\n            // --- Reorder tabs according to the model plan ---\r\n            console.log(\"Reordering tabs according to model plan...\");\r\n            try {\r\n                // Define the desired tab order\r\n                // First is always Financials, followed by assumption tabs in their creation order,\r\n                // then any other existing sheets (like Misc., Actuals Data, etc.)\r\n                const priorityOrder = [\"Financials\", ...assumptionTabNames];\r\n                \r\n                // Get all worksheets one more time to ensure we have the latest list after deletions\r\n                const finalWorksheets = context.workbook.worksheets;\r\n                finalWorksheets.load(\"items/name\");\r\n                await context.sync();\r\n                \r\n                // Create a list of all sheet names\r\n                const allSheetNames = finalWorksheets.items.map(ws => ws.name);\r\n                \r\n                // Separate sheets into priority order and others\r\n                const orderedSheets = [];\r\n                const otherSheets = [];\r\n                \r\n                // Add sheets in priority order first\r\n                for (const priorityName of priorityOrder) {\r\n                    if (allSheetNames.includes(priorityName)) {\r\n                        orderedSheets.push(priorityName);\r\n                    }\r\n                }\r\n                \r\n                // Add remaining sheets that aren't in priority order\r\n                for (const sheetName of allSheetNames) {\r\n                    if (!orderedSheets.includes(sheetName)) {\r\n                        otherSheets.push(sheetName);\r\n                    }\r\n                }\r\n                \r\n                // Combine the lists\r\n                const finalOrder = [...orderedSheets, ...otherSheets];\r\n                console.log(`Final tab order: ${finalOrder.join(', ')}`);\r\n                \r\n                // Reorder sheets by setting their positions\r\n                for (let i = 0; i < finalOrder.length; i++) {\r\n                    try {\r\n                        const worksheet = context.workbook.worksheets.getItem(finalOrder[i]);\r\n                        worksheet.position = i;\r\n                        console.log(`  Set ${finalOrder[i]} to position ${i}`);\r\n                    } catch (positionError) {\r\n                        console.error(`  Error setting position for sheet ${finalOrder[i]}: ${positionError.message}`);\r\n                        // Continue with other sheets even if one fails\r\n                    }\r\n                }\r\n                \r\n                // Sync all position changes\r\n                try {\r\n                    await context.sync();\r\n                    console.log(\"Successfully reordered all tabs.\");\r\n                } catch (syncError) {\r\n                    console.error(`Error syncing tab reordering: ${syncError.message}`, {\r\n                        code: syncError.code,\r\n                        debugInfo: syncError.debugInfo ? JSON.stringify(syncError.debugInfo) : 'N/A'\r\n                    });\r\n                    // Continue even if sync fails\r\n                }\r\n                \r\n            } catch (reorderError) {\r\n                console.error(`Error during tab reordering process: ${reorderError.message}`, {\r\n                    code: reorderError.code,\r\n                    debugInfo: reorderError.debugInfo ? JSON.stringify(reorderError.debugInfo) : 'N/A'\r\n                });\r\n                // Do not throw here, allow the function to finish\r\n            }\r\n\r\n            // --- Navigate to Financials sheet and select cell J10 with view reset ---\r\n            // (This ensures Financials is the final active sheet with proper view)\r\n            try {\r\n                console.log(\"Navigating to Financials sheet and selecting J10 with view reset...\");\r\n                const financialsSheet = context.workbook.worksheets.getItem(\"Financials\");\r\n                \r\n                // Activate the Financials sheet\r\n                financialsSheet.activate();\r\n                \r\n                // Get J10 range\r\n                const rangeJ10 = financialsSheet.getRange(\"J10\");\r\n                \r\n                // Select J10\r\n                rangeJ10.select();\r\n                \r\n                // Reset the view to top of sheet (like CTRL+Home)\r\n                try {\r\n                    // First, select A1 to scroll to top-left\r\n                    const rangeA1 = financialsSheet.getRange(\"A1\");\r\n                    rangeA1.select();\r\n                    \r\n                    // Sync to ensure the scroll happens\r\n                    await context.sync();\r\n                    \r\n                    // Now select J10 as the final selection\r\n                    rangeJ10.select();\r\n                    \r\n                    // Optional: Reset zoom to 100%\r\n                    try {\r\n                        const activeWindow = context.workbook.getActiveCell().getWorksheet().getActiveView();\r\n                        if (activeWindow) {\r\n                            activeWindow.zoomLevel = 100;\r\n                        }\r\n                    } catch (zoomError) {\r\n                        console.log(\"Could not reset zoom level (requires Excel API 1.7+):\", zoomError.message);\r\n                    }\r\n                } catch (viewError) {\r\n                    console.log(\"Could not fully reset view:\", viewError.message);\r\n                    // Continue anyway - selecting J10 is the most important part\r\n                }\r\n                \r\n                await context.sync(); // Sync the final state\r\n                console.log(\"Successfully navigated to Financials!J10 and reset view to top.\");\r\n            } catch (navError) {\r\n                console.error(`Error navigating to Financials sheet J10: ${navError.message}`, {\r\n                    code: navError.code,\r\n                    debugInfo: navError.debugInfo ? JSON.stringify(navError.debugInfo) : 'N/A'\r\n                });\r\n                // Do not throw here, allow the function to finish\r\n            }\r\n\r\n            console.log(\"Finished hideColumnsAndNavigate function.\");\r\n\r\n        }); // End Excel.run\r\n    } catch (error) {\r\n        // Catch errors from the Excel.run call itself\r\n        console.error(\"Critical error in hideColumnsAndNavigate:\", error);\r\n        throw error; // Re-throw critical errors\r\n    }\r\n}\r\n\r\n/**\r\n * Hides specific rows and columns on all worksheets except for specified exclusions.\r\n * Hides rows 1-8, columns C-I (3-9), and columns S-AC (19-29).\r\n * @param {string[]} excludedSheetNames - An array of sheet names to exclude from hiding.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function hideRowsAndColumnsOnSheets(excludedSheetNames = [\"Actuals Data\", \"Actuals Categorization\"]) {\r\n    try {\r\n        console.log(`Hiding rows/columns on sheets, excluding: ${excludedSheetNames.join(', ')}`);\r\n\r\n        await Excel.run(async (context) => {\r\n            const worksheets = context.workbook.worksheets;\r\n            worksheets.load(\"items/name\");\r\n            await context.sync();\r\n\r\n            for (const worksheet of worksheets.items) {\r\n                const sheetName = worksheet.name;\r\n                if (excludedSheetNames.includes(sheetName)) {\r\n                    console.log(`Skipping sheet: ${sheetName} (excluded)`);\r\n                    continue;\r\n                }\r\n\r\n                console.log(`Processing sheet: ${sheetName}`);\r\n\r\n                try {\r\n                    // Hide Rows 1-8\r\n                    const rowRange = worksheet.getRange(\"1:8\");\r\n                    rowRange.rowHidden = true;\r\n                    console.log(`  Hiding rows 1-8`);\r\n\r\n                    // Hide Columns C-E (Changed from C:I)\r\n                    const colRange1 = worksheet.getRange(\"C:E\"); // Changed range\r\n                    colRange1.columnHidden = true;\r\n                    console.log(`  Hiding columns C-E`); // Update log message\r\n\r\n                    // Hide Columns S-AC\r\n                    const colRange2 = worksheet.getRange(\"S:AC\");\r\n                    colRange2.columnHidden = true;\r\n                    console.log(`  Hiding columns S-AC`);\r\n\r\n                    // It's often more efficient to batch sync operations,\r\n                    // but sometimes hiding needs immediate effect or separate syncs.\r\n                    // Let's sync after hiding for this sheet.\r\n                    await context.sync();\r\n                    console.log(`  Finished hiding for ${sheetName}`);\r\n\r\n                } catch (hideError) {\r\n                    console.error(`  Error hiding rows/columns on sheet ${sheetName}: ${hideError.message}`, {\r\n                        code: hideError.code,\r\n                        debugInfo: hideError.debugInfo ? JSON.stringify(hideError.debugInfo) : 'N/A'\r\n                    });\r\n                    // Continue to the next sheet even if one fails\r\n                }\r\n            }\r\n\r\n            console.log(\"Finished processing all sheets for hiding rows/columns.\");\r\n        }); // End Excel.run\r\n\r\n    } catch (error) {\r\n        console.error(\"Critical error in hideRowsAndColumnsOnSheets:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// TODO: Implement the actual logic within the JS helper functions (adjustDriversJS, replaceIndirectsJS, etc.).\r\n// TODO: Implement findRowByValue helper function if Retained Earnings logic is needed.\r\n// TODO: Update the calling code (e.g., button handler in taskpane.js) to call `processAssumptionTabs` after `runCodes`.\r\n\r\n/**\r\n * Inserts worksheets from a base64-encoded Excel file into the current workbook\r\n * @param {string} base64String - Base64-encoded string of the source Excel file\r\n * @param {string[]} [sheetNames] - Optional array of sheet names to insert. If not provided, all sheets will be inserted.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function handleInsertWorksheetsFromBase64(base64String, sheetNames = null) {\r\n    try {\r\n        // Validate base64 string\r\n        if (!base64String || typeof base64String !== 'string') {\r\n            throw new Error(\"Invalid base64 string provided\");\r\n        }\r\n\r\n        // Validate base64 format\r\n        if (!/^[A-Za-z0-9+/]*={0,2}$/.test(base64String)) {\r\n            throw new Error(\"Invalid base64 format\");\r\n        }\r\n\r\n        await Excel.run(async (context) => {\r\n            const workbook = context.workbook;\r\n            \r\n            // Check if we have the required API version\r\n            if (!workbook.insertWorksheetsFromBase64) {\r\n                throw new Error(\"This feature requires Excel API requirement set 1.13 or later\");\r\n            }\r\n            \r\n            // Insert the worksheets with error handling\r\n            try {\r\n                await workbook.insertWorksheetsFromBase64(base64String, {\r\n                    sheetNames: sheetNames\r\n                });\r\n                \r\n                await context.sync();\r\n                console.log(\"Worksheets inserted successfully\");\r\n            } catch (error) {\r\n                console.error(\"Error during worksheet insertion:\", error);\r\n                throw new Error(`Failed to insert worksheets: ${error.message}`);\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error inserting worksheets from base64:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Applies the Index Growth Curve logic to a worksheet, mimicking VBA Function IndexGrowthCurve.\r\n * Finds INDEXBEGIN/INDEXEND, inserts rows, populates data and formulas, applies formatting.\r\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\r\n * @param {number} initialLastRow - The last row determined before this function runs.\r\n */\r\nasync function applyIndexGrowthCurveJS(worksheet, initialLastRow) {\r\n    console.log(`Running applyIndexGrowthCurveJS for sheet: ${worksheet.name}`);\r\n    const START_ROW = 10; // Row to start searching for INDEXBEGIN\r\n    const BEGIN_MARKER = \"INDEXBEGIN\";\r\n    const END_MARKER = \"INDEXEND\";\r\n    const DATA_COL = \"C\";\r\n    const SEARCH_COL = \"D\";\r\n    const OUTPUT_COL_B = \"B\";\r\n    const OUTPUT_COL_C = \"C\";\r\n    const OUTPUT_COL_D = \"D\";\r\n    const CHECK_COL_B = \"B\"; // Column B for green check\r\n    const VALUE_COL_A = \"A\"; // Column A for BS/AV check\r\n    const DRIVER_REF_COL = \"AE\"; // Column containing driver range ref in END_MARKER row\r\n    const SUMIF_START_COL = \"K\"; // K\r\n    const SUMIF_END_COL = \"P\"; // P\r\n    const SUMPRODUCT_COL = \"AE\"; // AE (VBA used AE, not S)\r\n    const MONTHS_START_COL = \"AE\"; // AE\r\n    const MONTHS_END_COL = \"CX\"; // CX\r\n    const LIGHT_BLUE_COLOR = \"#D9E1F2\"; // RGB(217, 225, 242)\r\n    const LIGHT_GREEN_COLOR = \"#CCFFCC\"; // RGB(204, 255, 204)\r\n \r\n    try {\r\n        // Re-get worksheet reference within this context to ensure freshness\r\n        const context = worksheet.context; // Get context from the passed object\r\n        const worksheetName = worksheet.name; // Get name from potentially stale object\r\n        const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\r\n        // We assume the context itself is valid for this entire Excel.run block\r\n \r\n        // --- 1. Find INDEXBEGIN and INDEXEND rows ---\r\n        console.log(`Searching for ${BEGIN_MARKER} and ${END_MARKER} in column ${SEARCH_COL} of ${worksheetName}`);\r\n        const searchRangeAddress = `${SEARCH_COL}${START_ROW}:${SEARCH_COL}${initialLastRow}`; \r\n        const searchRange = currentWorksheet.getRange(searchRangeAddress); // Use refreshed worksheet object\r\n        searchRange.load(\"values\");\r\n        await context.sync(); // Use the context variable\r\n \r\n        let firstRow = -1;\r\n        let lastRow = -1;\r\n        let indexEndRow = -1; // Keep track of the original END_MARKER row\r\n \r\n        if (searchRange.values) {\r\n            for (let i = 0; i < searchRange.values.length; i++) {\r\n                const currentRow = START_ROW + i;\r\n                const cellValue = searchRange.values[i][0];\r\n                if (cellValue === BEGIN_MARKER && firstRow === -1) {\r\n                    firstRow = currentRow;\r\n                }\r\n                if (cellValue === END_MARKER) {\r\n                    lastRow = currentRow; // This will be the last END_MARKER found\r\n                    indexEndRow = currentRow; // Store the original row index\r\n                }\r\n            }\r\n        }\r\n \r\n        if (firstRow === -1 || lastRow === -1 || lastRow < firstRow) {\r\n            console.log(`Markers ${BEGIN_MARKER}/${END_MARKER} not found or in wrong order in ${searchRangeAddress}. Skipping Index Growth Curve.`);\r\n            return; // Exit if markers not found or invalid\r\n        }\r\n        console.log(`Found ${BEGIN_MARKER} at row ${firstRow}, ${END_MARKER} at row ${lastRow}`);\r\n \r\n        // --- 2. Collect Index Rows (Rows between markers where Col C is not empty) ---\r\n        const indexRows = [];\r\n        // CHANGE DATA_COL here if needed, e.g. const DATA_COL_TO_CHECK = \"B\";\r\n        const DATA_COL_TO_CHECK = \"B\"; // Or \"A\", etc.\r\n        const dataColRangeAddress = `${DATA_COL_TO_CHECK}${firstRow}:${DATA_COL_TO_CHECK}${lastRow}`;\r\n        const dataColRange = currentWorksheet.getRange(dataColRangeAddress);\r\n        // ... rest of the loading and checking logic ...\r\n \r\n        if (indexRows.length === 0) {\r\n            console.log(`No data rows found between ${BEGIN_MARKER} and ${END_MARKER} in column ${DATA_COL}. Skipping rest of Index Growth Curve.`);\r\n            return; // Exit if no data rows found\r\n        }\r\n        console.log(`Collected ${indexRows.length} index rows:`, indexRows);\r\n \r\n        // --- 3. Set Background Color for non-green rows ---\r\n        // Range: B(firstRow+2) to CX(lastRow-2) in VBA, but logic only checks B color. Let's adjust row color based on B.\r\n        const formatCheckStartRow = firstRow + 2;\r\n        const formatCheckEndRow = lastRow - 2;\r\n        console.log(`Setting background color for non-green rows between ${formatCheckStartRow} and ${formatCheckEndRow}`);\r\n        if (formatCheckStartRow <= formatCheckEndRow) {\r\n             // Load colors first\r\n             const checkColorRange = currentWorksheet.getRange(`${CHECK_COL_B}${formatCheckStartRow}:${CHECK_COL_B}${formatCheckEndRow}`);\r\n             checkColorRange.load(\"format/fill/color\");\r\n             await context.sync();\r\n \r\n              // Queue formatting changes\r\n              for (let i = 0; i < checkColorRange.values.length; i++) { // checkColorRange.values isn't loaded, use index\r\n                 const currentRow = formatCheckStartRow + i;\r\n                  // Use loaded format object\r\n                 if (checkColorRange.format.fill.color !== LIGHT_GREEN_COLOR) {\r\n                     console.log(`  Setting row ${currentRow} background to ${LIGHT_BLUE_COLOR}`);\r\n                     const rowRange = currentWorksheet.getRange(`${currentRow}:${currentRow}`);\r\n                     rowRange.format.fill.color = LIGHT_BLUE_COLOR;\r\n                     // Clear fill in column A specifically\r\n                     const cellARange = currentWorksheet.getRange(`A${currentRow}`);\r\n                     cellARange.format.fill.clear();\r\n                 }\r\n              }\r\n         }\r\n \r\n         // --- 4. Insert Rows ---\r\n         const newRowStart = lastRow + 2;\r\n         const numNewRows = indexRows.length;\r\n         const newRowEnd = newRowStart + numNewRows - 1;\r\n         console.log(`Inserting ${numNewRows} rows at range ${newRowStart}:${newRowEnd}`);\r\n         const insertRange = currentWorksheet.getRange(`${newRowStart}:${newRowEnd}`);\r\n         insertRange.insert(Excel.InsertShiftDirection.down);\r\n         // Sync required before populating new rows\r\n         await context.sync();\r\n \r\n         // --- 5. Populate New Rows (B, C, D) ---\r\n         console.log(`Populating columns ${OUTPUT_COL_B}, ${OUTPUT_COL_C}, ${OUTPUT_COL_D} in new rows ${newRowStart}:${newRowEnd}`);\r\n         // Load source data from original index rows\r\n         const sourceDataAddresses = indexRows.map(r => `${OUTPUT_COL_B}${r}:${OUTPUT_COL_C}${r}`);\r\n         // Cannot load disjoint ranges easily this way. Load columns B and C for the whole original block.\r\n         const sourceBlockRange = currentWorksheet.getRange(`${OUTPUT_COL_B}${firstRow}:${OUTPUT_COL_C}${lastRow}`);\r\n         sourceBlockRange.load(\"values\");\r\n         await context.sync();\r\n \r\n         const outputDataBC = [];\r\n         const outputDataD = [];\r\n         const sourceValues = sourceBlockRange.values;\r\n         for (const originalRow of indexRows) {\r\n             const rowIndexInBlock = originalRow - firstRow; // 0-based index within the loaded block\r\n             const valB = sourceValues[rowIndexInBlock][0]; // Col B is index 0\r\n             const valC = sourceValues[rowIndexInBlock][1]; // Col C is index 1\r\n             outputDataBC.push([valB, valC]);\r\n             outputDataD.push([END_MARKER]);\r\n         }\r\n \r\n         const outputRangeBC = currentWorksheet.getRange(`${OUTPUT_COL_B}${newRowStart}:${OUTPUT_COL_C}${newRowEnd}`);\r\n         outputRangeBC.values = outputDataBC;\r\n         const outputRangeD = currentWorksheet.getRange(`${OUTPUT_COL_D}${newRowStart}:${OUTPUT_COL_D}${newRowEnd}`);\r\n         outputRangeD.values = outputDataD;\r\n \r\n         // --- 6. Apply SUMIF Formulas (K-P) ---\r\n         console.log(`Applying SUMIF formulas to ${SUMIF_START_COL}${newRowStart}:${SUMIF_END_COL}${newRowEnd}`);\r\n         // Load necessary data: Col C and Col A values from original index rows\r\n         const sourceColCRange = currentWorksheet.getRange(`${DATA_COL}${firstRow}:${DATA_COL}${lastRow}`);\r\n         const sourceColARange = currentWorksheet.getRange(`${VALUE_COL_A}${firstRow}:${VALUE_COL_A}${lastRow}`);\r\n         sourceColCRange.load(\"values\");\r\n         sourceColARange.load(\"values\");\r\n         await context.sync();\r\n \r\n         const sourceValuesC = sourceColCRange.values;\r\n         const sourceValuesA = sourceColARange.values;\r\n         const numSumifCols = columnLetterToIndex(SUMIF_END_COL) - columnLetterToIndex(SUMIF_START_COL) + 1;\r\n         const sumifFormulas = [];\r\n \r\n         for (let i = 0; i < indexRows.length; i++) {\r\n             const originalRow = indexRows[i];\r\n             const rowIndexInBlock = originalRow - firstRow; // 0-based index within the loaded block\r\n             const codeC = sourceValuesC[rowIndexInBlock][0] || \"\"; // Ensure string\r\n             const valueA = sourceValuesA[rowIndexInBlock][0];\r\n             const targetRowNum = newRowStart + i; // Row where formula will be placed\r\n \r\n             let baseFormula;\r\n             // Check if Col C starts with \"BS\" or Col A is \"AV\"\r\n             if (codeC.toUpperCase().startsWith(\"BS\") || String(valueA).toUpperCase() === \"AV\") {\r\n                 // \"=SUMIF($3:$3,@ INDIRECT(ADDRESS(ROW($A$2),COLUMN(),2)), INDIRECT(ROW() & \"\":\"\" & ROW()))\"\r\n                  baseFormula = `=SUMIF($3:$3, INDIRECT(ADDRESS(2,COLUMN())), ${targetRowNum}:${targetRowNum})`;\r\n             } else {\r\n                 // \"=SUMIF($4:$4,@ INDIRECT(ADDRESS(ROW($A$2),COLUMN(),2)), INDIRECT(ROW() & \"\":\"\" & ROW()))\"\r\n                  baseFormula = `=SUMIF($4:$4, INDIRECT(ADDRESS(2,COLUMN())), ${targetRowNum}:${targetRowNum})`;\r\n             }\r\n             // Create array for the row\r\n             sumifFormulas.push(Array(numSumifCols).fill(baseFormula));\r\n         }\r\n \r\n         const sumifRange = currentWorksheet.getRange(`${SUMIF_START_COL}${newRowStart}:${SUMIF_END_COL}${newRowEnd}`);\r\n         sumifRange.formulas = sumifFormulas;\r\n \r\n         // --- 7. Apply SUMPRODUCT Formulas (AE) ---\r\n         console.log(`Applying SUMPRODUCT formulas to ${SUMPRODUCT_COL}${newRowStart}:${SUMPRODUCT_COL}${newRowEnd}`);\r\n         // Get the driver range string from the original END_MARKER row, column AE\r\n         const driverCell = currentWorksheet.getRange(`${DRIVER_REF_COL}${indexEndRow}`);\r\n         driverCell.load(\"values\");\r\n         await context.sync();\r\n         const driverRangeString = driverCell.values[0][0];\r\n \r\n         if (!driverRangeString || typeof driverRangeString !== 'string') {\r\n             console.warn(`Driver range string not found or invalid in cell ${DRIVER_REF_COL}${indexEndRow}. Skipping SUMPRODUCT.`);\r\n         } else {\r\n              console.log(`Using driver range: ${driverRangeString}`);\r\n              // Iterate and set formula for each cell individually (mimics FormulaArray)\r\n              for (let i = 0; i < indexRows.length; i++) {\r\n                  const originalRow = indexRows[i];\r\n                  const targetRow = newRowStart + i;\r\n                  const dataRangeString = `$${MONTHS_START_COL}$${originalRow}:$${MONTHS_END_COL}$${originalRow}`;\r\n                  // Formula: =SUMPRODUCT(INDEX(driverRange, N(IF({1}, MAX(COLUMN(driverRange)) - COLUMN(driverRange) + 1))), dataRange)\r\n                  const sumproductFormula = `=SUMPRODUCT(INDEX(${driverRangeString},N(IF({1},MAX(COLUMN(${driverRangeString}))-COLUMN(${driverRangeString})+1))), ${dataRangeString})`;\r\n \r\n                  const targetCell = currentWorksheet.getRange(`${SUMPRODUCT_COL}${targetRow}`);\r\n                  targetCell.formulas = [[sumproductFormula]];\r\n                  // console.log(`  Set formula for ${SUMPRODUCT_COL}${targetRow}: ${sumproductFormula}`);\r\n             }\r\n         }\r\n \r\n         // --- 8. Copy Formats and Adjust ---\r\n         console.log(`Copying formats and adjusting for new rows ${newRowStart}:${newRowEnd}`);\r\n         for (let i = 0; i < indexRows.length; i++) {\r\n             const sourceRow = indexRows[i];\r\n             const targetRow = newRowStart + i;\r\n \r\n             const sourceRowRange = currentWorksheet.getRange(`${sourceRow}:${sourceRow}`);\r\n             const targetRowRange = currentWorksheet.getRange(`${targetRow}:${targetRow}`);\r\n \r\n             // Copy formats first\r\n             targetRowRange.copyFrom(sourceRowRange, Excel.RangeCopyType.formats);\r\n              await context.sync(); // Sync after each copy maybe needed? Let's try one sync after loop.\r\n \r\n             // Apply format overrides\r\n             targetRowRange.format.font.color = \"#000000\"; // Black font\r\n             targetRowRange.format.borders.load('items'); // Load borders collection\r\n              await context.sync(); // Need to sync load before clearing\r\n \r\n              targetRowRange.format.borders.items.forEach(border => border.style = 'None');\r\n             // Explicitly clear all borders (simpler?)\r\n             // targetRowRange.format.borders.getItem('EdgeTop').style = 'None';\r\n             // targetRowRange.format.borders.getItem('EdgeBottom').style = 'None';\r\n             // targetRowRange.format.borders.getItem('EdgeLeft').style = 'None';\r\n             // targetRowRange.format.borders.getItem('EdgeRight').style = 'None';\r\n             // targetRowRange.format.borders.getItem('InsideVertical').style = 'None';\r\n             // targetRowRange.format.borders.getItem('InsideHorizontal').style = 'None';\r\n \r\n             targetRowRange.format.fill.clear(); // Clear interior color\r\n             targetRowRange.format.font.bold = false; // Remove bold\r\n \r\n             // Set indent level for column B\r\n             const targetCellB = currentWorksheet.getRange(`${OUTPUT_COL_B}${targetRow}`);\r\n             targetCellB.format.indentLevel = 2;\r\n         }\r\n          await context.sync(); // Sync format changes\r\n \r\n         // --- 9. Clear Original Column C values ---\r\n         console.log(`Clearing values in original index rows (${indexRows.join(', ')}) column ${DATA_COL}`);\r\n         // It's safer to clear individually if rows aren't contiguous\r\n         for (const originalRow of indexRows) {\r\n             const cellToClear = currentWorksheet.getRange(`${DATA_COL}${originalRow}`);\r\n             cellToClear.clear(Excel.ClearApplyTo.contents);\r\n         }\r\n          await context.sync(); // Sync clears\r\n \r\n         console.log(`applyIndexGrowthCurveJS completed successfully for sheet: ${worksheetName}`);\r\n \r\n     } catch (error) {\r\n         console.error(`Error in applyIndexGrowthCurveJS for sheet ${worksheet.name}:`, error);\r\n         // Decide if error should be re-thrown\r\n         // throw error; // Optional: re-throw to stop processAssumptionTabs if critical\r\n     }\r\n     // Note: This function runs within the context of the calling Excel.run in processAssumptionTabs.\r\n     // Syncs are added within the function for critical steps like after insertion.\r\n }","// Helper function to build the pipe-delimited string for a row\r\nfunction buildRowArrayString(valuesRow, formulasRow) {\r\n    // ... (Helper function remains the same)\r\n    // Indices: A=0, B=1, C=2, G=6, H=7, I=8, K=10, L=11, M=12, N=13, O=14, P=15, R=17\r\n    const cols = [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17];\r\n    const formulaCols = [10, 11, 12, 13, 14, 15, 17]; // Columns to check for formulas\r\n    let parts = [];\r\n\r\n    if (!valuesRow) return \"\"; // Handle case where row might be completely empty\r\n\r\n    for (const colIndex of cols) {\r\n        // Ensure the row has enough columns\r\n        let value = (valuesRow.length > colIndex && valuesRow[colIndex] !== null && valuesRow[colIndex] !== undefined) ? valuesRow[colIndex] : \"\";\r\n        let formula = (formulasRow && formulasRow.length > colIndex) ? formulasRow[colIndex] : null;\r\n\r\n        if (formulaCols.includes(colIndex)) {\r\n            // Check formula first\r\n            if (typeof formula === 'string' && formula.startsWith('=')) {\r\n                value = \"F\";\r\n            }\r\n        }\r\n        const valueString = String(value).replace(/\"/g, '\"\"');\r\n        parts.push(valueString);\r\n    }\r\n    return parts.join(\"|\");\r\n}\r\n\r\n// Helper function to process a standard code block based on Column D\r\nfunction processCodeBlock(values, formulas, startDataRowIndex, endDataRowIndex, codeName, rangeStartRowExcel) {\r\n    // console.log(`Processing block: ${codeName} from Excel row ${startDataRowIndex + rangeStartRowExcel} to ${endDataRowIndex + rangeStartRowExcel}`);\r\n    let blockString = `<${codeName};`;\r\n    let rowCount = 1;\r\n    // The indices i here are 0-based relative to the START of the loaded data range\r\n    for (let i = startDataRowIndex; i <= endDataRowIndex; i++) {\r\n        if (values && i < values.length && formulas && i < formulas.length) {\r\n            const rowArrayString = buildRowArrayString(values[i], formulas[i]);\r\n            blockString += `row${rowCount}=\"${rowArrayString}\";`;\r\n            rowCount++;\r\n        } else {\r\n             // console.warn(`Skipping data row index ${i} in block ${codeName} due to missing data.`);\r\n        }\r\n    }\r\n    blockString += \">\";\r\n    // console.log(`Generated block string for ${codeName}: ${blockString.substring(0,100)}...`);\r\n    return blockString;\r\n}\r\n\r\nexport async function generateTabString() {\r\n    try {\r\n        await Excel.run(async (context) => {\r\n            console.log(\"Starting generateTabString (dynamic range)...\");\r\n            const sheets = context.workbook.worksheets;\r\n            sheets.load(\"items/name\");\r\n            await context.sync();\r\n            console.log(`Found ${sheets.items.length} sheets.`);\r\n\r\n            let finalResultString = \"\";\r\n\r\n            for (const sheet of sheets.items) {\r\n                console.log(`Processing sheet: ${sheet.name}`);\r\n                let sheetCodeBlocks = \"\";\r\n                let lastUsedRowInB = 0;\r\n\r\n                try {\r\n                    // --- Find the last used row in Column B ---\r\n                    // Get the bottom-most cell in column B (using a large row number)\r\n                    const bottomCellInB = sheet.getRange(\"B1048576\");\r\n                    // Find the last used cell *up* from the absolute bottom\r\n                    const lastUsedCellInB = bottomCellInB.getRangeEdge(Excel.KeyboardDirection.up);\r\n                    lastUsedCellInB.load(\"rowIndex\");\r\n                    await context.sync();\r\n\r\n                    // Add 1 because rowIndex is 0-based\r\n                    lastUsedRowInB = lastUsedCellInB.rowIndex + 1;\r\n                    console.log(`Sheet ${sheet.name}: Last used row in Col B found at: ${lastUsedRowInB}`);\r\n\r\n                    // --- Validate last row and define dynamic range ---\r\n                    if (lastUsedRowInB < 9) {\r\n                        console.log(`Sheet ${sheet.name}: Last used row (${lastUsedRowInB}) is before row 9. Skipping code generation.`);\r\n                        finalResultString += `<TAB; label1=\"${sheet.name}\";>\\n\\n`; // Add TAB tag even if no codes\r\n                        continue; // Skip to the next sheet\r\n                    }\r\n\r\n                    const dynamicRangeAddress = `A9:R${lastUsedRowInB}`;\r\n                    console.log(`Sheet ${sheet.name}: Loading dynamic range: ${dynamicRangeAddress}`);\r\n\r\n                    // --- Load data from the dynamic range --- Load data from the dynamic range ---\r\n                    const range = sheet.getRange(dynamicRangeAddress);\r\n                    range.load([\"values\", \"formulas\", \"rowCount\", \"rowIndex\"]);\r\n                    await context.sync();\r\n\r\n                    const values = range.values;\r\n                    const formulas = range.formulas;\r\n                    const loadedRowCount = range.rowCount;\r\n                    const rangeStartRowExcel = range.rowIndex + 1; // Should be 9\r\n\r\n                    if (rangeStartRowExcel !== 9) {\r\n                         console.warn(`Sheet ${sheet.name}: Loaded range started at ${rangeStartRowExcel} instead of 9.`);\r\n                    }\r\n                    if (!values || loadedRowCount === 0) {\r\n                        console.log(`Sheet ${sheet.name}: No values loaded from range ${dynamicRangeAddress}. Skipping code generation.`);\r\n                        finalResultString += `<TAB; label1=\"${sheet.name}\";>\\n\\n`;\r\n                        continue; // Skip to the next sheet\r\n                    }\r\n\r\n                    // --- Process the loaded data --- Process the loaded data ---\r\n                    // Check if Column D (index 3 in the loaded array) has significant data\r\n                    let hasDataInD = false;\r\n                    for (let r = 0; r < loadedRowCount; r++) {\r\n                         if (values[r] && values[r].length > 3 && values[r][3] && String(values[r][3]).trim() !== \"\") {\r\n                            hasDataInD = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    console.log(`Sheet ${sheet.name}: Has significant data in Column D (in loaded range)? ${hasDataInD}`);\r\n\r\n                    if (!hasDataInD) {\r\n                        // --- Generate MANUAL-ER Block ---\r\n                        console.log(`Sheet ${sheet.name}: Generating MANUAL-ER block.`);\r\n                        sheetCodeBlocks += \"<MANUAL-ER;\";\r\n                        let manualRowCount = 1;\r\n                        for (let r = 0; r < loadedRowCount; r++) {\r\n                            if (values[r] && formulas[r]) { // Ensure row data exists\r\n                                const rowArrayString = buildRowArrayString(values[r], formulas[r]);\r\n                                sheetCodeBlocks += `row${manualRowCount}=\"${rowArrayString}\";`;\r\n                                manualRowCount++;\r\n                            }\r\n                        }\r\n                        sheetCodeBlocks += \">\";\r\n\r\n                    } else {\r\n                        // --- Generate Blocks Based on Column D ---\r\n                        console.log(`Sheet ${sheet.name}: Generating blocks based on Column D changes.`);\r\n                        let currentBlockStartDataRow = -1;\r\n                        let currentBlockCodeName = \"\";\r\n\r\n                        for (let r = 0; r < loadedRowCount; r++) {\r\n                            const dValue = (values[r] && values[r].length > 3 && values[r][3]) ? String(values[r][3]).trim() : \"\";\r\n\r\n                            if (dValue !== \"\") {\r\n                                if (currentBlockStartDataRow === -1) {\r\n                                    currentBlockStartDataRow = r;\r\n                                    currentBlockCodeName = dValue;\r\n                                } else if (dValue !== currentBlockCodeName) {\r\n                                    // Add newline before appending if sheetCodeBlocks isn't empty\r\n                                    if (sheetCodeBlocks) sheetCodeBlocks += \"\\n\";\r\n                                    sheetCodeBlocks += processCodeBlock(values, formulas, currentBlockStartDataRow, r - 1, currentBlockCodeName, rangeStartRowExcel);\r\n                                    currentBlockStartDataRow = r;\r\n                                    currentBlockCodeName = dValue;\r\n                                }\r\n                            } else { // Empty D value\r\n                                if (currentBlockStartDataRow !== -1) {\r\n                                    // Add newline before appending if sheetCodeBlocks isn't empty\r\n                                    if (sheetCodeBlocks) sheetCodeBlocks += \"\\n\";\r\n                                    sheetCodeBlocks += processCodeBlock(values, formulas, currentBlockStartDataRow, r - 1, currentBlockCodeName, rangeStartRowExcel);\r\n                                    currentBlockStartDataRow = -1;\r\n                                    currentBlockCodeName = \"\";\r\n                                }\r\n                            }\r\n\r\n                            // Handle the last block if the loop finishes while inside a block\r\n                            if (r === loadedRowCount - 1 && currentBlockStartDataRow !== -1) {\r\n                                // Add newline before appending if sheetCodeBlocks isn't empty\r\n                                if (sheetCodeBlocks) sheetCodeBlocks += \"\\n\";\r\n                                sheetCodeBlocks += processCodeBlock(values, formulas, currentBlockStartDataRow, r, currentBlockCodeName, rangeStartRowExcel);\r\n                            }\r\n                        } // end for loop r\r\n                    } // end else (hasDataInD)\r\n\r\n                } catch (sheetError) {\r\n                     console.error(`Error processing sheet ${sheet.name}: ${sheetError}`);\r\n                     if (sheetError instanceof OfficeExtension.Error) {\r\n                         console.error(\"Debug info: \" + JSON.stringify(sheetError.debugInfo));\r\n                     }\r\n                     sheetCodeBlocks = \"<!-- Error processing sheet data -->\";\r\n                }\r\n\r\n                // Append the result for this sheet\r\n                // Add a newline between TAB and blocks only if blocks exist\r\n                let tabLine = `<TAB; label1=\"${sheet.name}\";>`;\r\n                if (sheetCodeBlocks) {\r\n                    tabLine += \"\\n\" + sheetCodeBlocks; // Add newline before the blocks\r\n                }\r\n                finalResultString += tabLine + \"\\n\\n\"; // Add double newline after each sheet entry\r\n            } // end loop sheets\r\n\r\n            console.log(\"--- FINAL GENERATED STRING ---\");\r\n            console.log(finalResultString);\r\n            console.log(\"--- END FINAL GENERATED STRING ---\");\r\n\r\n        }); // end Excel.run\r\n    } catch (error) {\r\n        console.error(\"Error in generateTabString top level: \" + error);\r\n        if (error instanceof OfficeExtension.Error) {\r\n            console.error(\"Debug info: \" + JSON.stringify(error.debugInfo));\r\n        }\r\n    }\r\n}\r\n","// AIModelPlanner.js\r\n\r\n// Assuming API keys are managed and accessible similarly to AIcalls.js\r\n// Or that callOpenAI is available globally/imported if AIcalls.js exports it.\r\n// For now, let's assume a local way to call OpenAI or that it's handled by the main taskpane script.\r\n\r\n// Imports needed for _executePlannerCodes\r\nimport { validateCodeStringsForRun } from './Validation.js';\r\nimport { \r\n    populateCodeCollection, \r\n    runCodes, \r\n    processAssumptionTabs, \r\n    hideColumnsAndNavigate, \r\n    handleInsertWorksheetsFromBase64 \r\n} from './CodeCollection.js';\r\nimport { getAICallsProcessedResponse } from './AIcalls.js';\r\n// We don't import from taskpane.js to avoid cycles\r\n\r\nlet modelPlannerConversationHistory = [];\r\nlet AI_MODEL_PLANNER_OPENAI_API_KEY = \"\";\r\nlet lastPlannerResponseForClient = null; // To store the last response for client mode buttons\r\n\r\nconst DEBUG_PLANNER = true; // For planner-specific debugging\r\n\r\nimport { processModelCodesForPlanner } from './taskpane.js'; // <<< UPDATED IMPORT\r\n\r\n// Helper function to get API keys (placeholder, adapt as needed based on your structure)\r\n// This might need to be coordinated with how API keys are managed in your main taskpane.js\r\n// For now, we'll assume AIcalls.js might make setAPIKeys and INTERNAL_API_KEYS available or similar.\r\n// As per the prompt, we are not changing AIcalls.js, so we'll define what's needed here.\r\n\r\nexport function setAIModelPlannerOpenApiKey(key) {\r\n    if (key) {\r\n        AI_MODEL_PLANNER_OPENAI_API_KEY = key;\r\n        if (DEBUG_PLANNER) console.log(\"AIModelPlanner.js: OpenAI API key set.\");\r\n    } else {\r\n        if (DEBUG_PLANNER) console.warn(\"AIModelPlanner.js: Attempted to set an empty OpenAI API key.\");\r\n    }\r\n}\r\n\r\n\r\n// Updated to use the more robust fetching approach\r\nasync function getAIModelPlanningSystemPrompt() {\r\n  const promptKey = \"AIModelPlanning_System\"; // Key for this specific prompt file\r\n  const paths = [\r\n    // Try path relative to root if /src/ is not working, assuming 'prompts' is then at root level of served dir\r\n    // THIS IS A GUESS - The original path `https://localhost:3002/src/prompts/...` should work if server is configured for it.\r\n    `https://localhost:3002/prompts/${promptKey}.txt`, \r\n    `https://localhost:3002/src/prompts/${promptKey}.txt` // Original path as a fallback\r\n  ];\r\n\r\n  if (DEBUG_PLANNER) console.log(`AIModelPlanner: Attempting to load prompt file: ${promptKey}.txt`);\r\n\r\n  let response = null;\r\n  for (const path of paths) {\r\n    if (DEBUG_PLANNER) console.log(`AIModelPlanner: Attempting to load prompt from: ${path}`);\r\n    try {\r\n      response = await fetch(path);\r\n      if (response.ok) {\r\n        if (DEBUG_PLANNER) console.log(`AIModelPlanner: Successfully loaded prompt from: ${path}`);\r\n        const text = await response.text();\r\n        return text;\r\n      } else {\r\n        if (DEBUG_PLANNER) console.warn(`AIModelPlanner: Failed to load from ${path} - Status: ${response.status} ${response.statusText}`);\r\n      }\r\n    } catch (err) {\r\n      if (DEBUG_PLANNER) console.error(`AIModelPlanner: Error fetching from ${path}: ${err.message}`);\r\n    }\r\n  }\r\n\r\n  // If all paths fail\r\n  console.error(`AIModelPlanner: Failed to load prompt ${promptKey}.txt from all attempted paths.`);\r\n  // Fallback prompt\r\n  return \"You are a helpful assistant for financial model planning. [Error: System prompt AIModelPlanning_System.txt could not be loaded]\"; \r\n}\r\n\r\n// Direct OpenAI API call function (simplified version, adapt if AIcalls.js exports its own)\r\nasync function* callOpenAIForModelPlanner(messages, options = {}) {\r\n  const { model = \"gpt-4.1\", temperature = 0.7, stream = false } = options;\r\n\r\n  if (!AI_MODEL_PLANNER_OPENAI_API_KEY) {\r\n    console.error(\"AIModelPlanner: OpenAI API key not set.\");\r\n    throw new Error(\"OpenAI API key not set for AIModelPlanner.\");\r\n  }\r\n\r\n  if (DEBUG_PLANNER) {\r\n    // Condensed logging\r\n    const systemMessageContent = messages.find(msg => msg.role === 'system')?.content?.substring(0, 100) + \"...\";\r\n    const lastUserMessageContent = messages.filter(msg => msg.role === 'user').pop()?.content?.substring(0, 100) + \"...\";\r\n    console.log(`AIModelPlanner API Call: Model: ${model}, Stream: ${stream}`);\r\n    console.log(\"AIModelPlanner API Call: System Prompt (start):\", systemMessageContent || \"N/A\");\r\n    console.log(\"AIModelPlanner API Call: Last User Prompt (start):\", lastUserMessageContent || \"N/A\");\r\n  }\r\n\r\n  try {\r\n    const body = {\r\n      model: model,\r\n      messages: messages,\r\n      temperature: temperature\r\n    };\r\n    if (stream) {\r\n      body.stream = true;\r\n    }\r\n\r\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${AI_MODEL_PLANNER_OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify(body)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({ message: \"Failed to parse error JSON.\" }));\r\n      console.error(\"AIModelPlanner - OpenAI API error response:\", errorData);\r\n      throw new Error(`OpenAI API error: ${response.status} ${response.statusText} - ${errorData.message || JSON.stringify(errorData)}`);\r\n    }\r\n\r\n    if (stream) {\r\n      console.log(\"AIModelPlanner - OpenAI API response received (stream)\");\r\n      const reader = response.body.getReader();\r\n      const decoder = new TextDecoder(\"utf-8\");\r\n\r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n        if (done) {\r\n          console.log(\"AIModelPlanner - Stream finished.\");\r\n          break;\r\n        }\r\n        const chunk = decoder.decode(value);\r\n        const lines = chunk.split(\"\\n\");\r\n        const parsedLines = lines\r\n          .map((line) => line.replace(/^data: /, \"\").trim())\r\n          .filter((line) => line !== \"\" && line !== \"[DONE]\")\r\n          .map((line) => {\r\n            try {\r\n              return JSON.parse(line);\r\n            } catch (e) {\r\n              console.warn(\"AIModelPlanner - Could not parse JSON line from stream:\", line, e);\r\n              return null;\r\n            }\r\n          })\r\n          .filter(line => line !== null);\r\n\r\n        for (const parsedLine of parsedLines) {\r\n          yield parsedLine;\r\n        }\r\n      }\r\n    } else {\r\n      // Non-streaming path (kept for potential compatibility, though planner chat will use stream)\r\n      const data = await response.json();\r\n      console.log(\"AIModelPlanner - OpenAI API response received (non-stream)\");\r\n      if (data.choices && data.choices[0] && data.choices[0].message) {\r\n        return data.choices[0].message.content;\r\n      } else {\r\n        console.error(\"AIModelPlanner - Invalid non-stream response structure:\", data);\r\n        throw new Error(\"Invalid response structure from OpenAI (non-stream).\");\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error calling OpenAI API in AIModelPlanner:\", error);\r\n    if (!stream) throw error; // Re-throw for non-streaming errors\r\n    // For streams, error breaks the generator.\r\n  }\r\n}\r\n\r\n\r\n// Function to process a prompt for the AI Model Planner\r\nasync function* processAIModelPlannerPromptInternal({ userInput, systemPrompt, model, temperature, history = [], stream = false }) {\r\n    const messages = [\r\n        { role: \"system\", content: systemPrompt }\r\n    ];\r\n\r\n    if (history.length > 0) {\r\n        history.forEach(message => {\r\n             if (Array.isArray(message) && message.length === 2) {\r\n                 messages.push({\r\n                     role: message[0] === \"human\" ? \"user\" : \"assistant\",\r\n                     content: message[1]\r\n                 });\r\n             } else {\r\n                 console.warn(\"AIModelPlanner: Skipping malformed history message:\", message);\r\n             }\r\n        });\r\n    }\r\n\r\n    messages.push({ role: \"user\", content: userInput });\r\n\r\n    try {\r\n        // Pass the stream option to callOpenAIForModelPlanner\r\n        const streamResponse = callOpenAIForModelPlanner(messages, { model, temperature, stream });\r\n        \r\n        if (stream) {\r\n            // If streaming, yield all chunks from the response stream\r\n            for await (const chunk of streamResponse) {\r\n                yield chunk;\r\n            }\r\n        } else {\r\n            // If not streaming, get the full response content (original behavior for non-stream callers)\r\n            // This part assumes callOpenAIForModelPlanner returns content directly when not streaming.\r\n            const responseContent = await streamResponse; // This will await the promise for non-streaming path\r\n            // The prompt asks for JSON output in the final step.\r\n            // For intermediate steps, it might be text. We need to handle both.\r\n            try {\r\n                const parsedJson = JSON.parse(responseContent);\r\n                if (typeof parsedJson === 'object' && parsedJson !== null) {\r\n                    yield parsedJson; // Yield the single parsed object\r\n                    return;\r\n                }\r\n                yield responseContent.split('\\n').filter(line => line.trim());\r\n                return;\r\n\r\n            } catch (e) {\r\n                yield responseContent.split('\\n').filter(line => line.trim());\r\n                return;\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in processAIModelPlannerPromptInternal:\", error);\r\n        // For streams, the error should propagate from callOpenAIForModelPlanner\r\n        // For non-streams, rethrow or yield an error structure\r\n        if (stream) {\r\n             // Error already logged by callOpenAIForModelPlanner, generator will break\r\n        } else {\r\n            throw error; \r\n        }\r\n    }\r\n}\r\n\r\n// Handle initial conversation for AI Model Planner\r\nasync function handleInitialAIModelPlannerConversation(userInput) {\r\n    console.log(\"AIModelPlanner: Processing initial question:\", userInput);\r\n    \r\n    const systemPrompt = await getAIModelPlanningSystemPrompt();\r\n    if (!systemPrompt) {\r\n        throw new Error(\"Failed to load the AI Model Planning system prompt.\");\r\n    }\r\n\r\n    const model = \"gpt-4.1\"; // As specified\r\n    const temperature = 0.7; // A reasonable default\r\n\r\n    const response = await processAIModelPlannerPromptInternal({\r\n        userInput: userInput,\r\n        systemPrompt: systemPrompt,\r\n        model: model,\r\n        temperature: temperature,\r\n        history: [] \r\n    });\r\n    \r\n    // Update history\r\n    // The prompt implies the final output is JSON, but intermediate steps are text.\r\n    let assistantResponseContent = \"\";\r\n    if (typeof response === 'object') {\r\n        assistantResponseContent = JSON.stringify(response); // Store JSON as string in history\r\n    } else if (Array.isArray(response)) {\r\n        assistantResponseContent = response.join(\"\\n\");\r\n    } else {\r\n        assistantResponseContent = String(response);\r\n    }\r\n    \r\n    modelPlannerConversationHistory = [\r\n        [\"human\", userInput],\r\n        [\"assistant\", assistantResponseContent]\r\n    ];\r\n    \r\n    console.log(\"AIModelPlanner: Initial conversation processed.\");\r\n    return { response: response, history: modelPlannerConversationHistory };\r\n}\r\n\r\n// Handle follow-up conversation for AI Model Planner\r\nasync function handleFollowUpAIModelPlannerConversation(userInput, currentHistory) {\r\n    console.log(\"AIModelPlanner: Processing follow-up question:\", userInput);\r\n    \r\n    const systemPrompt = await getAIModelPlanningSystemPrompt();\r\n    if (!systemPrompt) {\r\n        throw new Error(\"Failed to load the AI Model Planning system prompt.\");\r\n    }\r\n\r\n    const model = \"gpt-4.1\"; // As specified\r\n    const temperature = 0.7; // A reasonable default\r\n\r\n    const response = await processAIModelPlannerPromptInternal({\r\n        userInput: userInput,\r\n        systemPrompt: systemPrompt,\r\n        model: model,\r\n        temperature: temperature,\r\n        history: currentHistory\r\n    });\r\n\r\n    let assistantResponseContent = \"\";\r\n    if (typeof response === 'object') {\r\n        assistantResponseContent = JSON.stringify(response);\r\n    } else if (Array.isArray(response)) {\r\n        assistantResponseContent = response.join(\"\\n\");\r\n    } else {\r\n        assistantResponseContent = String(response);\r\n    }\r\n\r\n    const updatedHistory = [\r\n        ...currentHistory,\r\n        [\"human\", userInput],\r\n        [\"assistant\", assistantResponseContent]\r\n    ];\r\n    modelPlannerConversationHistory = updatedHistory;\r\n    \r\n    console.log(\"AIModelPlanner: Follow-up conversation processed.\");\r\n    return { response: response, history: updatedHistory };\r\n}\r\n\r\n// Main conversation handler for AI Model Planner\r\nexport async function handleAIModelPlannerConversation(userInput) {\r\n    try {\r\n        const isFollowUp = modelPlannerConversationHistory.length > 0;\r\n        if (isFollowUp) {\r\n            return await handleFollowUpAIModelPlannerConversation(userInput, modelPlannerConversationHistory);\r\n        } else {\r\n            return await handleInitialAIModelPlannerConversation(userInput);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in AI Model Planner conversation handling:\", error);\r\n        return {\r\n            // Return response as an array of strings for text, or object for JSON\r\n            response: (typeof error.message === 'string') ? [error.message] : error.message,\r\n            history: modelPlannerConversationHistory\r\n        };\r\n    }\r\n}\r\n\r\n// Function to clear conversation history for the model planner\r\nexport function resetAIModelPlannerConversation() {\r\n    modelPlannerConversationHistory = [];\r\n    console.log(\"AIModelPlanner: Conversation history reset.\");\r\n}\r\n\r\n// UI Helper functions specific to AIModelPlanner controlling client chat\r\nfunction displayInClientChatLogPlanner(message, isUser) {\r\n    console.log(\"[displayInClientChatLogPlanner] Called with message:\", message.substring(0, 50) + \"...\");\r\n    \r\n    let chatLog = document.getElementById('chat-log-client');\r\n    const welcomeMessage = document.getElementById('welcome-message-client');\r\n    \r\n    // If chat log doesn't exist, try to find the container and create it\r\n    if (!chatLog) {\r\n        console.error(\"AIModelPlanner: Client chat log element not found. Attempting to create it...\");\r\n        const container = document.getElementById('client-chat-container');\r\n        if (container) {\r\n            chatLog = document.createElement('div');\r\n            chatLog.id = 'chat-log-client';\r\n            chatLog.className = 'chat-log';\r\n            chatLog.style.display = 'block';\r\n            chatLog.style.flexGrow = '1';\r\n            chatLog.style.overflowY = 'auto';\r\n            container.appendChild(chatLog);\r\n            console.log(\"AIModelPlanner: Created chat log element\");\r\n        } else {\r\n            console.error(\"AIModelPlanner: Could not find container to create chat log\");\r\n            return;\r\n        }\r\n    }\r\n    \r\n    if (welcomeMessage) welcomeMessage.style.display = 'none';\r\n\r\n    // >>> ADDED: Ensure chat log is visible\r\n    const chatLogDisplay = window.getComputedStyle(chatLog).display;\r\n    if (chatLogDisplay === 'none') {\r\n        console.warn(\"[displayInClientChatLogPlanner] Chat log was hidden, forcing visibility\");\r\n        chatLog.style.display = 'block';\r\n        chatLog.style.visibility = 'visible';\r\n        chatLog.style.opacity = '1';\r\n        \r\n        // Also ensure parent container is visible\r\n        const container = chatLog.parentElement;\r\n        if (container && container.classList.contains('container')) {\r\n            container.classList.add('conversation-active');\r\n        }\r\n    }\r\n    // <<< END ADDED\r\n\r\n    const messageElement = document.createElement('div');\r\n    messageElement.className = `chat-message ${isUser ? 'user-message' : 'assistant-message'}`;\r\n    const contentElement = document.createElement('p');\r\n    contentElement.className = 'message-content';\r\n\r\n    if (typeof message === 'string') {\r\n        contentElement.textContent = message;\r\n    } else if (Array.isArray(message)) {\r\n        contentElement.textContent = message.join('\\n');\r\n    } else if (typeof message === 'object' && message !== null) {\r\n        contentElement.textContent = JSON.stringify(message, null, 2);\r\n        contentElement.style.whiteSpace = 'pre-wrap'; \r\n    } else {\r\n        contentElement.textContent = String(message);\r\n    }\r\n    messageElement.appendChild(contentElement);\r\n    chatLog.appendChild(messageElement);\r\n    chatLog.scrollTop = chatLog.scrollHeight;\r\n    console.log(`[displayInClientChatLogPlanner] Added ${isUser ? 'user' : 'assistant'} message to chat log. Total messages: ${chatLog.children.length}`);\r\n}\r\n\r\nfunction setClientLoadingStatePlanner(isLoading) {\r\n    const sendButton = document.getElementById('send-client');\r\n    const loadingAnimation = document.getElementById('loading-animation-client');\r\n    if (sendButton) sendButton.disabled = isLoading;\r\n    if (loadingAnimation) loadingAnimation.style.display = isLoading ? 'flex' : 'none';\r\n}\r\n\r\n// Core conversation logic, now private to this module\r\nasync function* _handleAIModelPlannerConversation(userInput, options = {}) {\r\n    const { stream = false } = options;\r\n    const systemPrompt = await getAIModelPlanningSystemPrompt();\r\n    if (!systemPrompt) throw new Error(\"Failed to load AI Model Planning system prompt.\");\r\n\r\n    const isFollowUp = modelPlannerConversationHistory.length > 0;\r\n    const model = \"gpt-4.1\"; // Or get from options if you want to make it configurable here\r\n    const temperature = 0.7;   // Or get from options\r\n\r\n    // Pass the stream option down to processAIModelPlannerPromptInternal\r\n    const streamResponse = processAIModelPlannerPromptInternal({\r\n        userInput: userInput,\r\n        systemPrompt: systemPrompt,\r\n        model: model,\r\n        temperature: temperature,\r\n        history: isFollowUp ? modelPlannerConversationHistory : [],\r\n        stream: stream // Pass the stream flag\r\n    });\r\n\r\n    if (stream) {\r\n        let fullAssistantResponseContent = \"\";\r\n        for await (const chunk of streamResponse) {\r\n            yield chunk; // Yield the raw chunk for UI streaming\r\n            if (chunk.choices && chunk.choices[0]?.delta?.content) {\r\n                fullAssistantResponseContent += chunk.choices[0].delta.content;\r\n            }\r\n        }\r\n        // After stream, update history with the fully accumulated content\r\n        // Note: The original _handleAIModelPlannerConversation returned the response object/array directly.\r\n        // For streaming, the primary output is the stream itself. The full content is for history.\r\n        // The caller (plannerHandleSend) will now be responsible for final parsing if it was JSON.\r\n        if (isFollowUp) {\r\n            modelPlannerConversationHistory.push([\"human\", userInput], [\"assistant\", fullAssistantResponseContent]);\r\n        } else {\r\n            modelPlannerConversationHistory = [[\"human\", userInput], [\"assistant\", fullAssistantResponseContent]];\r\n        }\r\n        // We don't explicitly return fullAssistantResponseContent here because the generator yields chunks.\r\n        // The caller will accumulate it if needed (which plannerHandleSend will do).\r\n    } else {\r\n        // Non-streaming: Get the single yielded item (which is the full response)\r\n        let fullResponse;\r\n        for await (const item of streamResponse) { // Will iterate once for non-streaming\r\n            fullResponse = item;\r\n            break;\r\n        }\r\n        \r\n        let assistantResponseContent = \"\";\r\n        if (typeof fullResponse === 'object') assistantResponseContent = JSON.stringify(fullResponse);\r\n        else if (Array.isArray(fullResponse)) assistantResponseContent = fullResponse.join(\"\\n\");\r\n        else assistantResponseContent = String(fullResponse);\r\n\r\n        if (isFollowUp) {\r\n            modelPlannerConversationHistory.push([\"human\", userInput], [\"assistant\", assistantResponseContent]);\r\n        } else {\r\n            modelPlannerConversationHistory = [[\"human\", userInput], [\"assistant\", assistantResponseContent]];\r\n        }\r\n        yield fullResponse; // Yield the full response once for non-streaming callers\r\n    }\r\n}\r\n\r\nasync function _executePlannerCodes(modelCodesString) {\r\n    console.log(`[AIModelPlanner._executePlannerCodes] Called.`);\r\n\r\n    // Substitute <BR> with <BR; labelRow=\"\"; row1 = \"||||||||||||\";>\r\n    if (modelCodesString && typeof modelCodesString === 'string') {\r\n        modelCodesString = modelCodesString.replace(/<BR>/g, '<BR; labelRow=\"\"; row1 = \"||||||||||||\";>');\r\n    }\r\n\r\n    if (!modelCodesString || modelCodesString.trim().length === 0) {\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] No model codes to process.\");\r\n        displayInClientChatLogPlanner(\"No code content generated to apply to workbook.\", false);\r\n        return;\r\n    }\r\n\r\n    let runResult = null;\r\n\r\n    try {\r\n        await Excel.run(async (context) => {\r\n            context.application.calculationMode = Excel.CalculationMode.manual;\r\n            await context.sync();\r\n            console.log(\"[AIModelPlanner._executePlannerCodes] Calculation mode set to manual.\");\r\n        });\r\n\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Validating ALL codes...\");\r\n        const validationErrors = await validateCodeStringsForRun(modelCodesString.split(/\\r?\\n/).filter(line => line.trim() !== ''));\r\n        if (validationErrors && validationErrors.length > 0) {\r\n            const errorMsg = \"Code validation failed for planner-generated codes:\\n\" + validationErrors.join(\"\\n\");\r\n            console.error(\"[AIModelPlanner._executePlannerCodes] Code validation failed:\", validationErrors);\r\n            throw new Error(errorMsg);\r\n        }\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Code validation successful.\");\r\n\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Inserting base sheets from Worksheets_4.3.25 v1.xlsx...\");\r\n        const worksheetsResponse = await fetch('https://localhost:3002/assets/Worksheets_4.3.25 v1.xlsx');\r\n        if (!worksheetsResponse.ok) throw new Error(`[AIModelPlanner._executePlannerCodes] Worksheets_4.3.25 v1.xlsx load failed: ${worksheetsResponse.statusText}`);\r\n        const wsArrayBuffer = await worksheetsResponse.arrayBuffer();\r\n        const wsUint8Array = new Uint8Array(wsArrayBuffer);\r\n        let wsBinaryString = '';\r\n        for (let i = 0; i < wsUint8Array.length; i += 8192) {\r\n            wsBinaryString += String.fromCharCode.apply(null, wsUint8Array.slice(i, Math.min(i + 8192, wsUint8Array.length)));\r\n        }\r\n        await handleInsertWorksheetsFromBase64(btoa(wsBinaryString));\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Base sheets (Worksheets_4.3.25 v1.xlsx) inserted.\");\r\n\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Inserting codes.xlsx...\");\r\n        const codesResponse = await fetch('https://localhost:3002/assets/codes.xlsx');\r\n        if (!codesResponse.ok) throw new Error(`[AIModelPlanner._executePlannerCodes] codes.xlsx load failed: ${codesResponse.statusText}`);\r\n        const codesArrayBuffer = await codesResponse.arrayBuffer();\r\n        const codesUint8Array = new Uint8Array(codesArrayBuffer);\r\n        let codesBinaryString = '';\r\n        for (let i = 0; i < codesUint8Array.length; i += 8192) {\r\n            codesBinaryString += String.fromCharCode.apply(null, codesUint8Array.slice(i, Math.min(i + 8192, codesUint8Array.length)));\r\n        }\r\n        await handleInsertWorksheetsFromBase64(btoa(codesBinaryString), [\"Codes\"]); \r\n        console.log(\"[AIModelPlanner._executePlannerCodes] codes.xlsx sheets inserted/updated.\");\r\n    \r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Populating collection...\");\r\n        const collection = populateCodeCollection(modelCodesString);\r\n        console.log(`[AIModelPlanner._executePlannerCodes] Collection populated with ${collection.length} code(s)`);\r\n\r\n        if (collection.length > 0) {\r\n            console.log(\"[AIModelPlanner._executePlannerCodes] Running codes...\");\r\n            runResult = await runCodes(collection);\r\n            console.log(\"[AIModelPlanner._executePlannerCodes] runCodes executed. Result:\", runResult);\r\n        } else {\r\n            console.log(\"[AIModelPlanner._executePlannerCodes] Collection is empty after population, skipping runCodes execution.\");\r\n            runResult = { assumptionTabs: [] };\r\n        }\r\n\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Starting post-processing steps...\");\r\n        if (runResult && runResult.assumptionTabs && runResult.assumptionTabs.length > 0) {\r\n            console.log(\"[AIModelPlanner._executePlannerCodes] Processing assumption tabs...\");\r\n            await processAssumptionTabs(runResult.assumptionTabs);\r\n        } else {\r\n            console.log(\"[AIModelPlanner._executePlannerCodes] No assumption tabs to process from runResult.\");\r\n        }\r\n\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Hiding specific columns and navigating...\");\r\n        await hideColumnsAndNavigate(runResult?.assumptionTabs || []);\r\n\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Deleting Codes sheet...\");\r\n        await Excel.run(async (context) => {\r\n            try {\r\n                context.workbook.worksheets.getItem(\"Codes\").delete();\r\n                console.log(\"[AIModelPlanner._executePlannerCodes] Codes sheet deleted.\");\r\n            } catch (e) {\r\n                if (e instanceof OfficeExtension.Error && e.code === Excel.ErrorCodes.itemNotFound) {\r\n                    console.warn(\"[AIModelPlanner._executePlannerCodes] Codes sheet not found during cleanup, skipping deletion.\");\r\n                } else { \r\n                    console.error(\"[AIModelPlanner._executePlannerCodes] Error deleting Codes sheet during cleanup:\", e);\r\n                }\r\n            }\r\n            await context.sync();\r\n        }).catch(error => { \r\n            console.error(\"[AIModelPlanner._executePlannerCodes] Error during Codes sheet cleanup sync:\", error);\r\n        });\r\n\r\n        displayInClientChatLogPlanner(\"Workbook updated with the generated model structure.\", false);\r\n        console.log(\"[AIModelPlanner._executePlannerCodes] Successfully completed.\");\r\n\r\n    } catch (error) {\r\n        console.error(\"[AIModelPlanner._executePlannerCodes] Error during processing:\", error);\r\n        displayInClientChatLogPlanner(`Error applying model structure: ${error.message}`, false);\r\n        // No re-throw here, error is displayed in chat by this function's caller (plannerHandleSend)\r\n    } finally {\r\n        try {\r\n            await Excel.run(async (context) => {\r\n                context.application.calculationMode = Excel.CalculationMode.automatic;\r\n                await context.sync();\r\n                console.log(\"[AIModelPlanner._executePlannerCodes] Calculation mode set to automatic.\");\r\n            });\r\n        } catch (finalError) {\r\n            console.error(\"[AIModelPlanner._executePlannerCodes] Error setting calculation mode to automatic:\", finalError);\r\n        }\r\n    }\r\n}\r\n\r\nexport async function plannerHandleSend() {\r\n    console.log(\"[plannerHandleSend] Function called - VERSION 2\"); // Debug to ensure new code is running\r\n    \r\n    const userInputElement = document.getElementById('user-input-client');\r\n    if (!userInputElement) { console.error(\"AIModelPlanner: Client user input element not found.\"); return; }\r\n    const userInput = userInputElement.value.trim();\r\n\r\n    if (!userInput) {\r\n        alert('Please enter a request (Client Mode)');\r\n        return;\r\n    }\r\n\r\n    // >>> ADDED: Hide header and activate conversation layout on first message\r\n    const clientHeader = document.getElementById('client-mode-header');\r\n    const clientChatContainer = document.getElementById('client-chat-container');\r\n    const chatLogClient = document.getElementById('chat-log-client');\r\n    \r\n    console.log(\"[plannerHandleSend] Initial state - chatLogClient display:\", chatLogClient ? window.getComputedStyle(chatLogClient).display : \"Element not found\");\r\n    \r\n    // Debug parent elements\r\n    if (clientChatContainer) {\r\n        console.log(\"[plannerHandleSend] clientChatContainer display:\", window.getComputedStyle(clientChatContainer).display);\r\n    }\r\n    const clientModeView = document.getElementById('client-mode-view');\r\n    if (clientModeView) {\r\n        console.log(\"[plannerHandleSend] client-mode-view display:\", window.getComputedStyle(clientModeView).display);\r\n    }\r\n    \r\n    // Force immediate visibility of chat container\r\n    if (clientChatContainer) {\r\n        clientChatContainer.classList.add('conversation-active');\r\n        console.log(\"[plannerHandleSend] Added conversation-active class to container\");\r\n        \r\n        // Force a reflow to ensure the class is applied\r\n        void clientChatContainer.offsetHeight;\r\n    }\r\n    \r\n    if (clientHeader && !clientHeader.classList.contains('hidden')) {\r\n        clientHeader.classList.add('hidden');\r\n        // After transition, completely hide it\r\n        setTimeout(() => {\r\n            clientHeader.style.display = 'none';\r\n        }, 300);\r\n    }\r\n    \r\n    if (chatLogClient) {\r\n        // Remove all inline styles that might be hiding it\r\n        chatLogClient.style.cssText = '';\r\n        // Then explicitly set the needed styles\r\n        chatLogClient.style.flexGrow = '1';\r\n        chatLogClient.style.overflowY = 'auto';\r\n        chatLogClient.style.borderBottom = '1px solid #eee';\r\n        chatLogClient.style.marginBottom = '10px';\r\n        chatLogClient.style.display = 'block';\r\n        chatLogClient.style.visibility = 'visible';\r\n        chatLogClient.style.opacity = '1';\r\n        \r\n        console.log(\"[plannerHandleSend] Forcefully set all chat log styles\");\r\n        \r\n        // Force a reflow\r\n        void chatLogClient.offsetHeight;\r\n        \r\n        // Double check the computed style\r\n        const computedDisplay = window.getComputedStyle(chatLogClient).display;\r\n        console.log(\"[plannerHandleSend] After forcing - chatLogClient computed display:\", computedDisplay);\r\n    }\r\n    // <<< END ADDED\r\n\r\n    displayInClientChatLogPlanner(userInput, true);\r\n    userInputElement.value = '';\r\n    setClientLoadingStatePlanner(true);\r\n\r\n    // Create assistant message elements for streaming\r\n    const welcomeMessageClient = document.getElementById('welcome-message-client');\r\n    if (welcomeMessageClient) welcomeMessageClient.style.display = 'none';\r\n\r\n    const assistantMessageDiv = document.createElement('div');\r\n    assistantMessageDiv.className = 'chat-message assistant-message';\r\n    const assistantMessageContent = document.createElement('p');\r\n    assistantMessageContent.className = 'message-content';\r\n    assistantMessageContent.textContent = ''; // Start empty\r\n    assistantMessageDiv.appendChild(assistantMessageContent);\r\n    if (chatLogClient) {\r\n        chatLogClient.appendChild(assistantMessageDiv);\r\n        chatLogClient.scrollTop = chatLogClient.scrollHeight;\r\n    } else {\r\n        console.error(\"AIModelPlanner: Client chat log element not found for streaming message.\");\r\n    }\r\n\r\n    let fullAssistantTextResponse = \"\";\r\n\r\n    try {\r\n        // Call _handleAIModelPlannerConversation with stream option\r\n        const stream = _handleAIModelPlannerConversation(userInput, { stream: true });\r\n\r\n        for await (const chunk of stream) {\r\n            if (chunk.choices && chunk.choices[0]?.delta?.content) {\r\n                const content = chunk.choices[0].delta.content;\r\n                fullAssistantTextResponse += content;\r\n                assistantMessageContent.textContent += content;\r\n                if (chatLogClient) chatLogClient.scrollTop = chatLogClient.scrollHeight;\r\n            }\r\n        }\r\n        \r\n        // At this point, fullAssistantTextResponse contains the complete text from the LLM.\r\n        // The conversation history has been updated inside _handleAIModelPlannerConversation's streaming path.\r\n\r\n        lastPlannerResponseForClient = fullAssistantTextResponse; // Store the raw text or try to parse if always JSON\r\n\r\n        // Now, attempt to parse the fullAssistantTextResponse as JSON for further processing\r\n        // This mirrors the previous logic but operates on the accumulated streamed text.\r\n        let jsonObjectToProcess = null;\r\n        if (fullAssistantTextResponse) {\r\n            try {\r\n                const parsedResponse = JSON.parse(fullAssistantTextResponse);\r\n                if (typeof parsedResponse === 'object' && parsedResponse !== null && !Array.isArray(parsedResponse)) {\r\n                    jsonObjectToProcess = parsedResponse;\r\n                    lastPlannerResponseForClient = parsedResponse; // Update to store parsed object\r\n                    console.log(\"AIModelPlanner: Streamed text successfully parsed to an object for tab processing.\");\r\n                }\r\n            } catch (e) {\r\n                // Not a JSON string, or parsing did not result in a suitable object.\r\n                // The UI already has the full text. lastPlannerResponseForClient remains the text.\r\n                console.log(\"AIModelPlanner: Streamed text was not a parsable JSON object. Displaying as text.\");\r\n            }\r\n        }\r\n        \r\n        // If UI was updated with text and it turned out to be JSON object for processing, \r\n        // we might want to clear/replace the text content with a message like \"Processing JSON...\"\r\n        // or just let the text remain. For now, text remains.\r\n        // If it wasn't JSON, the text is already correctly displayed.\r\n\r\n        if (jsonObjectToProcess) {\r\n            let ModelCodes = \"\"; \r\n            console.log(\"AIModelPlanner: Starting to process JSON object for ModelCodes generation.\");\r\n            // Update UI to indicate processing of JSON (optional)\r\n            // assistantMessageContent.textContent = \"Processing received plan...\"; \r\n            // displayInClientChatLogPlanner(\"Generating model structure from AI response...\", false); //This would add a new bubble\r\n\r\n            for (const tabLabel in jsonObjectToProcess) {\r\n                if (Object.prototype.hasOwnProperty.call(jsonObjectToProcess, tabLabel)) {\r\n                    const lowerCaseTabLabel = tabLabel.toLowerCase();\r\n                    if (lowerCaseTabLabel === \"financials\" || lowerCaseTabLabel === \"financials tab\") {\r\n                        console.log(`AIModelPlanner: Skipping excluded tab - \"${tabLabel}\"`);\r\n                        continue; \r\n                    }\r\n                    ModelCodes += `<TAB; label1=\"${tabLabel}\";>\\n`;\r\n                    const tabDescription = jsonObjectToProcess[tabLabel];\r\n                    let tabDescriptionString = \"\";\r\n                    if (typeof tabDescription === 'string') {\r\n                        tabDescriptionString = tabDescription;\r\n                    } else if (typeof tabDescription === 'object' && tabDescription !== null) {\r\n                        tabDescriptionString = JSON.stringify(tabDescription);\r\n                    } else {\r\n                        tabDescriptionString = String(tabDescription);\r\n                    }\r\n                    if (tabDescriptionString.trim() !== \"\") {\r\n                        console.log(`AIModelPlanner: Submitting description for tab \"${tabLabel}\" to getAICallsProcessedResponse...`);\r\n                        // Update UI for this sub-task (optional)\r\n                        // assistantMessageContent.textContent = `Processing details for tab: ${tabLabel}...`;\r\n                        displayInClientChatLogPlanner(`Processing details for tab: ${tabLabel}...`, false); // Adds new bubble\r\n                        try {\r\n                            const aiResponseForTabArray = await getAICallsProcessedResponse(tabDescriptionString);\r\n                            let formattedAiResponse = \"\";\r\n                            if (typeof aiResponseForTabArray === 'object' && aiResponseForTabArray !== null && !Array.isArray(aiResponseForTabArray)) {\r\n                                formattedAiResponse = JSON.stringify(aiResponseForTabArray, null, 2); \r\n                            } else if (Array.isArray(aiResponseForTabArray)) {\r\n                                formattedAiResponse = aiResponseForTabArray.join('\\n');\r\n                            } else {\r\n                                formattedAiResponse = String(aiResponseForTabArray);\r\n                            }\r\n                            ModelCodes += formattedAiResponse + \"\\n\\n\"; \r\n                            console.log(`AIModelPlanner: Received and appended AI response for tab \"${tabLabel}\"`);\r\n                            displayInClientChatLogPlanner(`Completed details for tab: ${tabLabel}.`, false); // Adds new bubble\r\n                        } catch (tabError) {\r\n                            console.error(`AIModelPlanner: Error processing description for tab \"${tabLabel}\" via getAICallsProcessedResponse:`, tabError);\r\n                            ModelCodes += `// Error processing tab ${tabLabel}: ${tabError.message}\\n\\n`;\r\n                            displayInClientChatLogPlanner(`Error processing details for tab ${tabLabel}: ${tabError.message}`, false);\r\n                        }\r\n                    } else {\r\n                        ModelCodes += `// No description provided for tab ${tabLabel}\\n\\n`;\r\n                    }\r\n                }\r\n            }\r\n            console.log(\"Generated ModelCodes (final):\\n\" + ModelCodes); \r\n            if (ModelCodes.trim().length > 0) {\r\n                displayInClientChatLogPlanner(\"Model structure generated. Now applying to workbook...\", false);\r\n                await _executePlannerCodes(ModelCodes); \r\n            } else {\r\n                console.log(\"AIModelPlanner: ModelCodes string is empty. Skipping _executePlannerCodes call.\");\r\n                displayInClientChatLogPlanner(\"No code content generated to apply to workbook.\", false);\r\n            }\r\n        } else {\r\n            // If it wasn't a JSON object for processing, the text is already displayed via streaming.\r\n            // No further action needed here for UI unless fullAssistantTextResponse was empty.\r\n            if (!fullAssistantTextResponse) {\r\n                 assistantMessageContent.textContent = \"Received an empty response.\";\r\n            }\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in AIModelPlanner conversation:\", error);\r\n        \r\n        // Check if this is a validation error\r\n        if (error.message && error.message.includes(\"Code validation failed\")) {\r\n            console.log(\"AIModelPlanner: Validation error detected. Attempting automatic resubmission...\");\r\n            \r\n            // Display validation error to user\r\n            displayInClientChatLogPlanner(`Validation error detected: ${error.message}\\n\\nAutomatically resubmitting for correction...`, false);\r\n            \r\n            // Check if we haven't exceeded retry attempts (prevent infinite loops)\r\n            const maxRetries = 2;\r\n            const currentRetryCount = error.retryCount || 0;\r\n            \r\n            if (currentRetryCount >= maxRetries) {\r\n                console.log(\"AIModelPlanner: Maximum retry attempts reached. Stopping automatic correction.\");\r\n                displayInClientChatLogPlanner(`Maximum retry attempts (${maxRetries}) reached. Please manually adjust your request.`, false);\r\n                assistantMessageContent.textContent = `Error: ${error.message}`;\r\n                return;\r\n            }\r\n            \r\n            // If we have a JSON object that failed validation, resubmit it\r\n            if (lastPlannerResponseForClient && typeof lastPlannerResponseForClient === 'object') {\r\n                try {\r\n                    // Create a new prompt that includes the validation error\r\n                    const retryPrompt = `The previous model structure had validation errors:\\n${error.message}\\n\\nPlease regenerate the model structure fixing these validation issues. Keep the same tabs but ensure all code strings are valid.`;\r\n                    \r\n                    // Clear the assistant message for retry\r\n                    assistantMessageContent.textContent = \"Regenerating with corrections...\";\r\n                    \r\n                    // Retry the conversation with the error context\r\n                    const retryStream = _handleAIModelPlannerConversation(retryPrompt, { stream: true });\r\n                    let retryFullResponse = \"\";\r\n                    \r\n                    for await (const chunk of retryStream) {\r\n                        if (chunk.choices && chunk.choices[0]?.delta?.content) {\r\n                            const content = chunk.choices[0].delta.content;\r\n                            retryFullResponse += content;\r\n                            assistantMessageContent.textContent = content; // Replace, don't append for cleaner retry\r\n                            if (chatLogClient) chatLogClient.scrollTop = chatLogClient.scrollHeight;\r\n                        }\r\n                    }\r\n                    \r\n                    // Try to parse and process the retry response\r\n                    let retryJsonObject = null;\r\n                    try {\r\n                        const parsedRetry = JSON.parse(retryFullResponse);\r\n                        if (typeof parsedRetry === 'object' && parsedRetry !== null && !Array.isArray(parsedRetry)) {\r\n                            retryJsonObject = parsedRetry;\r\n                            lastPlannerResponseForClient = parsedRetry;\r\n                        }\r\n                    } catch (e) {\r\n                        console.log(\"AIModelPlanner: Retry response was not parsable JSON.\");\r\n                    }\r\n                    \r\n                    if (retryJsonObject) {\r\n                        // Process the corrected JSON\r\n                        let ModelCodes = \"\";\r\n                        for (const tabLabel in retryJsonObject) {\r\n                            if (Object.prototype.hasOwnProperty.call(retryJsonObject, tabLabel)) {\r\n                                const lowerCaseTabLabel = tabLabel.toLowerCase();\r\n                                if (lowerCaseTabLabel === \"financials\" || lowerCaseTabLabel === \"financials tab\") {\r\n                                    continue;\r\n                                }\r\n                                ModelCodes += `<TAB; label1=\"${tabLabel}\";>\\n`;\r\n                                const tabDescription = retryJsonObject[tabLabel];\r\n                                let tabDescriptionString = \"\";\r\n                                if (typeof tabDescription === 'string') {\r\n                                    tabDescriptionString = tabDescription;\r\n                                } else if (typeof tabDescription === 'object' && tabDescription !== null) {\r\n                                    tabDescriptionString = JSON.stringify(tabDescription);\r\n                                } else {\r\n                                    tabDescriptionString = String(tabDescription);\r\n                                }\r\n                                if (tabDescriptionString.trim() !== \"\") {\r\n                                    displayInClientChatLogPlanner(`Processing corrected details for tab: ${tabLabel}...`, false);\r\n                                    try {\r\n                                        const aiResponseForTabArray = await getAICallsProcessedResponse(tabDescriptionString);\r\n                                        let formattedAiResponse = \"\";\r\n                                        if (typeof aiResponseForTabArray === 'object' && aiResponseForTabArray !== null && !Array.isArray(aiResponseForTabArray)) {\r\n                                            formattedAiResponse = JSON.stringify(aiResponseForTabArray, null, 2);\r\n                                        } else if (Array.isArray(aiResponseForTabArray)) {\r\n                                            formattedAiResponse = aiResponseForTabArray.join('\\n');\r\n                                        } else {\r\n                                            formattedAiResponse = String(aiResponseForTabArray);\r\n                                        }\r\n                                        ModelCodes += formattedAiResponse + \"\\n\\n\";\r\n                                        displayInClientChatLogPlanner(`Completed corrected details for tab: ${tabLabel}.`, false);\r\n                                    } catch (tabError) {\r\n                                        console.error(`AIModelPlanner: Error processing corrected tab \"${tabLabel}\":`, tabError);\r\n                                        ModelCodes += `// Error processing tab ${tabLabel}: ${tabError.message}\\n\\n`;\r\n                                        displayInClientChatLogPlanner(`Error processing corrected tab ${tabLabel}: ${tabError.message}`, false);\r\n                                    }\r\n                                } else {\r\n                                    ModelCodes += `// No description provided for tab ${tabLabel}\\n\\n`;\r\n                                }\r\n                            }\r\n                        }\r\n                        \r\n                        if (ModelCodes.trim().length > 0) {\r\n                            displayInClientChatLogPlanner(\"Corrected model structure generated. Now applying to workbook...\", false);\r\n                            // Pass retry count in case there's another validation error\r\n                            try {\r\n                                await _executePlannerCodes(ModelCodes);\r\n                            } catch (retryValidationError) {\r\n                                // If it's another validation error, increment retry count\r\n                                if (retryValidationError.message && retryValidationError.message.includes(\"Code validation failed\")) {\r\n                                    retryValidationError.retryCount = (currentRetryCount || 0) + 1;\r\n                                }\r\n                                throw retryValidationError;\r\n                            }\r\n                        } else {\r\n                            displayInClientChatLogPlanner(\"No corrected code content generated.\", false);\r\n                        }\r\n                    } else {\r\n                        displayInClientChatLogPlanner(\"Could not generate corrected model structure. Please try rephrasing your request.\", false);\r\n                    }\r\n                    \r\n                } catch (retryError) {\r\n                    console.error(\"Error during automatic retry:\", retryError);\r\n                    displayInClientChatLogPlanner(`Failed to automatically correct validation errors: ${retryError.message}`, false);\r\n                }\r\n            } else {\r\n                // No JSON object to retry with, just show the error\r\n                assistantMessageContent.textContent = `Error: ${error.message}`;\r\n            }\r\n        } else {\r\n            // Not a validation error, show as normal\r\n            assistantMessageContent.textContent = `Error: ${error.message}`;\r\n        }\r\n\r\n    } finally {\r\n        setClientLoadingStatePlanner(false);\r\n    }\r\n}\r\n\r\nexport function plannerHandleReset() {\r\n    const chatLog = document.getElementById('chat-log-client');\r\n    if (chatLog) {\r\n        chatLog.innerHTML = '';\r\n        // >>> ADDED: Hide chat log when resetting\r\n        chatLog.style.display = 'none';\r\n        // <<< END ADDED\r\n    }\r\n\r\n    // >>> ADDED: Restore header and initial layout\r\n    const clientHeader = document.getElementById('client-mode-header');\r\n    const clientChatContainer = document.getElementById('client-chat-container');\r\n    \r\n    if (clientHeader) {\r\n        clientHeader.style.display = ''; // Show it first\r\n        clientHeader.classList.remove('hidden'); // Remove hidden class to trigger transition\r\n    }\r\n    \r\n    if (clientChatContainer) {\r\n        clientChatContainer.classList.remove('conversation-active');\r\n    }\r\n    // <<< END ADDED\r\n\r\n    const welcomeMessage = document.createElement('div');\r\n    welcomeMessage.id = 'welcome-message-client';\r\n    welcomeMessage.className = 'welcome-message';\r\n    welcomeMessage.style.display = 'none'; // Keep hidden since we're showing the header\r\n    const welcomeTitle = document.createElement('h1');\r\n    welcomeTitle.textContent = 'Ask me anything (Client Mode)';\r\n    welcomeMessage.appendChild(welcomeTitle);\r\n    if (chatLog) chatLog.appendChild(welcomeMessage);\r\n\r\n    modelPlannerConversationHistory = [];\r\n    lastPlannerResponseForClient = null;\r\n\r\n    const userInput = document.getElementById('user-input-client');\r\n    if (userInput) userInput.value = '';\r\n\r\n    console.log(\"AIModelPlanner: Client chat reset completed.\");\r\n}\r\n\r\nexport function plannerHandleWriteToExcel() {\r\n    if (!lastPlannerResponseForClient) {\r\n        displayInClientChatLogPlanner(\"No response to write to Excel.\", false);\r\n        return;\r\n    }\r\n    let contentToWrite = \"\";\r\n    if (typeof lastPlannerResponseForClient === 'object') contentToWrite = JSON.stringify(lastPlannerResponseForClient, null, 2);\r\n    else if (Array.isArray(lastPlannerResponseForClient)) contentToWrite = lastPlannerResponseForClient.join(\"\\n\");\r\n    else contentToWrite = String(lastPlannerResponseForClient);\r\n    \r\n    console.log(\"AIModelPlanner Client Mode - Write to Excel (Placeholder):\\n\", contentToWrite);\r\n    displayInClientChatLogPlanner(\"Write to Excel (Placeholder): Response logged to console. Actual Excel writing depends on format.\", false);\r\n    // Actual Excel.run call would be complex here, especially for JSON, and is out of scope of this file's direct responsibility as per prompt.\r\n}\r\n\r\nexport function plannerHandleInsertToEditor() {\r\n    if (!lastPlannerResponseForClient) {\r\n        displayInClientChatLogPlanner(\"No response to insert into editor.\", false);\r\n        return;\r\n    }\r\n    let contentToInsert = \"\";\r\n    if (typeof lastPlannerResponseForClient === 'object') contentToInsert = JSON.stringify(lastPlannerResponseForClient, null, 2);\r\n    else if (Array.isArray(lastPlannerResponseForClient)) contentToInsert = lastPlannerResponseForClient.join(\"\\n\");\r\n    else contentToInsert = String(lastPlannerResponseForClient);\r\n\r\n    console.log(\"AIModelPlanner Client Mode - Insert to Editor (Placeholder):\\n\", contentToInsert);\r\n    displayInClientChatLogPlanner(\"Insert to Editor (Placeholder): Response logged to console. Actual editor insertion depends on editor availability in client mode.\", false);\r\n    // Actual editor insertion logic is out of scope here.\r\n}\r\n\r\n\r\n","// This file should be added to .gitignore so it's not committed to version control\r\n// Copy the contents to config.js.example with placeholders for other developers\r\n\r\n// API Keys configuration\r\nexport const API_KEYS = {\r\n  OPENAI_API_KEY: process.env.OPENAI_API_KEY,\r\n  PINECONE_API_KEY: process.env.PINECONE_API_KEY\r\n};\r\n\r\n// Note: This file will be used by the application to load API keys\r\n// Use the initializeAPIKeys function in taskpane.js to access these values ","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global console, document, Excel, Office */\r\n\r\n// Remove imports from Langchain to avoid ESM module issues\r\n// Using direct fetch calls instead\r\n// Add this test function\r\nimport { validateCodeStrings } from './Validation.js';\r\n// Import the spreadsheet utilities\r\n// import { handleInsertWorksheetsFromBase64 } from './SpreadsheetUtils.js';\r\n// Import code collection functions\r\nimport { populateCodeCollection, exportCodeCollectionToText, runCodes, processAssumptionTabs, collapseGroupingsAndNavigateToFinancials, hideColumnsAndNavigate, handleInsertWorksheetsFromBase64 } from './CodeCollection.js';\r\n// >>> ADDED: Import the new validation function\r\nimport { validateCodeStringsForRun } from './Validation.js';\r\n// >>> ADDED: Import the tab string generator function\r\nimport { generateTabString } from './IndexWorksheet.js';\r\n// >>> ADDED: Import AIModelPlanner functions\r\nimport { handleAIModelPlannerConversation, resetAIModelPlannerConversation, setAIModelPlannerOpenApiKey, plannerHandleSend, plannerHandleReset, plannerHandleWriteToExcel, plannerHandleInsertToEditor } from './AIModelPlanner.js';\r\n// Add the codeStrings variable with the specified content\r\n// REMOVED hardcoded codeStrings variable\r\n\r\nimport { API_KEYS as configApiKeys } from '../../config.js'; // Assuming config.js exports API_KEYS\r\n\r\n// Mock fs module for browser environment (if needed within AIcalls)\r\nconst fs = {\r\n    writeFileSync: (path, content) => {\r\n        console.log(`Mock writeFileSync called with path: ${path}`);\r\n        // In browser, we'll just log the content instead of writing to file\r\n        console.log(`Content would be written to ${path}:`, content.substring(0, 100) + '...');\r\n    }\r\n};\r\n\r\n//*********Setup*********\r\n// Start the timer\r\nconst startTime = performance.now();\r\n\r\n//Debugging Toggle\r\nconst DEBUG = true;\r\n\r\n// Variable to store loaded code strings\r\nlet loadedCodeStrings = \"\";\r\n\r\n// Variable to store the parsed code database\r\nlet codeDatabase = [];\r\n\r\n// >>> ADDED: Variables for search/replace state <<<\r\n// >>> REMOVED: Main search/replace state variables <<<\r\n// let lastSearchTerm = '';\r\n// let lastSearchIndex = -1; // Tracks the starting index of the last found match\r\n// let searchResultIndices = []; // Stores indices of all matches for Replace All\r\n// let currentHighlightIndex = -1; // Index within searchResultIndices for Find Next\r\n\r\n// API keys storage - initialized by initializeAPIKeys\r\nlet INTERNAL_API_KEYS = {\r\n  OPENAI_API_KEY: \"\",\r\n  PINECONE_API_KEY: \"\"\r\n};\r\n\r\n// Function to set API keys from outside this module\r\nexport function setAPIKeys(keys) {\r\n  if (keys && typeof keys === 'object') {\r\n    if (keys.OPENAI_API_KEY) {\r\n      INTERNAL_API_KEYS.OPENAI_API_KEY = keys.OPENAI_API_KEY;\r\n      console.log(\"AIcalls.js: OpenAI API key set externally\");\r\n    }\r\n    if (keys.PINECONE_API_KEY) {\r\n      INTERNAL_API_KEYS.PINECONE_API_KEY = keys.PINECONE_API_KEY;\r\n      console.log(\"AIcalls.js: Pinecone API key set externally\");\r\n    }\r\n  }\r\n}\r\n\r\nconst srcPaths = [\r\n  'https://localhost:3002/src/prompts/Encoder_System.txt',\r\n  'https://localhost:3002/src/prompts/Encoder_Main.txt',\r\n  'https://localhost:3002/src/prompts/Followup_System.txt',\r\n  'https://localhost:3002/src/prompts/Structure_System.txt',\r\n  'https://localhost:3002/src/prompts/Validation_System.txt',\r\n  'https://localhost:3002/src/prompts/Validation_Main.txt'\r\n];\r\n\r\n// Function to load the code string database\r\nasync function loadCodeDatabase() {\r\n  try {\r\n    console.log(\"Loading code database...\");\r\n    const response = await fetch('https://localhost:3002/assets/codestringDB.txt');\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to load codestringDB.txt: ${response.statusText}`);\r\n    }\r\n    const text = await response.text();\r\n    const lines = text.split(/[\\r\\n]+/).filter(line => line.trim() !== ''); // Split by lines and remove empty ones\r\n\r\n    codeDatabase = lines.map(line => {\r\n      const parts = line.split('\\t'); // Assuming tab-separated\r\n      if (parts.length >= 2) {\r\n        return { name: parts[0].trim(), code: parts[1].trim() };\r\n      }\r\n      console.warn(`Skipping malformed line in codestringDB.txt: ${line}`);\r\n      return null;\r\n    }).filter(item => item !== null); // Filter out null entries from malformed lines\r\n\r\n    console.log(`Code database loaded successfully with ${codeDatabase.length} entries.`);\r\n    if (DEBUG && codeDatabase.length > 0) {\r\n        console.log(\"First few code database entries:\", codeDatabase.slice(0, 5));\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error(\"Error loading code database:\", error);\r\n    showError(\"Failed to load code database. Search functionality will be unavailable.\");\r\n    codeDatabase = []; // Ensure it's empty on error\r\n  }\r\n}\r\n\r\n// Function to load API keys from a config file\r\n// This allows the keys to be stored in a separate file that's .gitignored\r\nexport async function initializeAPIKeys() {\r\n  try {\r\n    console.log(\"Initializing API keys from AIcalls.js...\");\r\n\r\n    // Use keys from imported config.js if available\r\n    if (configApiKeys?.OPENAI_API_KEY) {\r\n        INTERNAL_API_KEYS.OPENAI_API_KEY = configApiKeys.OPENAI_API_KEY;\r\n        setAIModelPlannerOpenApiKey(configApiKeys.OPENAI_API_KEY);\r\n        console.log(\"OpenAI API key loaded from config.js and set for AI Model Planner\");\r\n    } else {\r\n         console.warn(\"OpenAI API key not found in config.js.\");\r\n    }\r\n\r\n    if (configApiKeys?.PINECONE_API_KEY) {\r\n        INTERNAL_API_KEYS.PINECONE_API_KEY = configApiKeys.PINECONE_API_KEY;\r\n        console.log(\"Pinecone API key loaded from config.js\");\r\n    } else {\r\n         console.warn(\"Pinecone API key not found in config.js.\");\r\n    }\r\n\r\n    // Fallback: try fetching from the old location if config.js didn't provide them\r\n    if (!INTERNAL_API_KEYS.OPENAI_API_KEY || !INTERNAL_API_KEYS.PINECONE_API_KEY) {\r\n        console.log(\"Attempting fallback API key loading from https://localhost:3002/config.js\");\r\n        try {\r\n            const configResponse = await fetch('https://localhost:3002/config.js');\r\n            if (configResponse.ok) {\r\n                const configText = await configResponse.text();\r\n                // Extract keys from the config text using regex\r\n                const openaiKeyMatch = configText.match(/OPENAI_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n                const pineconeKeyMatch = configText.match(/PINECONE_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n\r\n                if (!INTERNAL_API_KEYS.OPENAI_API_KEY && openaiKeyMatch && openaiKeyMatch[1]) {\r\n                    INTERNAL_API_KEYS.OPENAI_API_KEY = openaiKeyMatch[1];\r\n                    setAIModelPlannerOpenApiKey(openaiKeyMatch[1]);\r\n                    console.log(\"OpenAI API key loaded via fetch fallback and set for AI Model Planner.\");\r\n                }\r\n\r\n                if (!INTERNAL_API_KEYS.PINECONE_API_KEY && pineconeKeyMatch && pineconeKeyMatch[1]) {\r\n                    INTERNAL_API_KEYS.PINECONE_API_KEY = pineconeKeyMatch[1];\r\n                    console.log(\"Pinecone API key loaded via fetch fallback.\");\r\n                }\r\n            } else {\r\n                 console.warn(\"Fallback fetch for config.js failed or returned non-OK status.\");\r\n            }\r\n        } catch (error) {\r\n            console.warn(\"Could not load config.js via fetch fallback:\", error);\r\n        }\r\n    }\r\n    \r\n    // Add debug logging with secure masking of keys\r\n    console.log(\"Loaded API Keys (AIcalls.js):\");\r\n    console.log(\"  OPENAI_API_KEY:\", INTERNAL_API_KEYS.OPENAI_API_KEY ?\r\n      `${INTERNAL_API_KEYS.OPENAI_API_KEY.substring(0, 3)}...${INTERNAL_API_KEYS.OPENAI_API_KEY.substring(INTERNAL_API_KEYS.OPENAI_API_KEY.length - 3)}` :\r\n      \"Not found\");\r\n    console.log(\"  PINECONE_API_KEY:\", INTERNAL_API_KEYS.PINECONE_API_KEY ?\r\n      `${INTERNAL_API_KEYS.PINECONE_API_KEY.substring(0, 3)}...${INTERNAL_API_KEYS.PINECONE_API_KEY.substring(INTERNAL_API_KEYS.PINECONE_API_KEY.length - 3)}` :\r\n      \"Not found\");\r\n\r\n    const keysFound = !!(INTERNAL_API_KEYS.OPENAI_API_KEY && INTERNAL_API_KEYS.PINECONE_API_KEY);\r\n    console.log(\"API Keys Initialized:\", keysFound);\r\n    // Return a copy to prevent external modification of the internal state\r\n    return { ...INTERNAL_API_KEYS };\r\n\r\n  } catch (error) {\r\n    console.error(\"Error initializing API keys:\", error);\r\n    // Return empty keys on error\r\n    return { OPENAI_API_KEY: \"\", PINECONE_API_KEY: \"\" };\r\n  }\r\n}\r\n\r\n// Update Pinecone configuration to handle multiple indexes\r\nconst PINECONE_ENVIRONMENT = \"gcp-starter\";\r\n\r\n// Define configurations for each index\r\nconst PINECONE_INDEXES = {\r\n    codes: {\r\n        name: \"codes\",\r\n        apiEndpoint: \"https://codes-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call2trainingdata: {\r\n        name: \"call2trainingdata\",\r\n        apiEndpoint: \"https://call2trainingdata-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call2context: {\r\n        name: \"call2context\",\r\n        apiEndpoint: \"https://call2context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call1context: {\r\n        name: \"call1context\",\r\n        apiEndpoint: \"https://call1context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    }\r\n};\r\n\r\n//Models\r\nconst GPT4O_MINI = \"gpt-4o-mini\"\r\nconst GPT4O = \"gpt-4o\"\r\nconst GPT41 = \"gpt-4.1\"\r\nconst GPT45_TURBO = \"gpt-4.5-turbo\"\r\nconst GPT35_TURBO = \"gpt-3.5-turbo\"\r\nconst GPT4_TURBO = \"gpt-4-turbo\"\r\nconst GPTFT1 =  \"ft:gpt-3.5-turbo-1106:orsi-advisors:cohcolumnsgpt35:B6Wlrql1\"\r\n\r\n// Conversation history storage\r\nlet conversationHistory = [];\r\n\r\n// Functions to save and load conversation history (use localStorage directly)\r\nexport function saveConversationHistory(history) {\r\n    try {\r\n        localStorage.setItem('conversationHistory', JSON.stringify(history));\r\n        if (DEBUG) console.log('Conversation history saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving conversation history:\", error);\r\n    }\r\n}\r\n\r\nexport function loadConversationHistory() {\r\n    try {\r\n        const history = localStorage.getItem('conversationHistory');\r\n        if (history) {\r\n            if (DEBUG) console.log('Loaded conversation history from localStorage');\r\n            const parsedHistory = JSON.parse(history);\r\n\r\n            if (!Array.isArray(parsedHistory)) {\r\n                console.error(\"Invalid history format, expected array\");\r\n                return [];\r\n            }\r\n\r\n            return parsedHistory;\r\n        }\r\n        if (DEBUG) console.log(\"No conversation history found in localStorage\");\r\n        return [];\r\n    } catch (error) {\r\n        console.error(\"Error loading conversation history:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\n// Direct OpenAI API call function\r\nexport async function* callOpenAI(messages, options = {}) {\r\n  const { model = GPT41, temperature = 0.7, stream = false } = options;\r\n\r\n  try {\r\n    console.log(`Calling OpenAI API with model: ${model}, stream: ${stream}`);\r\n\r\n    if (!INTERNAL_API_KEYS.OPENAI_API_KEY) {\r\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\r\n    }\r\n\r\n    const body = {\r\n      model: model,\r\n      messages: messages,\r\n      temperature: temperature\r\n    };\r\n\r\n    if (stream) {\r\n      body.stream = true;\r\n    }\r\n\r\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${INTERNAL_API_KEYS.OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify(body)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({ message: \"Failed to parse error JSON.\" }));\r\n      console.error(\"OpenAI API error response:\", errorData);\r\n      throw new Error(`OpenAI API error: ${response.status} ${response.statusText} - ${errorData.message || JSON.stringify(errorData)}`);\r\n    }\r\n\r\n    if (stream) {\r\n      console.log(\"OpenAI API response received (stream)\");\r\n      const reader = response.body.getReader();\r\n      const decoder = new TextDecoder(\"utf-8\");\r\n\r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n        if (done) {\r\n          console.log(\"Stream finished.\");\r\n          break;\r\n        }\r\n        const chunk = decoder.decode(value);\r\n        const lines = chunk.split(\"\\n\");\r\n        const parsedLines = lines\r\n          .map((line) => line.replace(/^data: /, \"\").trim()) // Remove SSE \"data: \" prefix\r\n          .filter((line) => line !== \"\" && line !== \"[DONE]\") // Filter empty lines and [DONE] message\r\n          .map((line) => {\r\n            try {\r\n              return JSON.parse(line);\r\n            } catch (e) {\r\n              console.warn(\"Could not parse JSON line from stream:\", line, e);\r\n              return null; // Or handle error appropriately\r\n            }\r\n          })\r\n          .filter(line => line !== null);\r\n\r\n        for (const parsedLine of parsedLines) {\r\n          yield parsedLine;\r\n        }\r\n      }\r\n    } else {\r\n      const data = await response.json();\r\n      console.log(\"OpenAI API response received (non-stream)\");\r\n      // For non-streaming, to maintain compatibility with handleSendClient's expectation of an iterable, \r\n      // we yield a single object that mimics the structure of a stream chunk if needed, \r\n      // or simply return the content if the caller adapts.\r\n      // For now, let's assume the non-streaming path is not used by handleSendClient directly.\r\n      // Returning the content directly as before for other potential callers.\r\n      // If callOpenAI is *only* called by handleSendClient, this else block might need to yield as well.\r\n      // However, processPrompt calls callOpenAI without expecting a stream.\r\n      // If callOpenAI is *only* called by handleSendClient, this else block might need to yield as well.\r\n      // However, processPrompt calls callOpenAI without expecting a stream.\r\n      yield data.choices[0].message.content; // Yield the content string once\r\n      return; // Explicitly end the generator\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error(\"Error calling OpenAI API:\", error);\r\n    // If it's a stream, we can't return, but the error will propagate.\r\n    // If not a stream, re-throw as before.\r\n    if (!stream) throw error;\r\n    // For a stream, the error breaks the generator. Consider yielding an error object if preferred.\r\n    // For now, just log and let the generator terminate.\r\n    // yield { error: error.message }; // Optional: yield an error object\r\n  }\r\n}\r\n\r\n// OpenAI embeddings function\r\nexport async function createEmbedding(text) {\r\n  try {\r\n    console.log(\"Creating embedding for text\");\r\n\r\n    if (!INTERNAL_API_KEYS.OPENAI_API_KEY) {\r\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\r\n    }\r\n\r\n    const response = await fetch('https://api.openai.com/v1/embeddings', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${INTERNAL_API_KEYS.OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: \"text-embedding-3-large\",\r\n        input: text\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => null);\r\n      console.error(\"OpenAI Embeddings API error response:\", errorData);\r\n      throw new Error(`OpenAI Embeddings API error: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log(\"OpenAI Embeddings API response received\");\r\n\r\n    return data.data[0].embedding;\r\n  } catch (error) {\r\n    console.error(\"Error creating embedding:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to load prompts from files\r\nexport async function loadPromptFromFile(promptKey) {\r\n  try {\r\n    const paths = [\r\n      `https://localhost:3002/prompts/${promptKey}.txt`,\r\n      ...srcPaths // Add fallback paths if needed\r\n    ];\r\n\r\n    let response = null;\r\n    for (const path of paths) {\r\n      if (DEBUG) console.log(`Attempting to load prompt from: ${path}`);\r\n      try {\r\n        response = await fetch(path);\r\n        if (response.ok) {\r\n          if (DEBUG) console.log(`Successfully loaded prompt from: ${path}`);\r\n          break;\r\n        }\r\n      } catch (err) {\r\n        if (DEBUG) console.log(`Path ${path} failed: ${err.message}`);\r\n      }\r\n    }\r\n\r\n    if (!response || !response.ok) {\r\n      throw new Error(`Failed to load prompt: ${promptKey} (Could not find file in any location)`);\r\n    }\r\n\r\n    return await response.text();\r\n  } catch (error) {\r\n    console.error(`Error loading prompt ${promptKey}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to get system prompt from file\r\nexport async function getSystemPromptFromFile(promptKey) {\r\n  try {\r\n    const prompt = await loadPromptFromFile(promptKey);\r\n    if (!prompt) {\r\n      throw new Error(`Prompt key \"${promptKey}\" not found`);\r\n    }\r\n    return prompt;\r\n  } catch (error) {\r\n    console.error(`Error getting prompt for key ${promptKey}:`, error);\r\n    return null; // Return null or handle error as appropriate\r\n  }\r\n};\r\n\r\n// Function: OpenAI Call with conversation history support\r\nexport async function processPrompt({ userInput, systemPrompt, model, temperature, history = [] }) {\r\n    if (DEBUG) console.log(\"API Key being used for processPrompt:\", INTERNAL_API_KEYS.OPENAI_API_KEY ? `${INTERNAL_API_KEYS.OPENAI_API_KEY.substring(0, 3)}...` : \"None\");\r\n\r\n    const messages = [\r\n        { role: \"system\", content: systemPrompt }\r\n    ];\r\n\r\n    if (history.length > 0) {\r\n        history.forEach(message => {\r\n            // Ensure message is in the correct format [role, content]\r\n             if (Array.isArray(message) && message.length === 2) {\r\n                 messages.push({\r\n                     role: message[0] === \"human\" ? \"user\" : \"assistant\",\r\n                     content: message[1]\r\n                 });\r\n             } else {\r\n                 console.warn(\"Skipping malformed history message:\", message);\r\n             }\r\n        });\r\n    }\r\n\r\n    messages.push({ role: \"user\", content: userInput });\r\n\r\n    try {\r\n        // Correctly call callOpenAI with an options object\r\n        const openaiCallOptions = { model: model, temperature: temperature, stream: false };\r\n        let responseContent = \"\";\r\n\r\n        // Consume the async iterator from callOpenAI\r\n        // For non-streaming, this loop will run once, getting the single yielded string content.\r\n        for await (const contentPart of callOpenAI(messages, openaiCallOptions)) {\r\n            responseContent += contentPart;\r\n        }\r\n\r\n        // Try to parse JSON response if applicable, otherwise split lines\r\n        try {\r\n            const parsed = JSON.parse(responseContent);\r\n            // Expecting an array of strings based on original code\r\n            if (Array.isArray(parsed)) {\r\n                return parsed;\r\n            }\r\n            // If not array, maybe single string JSON? Unlikely based on usage.\r\n             console.warn(\"Parsed JSON response, but it was not an array:\", parsed);\r\n             // Fallback to splitting the original string\r\n             return responseContent.split('\\n').filter(line => line.trim());\r\n        } catch (e) {\r\n            return responseContent.split('\\n').filter(line => line.trim());\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in processPrompt:\", error);\r\n        throw error; // Re-throw to be caught by caller\r\n    }\r\n}\r\n\r\n// Function: Structure database queries\r\nexport async function structureDatabasequeries(clientprompt) {\r\n  if (DEBUG) console.log(\"Processing structured database queries:\", clientprompt);\r\n\r\n  try {\r\n      if (DEBUG) console.log(\"Getting structure system prompt\");\r\n      const systemStructurePrompt = await getSystemPromptFromFile('Structure_System');\r\n\r\n      if (!systemStructurePrompt) {\r\n          throw new Error(\"Failed to load structure system prompt\");\r\n      }\r\n\r\n      if (DEBUG) console.log(\"Got system prompt, processing query strings\");\r\n      // processPrompt expects history, pass empty array if none applicable here\r\n      const queryStrings = await processPrompt({\r\n          userInput: clientprompt,\r\n          systemPrompt: systemStructurePrompt,\r\n          model: GPT41,\r\n          temperature: 1,\r\n          history: [] // Explicitly empty\r\n      });\r\n\r\n      if (!queryStrings || !Array.isArray(queryStrings)) {\r\n          console.error(\"Invalid query strings received:\", queryStrings);\r\n          throw new Error(\"Failed to get valid query strings from structuring prompt\");\r\n      }\r\n\r\n      if (DEBUG) console.log(\"Got query strings:\", queryStrings);\r\n      const results = [];\r\n\r\n      for (const queryString of queryStrings) {\r\n          if (DEBUG) console.log(\"Processing query:\", queryString);\r\n          try {\r\n              // Make sure queryVectorDB uses the internal API keys\r\n              const queryResults = {\r\n                  query: queryString,\r\n                  trainingData: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call2trainingdata',\r\n                      numResults: 3\r\n                  }),\r\n                  call2Context: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call2context',\r\n                      numResults: 5\r\n                  }),\r\n                  call1Context: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call1context',\r\n                      numResults: 5\r\n                  }),\r\n                  codeOptions: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      indexName: 'codes',\r\n                      numResults: 3,\r\n                      similarityThreshold: .1\r\n                  })\r\n              };\r\n\r\n              results.push(queryResults);\r\n              if (DEBUG) console.log(\"Successfully processed query:\", queryString);\r\n          } catch (error) {\r\n              console.error(`Error processing query \"${queryString}\":`, error);\r\n              // Continue with next query instead of failing completely\r\n          }\r\n      }\r\n\r\n      if (results.length === 0 && queryStrings.length > 0) {\r\n           console.warn(\"All structured queries failed to produce results.\");\r\n           // Decide whether to throw an error or return empty results\r\n           // Throwing error based on original logic\r\n           throw new Error(\"No valid results were obtained from any structured queries\");\r\n      } else if (queryStrings.length === 0) {\r\n           console.warn(\"Structuring prompt returned no query strings.\");\r\n           // Throwing error as subsequent steps likely depend on results\r\n           throw new Error(\"Structuring prompt did not return any queries to process.\");\r\n      }\r\n\r\n      return results;\r\n  } catch (error) {\r\n      console.error(\"Error in structureDatabasequeries:\", error);\r\n      throw error; // Re-throw\r\n  }\r\n}\r\n\r\n// Function: Query Vector Database using Pinecone REST API\r\nexport async function queryVectorDB({ queryPrompt, indexName = 'codes', numResults = 10, similarityThreshold = null }) {\r\n    try {\r\n        if (DEBUG) console.log(\"Generating embeddings for query:\", queryPrompt);\r\n\r\n        // Ensure API key exists before proceeding\r\n        if (!INTERNAL_API_KEYS.PINECONE_API_KEY) {\r\n            throw new Error(\"Pinecone API key not found. Please check your API keys.\");\r\n        }\r\n\r\n        const embedding = await createEmbedding(queryPrompt); // Uses OpenAI key internally\r\n        if (DEBUG) console.log(\"Embeddings generated successfully\");\r\n\r\n        const indexConfig = PINECONE_INDEXES[indexName];\r\n        if (!indexConfig) {\r\n            throw new Error(`Invalid index name provided: ${indexName}`);\r\n        }\r\n\r\n        const url = `${indexConfig.apiEndpoint}/query`;\r\n        if (DEBUG) console.log(\"Making Pinecone API request to:\", url);\r\n\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'api-key': INTERNAL_API_KEYS.PINECONE_API_KEY,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                vector: embedding,\r\n                topK: numResults,\r\n                includeMetadata: true,\r\n                namespace: \"ns1\" // Assuming namespace is constant\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorText = await response.text().catch(() => \"Could not read error response body\");\r\n            console.error(\"Pinecone API error details:\", {\r\n                status: response.status,\r\n                statusText: response.statusText,\r\n                error: errorText\r\n            });\r\n            throw new Error(`Pinecone API error: ${response.status} ${response.statusText} - ${errorText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        if (DEBUG) console.log(\"Pinecone API response received\");\r\n\r\n        let matches = data.matches || [];\r\n\r\n        if (similarityThreshold !== null) {\r\n            matches = matches.filter(match => match.score >= similarityThreshold);\r\n        }\r\n\r\n        // Apply numResults limit *after* threshold filtering\r\n        matches = matches.slice(0, numResults);\r\n\r\n        // Extract text using the helper function\r\n        const cleanMatches = matches.map(match => extractTextFromJson(match)).filter(text => text !== \"\");\r\n\r\n        if (DEBUG) {\r\n            console.log(`Found ${cleanMatches.length} matches (after threshold/limit/extraction):`);\r\n            cleanMatches.forEach((text, i) => console.log(`  ${i + 1}: ${text.substring(0, 100)}...`));\r\n        }\r\n\r\n        return cleanMatches;\r\n\r\n    } catch (error) {\r\n        console.error(`Error during vector database query for index \"${indexName}\":`, error);\r\n        throw error; // Re-throw\r\n    }\r\n}\r\n\r\n\r\n// Helper function to extract text from Pinecone match JSON\r\nfunction extractTextFromJson(jsonInput) {\r\n   try {\r\n       // Input might already be an object if response was parsed\r\n       const jsonData = typeof jsonInput === 'string' ? JSON.parse(jsonInput) : jsonInput;\r\n\r\n       // Check common structures\r\n       if (jsonData?.metadata?.text) {\r\n           return jsonData.metadata.text;\r\n       }\r\n       // Fallback for older structures or direct text? (Less likely based on usage)\r\n       if (typeof jsonData?.text === 'string') {\r\n           return jsonData.text;\r\n       }\r\n\r\n       // Handle array case (though query response is usually object with 'matches')\r\n       if (Array.isArray(jsonData)) {\r\n           for (const item of jsonData) {\r\n               if (item?.metadata?.text) {\r\n                   return item.metadata.text; // Return first found\r\n               }\r\n           }\r\n       }\r\n\r\n       // If no text found\r\n       console.warn(\"Could not find 'text' field in metadata for match:\", JSON.stringify(jsonInput).substring(0, 100));\r\n       return \"\"; // Return empty string if text cannot be extracted\r\n\r\n   } catch (error) {\r\n       console.error(`Error processing JSON for text extraction: ${error.message}`);\r\n       // Log the problematic input for debugging\r\n       console.error(\"Input causing error:\", jsonInput);\r\n       return \"\"; // Return empty string on error\r\n   }\r\n}\r\n\r\n\r\n// Helper function to format JSON for prompts (handle potential errors)\r\nexport function safeJsonForPrompt(obj, readable = true) {\r\n    try {\r\n        if (!readable) {\r\n            // Simple stringify, remove potential noise, escape braces\r\n            let jsonString = JSON.stringify(obj);\r\n            // Remove empty values/metadata pairs if they exist and are noise\r\n            // Be cautious with overly broad replaces\r\n            // jsonString = jsonString.replace(/\"values\":\\s*\\[\\],\\s*\"metadata\":/g, '\"metadata\":'); // Example, adjust if needed\r\n            return jsonString\r\n                // .replace(/{/g, '\\\\u007B') // Escaping might not be needed depending on LLM\r\n                // .replace(/}/g, '\\\\u007D');\r\n        }\r\n\r\n        // Readable format (extract text, add score)\r\n        if (Array.isArray(obj)) {\r\n            return obj.map(item => {\r\n                let result = \"\";\r\n                if (item?.metadata?.text) {\r\n                    // Basic cleaning: replace newlines, trim\r\n                    const text = item.metadata.text.replace(/[\\r\\n]+/g, ' ').trim();\r\n                    result = text; // Use cleaned text directly\r\n                    // Example of splitting if structure was known:\r\n                    // const parts = text.split(';');\r\n                    // if (parts.length >= 1) result += parts[0].trim();\r\n                    // ... etc ...\r\n                } else {\r\n                    // Fallback if no text found\r\n                    result = JSON.stringify(item); // Stringify the whole item as fallback\r\n                }\r\n\r\n                if (item?.score) {\r\n                    result += `\\nSimilarity Score: ${item.score.toFixed(4)}`;\r\n                }\r\n                return result;\r\n            }).join('\\n\\n'); // Separate items clearly\r\n        }\r\n\r\n        // Fallback for non-array objects (less likely for lists of results)\r\n        return JSON.stringify(obj, null, 2); // Pretty print as fallback\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in safeJsonForPrompt:\", error);\r\n        // Return a safe representation of the error or the input\r\n        return `[Error formatting JSON: ${error.message}]`;\r\n    }\r\n}\r\n\r\n\r\n// Function: Handle Follow-Up Conversation\r\nexport async function handleFollowUpConversation(clientprompt, currentHistory) {\r\n    if (DEBUG) console.log(\"Processing follow-up question:\", clientprompt);\r\n    if (DEBUG) console.log(\"Using conversation history length:\", currentHistory.length);\r\n\r\n    // Ensure API keys are available\r\n    if (!INTERNAL_API_KEYS.OPENAI_API_KEY || !INTERNAL_API_KEYS.PINECONE_API_KEY) {\r\n        throw new Error(\"API keys not initialized for follow-up conversation.\");\r\n    }\r\n\r\n    // Load necessary prompts\r\n    const systemPrompt = await getSystemPromptFromFile('Followup_System');\r\n    const mainPromptText = await getSystemPromptFromFile('Encoder_Main'); // Assuming this is the 'MainPrompt' context needed\r\n\r\n     if (!systemPrompt || !mainPromptText) {\r\n         throw new Error(\"Failed to load required prompts for follow-up.\");\r\n     }\r\n\r\n    // Fetch context using vector DB queries\r\n    // These calls internally use createEmbedding (OpenAI key) and query (Pinecone key)\r\n    const trainingdataCall2 = await queryVectorDB({\r\n        queryPrompt: clientprompt,\r\n        similarityThreshold: .4,\r\n        indexName: 'call2trainingdata',\r\n        numResults: 3\r\n    });\r\n\r\n    const call2context = await queryVectorDB({\r\n        queryPrompt: clientprompt + safeJsonForPrompt(trainingdataCall2, false), // Append context for better query\r\n        similarityThreshold: .3,\r\n        indexName: 'call2context',\r\n        numResults: 5\r\n    });\r\n\r\n    const call1context = await queryVectorDB({\r\n        queryPrompt: clientprompt + safeJsonForPrompt(trainingdataCall2, false),\r\n        similarityThreshold: .3,\r\n        indexName: 'call1context',\r\n        numResults: 5\r\n    });\r\n\r\n    const codeOptions = await queryVectorDB({\r\n        queryPrompt: clientprompt + safeJsonForPrompt(trainingdataCall2, false) + safeJsonForPrompt(call1context, false),\r\n        indexName: 'codes',\r\n        numResults: 10,\r\n        similarityThreshold: .1\r\n    });\r\n\r\n    // Construct the prompt for the LLM\r\n    const followUpPrompt = `Client request: ${clientprompt}\\n` +\r\n                   `Main Prompt Context: ${mainPromptText}\\n` + // Use loaded main prompt text\r\n                   `Training Data Context: ${safeJsonForPrompt(trainingdataCall2, true)}\\n` + // Use readable format for prompt\r\n                   `Code Choosing Context: ${safeJsonForPrompt(call1context, true)}\\n` +\r\n                   `Code Editing Context: ${safeJsonForPrompt(call2context, true)}\\n` +\r\n                   `Relevant Code Options: ${safeJsonForPrompt(codeOptions, true)}`;\r\n\r\n    // Call the LLM (processPrompt uses OpenAI key internally)\r\n    const responseArray = await processPrompt({\r\n        userInput: followUpPrompt,\r\n        systemPrompt: systemPrompt,\r\n        model: GPT41,\r\n        temperature: 1,\r\n        history: currentHistory // Pass the existing history\r\n    });\r\n\r\n    // Update history (create new array, don't modify inplace)\r\n    const updatedHistory = [\r\n        ...currentHistory,\r\n        [\"human\", clientprompt],\r\n        [\"assistant\", responseArray.join(\"\\n\")] // Store response as single string\r\n    ];\r\n\r\n    // Persist updated history and analysis data (using localStorage helpers)\r\n    saveConversationHistory(updatedHistory); // Save the new history state\r\n    savePromptAnalysis(\r\n        clientprompt,\r\n        systemPrompt,\r\n        mainPromptText,\r\n        null, // No validation prompt info available here\r\n        null, // No validation prompt info available here\r\n        null, // No validation results available here\r\n        safeJsonForPrompt(call2context, false), // Save non-readable for potential re-use\r\n        safeJsonForPrompt(call1context, false),\r\n        safeJsonForPrompt(trainingdataCall2, false),\r\n        safeJsonForPrompt(codeOptions, false),\r\n        responseArray\r\n    );\r\n    saveTrainingData(clientprompt, responseArray);\r\n\r\n    if (DEBUG) console.log(\"Follow-up conversation processed. History length:\", updatedHistory.length);\r\n\r\n    // Return the response and the updated history\r\n    return { response: responseArray, history: updatedHistory };\r\n}\r\n\r\n\r\n// Function: Handle Initial Conversation\r\nexport async function handleInitialConversation(clientprompt) {\r\n    if (DEBUG) console.log(\"Processing initial question:\", clientprompt);\r\n\r\n     // Ensure API keys are available\r\n    if (!INTERNAL_API_KEYS.OPENAI_API_KEY) {\r\n        throw new Error(\"OpenAI API key not initialized for initial conversation.\");\r\n    }\r\n\r\n    // Load necessary prompts\r\n    const systemPrompt = await getSystemPromptFromFile('Encoder_System');\r\n    const mainPromptText = await getSystemPromptFromFile('Encoder_Main');\r\n\r\n     if (!systemPrompt || !mainPromptText) {\r\n         throw new Error(\"Failed to load required prompts for initial conversation.\");\r\n     }\r\n\r\n    if (DEBUG) console.log(\"SYSTEM PROMPT: \", systemPrompt ? systemPrompt.substring(0,100) + \"...\" : \"Not loaded\");\r\n    if (DEBUG) console.log(\"MAIN PROMPT: \", mainPromptText ? mainPromptText.substring(0,100) + \"...\" : \"Not loaded\");\r\n\r\n    // Construct the prompt for the first call (no vector DB context yet)\r\n    const initialCallPrompt = `Client request: ${clientprompt}\\n` +\r\n                           `Main Prompt: ${mainPromptText}`;\r\n\r\n    // Call the LLM (processPrompt uses OpenAI key internally)\r\n    const outputArray = await processPrompt({\r\n        userInput: initialCallPrompt,\r\n        systemPrompt: systemPrompt,\r\n        model: GPT41,\r\n        temperature: 1,\r\n        history: [] // No history for initial call\r\n    });\r\n\r\n    // Create the initial history\r\n    const initialHistory = [\r\n        [\"human\", clientprompt],\r\n        [\"assistant\", outputArray.join(\"\\n\")] // Store response as single string\r\n    ];\r\n\r\n    // Persist history and analysis data\r\n    saveConversationHistory(initialHistory);\r\n    savePromptAnalysis(\r\n        clientprompt,\r\n        systemPrompt,\r\n        mainPromptText,\r\n        null, null, null, // No validation info\r\n        \"\", \"\", \"\", \"\", // No vector DB context yet\r\n        outputArray\r\n    );\r\n    saveTrainingData(clientprompt, outputArray);\r\n\r\n    if (DEBUG) console.log(\"Initial conversation processed. History length:\", initialHistory.length);\r\n    if (DEBUG) console.log(\"Initial Response:\", outputArray);\r\n\r\n    // Return the response and the new history\r\n    return { response: outputArray, history: initialHistory };\r\n}\r\n\r\n// Main conversation handler - decides between initial and follow-up\r\n// Takes current history and returns { response, history }\r\nexport async function handleConversation(clientprompt, currentHistory) {\r\n    try {\r\n        const isFollowUp = currentHistory && currentHistory.length > 0;\r\n        if (isFollowUp) {\r\n            return await handleFollowUpConversation(clientprompt, currentHistory);\r\n        } else {\r\n            return await handleInitialConversation(clientprompt);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in conversation handling:\", error);\r\n        // Return error message and unchanged history\r\n        return {\r\n            response: [\"Error processing your request: \" + error.message],\r\n            history: currentHistory || [] // Return existing or empty history\r\n        };\r\n    }\r\n}\r\n\r\n\r\n// Function: Save prompt analysis data to localStorage\r\nfunction savePromptAnalysis(clientprompt, systemPrompt, mainPrompt, validationSystemPrompt, validationMainPrompt, validationResults, call2context, call1context, trainingdataCall2, codeOptions, outputArray) {\r\n    try {\r\n        const analysisData = {\r\n            clientRequest: clientprompt || \"\",\r\n            systemPrompt: systemPrompt || \"\",\r\n            mainPrompt: mainPrompt || \"\",\r\n            validationSystemPrompt: validationSystemPrompt || \"\",\r\n            validationMainPrompt: validationMainPrompt || \"\",\r\n            validationResults: validationResults || [],\r\n            call2context: call2context || \"\", // Store the potentially non-readable string used\r\n            call1context: call1context || \"\",\r\n            trainingdataCall2: trainingdataCall2 || \"\",\r\n            codeOptions: codeOptions || \"\",\r\n            outputArray: outputArray || []\r\n        };\r\n\r\n        localStorage.setItem('promptAnalysis', JSON.stringify(analysisData));\r\n        if (DEBUG) console.log('Prompt analysis saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving prompt analysis:\", error);\r\n    }\r\n}\r\n\r\n// Function: Save training data pair to localStorage\r\nfunction saveTrainingData(clientprompt, outputArray) {\r\n    try {\r\n        // Helper to clean text for storage\r\n        function cleanText(text) {\r\n            if (!text) return '';\r\n            // Convert non-strings (like arrays) to string first\r\n            const str = Array.isArray(text) ? JSON.stringify(text) : String(text);\r\n            return str.replace(/[\\r\\n\\t]+/g, ' ').trim(); // Replace newlines/tabs with space\r\n        }\r\n\r\n        const trainingData = {\r\n            prompt: cleanText(clientprompt),\r\n            // Ensure outputArray is stringified if it's an array\r\n            response: cleanText(outputArray)\r\n        };\r\n\r\n        localStorage.setItem('trainingData', JSON.stringify(trainingData));\r\n        if (DEBUG) console.log('Training data saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving training data:\", error);\r\n    }\r\n}\r\n\r\n\r\n// Function: Perform validation correction using LLM\r\n// Note: Assumes localStorage contains relevant context from previous calls\r\nexport async function validationCorrection(clientprompt, initialResponse, validationResults) {\r\n    try {\r\n         // Ensure API keys are available\r\n         if (!INTERNAL_API_KEYS.OPENAI_API_KEY) {\r\n            throw new Error(\"OpenAI API key not initialized for validation correction.\");\r\n        }\r\n\r\n        // Load context from localStorage (as per original logic)\r\n        // Consider passing these as arguments if localStorage access becomes problematic\r\n        const trainingData = localStorage.getItem('trainingData') || '{\"prompt\":\"\",\"response\":\"\"}'; // Provide default structure\r\n        const promptAnalysisData = JSON.parse(localStorage.getItem('promptAnalysis') || '{}');\r\n\r\n        // Load validation prompts\r\n        const validationSystemPrompt = await getSystemPromptFromFile('Validation_System');\r\n        const validationMainPrompt = await getSystemPromptFromFile('Validation_Main');\r\n\r\n        if (!validationSystemPrompt || !validationMainPrompt) {\r\n            throw new Error(\"Failed to load validation system or main prompt\");\r\n        }\r\n\r\n        // Format the initial response and validation results as strings\r\n        const responseString = Array.isArray(initialResponse) ? initialResponse.join(\"\\n\") : String(initialResponse);\r\n        const validationResultsString = Array.isArray(validationResults) ? validationResults.join(\"\\n\") : String(validationResults);\r\n\r\n        // Construct the correction prompt using loaded context\r\n        const correctionPrompt =\r\n            `Main Prompt: ${validationMainPrompt}\\n\\n` +\r\n            `Original User Input: ${clientprompt}\\n\\n` +\r\n            `Initial Response (to be corrected): ${responseString}\\n\\n` +\r\n            `Validation Errors Found: ${validationResultsString}\\n\\n` +\r\n            // Include context from the last analysis if available\r\n            `Training Data Example: ${trainingData}\\n\\n` + // Use loaded training data string\r\n            `Code Options Context: ${promptAnalysisData.codeOptions || \"Not available\"}\\n\\n` +\r\n            `Code Choosing Context: ${promptAnalysisData.call1context || \"Not available\"}\\n\\n` +\r\n            `Code Editing Context: ${promptAnalysisData.call2context || \"Not available\"}`;\r\n\r\n\r\n        if (DEBUG) {\r\n            console.log(\"====== VALIDATION CORRECTION INPUT ======\");\r\n            console.log(\"System Prompt:\", validationSystemPrompt.substring(0,100) + \"...\");\r\n            console.log(\"User Input Prompt (truncated):\", correctionPrompt.substring(0, 500) + \"...\");\r\n            console.log(\"=========================================\");\r\n        }\r\n\r\n        // Call LLM for correction (processPrompt uses OpenAI key)\r\n        // Pass an empty history, as correction likely doesn't need chat context\r\n        const correctedResponseArray = await processPrompt({\r\n            userInput: correctionPrompt,\r\n            systemPrompt: validationSystemPrompt,\r\n            model: GPT41,\r\n            temperature: 0.7, // Lower temperature for correction\r\n            history: []\r\n        });\r\n\r\n        // Save the output using the mock fs (as per original logic)\r\n        const correctionOutputPath = \"C:\\\\Users\\\\joeor\\\\Dropbox\\\\B - Freelance\\\\C_Projectify\\\\VanPC\\\\Training Data\\\\Main Script Training and Context Data\\\\validation_correction_output.txt\";\r\n        const correctedResponseString = Array.isArray(correctedResponseArray) ? correctedResponseArray.join(\"\\n\") : correctedResponseArray;\r\n        fs.writeFileSync(correctionOutputPath, correctedResponseString);\r\n\r\n        if (DEBUG) console.log(`Validation correction output saved via mock fs to ${correctionOutputPath}`);\r\n        if (DEBUG) console.log(\"Corrected Response:\", correctedResponseArray);\r\n\r\n        return correctedResponseArray; // Return the array format expected by caller\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in validation correction:\", error);\r\n        // console.error(error.stack); // Keep stack trace for detailed debugging\r\n        // Return an error message array, consistent with other function returns\r\n        return [\"Error during validation correction: \" + error.message];\r\n    }\r\n}\r\n\r\n// >>> ADDED: Global variable for AI Model Planner responses\r\nlet lastAIModelPlannerResponse = null; \r\n\r\n// >>> ADDED: Functions for Client Mode Chat\r\nfunction displayInClientChat(message, isUser) {\r\n    const chatLog = document.getElementById('chat-log-client');\r\n    const welcomeMessage = document.getElementById('welcome-message-client');\r\n    if (welcomeMessage) {\r\n        welcomeMessage.style.display = 'none';\r\n    }\r\n\r\n    const messageElement = document.createElement('div');\r\n    messageElement.className = `chat-message ${isUser ? 'user-message' : 'assistant-message'}`;\r\n    \r\n    const contentElement = document.createElement('p');\r\n    contentElement.className = 'message-content';\r\n    \r\n    if (typeof message === 'string') {\r\n        contentElement.textContent = message;\r\n    } else if (Array.isArray(message)) { // Assuming array of strings for text\r\n        contentElement.textContent = message.join('\\n');\r\n    } else if (typeof message === 'object' && message !== null) { // For JSON objects\r\n        contentElement.textContent = JSON.stringify(message, null, 2);\r\n        // Optionally, add a class or style for preformatted JSON\r\n        contentElement.style.whiteSpace = 'pre-wrap'; \r\n    } else {\r\n        contentElement.textContent = String(message); // Fallback\r\n    }\r\n    \r\n    messageElement.appendChild(contentElement);\r\n    chatLog.appendChild(messageElement);\r\n    chatLog.scrollTop = chatLog.scrollHeight;\r\n}\r\n\r\nfunction setClientLoadingButton(isLoading) {\r\n    const sendButton = document.getElementById('send-client');\r\n    const loadingAnimation = document.getElementById('loading-animation-client');\r\n\r\n    if (sendButton) {\r\n        sendButton.disabled = isLoading;\r\n    }\r\n    if (loadingAnimation) {\r\n        loadingAnimation.style.display = isLoading ? 'flex' : 'none';\r\n    }\r\n}\r\n\r\nasync function handleClientModeSend() {\r\n    const userInputElement = document.getElementById('user-input-client');\r\n    const userInput = userInputElement.value.trim();\r\n\r\n    if (!userInput) {\r\n        // Potentially show a message to the user, but for now, just log and return\r\n        console.warn(\"Client mode: User input is empty.\");\r\n        return;\r\n    }\r\n\r\n    displayInClientChat(userInput, true);\r\n    userInputElement.value = '';\r\n    setClientLoadingButton(true);\r\n\r\n    try {\r\n        const result = await handleAIModelPlannerConversation(userInput);\r\n        lastAIModelPlannerResponse = result.response; // Store the raw response\r\n\r\n        // Display logic handles string, array, or object responses\r\n        displayInClientChat(result.response, false);\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in client mode conversation:\", error);\r\n        displayInClientChat(`Error: ${error.message}`, false);\r\n    } finally {\r\n        setClientLoadingButton(false);\r\n    }\r\n}\r\n\r\nfunction handleClientModeResetChat() {\r\n    const chatLog = document.getElementById('chat-log-client');\r\n    const welcomeMessage = document.getElementById('welcome-message-client');\r\n    \r\n    chatLog.innerHTML = ''; // Clear existing messages\r\n    if (welcomeMessage) {\r\n        // Re-add welcome message or set its display to block\r\n        const newWelcome = document.createElement('div');\r\n        newWelcome.id = 'welcome-message-client';\r\n        newWelcome.className = 'welcome-message';\r\n        newWelcome.innerHTML = '<h1>Ask me anything (Client Mode)</h1>';\r\n        chatLog.appendChild(newWelcome);\r\n    }\r\n    \r\n    resetAIModelPlannerConversation(); // Reset the conversation history in the planner\r\n    lastAIModelPlannerResponse = null;\r\n    document.getElementById('user-input-client').value = '';\r\n    console.log(\"Client mode chat reset.\");\r\n}\r\n\r\n// These functions are placeholders for client mode; actual Excel/editor interaction might differ or be disabled.\r\nfunction handleClientModeWriteToExcel() {\r\n    if (!lastAIModelPlannerResponse) {\r\n        displayInClientChat(\"No response to write to Excel.\", false);\r\n        return;\r\n    }\r\n    // For now, just log it or display a message. \r\n    // Actual Excel writing might be complex if it's JSON.\r\n    let contentToWrite = \"\";\r\n    if (typeof lastAIModelPlannerResponse === 'object') {\r\n        contentToWrite = JSON.stringify(lastAIModelPlannerResponse, null, 2);\r\n    } else if (Array.isArray(lastAIModelPlannerResponse)) {\r\n        contentToWrite = lastAIModelPlannerResponse.join(\"\\n\");\r\n    } else {\r\n        contentToWrite = String(lastAIModelPlannerResponse);\r\n    }\r\n    console.log(\"Client Mode - Write to Excel (Placeholder):\\n\", contentToWrite);\r\n    displayInClientChat(\"Write to Excel (Placeholder): Response logged to console. Actual Excel writing depends on format.\", false);\r\n}\r\n\r\nfunction handleClientModeInsertToEditor() {\r\n    if (!lastAIModelPlannerResponse) {\r\n        displayInClientChat(\"No response to insert into editor.\", false);\r\n        return;\r\n    }\r\n    let contentToInsert = \"\";\r\n     if (typeof lastAIModelPlannerResponse === 'object') {\r\n        contentToInsert = JSON.stringify(lastAIModelPlannerResponse, null, 2);\r\n    } else if (Array.isArray(lastAIModelPlannerResponse)) {\r\n        contentToInsert = lastAIModelPlannerResponse.join(\"\\n\");\r\n    } else {\r\n        contentToInsert = String(lastAIModelPlannerResponse);\r\n    }\r\n    console.log(\"Client Mode - Insert to Editor (Placeholder):\\n\", contentToInsert);\r\n    displayInClientChat(\"Insert to Editor (Placeholder): Response logged to console. Actual editor insertion depends on context.\", false);\r\n}\r\n\r\n\r\nOffice.onReady(async (info) => {\r\n  if (info.host === Office.HostType.Excel) {\r\n    // ... existing setup for developer mode buttons, API keys, etc. ...\r\n    \r\n    // Initialize API Keys (calls setAIModelPlannerOpenApiKey inside)\r\n    try {\r\n        await initializeAPIKeys();\r\n    } catch (error) {\r\n        console.error(\"Failed to initialize API keys on startup:\", error);\r\n        // Potentially show error to user\r\n    }\r\n\r\n    // --- SETUP FOR CLIENT MODE UI ---\r\n    // Assign event handlers from AIModelPlanner.js to client mode buttons\r\n    const sendClientButton = document.getElementById('send-client');\r\n    if (sendClientButton) sendClientButton.onclick = plannerHandleSend;\r\n\r\n    const resetClientChatButton = document.getElementById('reset-chat-client');\r\n    if (resetClientChatButton) resetClientChatButton.onclick = plannerHandleReset;\r\n    \r\n    const writeToExcelClientButton = document.getElementById('write-to-excel-client');\r\n    if (writeToExcelClientButton) writeToExcelClientButton.onclick = plannerHandleWriteToExcel;\r\n\r\n    const insertToEditorClientButton = document.getElementById('insert-to-editor-client');\r\n    if (insertToEditorClientButton) insertToEditorClientButton.onclick = plannerHandleInsertToEditor;\r\n    \r\n    const userInputClient = document.getElementById('user-input-client');\r\n    if (userInputClient) {\r\n        userInputClient.addEventListener('keypress', function(event) {\r\n            if (event.key === 'Enter' && !event.shiftKey) {\r\n                event.preventDefault(); \r\n                if (plannerHandleSend) plannerHandleSend(); // Call the imported handler\r\n            }\r\n        });\r\n    }\r\n    // --- END CLIENT MODE UI SETUP ---\r\n\r\n    // Load developer chat history\r\n    // conversationHistory = loadConversationHistory(); // Assuming loadConversationHistory is for dev chat\r\n    // ... display developer chat history ...\r\n\r\n    // Startup Menu Logic (assuming this is still part of AIcalls.js)\r\n    const startupMenu = document.getElementById('startup-menu');\r\n    const developerModeButton = document.getElementById('developer-mode-button');\r\n    const clientModeButton = document.getElementById('client-mode-button');\r\n    const appBody = document.getElementById('app-body');\r\n    const clientModeView = document.getElementById('client-mode-view');\r\n\r\n    function showDeveloperModeView() { // Renamed to avoid conflict if global\r\n      if (startupMenu) startupMenu.style.display = 'none';\r\n      if (appBody) appBody.style.display = 'flex'; \r\n      if (clientModeView) clientModeView.style.display = 'none';\r\n      console.log(\"Developer Mode view activated\");\r\n    }\r\n\r\n    function showClientModeView() { // Renamed\r\n      if (startupMenu) startupMenu.style.display = 'none';\r\n      if (appBody) appBody.style.display = 'none';\r\n      if (clientModeView) clientModeView.style.display = 'flex';\r\n      console.log(\"Client Mode view activated\");\r\n    }\r\n    \r\n    function showStartupMenuView() { // Renamed\r\n        if (startupMenu) startupMenu.style.display = 'flex';\r\n        if (appBody) appBody.style.display = 'none';\r\n        if (clientModeView) clientModeView.style.display = 'none';\r\n        console.log(\"Startup Menu view activated\");\r\n    }\r\n\r\n    if (developerModeButton) developerModeButton.onclick = showDeveloperModeView;\r\n    if (clientModeButton) clientModeButton.onclick = showClientModeView;\r\n\r\n    const backToMenuDevButton = document.getElementById('back-to-menu-dev-button');\r\n    if (backToMenuDevButton) backToMenuDevButton.onclick = showStartupMenuView;\r\n    const backToMenuClientButton = document.getElementById('back-to-menu-client-button');\r\n    if (backToMenuClientButton) backToMenuClientButton.onclick = showStartupMenuView;\r\n    \r\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\r\n    if (startupMenu) startupMenu.style.display = \"flex\"; // Show startup menu first\r\n    if (appBody) appBody.style.display = \"none\";\r\n    if (clientModeView) clientModeView.style.display = \"none\";\r\n\r\n    // ... any other existing Office.onReady logic for developer mode ...\r\n  }\r\n});\r\n\r\n// NEW FUNCTION to process text input like handleSend but without UI and main history side effects\r\nexport async function getAICallsProcessedResponse(userInputString) {\r\n    if (DEBUG) console.log(\"[getAICallsProcessedResponse] Processing input:\", userInputString.substring(0, 100) + \"...\");\r\n\r\n    try {\r\n        // 1. Structure database queries\r\n        if (DEBUG) console.log(\"[getAICallsProcessedResponse] Calling structureDatabasequeries...\");\r\n        const dbResults = await structureDatabasequeries(userInputString);\r\n        if (DEBUG) console.log(\"[getAICallsProcessedResponse] structureDatabasequeries completed. Results:\", dbResults);\r\n\r\n        if (!dbResults || !Array.isArray(dbResults)) {\r\n            console.error(\"[getAICallsProcessedResponse] Invalid database results:\", dbResults);\r\n            throw new Error(\"Failed to get valid database results from structureDatabasequeries\");\r\n        }\r\n\r\n        // 2. Format database results into an enhanced prompt\r\n        const plainTextResults = dbResults.map(result => {\r\n            if (!result) return \"No results found for a query\";\r\n            return `Query: ${result.query || 'No query'}\\n` +\r\n                   `Training Data:\\n${(result.trainingData || []).join('\\n')}\\n` +\r\n                   `Code Options:\\n${(result.codeOptions || []).join('\\n')}\\n` +\r\n                   `Code Choosing Context:\\n${(result.call1Context || []).join('\\n')}\\n` +\r\n                   `Code Editing Context:\\n${(result.call2Context || []).join('\\n')}\\n` +\r\n                   `---\\n`;\r\n        }).join('\\n');\r\n\r\n        const enhancedPrompt = `Client request: ${userInputString}\\n\\nDatabase Results:\\n${plainTextResults}`;\r\n        if (DEBUG) console.log(\"[getAICallsProcessedResponse] Enhanced prompt created:\", enhancedPrompt.substring(0, 200) + \"...\");\r\n\r\n        // 3. Call the AI using processPrompt (to avoid main history side effects of handleConversation)\r\n        if (DEBUG) console.log(\"[getAICallsProcessedResponse] Loading system and main prompts for AI call...\");\r\n        const systemPrompt = await getSystemPromptFromFile('Encoder_System');\r\n        const mainPromptText = await getSystemPromptFromFile('Encoder_Main');\r\n\r\n        if (!systemPrompt || !mainPromptText) {\r\n            throw new Error(\"[getAICallsProcessedResponse] Failed to load 'Encoder_System' or 'Encoder_Main' prompt.\");\r\n        }\r\n        \r\n        const combinedInputForAI = `Client request: ${enhancedPrompt}\\nMain Prompt: ${mainPromptText}`; // This matches how handleInitialConversation constructs it\r\n        if (DEBUG) console.log(\"[getAICallsProcessedResponse] Calling processPrompt...\");\r\n\r\n        let responseArray = await processPrompt({\r\n            userInput: combinedInputForAI,\r\n            systemPrompt: systemPrompt,\r\n            model: GPT41, // Using the same model as in other parts\r\n            temperature: 1, // Consistent temperature\r\n            history: [] // Treat each call as independent for this processing\r\n        });\r\n        if (DEBUG) console.log(\"[getAICallsProcessedResponse] processPrompt completed. Response:\", responseArray);\r\n\r\n        // 4. Validate the response\r\n        if (DEBUG) console.log(\"[getAICallsProcessedResponse] Validating response array...\");\r\n        const validationErrors = await validateCodeStrings(responseArray);\r\n        if (DEBUG) console.log(\"[getAICallsProcessedResponse] Validation completed. Errors:\", validationErrors);\r\n\r\n        // 5. Perform validation correction if needed\r\n        if (validationErrors && validationErrors.length > 0) {\r\n            if (DEBUG) console.log(\"[getAICallsProcessedResponse] Validation errors found. Performing correction...\");\r\n            responseArray = await validationCorrection(userInputString, responseArray, validationErrors);\r\n            if (DEBUG) console.log(\"[getAICallsProcessedResponse] Validation correction completed. Corrected response:\", responseArray);\r\n        }\r\n\r\n        return responseArray;\r\n\r\n    } catch (error) {\r\n        console.error(\"[getAICallsProcessedResponse] Error during processing:\", error);\r\n        // Return an error message array, consistent with other function returns\r\n        return [`Error processing tab description: ${error.message}`];\r\n    }\r\n}\r\n\r\n","import { validateCodeStrings } from './Validation.js';\r\n\r\nimport { populateCodeCollection, exportCodeCollectionToText, runCodes, processAssumptionTabs, collapseGroupingsAndNavigateToFinancials, hideColumnsAndNavigate, handleInsertWorksheetsFromBase64 } from './CodeCollection.js';\r\n// >>> ADDED: Import the new validation function\r\nimport { validateCodeStringsForRun } from './Validation.js';\r\n// >>> ADDED: Import the tab string generator function\r\nimport { generateTabString } from './IndexWorksheet.js';\r\n// >>> UPDATED: Import structureDatabasequeries from the helper file\r\nimport { structureDatabasequeries } from './StructureHelper.js';\r\n// >>> ADDED: Import setAPIKeys function from AIcalls\r\nimport { setAPIKeys } from './AIcalls.js';\r\n// >>> ADDED: Import callOpenAI function from AIcalls\r\nimport { callOpenAI } from './AIcalls.js';\r\n// >>> ADDED: Import conversation history functions from AIcalls\r\nimport { saveConversationHistory, loadConversationHistory } from './AIcalls.js';\r\n// >>> ADDED: Import prompt loading functions from AIcalls\r\nimport { loadPromptFromFile, getSystemPromptFromFile } from './AIcalls.js';\r\n// >>> ADDED: Import processPrompt function from AIcalls\r\nimport { processPrompt } from './AIcalls.js';\r\n// >>> ADDED: Import createEmbedding function from AIcalls\r\nimport { createEmbedding } from './AIcalls.js';\r\n// >>> ADDED: Import queryVectorDB function from AIcalls\r\nimport { queryVectorDB } from './AIcalls.js';\r\n// >>> ADDED: Import safeJsonForPrompt function from AIcalls\r\nimport { safeJsonForPrompt } from './AIcalls.js';\r\n// >>> ADDED: Import conversation handling and validation functions from AIcalls\r\n// Make sure handleConversation is included here\r\nimport { handleFollowUpConversation, handleInitialConversation, handleConversation, validationCorrection } from './AIcalls.js';\r\n// Add the codeStrings variable with the specified content\r\n// REMOVED hardcoded codeStrings variable\r\n\r\nimport { API_KEYS as configApiKeys } from '../../config.js'; // Assuming config.js exports API_KEYS\r\n\r\n//Debugging Toggle\r\nconst DEBUG = true;\r\n\r\n// Variable to store loaded code strings\r\nlet loadedCodeStrings = \"\";\r\n\r\n// Variable to store the parsed code database\r\nlet codeDatabase = [];\r\n\r\n// API keys storage - initialized by initializeAPIKeys\r\nlet INTERNAL_API_KEYS = {\r\n  OPENAI_API_KEY: \"\",\r\n  PINECONE_API_KEY: \"\"\r\n};\r\n\r\n// >>> MOVED & MODIFIED: Ensure truly global scope for cursor position\r\nvar lastEditorCursorPosition = null;\r\n\r\n// Function to load the code string database\r\nasync function loadCodeDatabase() {\r\n  try {\r\n    console.log(\"Loading code database...\");\r\n    const response = await fetch('https://localhost:3002/assets/codestringDB.txt');\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to load codestringDB.txt: ${response.statusText}`);\r\n    }\r\n    const text = await response.text();\r\n    const lines = text.split(/[\\r\\n]+/).filter(line => line.trim() !== ''); // Split by lines and remove empty ones\r\n\r\n    codeDatabase = lines.map(line => {\r\n      const parts = line.split('\\t'); // Assuming tab-separated\r\n      if (parts.length >= 2) {\r\n        return { name: parts[0].trim(), code: parts[1].trim() };\r\n      }\r\n      console.warn(`Skipping malformed line in codestringDB.txt: ${line}`);\r\n      return null;\r\n    }).filter(item => item !== null); // Filter out null entries from malformed lines\r\n\r\n    console.log(`Code database loaded successfully with ${codeDatabase.length} entries.`);\r\n    if (DEBUG && codeDatabase.length > 0) {\r\n        console.log(\"First few code database entries:\", codeDatabase.slice(0, 5));\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error(\"Error loading code database:\", error);\r\n    showError(\"Failed to load code database. Search functionality will be unavailable.\");\r\n    codeDatabase = []; // Ensure it's empty on error\r\n  }\r\n}\r\n\r\n// Function to load API keys from a config file\r\n// This allows the keys to be stored in a separate file that's .gitignored\r\nexport async function initializeAPIKeys() {\r\n  try {\r\n    console.log(\"Initializing API keys from AIcalls.js...\");\r\n\r\n    // Use keys from imported config.js if available\r\n    if (configApiKeys?.OPENAI_API_KEY) {\r\n        INTERNAL_API_KEYS.OPENAI_API_KEY = configApiKeys.OPENAI_API_KEY;\r\n        console.log(\"OpenAI API key loaded from config.js\");\r\n    } else {\r\n         console.warn(\"OpenAI API key not found in config.js.\");\r\n    }\r\n\r\n    if (configApiKeys?.PINECONE_API_KEY) {\r\n        INTERNAL_API_KEYS.PINECONE_API_KEY = configApiKeys.PINECONE_API_KEY;\r\n        console.log(\"Pinecone API key loaded from config.js\");\r\n    } else {\r\n         console.warn(\"Pinecone API key not found in config.js.\");\r\n    }\r\n\r\n    // Fallback: try fetching from the old location if config.js didn't provide them\r\n    if (!INTERNAL_API_KEYS.OPENAI_API_KEY || !INTERNAL_API_KEYS.PINECONE_API_KEY) {\r\n        console.log(\"Attempting fallback API key loading from https://localhost:3002/config.js\");\r\n        try {\r\n            const configResponse = await fetch('https://localhost:3002/config.js');\r\n            if (configResponse.ok) {\r\n                const configText = await configResponse.text();\r\n                // Extract keys from the config text using regex\r\n                const openaiKeyMatch = configText.match(/OPENAI_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n                const pineconeKeyMatch = configText.match(/PINECONE_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n\r\n                if (!INTERNAL_API_KEYS.OPENAI_API_KEY && openaiKeyMatch && openaiKeyMatch[1]) {\r\n                    INTERNAL_API_KEYS.OPENAI_API_KEY = openaiKeyMatch[1];\r\n                    console.log(\"OpenAI API key loaded via fetch fallback.\");\r\n                }\r\n\r\n                if (!INTERNAL_API_KEYS.PINECONE_API_KEY && pineconeKeyMatch && pineconeKeyMatch[1]) {\r\n                    INTERNAL_API_KEYS.PINECONE_API_KEY = pineconeKeyMatch[1];\r\n                    console.log(\"Pinecone API key loaded via fetch fallback.\");\r\n                }\r\n            } else {\r\n                 console.warn(\"Fallback fetch for config.js failed or returned non-OK status.\");\r\n            }\r\n        } catch (error) {\r\n            console.warn(\"Could not load config.js via fetch fallback:\", error);\r\n        }\r\n    }\r\n\r\n    // Add debug logging with secure masking of keys\r\n    console.log(\"Loaded API Keys (AIcalls.js):\");\r\n    console.log(\"  OPENAI_API_KEY:\", INTERNAL_API_KEYS.OPENAI_API_KEY ?\r\n      `${INTERNAL_API_KEYS.OPENAI_API_KEY.substring(0, 3)}...${INTERNAL_API_KEYS.OPENAI_API_KEY.substring(INTERNAL_API_KEYS.OPENAI_API_KEY.length - 3)}` :\r\n      \"Not found\");\r\n    console.log(\"  PINECONE_API_KEY:\", INTERNAL_API_KEYS.PINECONE_API_KEY ?\r\n      `${INTERNAL_API_KEYS.PINECONE_API_KEY.substring(0, 3)}...${INTERNAL_API_KEYS.PINECONE_API_KEY.substring(INTERNAL_API_KEYS.PINECONE_API_KEY.length - 3)}` :\r\n      \"Not found\");\r\n\r\n    const keysFound = !!(INTERNAL_API_KEYS.OPENAI_API_KEY && INTERNAL_API_KEYS.PINECONE_API_KEY);\r\n    console.log(\"API Keys Initialized:\", keysFound);\r\n    // Return a copy to prevent external modification of the internal state\r\n    return { ...INTERNAL_API_KEYS };\r\n\r\n  } catch (error) {\r\n    console.error(\"Error initializing API keys:\", error);\r\n    // Return empty keys on error\r\n    return { OPENAI_API_KEY: \"\", PINECONE_API_KEY: \"\" };\r\n  }\r\n}\r\n\r\n// Conversation history storage\r\nlet conversationHistory = [];\r\n\r\n// Add this variable to track if the current message is a response\r\nlet isResponse = false;\r\n\r\n// >>> ADDED: State for Client Chat\r\nlet conversationHistoryClient = [];\r\nlet lastResponseClient = null;\r\n// <<< END ADDED\r\n\r\n// Add this function at the top level\r\nfunction showMessage(message) {\r\n    const messageDiv = document.createElement('div');\r\n    messageDiv.style.color = 'green';\r\n    messageDiv.style.padding = '10px';\r\n    messageDiv.style.margin = '10px';\r\n    messageDiv.style.border = '1px solid green';\r\n    messageDiv.style.borderRadius = '4px';\r\n    messageDiv.textContent = message;\r\n    \r\n    const appBody = document.getElementById('app-body');\r\n    appBody.insertBefore(messageDiv, appBody.firstChild);\r\n    \r\n    // Remove the message after 5 seconds\r\n    setTimeout(() => {\r\n        messageDiv.remove();\r\n    }, 5000);\r\n}\r\n\r\n// Add this function at the top level\r\nfunction showError(message) {\r\n    const errorDiv = document.createElement('div');\r\n    errorDiv.style.color = 'red';\r\n    errorDiv.style.padding = '10px';\r\n    errorDiv.style.margin = '10px';\r\n    errorDiv.style.border = '1px solid red';\r\n    errorDiv.style.borderRadius = '4px';\r\n    errorDiv.textContent = `Error: ${message}`;\r\n    \r\n    const appBody = document.getElementById('app-body');\r\n    appBody.insertBefore(errorDiv, appBody.firstChild);\r\n    \r\n    // Remove the error message after 5 seconds\r\n    setTimeout(() => {\r\n        errorDiv.remove();\r\n    }, 5000);\r\n}\r\n\r\n// Add this function at the top level\r\nfunction setButtonLoading(isLoading) {\r\n    console.log(`[setButtonLoading] Called with isLoading: ${isLoading}`);\r\n    const sendButton = document.getElementById('send');\r\n    const loadingAnimation = document.getElementById('loading-animation');\r\n    \r\n    if (sendButton) {\r\n        sendButton.disabled = isLoading;\r\n    } else {\r\n        console.warn(\"[setButtonLoading] Could not find send button with id='send'\");\r\n    }\r\n    \r\n    if (loadingAnimation) {\r\n        const newDisplay = isLoading ? 'flex' : 'none';\r\n        console.log(`[setButtonLoading] Found loadingAnimation element. Setting display to: ${newDisplay}`);\r\n        loadingAnimation.style.display = newDisplay;\r\n    } else {\r\n        console.error(\"[setButtonLoading] Could not find loading animation element with id='loading-animation'\");\r\n    }\r\n}\r\n\r\n// >>> ADDED: setButtonLoading for Client Mode\r\nfunction setButtonLoadingClient(isLoading) {\r\n    console.log(`[setButtonLoadingClient] Called with isLoading: ${isLoading}`);\r\n    const sendButton = document.getElementById('send-client');\r\n    const loadingAnimation = document.getElementById('loading-animation-client');\r\n    \r\n    if (sendButton) {\r\n        sendButton.disabled = isLoading;\r\n    } else {\r\n        console.warn(\"[setButtonLoadingClient] Could not find send button with id='send-client'\");\r\n    }\r\n    \r\n    if (loadingAnimation) {\r\n        const newDisplay = isLoading ? 'flex' : 'none';\r\n        console.log(`[setButtonLoadingClient] Found loadingAnimation element. Setting display to: ${newDisplay}`);\r\n        loadingAnimation.style.display = newDisplay;\r\n    } else {\r\n        console.error(\"[setButtonLoadingClient] Could not find loading animation element with id='loading-animation-client'\");\r\n    }\r\n}\r\n// <<< END ADDED\r\n\r\n// Add this variable to store the last response\r\nlet lastResponse = null;\r\n\r\n// Add this function to write to Excel\r\nasync function writeToExcel() {\r\n    if (!lastResponse) {\r\n        showError('No response to write to Excel');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        await Excel.run(async (context) => {\r\n            const range = context.workbook.getSelectedRange();\r\n            range.load(\"rowIndex\");\r\n            range.load(\"columnIndex\");\r\n            await context.sync();\r\n            \r\n            const startRow = range.rowIndex;\r\n            const startCol = range.columnIndex;\r\n            \r\n            // Split the response into individual code strings\r\n            let codeStrings = [];\r\n            if (Array.isArray(lastResponse)) {\r\n                // Join the array elements and then split by brackets\r\n                const fullText = lastResponse.join(' ');\r\n                codeStrings = fullText.match(/<[^>]+>/g) || [];\r\n            } else if (typeof lastResponse === 'string') {\r\n                codeStrings = lastResponse.match(/<[^>]+>/g) || [];\r\n            }\r\n            \r\n            if (codeStrings.length === 0) {\r\n                throw new Error(\"No valid code strings found in response\");\r\n            }\r\n            \r\n            // Create a range that spans all the rows we need\r\n            const targetRange = range.worksheet.getRangeByIndexes(\r\n                startRow,\r\n                startCol,\r\n                codeStrings.length,\r\n                1\r\n            );\r\n            \r\n            // Set all values at once, with each code string in its own row\r\n            targetRange.values = codeStrings.map(str => [str]);\r\n            \r\n            await context.sync();\r\n            console.log(\"Response written to Excel\");\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error writing to Excel:\", error);\r\n        showError(error.message);\r\n    }\r\n}\r\n\r\n// Add this function to append messages to the chat log\r\n// >>> REFACTORED: to accept chatLogId and welcomeMessageId\r\nfunction appendMessage(content, isUser = false, chatLogId = 'chat-log', welcomeMessageId = 'welcome-message') {\r\n    const chatLog = document.getElementById(chatLogId);\r\n    const welcomeMessage = document.getElementById(welcomeMessageId);\r\n\r\n    if (!chatLog) {\r\n        console.error(`[appendMessage] Chat log element with ID '${chatLogId}' not found.`);\r\n        return;\r\n    }\r\n    \r\n    // Hide welcome message when first message is added\r\n    if (welcomeMessage) {\r\n        welcomeMessage.style.display = 'none';\r\n    }\r\n    \r\n    const messageDiv = document.createElement('div');\r\n    messageDiv.className = `chat-message ${isUser ? 'user-message' : 'assistant-message'}`;\r\n    \r\n    const messageContent = document.createElement('p');\r\n    messageContent.className = 'message-content';\r\n    messageContent.textContent = content;\r\n    \r\n    messageDiv.appendChild(messageContent);\r\n    chatLog.appendChild(messageDiv);\r\n    \r\n    // Scroll to bottom\r\n    chatLog.scrollTop = chatLog.scrollHeight;\r\n}\r\n\r\n// Modify the handleSend function\r\nasync function handleSend() {\r\n    const userInput = document.getElementById('user-input').value.trim();\r\n    \r\n    if (!userInput) {\r\n        showError('Please enter a request');\r\n        return;\r\n    }\r\n\r\n    // Check if this is a response to a previous message\r\n    isResponse = conversationHistory.length > 0;\r\n\r\n    // Add user message to chat\r\n    appendMessage(userInput, true);\r\n    \r\n    // Clear input\r\n    document.getElementById('user-input').value = '';\r\n\r\n    setButtonLoading(true);\r\n    try {\r\n        // Process the text through the main function\r\n        console.log(\"Starting structureDatabasequeries\");\r\n        const dbResults = await structureDatabasequeries(userInput);\r\n        console.log(\"Database queries completed\");\r\n        \r\n        if (!dbResults || !Array.isArray(dbResults)) {\r\n            console.error(\"Invalid database results:\", dbResults);\r\n            throw new Error(\"Failed to get valid database results\");\r\n        }\r\n        \r\n        // Format the database results into a string\r\n        const plainTextResults = dbResults.map(result => {\r\n            if (!result) return \"No results found\";\r\n            \r\n            return `Query: ${result.query || 'No query'}\\n` +\r\n                   `Training Data:\\n${(result.trainingData || []).join('\\n')}\\n` +\r\n                   `Code Options:\\n${(result.codeOptions || []).join('\\n')}\\n` +\r\n                   `Code Choosing Context:\\n${(result.call1Context || []).join('\\n')}\\n` +\r\n                   `Code Editing Context:\\n${(result.call2Context || []).join('\\n')}\\n` +\r\n                   `---\\n`;\r\n        }).join('\\n');\r\n\r\n        const enhancedPrompt = `Client Request: ${userInput}\\n\\nDatabase Results:\\n${plainTextResults}`;\r\n        console.log(\"Enhanced prompt created\");\r\n        console.log(\"Enhanced prompt:\", enhancedPrompt);\r\n\r\n        console.log(\"Starting handleConversation\");\r\n        let conversationResult = await handleConversation(enhancedPrompt, isResponse); // Store the whole result object\r\n        console.log(\"Conversation completed\");\r\n        console.log(\"Initial Conversation Result:\", conversationResult); // Log the whole object\r\n\r\n        // Extract the response array and update history\r\n        let responseArray = conversationResult.response;\r\n        conversationHistory = conversationResult.history; // Update global history if needed (check AIcalls.js if it manages history internally)\r\n\r\n        // Validate the extracted response array\r\n        if (!responseArray || !Array.isArray(responseArray)) {\r\n            console.error(\"Invalid response array extracted:\", responseArray);\r\n            throw new Error(\"Failed to get valid response array from conversation result\");\r\n        }\r\n\r\n        // Run validation and correction if needed (using the extracted array)\r\n        console.log(\"Starting validation\");\r\n        const validationResults = await validateCodeStrings(responseArray);\r\n        console.log(\"Validation completed:\", validationResults);\r\n\r\n        if (validationResults && validationResults.length > 0) {\r\n            console.log(\"Starting validation correction\");\r\n            // Pass the extracted array to validationCorrection\r\n            responseArray = await validationCorrection(userInput, responseArray, validationResults);\r\n            console.log(\"Validation correction completed\");\r\n        }\r\n\r\n        // Store the final response array for Excel writing\r\n        lastResponse = responseArray;\r\n\r\n        // Add assistant message to chat (using the extracted array)\r\n        appendMessage(responseArray.join('\\n'));\r\n        \r\n    } catch (error) {\r\n        console.error(\"Error in handleSend:\", error);\r\n        showError(error.message);\r\n        // Add error message to chat\r\n        appendMessage(`Error: ${error.message}`);\r\n    } finally {\r\n        setButtonLoading(false);\r\n    }\r\n}\r\n\r\n// >>> ADDED: handleSend for Client Mode (Simplified)\r\nasync function handleSendClient() {\r\n    const userInputElement = document.getElementById('user-input-client');\r\n    if (!userInputElement) {\r\n        console.error(\"[handleSendClient] User input element 'user-input-client' not found.\");\r\n        return;\r\n    }\r\n    const userInput = userInputElement.value.trim();\r\n    \r\n    if (!userInput) {\r\n        alert('Please enter a request (Client Mode)'); \r\n        return;\r\n    }\r\n\r\n    // >>> ADDED: Hide header and activate conversation layout on first message\r\n    const clientHeader = document.getElementById('client-mode-header');\r\n    const clientChatContainer = document.getElementById('client-chat-container');\r\n    const chatLogClient = document.getElementById('chat-log-client');\r\n    \r\n    if (clientHeader && !clientHeader.classList.contains('hidden')) {\r\n        clientHeader.classList.add('hidden');\r\n        // After transition, completely hide it\r\n        setTimeout(() => {\r\n            clientHeader.style.display = 'none';\r\n        }, 300);\r\n    }\r\n    \r\n    if (clientChatContainer && !clientChatContainer.classList.contains('conversation-active')) {\r\n        clientChatContainer.classList.add('conversation-active');\r\n    }\r\n    \r\n    if (chatLogClient) {\r\n        chatLogClient.style.display = 'block';\r\n    }\r\n    // <<< END ADDED\r\n\r\n    // Append user's message to the chat log\r\n    appendMessage(userInput, true, 'chat-log-client', 'welcome-message-client');\r\n    userInputElement.value = ''; // Clear the input field\r\n    setButtonLoadingClient(true);\r\n\r\n    // Get the chat log and welcome message elements\r\n    const welcomeMessageClient = document.getElementById('welcome-message-client');\r\n\r\n    if (!chatLogClient) {\r\n        console.error(\"[handleSendClient] Chat log element 'chat-log-client' not found.\");\r\n        setButtonLoadingClient(false);\r\n        return;\r\n    }\r\n\r\n    // Hide welcome message if it's visible\r\n    if (welcomeMessageClient) {\r\n        welcomeMessageClient.style.display = 'none';\r\n    }\r\n\r\n    // Create assistant's message container\r\n    const assistantMessageDiv = document.createElement('div');\r\n    assistantMessageDiv.className = 'chat-message assistant-message';\r\n    const assistantMessageContent = document.createElement('p');\r\n    assistantMessageContent.className = 'message-content';\r\n    assistantMessageContent.textContent = ''; // Start with empty content\r\n    assistantMessageDiv.appendChild(assistantMessageContent);\r\n    chatLogClient.appendChild(assistantMessageDiv);\r\n    chatLogClient.scrollTop = chatLogClient.scrollHeight; // Scroll to bottom\r\n\r\n    let fullAssistantResponse = \"\";\r\n\r\n    try {\r\n        // Prepare messages for OpenAI API\r\n        // Add current user input. For a more complete conversation, you'd include previous messages from conversationHistoryClient\r\n        const messages = [\r\n            // Example: Add system prompt if you have one\r\n            // { role: \"system\", content: \"You are a helpful assistant.\" },\r\n            ...conversationHistoryClient.map(item => ({ role: \"user\", content: item.user })),\r\n            ...conversationHistoryClient.map(item => ({ role: \"assistant\", content: item.assistant })),\r\n            { role: \"user\", content: userInput }\r\n        ];\r\n        \r\n        console.log(\"[handleSendClient] Calling OpenAI with stream enabled. Messages:\", messages);\r\n\r\n        // Call OpenAI API with streaming\r\n        // Assuming callOpenAI is available and handles API key internally,\r\n        // and returns an async iterable for stream.\r\n        // Adjust the model as needed, e.g., \"gpt-3.5-turbo\" or \"gpt-4\"\r\n        const stream = await callOpenAI(messages, { stream: true, model: \"gpt-3.5-turbo\" });\r\n\r\n        for await (const chunk of stream) {\r\n            const content = chunk.choices && chunk.choices[0]?.delta?.content;\r\n            if (content) {\r\n                fullAssistantResponse += content;\r\n                assistantMessageContent.textContent += content; // Append new content\r\n                chatLogClient.scrollTop = chatLogClient.scrollHeight; // Keep scrolling to bottom\r\n            }\r\n        }\r\n\r\n        lastResponseClient = fullAssistantResponse;\r\n        conversationHistoryClient.push({ user: userInput, assistant: fullAssistantResponse });\r\n\r\n        console.log(\"[handleSendClient] Streaming finished. Full response:\", fullAssistantResponse);\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in handleSendClient during OpenAI call:\", error);\r\n        // Display error in the assistant's message bubble or a separate error message\r\n        assistantMessageContent.textContent = `Error: ${error.message || 'Failed to get response'}`;\r\n        // Also log to general error display if available\r\n        showError(`Client mode error: ${error.message}`);\r\n    } finally {\r\n        setButtonLoadingClient(false);\r\n    }\r\n}\r\n// <<< END ADDED\r\n\r\n// Add this function to reset the chat\r\nfunction resetChat() {\r\n    // Clear the chat log\r\n    const chatLog = document.getElementById('chat-log');\r\n    chatLog.innerHTML = '';\r\n    \r\n    // Restore welcome message\r\n    const welcomeMessage = document.createElement('div');\r\n    welcomeMessage.id = 'welcome-message';\r\n    welcomeMessage.className = 'welcome-message';\r\n    const welcomeTitle = document.createElement('h1');\r\n    welcomeTitle.textContent = 'What would you like to model?';\r\n    welcomeMessage.appendChild(welcomeTitle);\r\n    chatLog.appendChild(welcomeMessage);\r\n    \r\n    // Clear the conversation history\r\n    conversationHistory = [];\r\n    saveConversationHistory(conversationHistory);\r\n    \r\n    // Reset the response flag and last response\r\n    isResponse = false;\r\n    lastResponse = null;\r\n    \r\n    // Clear the input field\r\n    document.getElementById('user-input').value = '';\r\n    \r\n    console.log(\"Chat reset completed\");\r\n}\r\n\r\n// >>> ADDED: resetChat for Client Mode\r\nfunction resetChatClient() {\r\n    const chatLogClient = document.getElementById('chat-log-client');\r\n    if (chatLogClient) {\r\n        chatLogClient.innerHTML = '';\r\n        // >>> ADDED: Hide chat log when resetting\r\n        chatLogClient.style.display = 'none';\r\n        // <<< END ADDED\r\n    } else {\r\n        console.error(\"[resetChatClient] Chat log element 'chat-log-client' not found.\");\r\n        return;\r\n    }\r\n    \r\n    // >>> ADDED: Restore header and initial layout\r\n    const clientHeader = document.getElementById('client-mode-header');\r\n    const clientChatContainer = document.getElementById('client-chat-container');\r\n    \r\n    if (clientHeader) {\r\n        clientHeader.style.display = ''; // Show it first\r\n        clientHeader.classList.remove('hidden'); // Remove hidden class to trigger transition\r\n    }\r\n    \r\n    if (clientChatContainer) {\r\n        clientChatContainer.classList.remove('conversation-active');\r\n    }\r\n    // <<< END ADDED\r\n    \r\n    const welcomeMessageClient = document.createElement('div');\r\n    welcomeMessageClient.id = 'welcome-message-client';\r\n    welcomeMessageClient.className = 'welcome-message';\r\n    welcomeMessageClient.style.display = 'none'; // Keep hidden since we're showing the header\r\n    const welcomeTitleClient = document.createElement('h1');\r\n    welcomeTitleClient.textContent = 'Ask me anything (Client Mode)';\r\n    welcomeMessageClient.appendChild(welcomeTitleClient);\r\n    chatLogClient.appendChild(welcomeMessageClient);\r\n    \r\n    conversationHistoryClient = [];\r\n    lastResponseClient = null;\r\n    \r\n    const userInputClient = document.getElementById('user-input-client');\r\n    if (userInputClient) {\r\n        userInputClient.value = '';\r\n    }\r\n    console.log(\"Client chat reset completed\");\r\n}\r\n// <<< END ADDED\r\n\r\n// *** Define Helper Function Globally (BEFORE Office.onReady) ***\r\nfunction getTabBlocks(codeString) {\r\n    if (!codeString) return [];\r\n    const tabBlocks = [];\r\n    const tabRegex = /(<TAB;[^>]*>)/g;\r\n    let match;\r\n    const indices = [];\r\n    while ((match = tabRegex.exec(codeString)) !== null) {\r\n        indices.push({ index: match.index, tag: match[1] });\r\n    }\r\n    if (indices.length === 0) {\r\n        if (codeString.trim().length > 0) {\r\n            console.warn(\"Code string provided but no <TAB;...> tags found. Processing cannot proceed based on Tabs.\");\r\n        }\r\n        return []; \r\n    } \r\n    for (let i = 0; i < indices.length; i++) {\r\n        const start = indices[i].index;\r\n        const tag = indices[i].tag;\r\n        const end = (i + 1 < indices.length) ? indices[i + 1].index : codeString.length;\r\n        const blockText = codeString.substring(start, end).trim();\r\n        if (blockText) {\r\n            tabBlocks.push({ tag: tag, text: blockText });\r\n        }\r\n    }\r\n    return tabBlocks;\r\n}\r\n\r\n// Helper function to find max driver numbers in existing text\r\nfunction getMaxDriverNumbers(text) {\r\n    const maxNumbers = {};\r\n    // MODIFIED Regex: Allow optional spaces around =\r\n    const regex = /row\\d+\\s*=\\s*\"([A-Z]+)(\\d*)\\|/g;\r\n    let match;\r\n    console.log(\"Scanning text for drivers:\", text.substring(0, 200) + \"...\"); // Log input text\r\n\r\n    while ((match = regex.exec(text)) !== null) {\r\n        const prefix = match[1];\r\n        const numberStr = match[2];\r\n        const number = numberStr ? parseInt(numberStr, 10) : 0;\r\n        console.log(`Found driver match: prefix='${prefix}', numberStr='${numberStr}', number=${number}`); // Log each match\r\n\r\n        if (isNaN(number)) {\r\n             console.warn(`Parsed NaN for number from '${numberStr}' for prefix '${prefix}'. Skipping.`);\r\n             continue;\r\n        }\r\n\r\n        if (!maxNumbers[prefix] || number > maxNumbers[prefix]) {\r\n            maxNumbers[prefix] = number;\r\n            console.log(`Updated max for '${prefix}' to ${number}`); // Log updates\r\n        }\r\n    }\r\n    if (Object.keys(maxNumbers).length === 0) {\r\n        console.log(\"No existing drivers found matching the pattern.\");\r\n    }\r\n    console.log(\"Final max existing driver numbers:\", maxNumbers);\r\n    return maxNumbers;\r\n}\r\n\r\n// NEW FUNCTION SPECIFICALLY FOR AI MODEL PLANNER OUTPUT (ALWAYS FIRST PASS)\r\nexport async function processModelCodesForPlanner(modelCodesString) {\r\n    console.log(`[processModelCodesForPlanner] Called with ModelCodes.`);\r\n    if (DEBUG) console.log(\"[processModelCodesForPlanner] Input (first 500 chars):\", modelCodesString.substring(0,500));\r\n\r\n    // Substitute <BR> with <BR; labelRow=\"\"; row1 = \"||||||||||||\";>\r\n    if (modelCodesString && typeof modelCodesString === 'string') {\r\n        modelCodesString = modelCodesString.replace(/<BR>/g, '<BR; labelRow=\"\"; row1 = \"||||||||||||\";>');\r\n    }\r\n\r\n    let runResult = null;\r\n\r\n    try {\r\n        // 0. Set calculation mode to manual\r\n        await Excel.run(async (context) => {\r\n            context.application.calculationMode = Excel.CalculationMode.manual;\r\n            await context.sync();\r\n            console.log(\"[processModelCodesForPlanner] Calculation mode set to manual.\");\r\n        });\r\n\r\n        // 1. Validate all incoming codes\r\n        if (modelCodesString.trim().length > 0) {\r\n            console.log(\"[processModelCodesForPlanner] Validating ALL codes...\");\r\n            const validationErrors = await validateCodeStringsForRun(modelCodesString.split(/\\r?\\n/).filter(line => line.trim() !== ''));\r\n            if (validationErrors && validationErrors.length > 0) {\r\n                const errorMsg = \"Code validation failed for planner-generated codes:\\n\" + validationErrors.join(\"\\n\");\r\n                console.error(\"[processModelCodesForPlanner] Code validation failed:\", validationErrors);\r\n                throw new Error(errorMsg);\r\n            }\r\n            console.log(\"[processModelCodesForPlanner] Code validation successful.\");\r\n        } else {\r\n            console.log(\"[processModelCodesForPlanner] No codes provided by planner to validate or process. Exiting.\");\r\n            return; \r\n        }\r\n\r\n        // 2. Insert base sheets from Worksheets_4.3.25 v1.xlsx\r\n        console.log(\"[processModelCodesForPlanner] Inserting base sheets from Worksheets_4.3.25 v1.xlsx...\");\r\n        const worksheetsResponse = await fetch('https://localhost:3002/assets/Worksheets_4.3.25 v1.xlsx');\r\n        if (!worksheetsResponse.ok) throw new Error(`[processModelCodesForPlanner] Worksheets_4.3.25 v1.xlsx load failed: ${worksheetsResponse.statusText}`);\r\n        const wsArrayBuffer = await worksheetsResponse.arrayBuffer();\r\n        const wsUint8Array = new Uint8Array(wsArrayBuffer);\r\n        let wsBinaryString = '';\r\n        for (let i = 0; i < wsUint8Array.length; i += 8192) {\r\n            wsBinaryString += String.fromCharCode.apply(null, wsUint8Array.slice(i, Math.min(i + 8192, wsUint8Array.length)));\r\n        }\r\n        await handleInsertWorksheetsFromBase64(btoa(wsBinaryString));\r\n        console.log(\"[processModelCodesForPlanner] Base sheets (Worksheets_4.3.25 v1.xlsx) inserted.\");\r\n\r\n        // 3. Insert codes.xlsx (as runCodes depends on it)\r\n        console.log(\"[processModelCodesForPlanner] Inserting codes.xlsx...\");\r\n        const codesResponse = await fetch('https://localhost:3002/assets/codes.xlsx');\r\n        if (!codesResponse.ok) throw new Error(`[processModelCodesForPlanner] codes.xlsx load failed: ${codesResponse.statusText}`);\r\n        const codesArrayBuffer = await codesResponse.arrayBuffer();\r\n        const codesUint8Array = new Uint8Array(codesArrayBuffer);\r\n        let codesBinaryString = '';\r\n        for (let i = 0; i < codesUint8Array.length; i += 8192) {\r\n            codesBinaryString += String.fromCharCode.apply(null, codesUint8Array.slice(i, Math.min(i + 8192, codesUint8Array.length)));\r\n        }\r\n        await handleInsertWorksheetsFromBase64(btoa(codesBinaryString), [\"Codes\"]); \r\n        console.log(\"[processModelCodesForPlanner] codes.xlsx sheets inserted/updated.\");\r\n    \r\n        // 4. Execute runCodes\r\n        console.log(\"[processModelCodesForPlanner] Populating collection...\");\r\n        const collection = populateCodeCollection(modelCodesString);\r\n        console.log(`[processModelCodesForPlanner] Collection populated with ${collection.length} code(s)`);\r\n\r\n        if (collection.length > 0) {\r\n            console.log(\"[processModelCodesForPlanner] Running codes...\");\r\n            runResult = await runCodes(collection);\r\n            console.log(\"[processModelCodesForPlanner] runCodes executed. Result:\", runResult);\r\n        } else {\r\n            console.log(\"[processModelCodesForPlanner] Collection is empty after population, skipping runCodes execution.\");\r\n            runResult = { assumptionTabs: [] };\r\n        }\r\n\r\n        // 5. Post-processing\r\n        console.log(\"[processModelCodesForPlanner] Starting post-processing steps...\");\r\n        if (runResult && runResult.assumptionTabs && runResult.assumptionTabs.length > 0) {\r\n            console.log(\"[processModelCodesForPlanner] Processing assumption tabs...\");\r\n            await processAssumptionTabs(runResult.assumptionTabs);\r\n        } else {\r\n            console.log(\"[processModelCodesForPlanner] No assumption tabs to process from runResult.\");\r\n        }\r\n\r\n        console.log(\"[processModelCodesForPlanner] Hiding specific columns and navigating...\");\r\n        await hideColumnsAndNavigate(runResult?.assumptionTabs || []);\r\n\r\n        // 6. Cleanup Codes sheet\r\n        console.log(\"[processModelCodesForPlanner] Deleting Codes sheet...\");\r\n        await Excel.run(async (context) => {\r\n            try {\r\n                context.workbook.worksheets.getItem(\"Codes\").delete();\r\n                console.log(\"[processModelCodesForPlanner] Codes sheet deleted.\");\r\n            } catch (e) {\r\n                if (e instanceof OfficeExtension.Error && e.code === Excel.ErrorCodes.itemNotFound) {\r\n                    console.warn(\"[processModelCodesForPlanner] Codes sheet not found during cleanup, skipping deletion.\");\r\n                } else { \r\n                    console.error(\"[processModelCodesForPlanner] Error deleting Codes sheet during cleanup:\", e);\r\n                }\r\n            }\r\n            await context.sync();\r\n        }).catch(error => { \r\n            console.error(\"[processModelCodesForPlanner] Error during Codes sheet cleanup sync:\", error);\r\n        });\r\n\r\n        console.log(\"[processModelCodesForPlanner] Successfully completed.\");\r\n\r\n    } catch (error) {\r\n        console.error(\"[processModelCodesForPlanner] Error during processing:\", error);\r\n        throw error; \r\n    } finally {\r\n        try {\r\n            await Excel.run(async (context) => {\r\n                context.application.calculationMode = Excel.CalculationMode.automatic;\r\n                await context.sync();\r\n                console.log(\"[processModelCodesForPlanner] Calculation mode set to automatic.\");\r\n            });\r\n        } catch (finalError) {\r\n            console.error(\"[processModelCodesForPlanner] Error setting calculation mode to automatic:\", finalError);\r\n        }\r\n    }\r\n}\r\n\r\n// Original insertSheetsAndRunCodes function should be here, UNCHANGED.\r\n// Ensure it's not accidentally deleted or modified by the `// ... existing code ...` placeholder.\r\nasync function insertSheetsAndRunCodes() {\r\n    const codesTextarea = document.getElementById('codes-textarea');\r\n    if (!codesTextarea) {\r\n        showError(\"Could not find the code input area. Cannot run codes.\");\r\n        return;\r\n    }\r\n    loadedCodeStrings = codesTextarea.value; // Update global variable\r\n\r\n    // Substitute <BR> with <BR; labelRow=\"\"; row1 = \"||||||||||||\";>\r\n    if (loadedCodeStrings && typeof loadedCodeStrings === 'string') {\r\n        loadedCodeStrings = loadedCodeStrings.replace(/<BR>/g, '<BR; labelRow=\"\"; row1 = \"||||||||||||\";>');\r\n    }\r\n\r\n    try {\r\n        localStorage.setItem('userCodeStrings', loadedCodeStrings);\r\n        console.log(\"[Run Codes] Automatically saved codes from textarea to localStorage.\");\r\n    } catch (error) {\r\n        console.error(\"[Run Codes] Error auto-saving codes to localStorage:\", error);\r\n        showError(`Error automatically saving codes: ${error.message}. Run may not reflect latest changes.`);\r\n    }\r\n\r\n    let codesToRun = loadedCodeStrings;\r\n    let previousCodes = null;\r\n    let allCodeContentToProcess = \"\"; \r\n    let runResult = null; \r\n\r\n    // Substitute <BR> with <BR; labelRow=\"\"; row1 = \"||||||||||||\";> in codesToRun as well, as it's derived from loadedCodeStrings after potential modification\r\n    if (codesToRun && typeof codesToRun === 'string') {\r\n        codesToRun = codesToRun.replace(/<BR>/g, '<BR; labelRow=\"\"; row1 = \"||||||||||||\";>');\r\n    }\r\n\r\n    try {\r\n        let financialsSheetExists = false;\r\n        await Excel.run(async (context) => {\r\n            try {\r\n                const financialsSheet = context.workbook.worksheets.getItem(\"Financials\");\r\n                financialsSheet.load(\"name\");\r\n                await context.sync();\r\n                financialsSheetExists = true;\r\n            } catch (error) {\r\n                if (error instanceof OfficeExtension.Error && error.code === Excel.ErrorCodes.itemNotFound) {\r\n                    financialsSheetExists = false;\r\n                } else { throw error; } \r\n            }\r\n        });\r\n\r\n        await Excel.run(async (context) => {\r\n            context.application.calculationMode = Excel.CalculationMode.manual;\r\n            await context.sync();\r\n        });\r\n\r\n        setButtonLoading(true);\r\n        console.log(\"Starting code processing...\");\r\n\r\n        if (!financialsSheetExists) {\r\n            console.log(\"[Run Codes] FIRST PASS: Financials sheet not found.\");\r\n            allCodeContentToProcess = codesToRun;\r\n            if (allCodeContentToProcess.trim().length > 0) {\r\n                const validationErrors = await validateCodeStringsForRun(allCodeContentToProcess.split(/\\r?\\n/).filter(line => line.trim() !== ''));\r\n                if (validationErrors && validationErrors.length > 0) {\r\n                    const errorMsg = \"Initial validation failed. Please fix the errors before running:\\n\" + validationErrors.join(\"\\n\");\r\n                    console.error(\"Code validation failed:\", validationErrors);\r\n                    showError(\"Code validation failed. See chat for details.\");\r\n                    appendMessage(errorMsg);\r\n                    setButtonLoading(false);\r\n                    return;\r\n                }\r\n                console.log(\"Initial code validation successful.\");\r\n            } else {\r\n                console.log(\"[Run Codes] No codes to validate on first pass.\");\r\n            }\r\n            const worksheetsResponse = await fetch('https://localhost:3002/assets/Worksheets_4.3.25 v1.xlsx');\r\n            if (!worksheetsResponse.ok) throw new Error(`Worksheets load failed: ${worksheetsResponse.statusText}`);\r\n            const worksheetsArrayBuffer = await worksheetsResponse.arrayBuffer();\r\n            const worksheetsUint8Array = new Uint8Array(worksheetsArrayBuffer);\r\n            let worksheetsBinaryString = '';\r\n            const chunkSize = 8192;\r\n            for (let i = 0; i < worksheetsUint8Array.length; i += chunkSize) {\r\n                const chunk = worksheetsUint8Array.slice(i, Math.min(i + chunkSize, worksheetsUint8Array.length));\r\n                worksheetsBinaryString += String.fromCharCode.apply(null, chunk);\r\n            }\r\n            const worksheetsBase64String = btoa(worksheetsBinaryString);\r\n            await handleInsertWorksheetsFromBase64(worksheetsBase64String);\r\n            console.log(\"Base sheets inserted.\");\r\n        } else {\r\n            console.log(\"[Run Codes] SUBSEQUENT PASS: Financials sheet found.\");\r\n            try {\r\n                previousCodes = localStorage.getItem('previousRunCodeStrings');\r\n            } catch (error) {\r\n                 console.error(\"[Run Codes] Error loading previous codes for comparison:\", error);\r\n                 console.warn(\"[Run Codes] Could not load previous codes. Processing ALL current codes as fallback.\");\r\n                 previousCodes = null;\r\n            }\r\n            if (previousCodes !== null && previousCodes === codesToRun) {\r\n                 console.log(\"[Run Codes] No change in code strings since last run. Nothing to process.\");\r\n                 try { localStorage.setItem('previousRunCodeStrings', codesToRun); } catch(e) { console.error(\"Err updating prev codes:\", e); }\r\n                 showMessage(\"No code changes to run.\");\r\n                 setButtonLoading(false);\r\n                 return;\r\n            }\r\n            const currentTabs = getTabBlocks(codesToRun);\r\n            const previousTabs = getTabBlocks(previousCodes || \"\");\r\n            const previousTabMap = new Map(previousTabs.map(block => [block.tag, block.text]));\r\n            let hasAnyChanges = false;\r\n            const codeRegex = /<[^>]+>/g;\r\n            for (const currentTab of currentTabs) {\r\n                const currentTag = currentTab.tag;\r\n                const currentText = currentTab.text;\r\n                const previousText = previousTabMap.get(currentTag);\r\n                if (previousText === undefined) {\r\n                    const newTabCodes = currentText.match(codeRegex) || [];\r\n                    if (newTabCodes.length > 0) {\r\n                        allCodeContentToProcess += newTabCodes.join(\"\\n\") + \"\\n\\n\";\r\n                        hasAnyChanges = true;\r\n                    }\r\n                } else {\r\n                    const currentCodes = currentText.match(codeRegex) || [];\r\n                    const previousCodesSet = new Set((previousText || \"\").match(codeRegex) || []);\r\n                    let tabHasChanges = false;\r\n                    let codesToAddForThisTab = \"\";\r\n                    for (const currentCode of currentCodes) {\r\n                        if (!previousCodesSet.has(currentCode)) {\r\n                            codesToAddForThisTab += currentCode + \"\\n\";\r\n                            hasAnyChanges = true;\r\n                            tabHasChanges = true;\r\n                        }\r\n                    }\r\n                    if (tabHasChanges) {\r\n                        allCodeContentToProcess += currentTag + \"\\n\" + codesToAddForThisTab + \"\\n\";\r\n                    }\r\n                }\r\n            }\r\n            if (hasAnyChanges) {\r\n                if (allCodeContentToProcess.trim().length > 0) {\r\n                    const validationErrors = await validateCodeStringsForRun(allCodeContentToProcess.split(/\\r?\\n/).filter(line => line.trim() !== ''));\r\n                    if (validationErrors && validationErrors.length > 0) {\r\n                        const errorMsg = \"Validation failed. Please fix the errors before running:\\n\" + validationErrors.join(\"\\n\");\r\n                        console.error(\"Code validation failed:\", validationErrors);\r\n                        showError(\"Code validation failed. See chat for details.\");\r\n                        appendMessage(errorMsg);\r\n                        setButtonLoading(false);\r\n                        return;\r\n                    }\r\n                    console.log(\"Code validation successful for new/modified tabs.\");\r\n                } else {\r\n                    console.log(\"[Run Codes] Changes detected, but no code content found for validation in new/modified tabs.\");\r\n                }\r\n                try {\r\n                    const codesResponse = await fetch('https://localhost:3002/assets/codes.xlsx');\r\n                    if (!codesResponse.ok) throw new Error(`codes.xlsx load failed: ${codesResponse.statusText}`);\r\n                    const codesArrayBuffer = await codesResponse.arrayBuffer();\r\n                    const codesUint8Array = new Uint8Array(codesArrayBuffer);\r\n                    let codesBinaryString = '';\r\n                    for (let i = 0; i < codesUint8Array.length; i += 8192) {\r\n                        codesBinaryString += String.fromCharCode.apply(null, codesUint8Array.slice(i, Math.min(i + 8192, codesUint8Array.length)));\r\n                    }\r\n                    await handleInsertWorksheetsFromBase64(btoa(codesBinaryString), [\"Codes\"]);\r\n                    console.log(\"codes.xlsx sheets inserted.\");\r\n                } catch (e) {\r\n                    console.error(\"Failed to insert sheets from codes.xlsx:\", e);\r\n                    showError(\"Failed to insert necessary sheets from codes.xlsx. Aborting.\");\r\n                    setButtonLoading(false);\r\n                    return;\r\n                }\r\n            } else {\r\n                 console.log(\"[Run Codes] No changes identified in tabs compared to previous run. Nothing to insert or process.\");\r\n                 try { localStorage.setItem('previousRunCodeStrings', codesToRun); } catch(e) { console.error(\"Err updating prev codes:\", e); }\r\n                 showMessage(\"No code changes identified to run.\");\r\n                 setButtonLoading(false);\r\n                 return;\r\n            }\r\n        }\r\n\r\n        if (allCodeContentToProcess.trim().length > 0) {\r\n            const collection = populateCodeCollection(allCodeContentToProcess);\r\n            if (collection.length > 0) {\r\n                runResult = await runCodes(collection);\r\n                console.log(\"Codes executed:\", runResult);\r\n            } else {\r\n                 if (!runResult) runResult = { assumptionTabs: [] };\r\n            }\r\n        } else {\r\n             if (!runResult) runResult = { assumptionTabs: [] };\r\n        }\r\n        if (runResult && runResult.assumptionTabs && runResult.assumptionTabs.length > 0) {\r\n            await processAssumptionTabs(runResult.assumptionTabs);\r\n        } else {\r\n             console.log(\"No assumption tabs to process.\");\r\n        }\r\n        await hideColumnsAndNavigate(runResult?.assumptionTabs || []);\r\n        await Excel.run(async (context) => {\r\n            try {\r\n                context.workbook.worksheets.getItem(\"Codes\").delete();\r\n            } catch (e) {\r\n                if (e instanceof OfficeExtension.Error && e.code === Excel.ErrorCodes.itemNotFound) {\r\n                     console.warn(\"Codes sheet not found, skipping deletion.\");\r\n                } else { console.error(\"Error deleting Codes sheet:\", e); }\r\n            }\r\n            await context.sync();\r\n        }).catch(error => { console.error(\"Error during sheet cleanup:\", error); });\r\n        try {\r\n            localStorage.setItem('previousRunCodeStrings', codesToRun);\r\n        } catch (error) {\r\n             console.error(\"[Run Codes] Failed to update previous run state:\", error);\r\n        }\r\n        showMessage(\"Code processing finished successfully!\");\r\n    } catch (error) {\r\n        console.error(\"An error occurred during the build process:\", error);\r\n        showError(`Operation failed: ${error.message || error.toString()}`);\r\n    } finally {\r\n        try {\r\n            await Excel.run(async (context) => {\r\n                context.application.calculationMode = Excel.CalculationMode.automatic;\r\n                await context.sync();\r\n            });\r\n        } catch (finalError) {\r\n            console.error(\"Error setting calculation mode to automatic:\", finalError);\r\n        }\r\n        setButtonLoading(false);\r\n    }\r\n}\r\n\r\nOffice.onReady((info) => {\r\n  if (info.host === Office.HostType.Excel) {\r\n    // Get references to the new elements\r\n    const startupMenu = document.getElementById('startup-menu');\r\n    const developerModeButton = document.getElementById('developer-mode-button');\r\n    const clientModeButton = document.getElementById('client-mode-button');\r\n    const appBody = document.getElementById('app-body'); // Already exists, ensure it's captured\r\n    const clientModeView = document.getElementById('client-mode-view');\r\n\r\n    // Functions to switch views\r\n    function showDeveloperMode() {\r\n      if (startupMenu) startupMenu.style.display = 'none';\r\n      if (appBody) appBody.style.display = 'flex'; // Matches .ms-welcome__main display if it's flex\r\n      if (clientModeView) clientModeView.style.display = 'none';\r\n      console.log(\"Developer Mode activated\");\r\n    }\r\n\r\n    function showClientMode() {\r\n      if (startupMenu) startupMenu.style.display = 'none';\r\n      if (appBody) appBody.style.display = 'none';\r\n      if (clientModeView) clientModeView.style.display = 'flex'; // Matches .ms-welcome__main display\r\n      console.log(\"Client Mode activated\");\r\n    }\r\n\r\n    // >>> ADDED: Function to show startup menu\r\n    function showStartupMenu() {\r\n      if (startupMenu) startupMenu.style.display = 'flex';\r\n      if (appBody) appBody.style.display = 'none';\r\n      if (clientModeView) clientModeView.style.display = 'none';\r\n      \r\n      // Reset client mode state when going back to menu\r\n      resetChatClient();\r\n      \r\n      console.log(\"Returned to startup menu\");\r\n    }\r\n    // <<< END ADDED\r\n\r\n    // Assign click handlers for startup menu buttons\r\n    if (developerModeButton) {\r\n        developerModeButton.onclick = showDeveloperMode;\r\n    } else {\r\n        console.error(\"Could not find button with id='developer-mode-button'\");\r\n    }\r\n    if (clientModeButton) {\r\n        clientModeButton.onclick = showClientMode;\r\n    } else {\r\n        console.error(\"Could not find button with id='client-mode-button'\");\r\n    }\r\n\r\n    // >>> ADDED: Auto-resize for client textarea\r\n    const userInputClientTextarea = document.getElementById('user-input-client');\r\n    if (userInputClientTextarea) {\r\n        userInputClientTextarea.addEventListener('input', function() {\r\n            this.style.height = 'auto'; // Reset height to recalculate\r\n            let newHeight = this.scrollHeight;\r\n            const maxHeight = parseInt(window.getComputedStyle(this).maxHeight, 10);\r\n            if (maxHeight && newHeight > maxHeight) {\r\n                newHeight = maxHeight;\r\n            }\r\n            this.style.height = newHeight + 'px';\r\n        });\r\n    }\r\n    // <<< END ADDED\r\n\r\n    // Assign the REVISED async function as the handler\r\n    const button = document.getElementById(\"insert-and-run\");\r\n    if (button) {\r\n        button.onclick = insertSheetsAndRunCodes; // Use the revised function\r\n    } else {\r\n        console.error(\"Could not find button with id='insert-and-run'\");\r\n    }\r\n\r\n    // ... (rest of your Office.onReady remains the same) ...\r\n\r\n    // Keep the setup for your other buttons (send-button, reset-button, etc.)\r\n    const sendButton = document.getElementById('send');\r\n    if (sendButton) sendButton.onclick = handleSend;\r\n\r\n    const writeButton = document.getElementById('write-to-excel');\r\n    if (writeButton) writeButton.onclick = writeToExcel;\r\n\r\n    const resetButton = document.getElementById('reset-chat');\r\n    if (resetButton) resetButton.onclick = resetChat;\r\n\r\n    // >>> ADDED: Setup for Client Mode Chat Buttons\r\n    const sendClientButton = document.getElementById('send-client');\r\n    if (sendClientButton) sendClientButton.onclick = handleSendClient;\r\n\r\n    const resetChatClientButton = document.getElementById('reset-chat-client');\r\n    if (resetChatClientButton) resetChatClientButton.onclick = resetChatClient;\r\n\r\n    // Add event listener for the new icon button\r\n    const resetChatIconButton = document.getElementById('reset-chat-icon-button');\r\n    if (resetChatIconButton) {\r\n        resetChatIconButton.onclick = resetChatClient;\r\n    } else {\r\n        console.error(\"Could not find button with id='reset-chat-icon-button'\");\r\n    }\r\n\r\n    const writeToExcelClientButton = document.getElementById('write-to-excel-client');\r\n    if (writeToExcelClientButton) {\r\n        // writeToExcelClientButton.onclick = () => alert('Client Mode \"Write to Excel\" is not yet implemented.');\r\n    }\r\n    const insertToEditorClientButton = document.getElementById('insert-to-editor-client');\r\n    if (insertToEditorClientButton) {\r\n        // insertToEditorClientButton.onclick = () => alert('Client Mode \"Insert to Editor\" is not yet implemented.');\r\n    }\r\n    // <<< END ADDED\r\n\r\n    // >>> ADDED: Setup for Generate Tab String button\r\n    const generateTabStringButton = document.getElementById('generate-tab-string-button');\r\n    if (generateTabStringButton) {\r\n        generateTabStringButton.onclick = generateTabString; // Assign the imported function\r\n    } else {\r\n        console.error(\"Could not find button with id='generate-tab-string-button'\");\r\n    }\r\n    // <<< END ADDED CODE\r\n\r\n    const codesTextarea = document.getElementById('codes-textarea');\r\n    const editParamsButton = document.getElementById('edit-code-params-button');\r\n    const paramsModal = document.getElementById('code-params-modal');\r\n    const paramsModalForm = document.getElementById('code-params-modal-form');\r\n    const closeModalButton = paramsModal.querySelector('.close-button');\r\n    const applyParamsButton = document.getElementById('apply-code-params-button');\r\n    const cancelParamsButton = document.getElementById('cancel-code-params-button');\r\n\r\n    // Modal Find/Replace elements\r\n    const modalFindInput = document.getElementById('modal-find-input');\r\n    const modalReplaceInput = document.getElementById('modal-replace-input');\r\n    const modalReplaceAllButton = document.getElementById('modal-replace-all-button');\r\n    const modalSearchStatus = document.getElementById('modal-search-status');\r\n\r\n    let currentCodeStringRange = null; // To store {start, end} of the code string being edited\r\n    let currentCodeStringType = ''; // To store the type like 'VOL-EV'\r\n\r\n    // State for modal find/replace (Simplified)\r\n    let modalSearchableElements = []; // Stores {element, originalValue}\r\n    // Removed modalSearchTerm, modalCurrentMatchIndex, modalAllMatches\r\n\r\n    // Function to reset modal search state (Simplified)\r\n    const resetModalSearchState = () => {\r\n        modalSearchableElements = Array.from(paramsModalForm.querySelectorAll('input[data-param-key], textarea[data-param-key]'));\r\n        if (modalSearchStatus) modalSearchStatus.textContent = '';\r\n        // Clear input fields as well?\r\n        // if (modalFindInput) modalFindInput.value = '';\r\n        // if (modalReplaceInput) modalReplaceInput.value = '';\r\n        console.log(\"Modal search state reset.\");\r\n    };\r\n\r\n    // Function to update modal search status\r\n    const updateModalSearchStatus = (message) => {\r\n        if (modalSearchStatus) {\r\n            modalSearchStatus.textContent = message;\r\n        }\r\n    };\r\n\r\n    // Removed findAllMatchesInModal function\r\n\r\n    // Function to show the modal\r\n    const showParamsModal = () => {\r\n        if (paramsModal) {\r\n            paramsModal.style.display = 'block';\r\n            resetModalSearchState(); // Reset search when modal opens\r\n        }\r\n    };\r\n\r\n    // Function to hide the modal\r\n    const hideParamsModal = () => {\r\n        if (paramsModal) {\r\n            paramsModal.style.display = 'none';\r\n            paramsModalForm.innerHTML = ''; // Clear the form\r\n            currentCodeStringRange = null; // Reset state\r\n            currentCodeStringType = '';\r\n            resetModalSearchState(); // Also reset search state on close\r\n        }\r\n    };\r\n\r\n    // Function to find the <...> block around the cursor\r\n    const findCodeStringAroundCursor = (text, cursorPos) => {\r\n        const textBeforeCursor = text.substring(0, cursorPos);\r\n        const textAfterCursor = text.substring(cursorPos);\r\n\r\n        const lastOpenBracket = textBeforeCursor.lastIndexOf('<');\r\n        const lastCloseBracketBefore = textBeforeCursor.lastIndexOf('>');\r\n\r\n        // Check if cursor is potentially inside brackets\r\n        if (lastOpenBracket > lastCloseBracketBefore) {\r\n            const firstCloseBracketAfter = textAfterCursor.indexOf('>');\r\n            if (firstCloseBracketAfter !== -1) {\r\n                const start = lastOpenBracket;\r\n                const end = cursorPos + firstCloseBracketAfter + 1; // +1 to include '>'\r\n                const codeString = text.substring(start, end);\r\n                console.log(`Found code string: ${codeString} at range [${start}, ${end})`);\r\n                return { codeString, start, end };\r\n            }\r\n        }\r\n        console.log(\"Cursor not inside a <...> block.\");\r\n        return null; // Cursor is not inside a valid <...> block\r\n    };\r\n\r\n    // Function to parse parameters from the code string content (inside <...>)\r\n    const parseCodeParameters = (content) => {\r\n        const parts = content.split(';');\r\n        if (parts.length < 1) return { type: '', params: {} };\r\n\r\n        const type = parts[0].trim();\r\n        const params = {};\r\n        // Regex to match key=\"value\" or key=value (no quotes)\r\n        const paramRegex = /\\s*([^=\\s]+)\\s*=\\s*(?:\"([^\"]*)\"|([^;]*))/g;\r\n\r\n        for (let i = 1; i < parts.length; i++) {\r\n            const part = parts[i].trim();\r\n            if (!part) continue;\r\n\r\n            // Reset regex index before each exec\r\n            paramRegex.lastIndex = 0;\r\n            const match = paramRegex.exec(part);\r\n\r\n            if (match) {\r\n                const key = match[1];\r\n                // Value could be in group 2 (quoted) or group 3 (unquoted)\r\n                const value = match[2] !== undefined ? match[2] : match[3];\r\n                 if (key) { // Ensure key is valid\r\n                    params[key] = value.trim();\r\n                }\r\n            } else {\r\n                console.warn(`Could not parse parameter part: '${part}'`);\r\n            }\r\n        }\r\n        console.log(`Parsed type: ${type}, params:`, params);\r\n        return { type, params };\r\n    };\r\n\r\n    // Function to populate the modal form (needs to update searchable elements)\r\n    const populateParamsModal = (type, params) => {\r\n        paramsModalForm.innerHTML = ''; // Clear previous form items\r\n        currentCodeStringType = type; // Store the type\r\n\r\n        Object.entries(params).forEach(([key, value]) => {\r\n            const paramEntryDiv = document.createElement('div');\r\n            paramEntryDiv.className = 'param-entry';\r\n\r\n            const label = document.createElement('label');\r\n            label.htmlFor = `param-${key}`;\r\n            label.textContent = key;\r\n\r\n            let inputElement;\r\n            const isLongValue = key.toLowerCase().includes('row') || value.length > 60;\r\n            const isLIParam = /LI\\d+\\|/.test(value.trim()); // Check if value starts with LI<digit>|\r\n\r\n            if (isLongValue || isLIParam) { // Use textarea for LI params too, for consistency\r\n                inputElement = document.createElement('textarea');\r\n                inputElement.rows = isLIParam ? 2 : 3; // Slightly smaller for LI rows initially\r\n            } else {\r\n                inputElement = document.createElement('input');\r\n                inputElement.type = 'text';\r\n            }\r\n\r\n            inputElement.id = `param-${key}`;\r\n            inputElement.value = value;\r\n            inputElement.dataset.paramKey = key;\r\n            if (isLIParam) {\r\n                inputElement.dataset.isOriginalLi = \"true\"; // Mark original LI fields\r\n            }\r\n\r\n            paramEntryDiv.appendChild(label);\r\n\r\n            if (isLIParam) {\r\n                // Create a container for the LI field and its add button\r\n                const liContainer = document.createElement('div');\r\n                liContainer.className = 'li-parameter-container';\r\n                liContainer.dataset.originalLiKey = key; // Link container to original key\r\n\r\n                liContainer.appendChild(inputElement); // Add the input field first\r\n\r\n                // Create the Add button\r\n                const addButton = document.createElement('button');\r\n                addButton.type = 'button'; // Important: prevent form submission\r\n                addButton.textContent = '+';\r\n                addButton.className = 'ms-Button ms-Button--icon add-li-button'; // Add specific class\r\n                addButton.title = 'Add another LI item based on this one';\r\n                addButton.dataset.targetLiKey = key; // Link button to the input's key\r\n\r\n                addButton.onclick = (event) => {\r\n                    const sourceInput = document.getElementById(`param-${key}`);\r\n                    if (!sourceInput) return;\r\n\r\n                    const newValueContainer = document.createElement('div');\r\n                    newValueContainer.className = 'added-li-item';\r\n\r\n                    const newInput = sourceInput.cloneNode(true); // Clone the original input/textarea\r\n                    // Clear ID, mark as added, remove original marker\r\n                    newInput.id = '';\r\n                    newInput.dataset.isAddedLi = \"true\";\r\n                    delete newInput.dataset.isOriginalLi;\r\n                    newInput.dataset.originalLiKey = key; // Link back to the original key\r\n                    // Keep the same value as the original initially\r\n                    newInput.value = sourceInput.value; // Duplicate the content\r\n\r\n                    // Add a remove button for the added item\r\n                    const removeButton = document.createElement('button');\r\n                    removeButton.type = 'button';\r\n                    removeButton.textContent = '-';\r\n                    removeButton.className = 'ms-Button ms-Button--icon remove-li-button';\r\n                    removeButton.title = 'Remove this added LI item';\r\n                    removeButton.onclick = () => {\r\n                        newValueContainer.remove();\r\n                    };\r\n\r\n                    newValueContainer.appendChild(newInput);\r\n                    newValueContainer.appendChild(removeButton);\r\n\r\n                    // Insert the new container after the clicked button\r\n                    // or after the last added item within this container\r\n                    event.target.parentNode.appendChild(newValueContainer);\r\n                     // Maybe scroll container? paramsModalForm.scrollTop = paramsModalForm.scrollHeight;\r\n                };\r\n\r\n                liContainer.appendChild(addButton); // Add button after input\r\n                paramEntryDiv.appendChild(liContainer); // Add container to entry div\r\n\r\n            } else {\r\n                 paramEntryDiv.appendChild(inputElement); // Non-LI params added directly\r\n            }\r\n\r\n            paramsModalForm.appendChild(paramEntryDiv);\r\n        });\r\n        // IMPORTANT: Update searchable elements after populating\r\n        resetModalSearchState(); // Reset search state after populating form\r\n    };\r\n\r\n    // --- Event Listener for the Edit Parameters Button ---\r\n    if (editParamsButton && codesTextarea && paramsModal) {\r\n        editParamsButton.onclick = () => {\r\n            const text = codesTextarea.value;\r\n            const cursorPos = codesTextarea.selectionStart;\r\n\r\n            const codeInfo = findCodeStringAroundCursor(text, cursorPos);\r\n\r\n            if (codeInfo) {\r\n                // Extract content within < >\r\n                const content = codeInfo.codeString.substring(1, codeInfo.codeString.length - 1);\r\n                const { type, params } = parseCodeParameters(content);\r\n\r\n                if (type) {\r\n                    currentCodeStringRange = { start: codeInfo.start, end: codeInfo.end };\r\n                    populateParamsModal(type, params);\r\n                    showParamsModal();\r\n                } else {\r\n                    showError(\"Could not parse the code string structure.\");\r\n                }\r\n            } else {\r\n                showError(\"Place cursor inside a <...> code block to edit parameters.\");\r\n            }\r\n        };\r\n    }\r\n\r\n    // --- Event Listeners for Modal Actions ---\r\n    if (closeModalButton) {\r\n        closeModalButton.onclick = hideParamsModal;\r\n    }\r\n    if (cancelParamsButton) {\r\n        cancelParamsButton.onclick = hideParamsModal;\r\n    }\r\n\r\n    // --- APPLY CHANGES LOGIC (MODIFIED) ---\r\n    if (applyParamsButton && codesTextarea) {\r\n        applyParamsButton.onclick = () => {\r\n            if (!currentCodeStringRange || !currentCodeStringType) return; // Safety check\r\n\r\n            // Use a map to reconstruct parameters, handling LI aggregation\r\n            const paramValues = {};\r\n\r\n            // Process all input/textarea fields in the form\r\n            const formElements = paramsModalForm.querySelectorAll('input[data-param-key], textarea[data-param-key]');\r\n\r\n            formElements.forEach(input => {\r\n                const key = input.dataset.paramKey;\r\n                const isOriginalLI = input.dataset.isOriginalLi === \"true\";\r\n                const isAddedLI = input.dataset.isAddedLi === \"true\";\r\n                const value = input.value;\r\n\r\n                if (isOriginalLI) {\r\n                    // If it's an original LI, initialize its value in the map\r\n                    if (!paramValues[key]) {\r\n                        paramValues[key] = value; // Start with the original value\r\n                    }\r\n                } else if (isAddedLI) {\r\n                    // This case handled below by finding related elements\r\n                    // We only need to store original keys first\r\n                } else if (key && !isAddedLI) {\r\n                    // Standard parameter, just store its value\r\n                     if (!paramValues[key]) { // Check prevents overwriting if key appears twice (shouldn't happen)\r\n                       paramValues[key] = value;\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Now, aggregate added LI items\r\n            const addedLiElements = paramsModalForm.querySelectorAll('textarea[data-is-added-li=\"true\"]');\r\n            addedLiElements.forEach(addedInput => {\r\n                 const originalKey = addedInput.dataset.originalLiKey;\r\n                 if (originalKey && paramValues[originalKey]) {\r\n                      // Append the added value, prefixed with *\r\n                      paramValues[originalKey] += ` *${addedInput.value}`;\r\n                 }\r\n            });\r\n\r\n            // Build the final parameter string parts\r\n            const updatedParams = Object.entries(paramValues).map(([key, finalValue]) => {\r\n                 // Re-add quotes around the final aggregated value\r\n                 return `${key}=\"${finalValue}\"`;\r\n            });\r\n\r\n            // Reconstruct the code string\r\n            const newCodeStringContent = `${currentCodeStringType}; ${updatedParams.join('; ')}`;\r\n            const newCodeString = `<${newCodeStringContent}>`;\r\n\r\n            // Update the textarea content\r\n            const currentText = codesTextarea.value;\r\n            const textBefore = currentText.substring(0, currentCodeStringRange.start);\r\n            const textAfter = currentText.substring(currentCodeStringRange.end);\r\n\r\n            codesTextarea.value = textBefore + newCodeString + textAfter;\r\n\r\n            console.log(`Updated code string at [${currentCodeStringRange.start}, ${currentCodeStringRange.start + newCodeString.length})`);\r\n            console.log(\"New string:\", newCodeString);\r\n\r\n            // Optionally, update cursor position\r\n            const newCursorPos = currentCodeStringRange.start + newCodeString.length;\r\n            codesTextarea.focus();\r\n            codesTextarea.setSelectionRange(newCursorPos, newCursorPos);\r\n\r\n            hideParamsModal(); // Close modal after applying\r\n        };\r\n    }\r\n\r\n    // --- Modal Find/Replace Logic (Simplified) ---\r\n\r\n    const modalReplaceAll = () => {\r\n        const searchTerm = modalFindInput.value;\r\n        const replaceTerm = modalReplaceInput.value;\r\n        if (!searchTerm) {\r\n            updateModalSearchStatus(\"Enter search term.\");\r\n            return;\r\n        }\r\n\r\n        // Ensure searchable elements are up-to-date\r\n        modalSearchableElements = Array.from(paramsModalForm.querySelectorAll('input[data-param-key], textarea[data-param-key]'));\r\n\r\n        let replacementsMade = 0;\r\n        modalSearchableElements.forEach((element, index) => {\r\n            let currentValue = element.value;\r\n            // Escape regex special characters in search term\r\n            const escapedSearchTerm = searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n            let newValue = currentValue.replace(new RegExp(escapedSearchTerm, 'g'), () => {\r\n                replacementsMade++;\r\n                return replaceTerm;\r\n            });\r\n            if (currentValue !== newValue) {\r\n                element.value = newValue;\r\n                console.log(`Modal Replace All: Made replacements in element ${index}`);\r\n            }\r\n        });\r\n\r\n        if (replacementsMade > 0) {\r\n            updateModalSearchStatus(`Replaced ${replacementsMade} occurrence(s).`);\r\n            // No need to reset search state as there's no find next\r\n        } else {\r\n            updateModalSearchStatus(`\"${searchTerm}\" not found.`);\r\n        }\r\n    };\r\n\r\n    // Add event listeners for modal find/replace buttons (Simplified)\r\n    // Removed listeners for Find Next and Replace\r\n    if (modalReplaceAllButton) modalReplaceAllButton.onclick = modalReplaceAll;\r\n    // Removed input listener for modalFindInput\r\n\r\n    // --- Event Listeners for Modal Actions ---\r\n    if (closeModalButton) {\r\n        closeModalButton.onclick = hideParamsModal;\r\n    }\r\n\r\n    // ... (rest of your Office.onReady, including suggestion logic, initializations)\r\n\r\n    // Make sure initialization runs after setting up modal logic\r\n    Promise.all([\r\n        initializeAPIKeys(),\r\n        loadCodeDatabase()\r\n    ]).then(([keys]) => {\r\n      if (!keys) {\r\n        showError(\"Failed to load API keys. Please check configuration.\");\r\n      } else {\r\n        // >>> ADDED: Set the API keys in AIcalls module\r\n        setAPIKeys(keys);\r\n      }\r\n      conversationHistory = loadConversationHistory();\r\n\r\n      try {\r\n          const storedCodes = localStorage.getItem('userCodeStrings');\r\n          if (storedCodes !== null) {\r\n              loadedCodeStrings = storedCodes;\r\n              if (codesTextarea) {\r\n                  codesTextarea.value = loadedCodeStrings;\r\n              }\r\n              console.log(\"Code strings loaded from localStorage into global variable.\");\r\n          } else {\r\n              console.log(\"No code strings found in localStorage, initializing global variable as empty.\");\r\n              loadedCodeStrings = \"\";\r\n          }\r\n          // Also load the previous run codes if available\r\n           const storedPreviousCodes = localStorage.getItem('previousRunCodeStrings');\r\n           if (storedPreviousCodes) {\r\n               console.log(\"Previous run code strings loaded from localStorage.\");\r\n           }\r\n\r\n      } catch (error) {\r\n          console.error(\"Error loading code strings from localStorage:\", error);\r\n          showError(`Error loading codes from storage: ${error.message}`);\r\n          loadedCodeStrings = \"\";\r\n      }\r\n\r\n      // >>> MOVED: Assign event listeners AFTER initialization is complete\r\n      // Setup cursor position tracking\r\n      if (codesTextarea) {\r\n          const updateCursorPosition = () => {\r\n              lastEditorCursorPosition = codesTextarea.selectionStart;\r\n              // console.log(`Cursor position updated: ${lastEditorCursorPosition}`); // Optional debug log\r\n          };\r\n          codesTextarea.addEventListener('keyup', updateCursorPosition); // Update on key release\r\n          codesTextarea.addEventListener('mouseup', updateCursorPosition); // Update on mouse click release\r\n          codesTextarea.addEventListener('focus', updateCursorPosition);   // Update when focus is gained\r\n          // codesTextarea.addEventListener('blur', updateCursorPosition); // Maybe don't update on blur?\r\n          console.log(\"[Office.onReady] Added event listeners to codesTextarea for cursor tracking.\"); // <<< DEBUG LOG\r\n      }\r\n\r\n      // Setup Insert to Editor button\r\n      const insertToEditorButton = document.getElementById('insert-to-editor');\r\n      if (insertToEditorButton) {\r\n          console.log(\"[Office.onReady] Found insert-to-editor button.\"); // <<< DEBUG LOG\r\n          insertToEditorButton.onclick = insertResponseToEditor;\r\n          console.log(\"[Office.onReady] Assigned onclick for insert-to-editor button.\"); // <<< DEBUG LOG\r\n      } else {\r\n          console.error(\"[Office.onReady] Could not find button with id='insert-to-editor'\");\r\n      }\r\n      // <<< END MOVED CODE\r\n\r\n      // Startup Menu Logic - Placed before Promise.all to ensure elements are handled\r\n      const startupMenu = document.getElementById('startup-menu');\r\n      const developerModeButton = document.getElementById('developer-mode-button');\r\n      const clientModeButton = document.getElementById('client-mode-button');\r\n      // appBody and clientModeView will be fetched inside showDeveloperMode/showClientMode\r\n      // or assume they are accessible if defined earlier in Office.onReady\r\n\r\n      if (developerModeButton) {\r\n          developerModeButton.onclick = showDeveloperMode; // Assumes showDeveloperMode is globally accessible\r\n      } else {\r\n          console.error(\"[Office.onReady] Could not find button with id='developer-mode-button'\");\r\n      }\r\n      if (clientModeButton) {\r\n          clientModeButton.onclick = showClientMode; // Assumes showClientMode is globally accessible\r\n      } else {\r\n          console.error(\"[Office.onReady] Could not find button with id='client-mode-button'\");\r\n      }\r\n\r\n      // Get references and assign handlers for Back to Menu buttons\r\n      const backToMenuDevButton = document.getElementById('back-to-menu-dev-button');\r\n      const backToMenuClientButton = document.getElementById('back-to-menu-client-button');\r\n\r\n      if (backToMenuDevButton) {\r\n          backToMenuDevButton.onclick = showStartupMenu; // Assumes showStartupMenu is globally accessible\r\n      } else {\r\n          console.error(\"[Office.onReady] Could not find button with id='back-to-menu-dev-button'\");\r\n      }\r\n      if (backToMenuClientButton) {\r\n          backToMenuClientButton.onclick = showStartupMenu; // Assumes showStartupMenu is globally accessible\r\n      } else {\r\n          console.error(\"[Office.onReady] Could not find button with id='back-to-menu-client-button'\");\r\n      }\r\n\r\n      document.getElementById(\"sideload-msg\").style.display = \"none\";\r\n      const appBody = document.getElementById('app-body');\r\n      const clientModeView = document.getElementById('client-mode-view');\r\n\r\n      if (startupMenu) startupMenu.style.display = \"flex\";\r\n      if (appBody) appBody.style.display = \"none\";\r\n      if (clientModeView) clientModeView.style.display = \"none\";\r\n      // End Startup Menu Logic\r\n\r\n    }).catch(error => {\r\n        console.error(\"Error during initialization:\", error);\r\n        showError(\"Error during initialization: \" + error.message);\r\n    });\r\n\r\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\r\n    // document.getElementById(\"app-body\").style.display = \"block\"; // Keep app-body hidden initially\r\n    if (startupMenu) startupMenu.style.display = \"flex\"; // Show startup menu instead\r\n    if (appBody) appBody.style.display = \"none\";\r\n    if (clientModeView) clientModeView.style.display = \"none\";\r\n\r\n    // ... (existing modal logic: applyParamsButton.onclick, window.onclick)\r\n\r\n    // --- Code Suggestion Logic (Restored) ---\r\n    let dynamicSuggestionsContainer = document.getElementById('dynamic-suggestions-container');\r\n    if (!dynamicSuggestionsContainer) {\r\n        dynamicSuggestionsContainer = document.createElement('div');\r\n        dynamicSuggestionsContainer.id = 'dynamic-suggestions-container';\r\n        dynamicSuggestionsContainer.className = 'code-suggestions'; // Reuse class if styling exists\r\n        dynamicSuggestionsContainer.style.display = 'none';\r\n        // Basic positioning styles (adjust in CSS for better control)\r\n        dynamicSuggestionsContainer.style.position = 'absolute';\r\n        dynamicSuggestionsContainer.style.border = '1px solid #ccc';\r\n        dynamicSuggestionsContainer.style.backgroundColor = 'white';\r\n        dynamicSuggestionsContainer.style.maxHeight = '150px';\r\n        dynamicSuggestionsContainer.style.overflowY = 'auto';\r\n        dynamicSuggestionsContainer.style.zIndex = '1000';\r\n\r\n        // Insert after the textarea's container or adjust as needed\r\n        if (codesTextarea && codesTextarea.parentNode) { // Check if codesTextarea exists\r\n            codesTextarea.parentNode.insertBefore(dynamicSuggestionsContainer, codesTextarea.nextSibling);\r\n        } else {\r\n            // Fallback: Append to body, though less ideal positioning\r\n            document.body.appendChild(dynamicSuggestionsContainer);\r\n        }\r\n\r\n        // Function to update position and width\r\n        const updateSuggestionPosition = () => {\r\n          if (dynamicSuggestionsContainer.style.display === 'block' && codesTextarea) {\r\n              const rect = codesTextarea.getBoundingClientRect();\r\n              dynamicSuggestionsContainer.style.width = codesTextarea.offsetWidth + 'px';\r\n              dynamicSuggestionsContainer.style.top = (rect.bottom + window.scrollY) + 'px';\r\n              dynamicSuggestionsContainer.style.left = (rect.left + window.scrollX) + 'px';\r\n          }\r\n        };\r\n\r\n        // Update on resize and scroll\r\n        window.addEventListener('resize', updateSuggestionPosition);\r\n        window.addEventListener('scroll', updateSuggestionPosition, true); // Use capture phase for scroll\r\n    }\r\n\r\n    let highlightedSuggestionIndex = -1;\r\n    let currentSuggestions = [];\r\n\r\n    const updateHighlight = (newIndex) => {\r\n      if (!dynamicSuggestionsContainer) return; // Guard against null\r\n      const suggestionItems = dynamicSuggestionsContainer.querySelectorAll('.code-suggestion-item');\r\n      if (highlightedSuggestionIndex >= 0 && highlightedSuggestionIndex < suggestionItems.length) {\r\n        suggestionItems[highlightedSuggestionIndex].classList.remove('suggestion-highlight');\r\n      }\r\n      if (newIndex >= 0 && newIndex < suggestionItems.length) {\r\n        suggestionItems[newIndex].classList.add('suggestion-highlight');\r\n        suggestionItems[newIndex].scrollIntoView({ block: 'nearest' });\r\n      }\r\n      highlightedSuggestionIndex = newIndex;\r\n    };\r\n\r\n    const showSuggestionsForTerm = (searchTerm) => {\r\n        if (!dynamicSuggestionsContainer || !codesTextarea) return; // Guard against null\r\n\r\n        searchTerm = searchTerm.toLowerCase().trim();\r\n        console.log(`[showSuggestionsForTerm] Search Term: '${searchTerm}'`);\r\n\r\n        dynamicSuggestionsContainer.innerHTML = '';\r\n        highlightedSuggestionIndex = -1;\r\n        currentSuggestions = [];\r\n\r\n        if (searchTerm.length < 2) {\r\n            console.log(\"[showSuggestionsForTerm] Search term too short, hiding suggestions.\");\r\n            dynamicSuggestionsContainer.style.display = 'none';\r\n            return;\r\n        }\r\n\r\n        console.log(\"[showSuggestionsForTerm] Filtering code database...\");\r\n        const suggestions = codeDatabase\r\n            .filter(item => {\r\n                const hasName = item && typeof item.name === 'string';\r\n                return hasName && item.name.toLowerCase().includes(searchTerm);\r\n            })\r\n            .slice(0, 10);\r\n\r\n        currentSuggestions = suggestions;\r\n        console.log(`[showSuggestionsForTerm] Found ${currentSuggestions.length} suggestions:`, currentSuggestions);\r\n\r\n        if (currentSuggestions.length > 0) {\r\n            console.log(\"[showSuggestionsForTerm] Populating suggestions container...\");\r\n            currentSuggestions.forEach((item, i) => {\r\n                const suggestionDiv = document.createElement('div');\r\n                suggestionDiv.className = 'code-suggestion-item';\r\n                suggestionDiv.textContent = item.name;\r\n                suggestionDiv.dataset.index = i;\r\n\r\n                suggestionDiv.onclick = () => {\r\n                    console.log(`Suggestion clicked: '${item.name}'`);\r\n                    const currentText = codesTextarea.value;\r\n                    const cursorPosition = codesTextarea.selectionStart;\r\n                    let codeToAdd = item.code;\r\n\r\n                    let insertionPosition = cursorPosition;\r\n                    let wasAdjusted = false;\r\n                    const textBeforeCursor = currentText.substring(0, cursorPosition);\r\n                    const lastOpenBracket = textBeforeCursor.lastIndexOf('<');\r\n                    const lastCloseBracket = textBeforeCursor.lastIndexOf('>');\r\n\r\n                    if (lastOpenBracket > lastCloseBracket) {\r\n                        const textAfterCursor = currentText.substring(cursorPosition);\r\n                        const nextCloseBracket = textAfterCursor.indexOf('>');\r\n                        if (nextCloseBracket !== -1) {\r\n                            insertionPosition = cursorPosition + nextCloseBracket + 1;\r\n                            wasAdjusted = true;\r\n                            console.log(`Cursor inside <>, adjusting insertion point to after > at ${insertionPosition}`);\r\n                        }\r\n                    }\r\n\r\n                    const maxNumbers = getMaxDriverNumbers(currentText);\r\n                    // Corrected regex - double escapes not needed in string literal here\r\n                    const driverRegex = /(row\\d+\\s*=\\s*\")([A-Z]+)(\\d*)(\\|)/g;\r\n                    const nextNumbers = { ...maxNumbers };\r\n\r\n                    codeToAdd = codeToAdd.replace(driverRegex, (match, rowPart, prefix, existingNumberStr, pipePart) => {\r\n                        nextNumbers[prefix] = (nextNumbers[prefix] || 0) + 1;\r\n                        const newNumber = nextNumbers[prefix];\r\n                        const replacement = `${rowPart}${prefix}${newNumber}${pipePart}`;\r\n                        console.log(`Replacing driver: '${prefix}${existingNumberStr || ''}|' with '${prefix}${newNumber}|'`);\r\n                        return replacement;\r\n                    });\r\n\r\n                    console.log(\"Modified code to add:\", codeToAdd);\r\n\r\n                    const textAfterInsertion = currentText.substring(insertionPosition);\r\n                    let textBeforeFinal = \"\";\r\n                    let searchStartIndex = insertionPosition;\r\n\r\n                    if (!wasAdjusted) {\r\n                        const textBeforeInsertion = currentText.substring(0, insertionPosition);\r\n                        let tempSearchStart = cursorPosition - 1;\r\n                        while (tempSearchStart >= 0) {\r\n                            const char = textBeforeCursor[tempSearchStart];\r\n                             // CORRECTED REGEX IN ONCLICK:\r\n                            if (/\\s|\\n|>|<|;|\\|/.test(char)) {\r\n                                tempSearchStart++;\r\n                                break;\r\n                            }\r\n                            tempSearchStart--;\r\n                        }\r\n                        if (tempSearchStart < 0) tempSearchStart = 0;\r\n\r\n                        searchStartIndex = tempSearchStart;\r\n                        const searchTermToRemove = textBeforeCursor.substring(searchStartIndex, cursorPosition);\r\n                        console.log(`Attempting to replace term: '${searchTermToRemove}' starting at index ${searchStartIndex}`);\r\n                        textBeforeFinal = currentText.substring(0, searchStartIndex);\r\n                    } else {\r\n                         textBeforeFinal = currentText.substring(0, insertionPosition);\r\n                         searchStartIndex = insertionPosition;\r\n                    }\r\n\r\n                    const firstNewlineIndexInSuffix = textAfterInsertion.indexOf('\\n');\r\n                    let remainderOfOriginalLine = \"\";\r\n                    let subsequentLines = \"\";\r\n\r\n                    if (firstNewlineIndexInSuffix === -1) {\r\n                        remainderOfOriginalLine = textAfterInsertion;\r\n                    } else {\r\n                        remainderOfOriginalLine = textAfterInsertion.substring(0, firstNewlineIndexInSuffix);\r\n                        subsequentLines = textAfterInsertion.substring(firstNewlineIndexInSuffix);\r\n                    }\r\n\r\n                    const newText = textBeforeFinal +\r\n                                    codeToAdd +\r\n                                    (remainderOfOriginalLine.length > 0 ? '\\n' : '') +\r\n                                    remainderOfOriginalLine +\r\n                                    subsequentLines;\r\n\r\n                    codesTextarea.value = newText;\r\n\r\n                    const newCursorPos = (textBeforeFinal + codeToAdd).length;\r\n                    codesTextarea.focus();\r\n                    codesTextarea.setSelectionRange(newCursorPos, newCursorPos);\r\n\r\n                    dynamicSuggestionsContainer.innerHTML = '';\r\n                    dynamicSuggestionsContainer.style.display = 'none';\r\n                    highlightedSuggestionIndex = -1;\r\n                    currentSuggestions = [];\r\n                };\r\n\r\n                suggestionDiv.onmouseover = () => {\r\n                    updateHighlight(i);\r\n                };\r\n\r\n                dynamicSuggestionsContainer.appendChild(suggestionDiv);\r\n            });\r\n            console.log(\"[showSuggestionsForTerm] Setting suggestions display to 'block'\");\r\n\r\n            const rect = codesTextarea.getBoundingClientRect();\r\n            dynamicSuggestionsContainer.style.width = codesTextarea.offsetWidth + 'px';\r\n            dynamicSuggestionsContainer.style.top = (rect.bottom + window.scrollY) + 'px';\r\n            dynamicSuggestionsContainer.style.left = (rect.left + window.scrollX) + 'px';\r\n            dynamicSuggestionsContainer.style.display = 'block';\r\n        } else {\r\n            console.log(\"[showSuggestionsForTerm] No suggestions found, hiding container.\");\r\n            dynamicSuggestionsContainer.style.display = 'none';\r\n        }\r\n    };\r\n\r\n    if (codesTextarea && dynamicSuggestionsContainer) {\r\n        codesTextarea.oninput = (event) => {\r\n             if (!event.isTrusted || !dynamicSuggestionsContainer) {\r\n                 return;\r\n             }\r\n            const cursorPosition = codesTextarea.selectionStart;\r\n            const currentText = codesTextarea.value;\r\n\r\n            const textBeforeCursor = currentText.substring(0, cursorPosition);\r\n            const lastOpenBracket = textBeforeCursor.lastIndexOf('<');\r\n            const lastCloseBracket = textBeforeCursor.lastIndexOf('>');\r\n            let isInsideBrackets = false;\r\n            if (lastOpenBracket > lastCloseBracket) {\r\n                const textAfterCursor = currentText.substring(cursorPosition);\r\n                const nextCloseBracket = textAfterCursor.indexOf('>');\r\n                if (nextCloseBracket !== -1 ) {\r\n                    isInsideBrackets = true;\r\n                }\r\n            }\r\n\r\n            if (isInsideBrackets) {\r\n                console.log(\"[Textarea Input] Cursor inside <>, hiding suggestions.\");\r\n                dynamicSuggestionsContainer.style.display = 'none';\r\n                highlightedSuggestionIndex = -1;\r\n                currentSuggestions = [];\r\n            } else {\r\n                let searchStart = cursorPosition - 1;\r\n                while (searchStart >= 0) {\r\n                    const char = textBeforeCursor[searchStart];\r\n                    // CORRECTED REGEX: No double escapes needed\r\n                    if (/\\s|\\n|>|<|;|\\|/.test(char)) {\r\n                        searchStart++;\r\n                        break;\r\n                    }\r\n                    searchStart--;\r\n                }\r\n                if (searchStart < 0) searchStart = 0;\r\n\r\n                console.log(`[Textarea Input Debug] cursorPosition: ${cursorPosition}, calculated searchStart: ${searchStart}, char at searchStart: '${searchStart < currentText.length ? textBeforeCursor[searchStart] : 'EOF'}'`);\r\n\r\n                const searchTerm = textBeforeCursor.substring(searchStart, cursorPosition);\r\n                const trimmedSearchTerm = searchTerm.trim();\r\n\r\n                if (trimmedSearchTerm.length === 0 || !/^[a-zA-Z]/.test(trimmedSearchTerm)) {\r\n                     if (trimmedSearchTerm.length === 0) {\r\n                         console.log(`[Textarea Input] Hiding suggestions (empty term detected immediately after delimiter)`);\r\n                     } else {\r\n                         console.log(`[Textarea Input] Hiding suggestions (term does not start with letter: '${searchTerm}')`);\r\n                     }\r\n                    dynamicSuggestionsContainer.style.display = 'none';\r\n                    highlightedSuggestionIndex = -1;\r\n                    currentSuggestions = [];\r\n                } else {\r\n                    console.log(`[Textarea Input] Cursor outside <>, potential search term: '${searchTerm}'`);\r\n                    showSuggestionsForTerm(searchTerm);\r\n                }\r\n            }\r\n        };\r\n\r\n        codesTextarea.onkeydown = (event) => {\r\n            if (!dynamicSuggestionsContainer || dynamicSuggestionsContainer.style.display !== 'block' || currentSuggestions.length === 0) {\r\n                return;\r\n            }\r\n\r\n            const suggestionItems = dynamicSuggestionsContainer.querySelectorAll('.code-suggestion-item');\r\n            let newIndex = highlightedSuggestionIndex;\r\n\r\n            switch (event.key) {\r\n                case 'ArrowDown':\r\n                case 'ArrowUp':\r\n                    event.preventDefault();\r\n                    newIndex = event.key === 'ArrowDown'\r\n                        ? (highlightedSuggestionIndex + 1) % currentSuggestions.length\r\n                        : (highlightedSuggestionIndex - 1 + currentSuggestions.length) % currentSuggestions.length;\r\n                    updateHighlight(newIndex);\r\n                    break;\r\n\r\n                case 'Enter':\r\n                 case 'Tab':\r\n                    event.preventDefault();\r\n                    if (highlightedSuggestionIndex >= 0 && highlightedSuggestionIndex < suggestionItems.length) {\r\n                        suggestionItems[highlightedSuggestionIndex].click();\r\n                    } else if (currentSuggestions.length > 0 && suggestionItems.length > 0) {\r\n                         suggestionItems[0].click(); // Select first if none highlighted\r\n                    }\r\n                    // Suggestion click handles hiding\r\n                    break;\r\n\r\n                case 'Escape':\r\n                    event.preventDefault();\r\n                    dynamicSuggestionsContainer.style.display = 'none';\r\n                    highlightedSuggestionIndex = -1;\r\n                    currentSuggestions = [];\r\n                    break;\r\n\r\n                default:\r\n                    if (!event.ctrlKey && !event.altKey && !event.metaKey && event.key.length === 1) {\r\n                       updateHighlight(-1);\r\n                    }\r\n                    break;\r\n            }\r\n        };\r\n\r\n         codesTextarea.addEventListener('blur', () => {\r\n             if (!dynamicSuggestionsContainer) return;\r\n             setTimeout(() => {\r\n                 if (!dynamicSuggestionsContainer.contains(document.activeElement)) {\r\n                      dynamicSuggestionsContainer.style.display = 'none';\r\n                      highlightedSuggestionIndex = -1;\r\n                 }\r\n             }, 150);\r\n         });\r\n    }\r\n    // --- End of Code Suggestion Logic ---\r\n\r\n\r\n    // ... (rest of your Office.onReady, e.g., Promise.all)\r\n\r\n    // Make sure initialization runs after setting up modal logic\r\n  }\r\n});\r\n\r\n// >>> ADDED: Function definition moved here\r\nasync function insertResponseToEditor() {\r\n    console.log(\"[insertResponseToEditor] Function called.\");\r\n    if (!lastResponse) {\r\n        console.log(\"[insertResponseToEditor] Exiting: lastResponse is null or empty.\");\r\n        showError('No response to insert');\r\n        return;\r\n    }\r\n\r\n    console.log(\"[insertResponseToEditor] lastResponse:\", lastResponse);\r\n\r\n    const codesTextarea = document.getElementById('codes-textarea');\r\n    if (!codesTextarea) {\r\n        console.error(\"[insertResponseToEditor] Exiting: Could not find codes-textarea.\");\r\n        showError('Could not find the code editor textarea');\r\n        return;\r\n    }\r\n\r\n    console.log(\"[insertResponseToEditor] Found codesTextarea.\");\r\n\r\n    try {\r\n        // Check for valid cursor position FIRST\r\n        if (lastEditorCursorPosition === null) {\r\n             console.log(\"[insertResponseToEditor] Exiting: lastEditorCursorPosition is null.\");\r\n             showError(\"Please click in the code editor first to set the insertion point.\");\r\n             return;\r\n        }\r\n\r\n        let responseText = \"\";\r\n        // >>> MODIFIED: Extract <...> strings and ensure each is on a new line\r\n        let codeStringsToInsert = [];\r\n        if (Array.isArray(lastResponse)) {\r\n            // Filter out empty strings just in case\r\n            codeStringsToInsert = lastResponse.filter(item => typeof item === 'string' && item.trim().length > 0);\r\n        } else if (typeof lastResponse === 'string') {\r\n            const matches = lastResponse.match(/<[^>]+>/g); // Find all <...> patterns\r\n            if (matches) {\r\n                codeStringsToInsert = matches;\r\n            } else if (lastResponse.trim().length > 0) {\r\n                 // Fallback: If it's a string but no <...> found, maybe insert the whole string?\r\n                 // For now, let's only insert if <...> are found based on the requirement.\r\n                 console.log(\"[insertResponseToEditor] lastResponse is a string but no <...> tags found.\");\r\n            }\r\n        } else {\r\n            // Log if the format is unexpected\r\n             console.warn(\"[insertResponseToEditor] lastResponse is not an array or string:\", lastResponse);\r\n        }\r\n\r\n        if (codeStringsToInsert.length === 0) {\r\n            showMessage(\"No code strings found in the response to insert.\");\r\n            console.log(\"[insertResponseToEditor] No <...> strings extracted from lastResponse.\");\r\n            return;\r\n        }\r\n\r\n        // Join the extracted strings, each on its own line\r\n        responseText = codeStringsToInsert.join('\\n');\r\n        // <<< END MODIFIED BLOCK\r\n\r\n        if (!responseText) {\r\n            showMessage(\"Response is empty, nothing to insert.\");\r\n            return;\r\n        }\r\n\r\n        const currentText = codesTextarea.value;\r\n        // Define insertionPoint using the validated cursor position\r\n        const insertionPoint = lastEditorCursorPosition;\r\n\r\n        // >>> ADDED: Check for <TAB; prefix if missing\r\n        const tabPrefix = '<TAB; ';\r\n        const defaultTabString = '<TAB; label1=\"Calcs\";>';\r\n        let addDefaultTab = false;\r\n        if (!currentText.includes(tabPrefix) && !responseText.includes(tabPrefix)) {\r\n            addDefaultTab = true;\r\n            console.log(\"[insertResponseToEditor] Neither editor nor response contains '<TAB; '. Prepending default tab.\");\r\n        }\r\n        // <<< END ADDED CHECK\r\n\r\n        // Validate insertionPoint is within bounds (safety check)\r\n        if (insertionPoint < 0 || insertionPoint > currentText.length) {\r\n             console.error(`[insertResponseToEditor] Invalid insertionPoint: ${insertionPoint}, currentText length: ${currentText.length}`);\r\n             showError(\"Invalid cursor position detected. Please click in the editor again.\");\r\n             lastEditorCursorPosition = null; // Reset invalid position\r\n             return;\r\n        }\r\n\r\n        const textBefore = currentText.substring(0, insertionPoint);\r\n        const textAfter = currentText.substring(insertionPoint);\r\n\r\n        // Insert the response, adding a newline before if inserting mid-text and not at the start or after a newline\r\n        let textToInsert = (addDefaultTab ? defaultTabString + '\\n' : '') + responseText; // Prepend default tab if needed\r\n        if (insertionPoint > 0 && textBefore.charAt(textBefore.length - 1) !== '\\n') {\r\n             textToInsert = '\\n' + textToInsert; // Add leading newline to the combined string (tab + response)\r\n        }\r\n        // Add a newline after if not inserting at the very end or before an existing newline\r\n        if (insertionPoint < currentText.length && textAfter.charAt(0) !== '\\n') {\r\n             textToInsert += '\\n';\r\n        } else if (insertionPoint === currentText.length && currentText.length > 0 && textBefore.charAt(textBefore.length - 1) !== '\\n') {\r\n             // Special case: inserting exactly at the end, ensure newline separation from previous content\r\n             textToInsert = '\\n' + textToInsert;\r\n        }\r\n\r\n\r\n        codesTextarea.value = textBefore + textToInsert + textAfter;\r\n\r\n        // Update the last cursor position to be after the inserted text\r\n        const newCursorPos = insertionPoint + textToInsert.length;\r\n        codesTextarea.focus();\r\n        codesTextarea.setSelectionRange(newCursorPos, newCursorPos);\r\n        lastEditorCursorPosition = newCursorPos; // Update tracked position\r\n\r\n        showMessage(\"Response inserted into editor.\");\r\n        console.log(`Response inserted at position: ${insertionPoint}`);\r\n\r\n    } catch (error) {\r\n        console.error(\"Error inserting response to editor:\", error);\r\n        showError(`Failed to insert response: ${error.message}`);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./taskpane.js\", import.meta.url);\n// Module\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Projectify Task Pane</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <\" + \"script src=\\\"https://cdn.sheetjs.com/xlsx-0.20.1/package/dist/xlsx.full.min.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-Fabric\\\" dir=\\\"ltr\\\"> <div id=\\\"sideload-msg\\\" class=\\\"ms-Rule ms-font-xl\\\"> <p>Please <a target=\\\"_blank\\\" href=\\\"https://learn.microsoft.com/office/dev/add-ins/testing/sideload-office-add-ins-for-testing\\\" rel=\\\"noopener\\\">sideload</a> your add-in to see app body.</p> </div> <div id=\\\"startup-menu\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none;justify-content:center;align-items:center;flex-direction:column;height:100vh\\\"> <h1 class=\\\"ms-fontSize-su ms-fontWeight-light ms-fontColor-neutralPrimary\\\">Choose Mode</h1> <div style=\\\"margin-top:20px\\\"> <button id=\\\"developer-mode-button\\\" class=\\\"ms-Button ms-Button--primary\\\" style=\\\"margin-right:10px\\\"> <span class=\\\"ms-Button-label\\\">Developer Mode</span> </button> <button id=\\\"client-mode-button\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Client Mode</span> </button> </div> </div> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none\\\"> <button id=\\\"back-to-menu-dev-button\\\" class=\\\"ms-Button back-to-menu-button\\\"> <span class=\\\"ms-Button-label\\\">Back to Menu</span> </button> <div class=\\\"container\\\"> <div id=\\\"chat-log\\\" class=\\\"chat-log\\\"> <div id=\\\"welcome-message\\\" class=\\\"welcome-message\\\"> <h1>What would you like to model?</h1> </div> </div> <div class=\\\"input-area\\\"> <input type=\\\"text\\\" id=\\\"user-input\\\" placeholder=\\\"Enter your request here...\\\"> <button id=\\\"send\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Send</span> </button> <div id=\\\"loading-animation\\\" class=\\\"loading-animation\\\"></div> <button id=\\\"write-to-excel\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Write Response to Excel</span> </button> <button id=\\\"insert-to-editor\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Insert to Editor</span> </button> <button id=\\\"reset-chat\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Reset Chat</span> </button> </div> <div class=\\\"code-area\\\"> <h2>Codes</h2> <textarea id=\\\"codes-textarea\\\" rows=\\\"15\\\" placeholder=\\\"Code strings will appear here after generation or can be pasted...\\\"></textarea> <div id=\\\"dynamic-suggestions-container\\\" class=\\\"code-suggestions\\\"></div> <div class=\\\"code-area-buttons\\\"> <button id=\\\"edit-code-params-button\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Edit Params</span> </button> <button id=\\\"insert-and-run\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Run Codes</span> </button> <button id=\\\"generate-tab-string-button\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Generate Tab Index</span> </button> </div> </div> <div id=\\\"code-params-modal\\\" class=\\\"modal\\\"> <div class=\\\"modal-content\\\"> <span class=\\\"close-button\\\">&times;</span> <h2>Edit Code Parameters</h2> <div class=\\\"modal-find-replace\\\"> <input type=\\\"text\\\" id=\\\"modal-find-input\\\" placeholder=\\\"Find in Params\\\"> <input type=\\\"text\\\" id=\\\"modal-replace-input\\\" placeholder=\\\"Replace With\\\"> <button id=\\\"modal-replace-all-button\\\" class=\\\"ms-Button\\\">Replace All</button> <span id=\\\"modal-search-status\\\"></span> </div> <form id=\\\"code-params-modal-form\\\"> </form> <div class=\\\"modal-actions\\\"> <button id=\\\"apply-code-params-button\\\" class=\\\"ms-Button ms-Button--primary\\\">Apply</button> <button id=\\\"cancel-code-params-button\\\" class=\\\"ms-Button\\\">Cancel</button> </div> </div> </div> </div> </main> <div id=\\\"client-mode-view\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none;justify-content:center;align-items:center;height:100vh;position:relative;flex-direction:column\\\"> <button id=\\\"back-to-menu-client-button\\\" class=\\\"ms-Button back-to-menu-button\\\"> <span class=\\\"ms-Button-label\\\">Back to Menu</span> </button> <button id=\\\"reset-chat-icon-button\\\" class=\\\"ms-Button ms-Button--icon\\\" style=\\\"position:absolute;top:15px;right:15px;background-color:transparent;border:none;cursor:pointer\\\"> <svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path d=\\\"M10.25 3.75C10.25 3.33579 9.91421 3 9.5 3H4.75C3.64543 3 2.75 3.89543 2.75 5V19C2.75 20.1046 3.64543 21 4.75 21H19.25C20.3546 21 21.25 20.1046 21.25 19V14.5C21.25 14.0858 20.9142 13.75 20.5 13.75C20.0858 13.75 19.75 14.0858 19.75 14.5V19C19.75 19.4142 19.4142 19.75 19.25 19.75H4.75C4.33579 19.75 4.25 19.4142 4.25 19V5C4.25 4.58579 4.58579 4.25 4.75 4.25H9.5C9.91421 4.25 10.25 3.91421 10.25 3.75ZM15 3.75C15 3.33579 15.3358 3 15.75 3H20.25C20.6642 3 21 3.33579 21 3.75V8.25C21 8.66421 20.6642 9 20.25 9C19.8358 9 19.5 8.66421 19.5 8.25V4.90527L12.7022 11.7022C12.4093 11.9951 11.9344 11.9951 11.6415 11.7022C11.3486 11.4093 11.3486 10.9344 11.6415 10.6415L18.4384 3.84473H15.75C15.3358 3.84473 15 3.49995 15 3.75Z\\\" fill=\\\"currentColor\\\"/> </svg> </button> <h1 id=\\\"client-mode-header\\\" class=\\\"ms-fontSize-32 ms-fontWeight-light ms-fontColor-neutralPrimary\\\" style=\\\"margin-bottom:20px\\\">What do you want to model?</h1> <div id=\\\"client-chat-container\\\" class=\\\"container\\\" style=\\\"width:90%;max-width:800px;height:70%;padding:10px;box-sizing:border-box;display:flex;flex-direction:column\\\"> <div id=\\\"chat-log-client\\\" class=\\\"chat-log\\\" style=\\\"flex-grow:0;overflow-y:auto;border-bottom:1px solid #eee;margin-bottom:10px\\\"> <div id=\\\"welcome-message-client\\\" class=\\\"welcome-message\\\" style=\\\"display:none\\\"> <h1>Ask me anything (Client Mode)</h1> </div> </div> <div id=\\\"client-input-wrapper\\\" class=\\\"client-input-area-wrapper\\\"> <div class=\\\"chatgpt-input-bar\\\"> <textarea id=\\\"user-input-client\\\" placeholder=\\\"Describe your business\\\" rows=\\\"1\\\"></textarea> <button id=\\\"send-client\\\" class=\\\"ms-Button ms-Button--icon\\\"> <svg viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"send-icon\\\"> <path d=\\\"M12 4L12 20M12 4L18 10M12 4L6 10\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\"/> </svg> </button> </div> <div id=\\\"loading-animation-client\\\" class=\\\"loading-animation\\\" style=\\\"display:none\\\"></div> </div> </div> </div> <\" + \"script src=\\\"\" + ___HTML_LOADER_IMPORT_1___ + \"\\\"><\" + \"/script> </body> </html>\";\n// Exports\nexport default code;"],"names":["Object","defineProperty","exports","value","BasePineconeError","Error","constructor","message","cause","super","setPrototypeOf","this","prototype","captureStackTrace","name","getFetch","errors_1","config","fetchApi","g","fetch","PineconeConfigurationError","extractMessage","async","error","response","text","messageJSON","JSON","parse","e","__createBinding","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","__exportStar","p","hasOwnProperty","call","handleApiError","PineconeArgumentError","PineconeRequestError","PineconeConnectionError","PineconeUnableToResolveHostError","PineconeEnvironmentVarsNotSupportedError","PineconeUnexpectedResponseError","config_1","request_1","base_1","validation_1","utils_1","handling_1","__setModuleDefault","v","__importStar","mod","result","buildUserAgent","environment_1","packageInfo","userAgentParts","version","isEdge","push","process","sourceTag","normalizeSourceTag","join","toLowerCase","replace","trim","ChatStream","convertKeys_1","stream","Symbol","asyncIterator","buffer","chunk","newlineIndex","toString","indexOf","line","slice","startsWith","json","parsedJson","convertedJson","convertKeysToCamelCase","err","console","debug","RetryOnServerFailure","asyncFn","maxRetries","calculateRetryDelay","attempt","baseDelay","maxDelay","jitterFactor","delay","Math","random","min","max","execute","args","isRetryError","mappedError","mapErrorIfNeeded","shouldStopRetrying","PineconeMaxRetriesExceededError","includes","status","delayTime","Promise","resolve","setTimeout","mapHttpStatusError","queryParamsStringify","params","prefix","keys","map","key","querystringSingleKey","filter","part","length","keyPrefix","fullKey","Array","isArray","multiValue","singleValue","encodeURIComponent","String","Set","from","Date","toISOString","url","urlMessage","context","init","method","debugLog","str","PINECONE_DEBUG","log","body","normalizeUrl","cachedSetTimeout","cachedClearTimeout","module","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","arguments","i","apply","title","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","PineconeUnmappedHttpError","PineconeNotImplementedError","PineconeUnavailableError","PineconeInternalServerError","PineconeConflictError","PineconeNotFoundError","PineconeAuthorizationError","PineconeBadRequestError","CONFIG_HELP","failedRequest","retries","requestInfo","failedRequestInfo","isBrowser","EdgeRuntime","window","object","item","entries","reduce","acc","toCamelCase","_","letter","toUpperCase","http_1","customMessage","responseError","rawMessage","statusCode","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis","Function","obj","prop","scriptUrl","importScripts","location","document","currentScript","tagName","src","scripts","getElementsByTagName","test","b","baseURI","self","href","_regeneratorRuntime","t","r","n","a","iterator","c","u","toStringTag","define","wrap","Generator","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","__await","then","callInvokeWithMethodAndArg","done","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","__proto__","awrap","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","catch","delegateYield","_createForOfIteratorHelper","_arrayLikeToArray","_unsupportedIterableToArray","_n","F","asyncGeneratorStep","_asyncToGenerator","_next","_throw","validateCodeStrings","_x","_validateCodeStrings","_callee","inputCodeStrings","errors","tabLabels","rowValues","codeTypes","validCodes","fileContent","_iterator","_step","codeString","rowMatches","codeMatch","codeType","_iterator2","_step2","_codeString","_codeMatch","_codeType","labelMatch","label","_rowMatches","_iterator3","_step3","_codeString2","driverMatches","_context","match","ok","split","t0","endsWith","parts","trimmedPart","afterAsterisk","substring","add","t1","has","rowContent","t2","driverValue","validateCodeStringsForRun","_x3","_validateCodeStringsForRun","_callee3","_iterator4","_step4","_iterator5","_step5","_codeString3","_codeMatch2","_codeType2","_rowMatches2","_iterator6","_step6","_codeString4","_context3","ownKeys","getOwnPropertySymbols","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","toPrimitive","_toPrimitive","_toPropertyKey","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","populateCodeCollection","inputText","codeCollection","paramsString","matchAll","rowNum","rowValue","paramName","paramValue","runCodes","_runCodes","currentWorksheetName","assumptionTabs","_loop","finalResult","_context4","processedCodes","createdTabs","code","tabName","label1","Label1","Excel","_ref3","sheets","existingSheet","financialsSheet","newSheet","sourceSheetName","sourceCalcsWS","usedRange","lastColIndex","lastColLetter","linkRangeAddress","linkRange","cellValue","colLetter","cellAddress","formula","headerFormatRangeAddress","workbook","worksheets","load","sync","items","find","sheet","getItem","position","copy","warn","getRange","clear","ClearApplyTo","all","getUsedRange","columnCount","columnIndexToLetter","formulas","format","font","color","tabColor","worksheet","_x26","codeIndex","_ref4","_callee2","codesWS","currentWS","lastUsedRow","pasteRow","firstRow","lastRow","columnD","_i2","row","sourceRange","numPastedRows","endPastedRow","rangeAddressToBold","_numPastedRows","_endPastedRow","rangeKtoP","rangeStoCX","indentValue","_numPastedRows2","_endPastedRow2","indentRangeAddress","_numPastedRows3","_endPastedRow3","formulaRange","originalFormulasRow","newFormulasRow","formulasChanged","_i3","currentCellFormula","formatValue","_numPastedRows4","_endPastedRow4","formatRangeAddress","rangeToFormat","numberFormatString","fullItalicRangeAddress","fullRangeToHandleItalics","italicValue","_numPastedRows5","_endPastedRow5","italicRangeAddress","rangeToItalicize","currentWorksheet","_context2","rowCount","getLastRow","rowIndex","copyFrom","RangeCopyType","bold","topborder","borders","style","weight","indent","parseInt","indentLevel","negative","numberFormat","italic","driverAndAssumptionInputs","_x27","tab","_x2","_x4","_driverAndAssumptionInputs","_callee9","calcsPasteRow","worksheetName","_context10","_ref6","_callee6","_context7","_x29","_ref7","_callee7","lastRowRange","_context8","_x30","_ref8","_callee8","determinedLastRow","TARGET_COL","processStartRow","processEndRow","formulaRangeAddress","targetColIndex","formulasUpdated","origFormulas","newFormulas","rowFormulas","cellRefRegex","originalFormula","columnSequence","codeValue","searchRow","searchRange","searchRangeAddress","checkRow","isGreen","cellB","targetRow","driverParam","labelParam","currentCheckRowForInserts","rowParam","rowItems","numNewRows","baseRowForThisG","insertStartAddress","_i4","sourceRowNum","targetRowNum","sourceRowRange","targetRowRange","yy","currentRowNum","splitArray","x","valueToWrite","cellToWrite","numValue","_context9","columnLetterToIndex","col","fill","financialsdriver","insert","InsertShiftDirection","down","formats","Number","_x31","getLastUsedRow","_x5","_x6","_getLastUsedRow","_callee10","columnLetter","fullColumn","lastCell","lastRowIndex","_context11","getLastCell","adjustDriversJS","_x7","_x8","_adjustDriversJS","_callee11","START_ROW","DRIVER_CODE_COL","LOOKUP_COL","driverCodeRangeAddress","lookupRangeAddress","driverCodeRange","lookupRange","driverCodeValues","lookupValues","lookupMap","outputValues","foundCount","notFoundCount","_i5","driverCode","currentRow","foundRow","targetAddress","targetRangeAddress","targetRange","_context12","Map","set","size","replaceIndirectsJS","_x9","_x10","_replaceIndirectsJS","_callee12","originalFormulas","referencesToLookup","formulaData","searchStartIndex","upperFormula","indirectStartIndex","parenStartIndex","parenEndIndex","argString","_step5$value","refString","data","_step6$value","_refString","_data","cellText","_i6","_formulaData","currentFormula","loopCount","MAX_LOOPS","_upperFormula","_indirectStartIndex","_parenStartIndex","_parenEndIndex","indString","_argString","directRef","_context13","index","range","rangeError","debugInfo","valueError","populateFinancialsJS","_x11","_x12","_x13","_populateFinancialsJS","_callee13","CALCS_FIRST_ROW","ASSUMPTION_CODE_COL","ASSUMPTION_LINK_COL_B","ASSUMPTION_LINK_COL_D","ASSUMPTION_MONTHS_START_COL","FINANCIALS_CODE_COLUMN","FINANCIALS_TARGET_COL_B","FINANCIALS_TARGET_COL_D","FINANCIALS_ANNUALS_START_COL","FINANCIALS_MONTHS_START_COL","ANNUALS_END_COL","MONTHS_END_COL","GREEN_COLOR","CURRENCY_FORMAT","_assumptionCodes$leng","assumptionCodeRange","financialsSearchCol","financialsUsedRange","financialsLastRow","fallbackRange","lastRowB","financialsCodeMap","financialsCodeRange","_i7","upperCode","tasks","assumptionCodes","_i8","_assumptionCodes$leng2","_code","assumptionRow","linkFormulaB","linkFormulaD","linkFormulaMonths","_upperCode","_i9","_tasks","task","originalTargetRowsAsc","taskAdjustedRows","totalShift","_i10","_tasks2","_task","populateRow","cellD","cellAnnualsStart","cellMonthsStart","codePrefix","formulaJ","actualsRange","numCols","formulasArray","_i11","_tasks3","_task2","_populateRow","sourceAnnuals","destAnnuals","sourceMonths","destMonths","codeColRange","currentCodeValues","modifiedCodeValues","modifiedCount","_i12","originalValue","_context14","addressB","addressD","addressMonths","sort","_toConsumableArray","uniqueRow","tasksAtThisRow","currentAdjustedRowForGroup","formulasR1C1","sumifsError","autoFill","AutoFillType","fillDefault","autofillError","t3","t4","processAssumptionTabs","_x15","_processAssumptionTabs","_callee17","assumptionTabNames","FINANCIALS_SHEET_NAME","AUTOFILL_START_COLUMN","_iterator7","_step7","_loop2","_context19","_context18","_ref10","_callee16","updatedLastRow","finalLastRow","fillRange","_context17","setColumnAFontWhite","applyIndexGrowthCurveJS","deleteGreenRows","_x33","_ref9","_callee15","finSheet","_context16","_x32","_x16","_x17","_x18","_deleteGreenRows","_callee18","startRow","rowsToDelete","cell","_iterator8","_step8","_rowNum","newLastRow","_context20","delete","DeleteShiftDirection","up","_x19","_x20","_x21","_setColumnAFontWhite","_callee19","_context21","fromCharCode","charCodeAt","floor","hideColumnsAndNavigate","_x22","_hideColumnsAndNavigate","_callee21","ACTUALS_START_COL","ACTUALS_END_COL","targetSheetNames","_context23","_ref11","_callee20","hideAttempted","actualsEndIndex","actualsEndMinusOneCol","_iterator9","_step9","_worksheet2","_sheetName3","_iterator10","_step10","_sheetName4","_worksheet3","_iterator11","_step11","_sheetName5","_worksheet4","allWorksheets","sheetsToDelete","_iterator12","_step12","_sheetName","_iterator13","_step13","sheetName","priorityOrder","finalWorksheets","allSheetNames","orderedSheets","otherSheets","_iterator14","_step14","priorityName","_iterator15","_step15","_sheetName2","finalOrder","rangeJ10","activeWindow","_context22","rowHidden","columnHidden","stringify","activate","select","deleteError","t5","t6","ws","positionError","t7","t8","getActiveCell","getWorksheet","getActiveView","zoomLevel","zoomError","t9","t10","_x34","handleInsertWorksheetsFromBase64","_x23","_handleInsertWorksheetsFromBase","_callee25","base64String","sheetNames","_args27","_context27","_ref13","_callee24","_context26","insertWorksheetsFromBase64","_x36","_x24","_x25","_applyIndexGrowthCurveJS","_callee26","initialLastRow","BEGIN_MARKER","END_MARKER","DATA_COL","OUTPUT_COL_B","OUTPUT_COL_C","OUTPUT_COL_D","CHECK_COL_B","VALUE_COL_A","DRIVER_REF_COL","SUMIF_START_COL","SUMIF_END_COL","SUMPRODUCT_COL","MONTHS_START_COL","LIGHT_BLUE_COLOR","LIGHT_GREEN_COLOR","indexEndRow","indexRows","dataColRangeAddress","formatCheckStartRow","formatCheckEndRow","checkColorRange","_i13","_currentRow","newRowStart","newRowEnd","sourceBlockRange","outputDataBC","outputDataD","sourceValues","_i14","_indexRows","originalRow","rowIndexInBlock","valB","valC","sourceColCRange","sourceColARange","sourceValuesC","sourceValuesA","numSumifCols","sumifFormulas","_i15","_originalRow","_rowIndexInBlock","codeC","valueA","baseFormula","driverCell","driverRangeString","_i16","_originalRow2","dataRangeString","sumproductFormula","_i17","sourceRow","_targetRow","_i18","_indexRows2","_originalRow3","_context28","border","contents","buildRowArrayString","valuesRow","formulasRow","formulaCols","_i","_cols","colIndex","valueString","processCodeBlock","startDataRowIndex","endDataRowIndex","codeName","rangeStartRowExcel","blockString","rowArrayString","generateTabString","_generateTabString","_ref","finalResultString","sheetCodeBlocks","lastUsedRowInB","bottomCellInB","lastUsedCellInB","dynamicRangeAddress","loadedRowCount","hasDataInD","manualRowCount","_r","currentBlockStartDataRow","currentBlockCodeName","_r2","dValue","tabLine","getRangeEdge","KeyboardDirection","OfficeExtension","_asyncIterator","AsyncFromSyncIterator","AsyncFromSyncIteratorContinuation","reject","throw","_awaitAsyncGenerator","_OverloadYield","_wrapAsyncGenerator","AsyncGenerator","resume","settle","modelPlannerConversationHistory","AI_MODEL_PLANNER_OPENAI_API_KEY","lastPlannerResponseForClient","setAIModelPlannerOpenApiKey","getAIModelPlanningSystemPrompt","_getAIModelPlanningSystemPrompt","_callee4","promptKey","paths","_paths","path","statusText","callOpenAIForModelPlanner","_callOpenAIForModelPlanner","messages","options","_options$model","model","_options$temperature","temperature","_options$stream","_messages$find","_messages$filter$pop","systemMessageContent","lastUserMessageContent","errorData","reader","decoder","_yield$_awaitAsyncGen","lines","parsedLines","parsedLine","msg","role","content","headers","getReader","TextDecoder","read","decode","choices","processAIModelPlannerPromptInternal","_processAIModelPlannerPromptInternal","userInput","systemPrompt","_ref$history","history","_ref$stream","streamResponse","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","responseContent","displayInClientChatLogPlanner","isUser","chatLog","getElementById","welcomeMessage","container","createElement","id","className","display","flexGrow","overflowY","appendChild","getComputedStyle","visibility","opacity","parentElement","classList","contains","messageElement","contentElement","textContent","whiteSpace","scrollTop","scrollHeight","children","setClientLoadingStatePlanner","isLoading","sendButton","loadingAnimation","disabled","_handleAIModelPlannerConversation","_handleAIModelPlannerConversation2","_options$stream2","isFollowUp","fullAssistantResponseContent","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_chunk$choices$","fullResponse","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","assistantResponseContent","delta","_executePlannerCodes","_executePlannerCodes2","modelCodesString","runResult","_runResult","validationErrors","errorMsg","worksheetsResponse","wsArrayBuffer","wsUint8Array","wsBinaryString","codesResponse","codesArrayBuffer","codesUint8Array","codesBinaryString","collection","_ref2","application","calculationMode","CalculationMode","manual","arrayBuffer","Uint8Array","btoa","ErrorCodes","itemNotFound","automatic","plannerHandleSend","_plannerHandleSend","userInputElement","clientHeader","clientChatContainer","chatLogClient","clientModeView","computedDisplay","welcomeMessageClient","assistantMessageDiv","assistantMessageContent","fullAssistantTextResponse","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_chunk$choices$2","jsonObjectToProcess","parsedResponse","ModelCodes","tabLabel","lowerCaseTabLabel","tabDescription","tabDescriptionString","aiResponseForTabArray","formattedAiResponse","currentRetryCount","retryPrompt","retryStream","retryFullResponse","_iteratorAbruptCompletion5","_didIteratorError5","_iteratorError5","_chunk","_chunk$choices$3","_content","retryJsonObject","parsedRetry","_ModelCodes","_tabLabel","_lowerCaseTabLabel","_tabDescription","_tabDescriptionString","_aiResponseForTabArray","_formattedAiResponse","alert","offsetHeight","cssText","borderBottom","marginBottom","getAICallsProcessedResponse","retryCount","plannerHandleReset","innerHTML","remove","welcomeTitle","plannerHandleWriteToExcel","contentToWrite","plannerHandleInsertToEditor","contentToInsert","API_KEYS","OPENAI_API_KEY","PINECONE_API_KEY","INTERNAL_API_KEYS","performance","now","srcPaths","initializeAPIKeys","_initializeAPIKeys","configResponse","configText","openaiKeyMatch","pineconeKeyMatch","keysFound","configApiKeys","PINECONE_INDEXES","codes","apiEndpoint","call2trainingdata","call2context","call1context","GPT41","saveConversationHistory","localStorage","setItem","callOpenAI","_callOpenAI","createEmbedding","_createEmbedding","_callee5","_context5","input","embedding","loadPromptFromFile","_loadPromptFromFile","_context6","getSystemPromptFromFile","_getSystemPromptFromFile","prompt","processPrompt","_processPrompt","openaiCallOptions","contentPart","parsed","structureDatabasequeries","_structureDatabasequeries","clientprompt","systemStructurePrompt","queryStrings","results","queryString","queryResults","queryVectorDB","queryPrompt","similarityThreshold","indexName","numResults","query","trainingData","call2Context","call1Context","codeOptions","_queryVectorDB","_ref2$indexName","_ref2$numResults","_ref2$similarityThres","indexConfig","errorText","matches","cleanMatches","vector","topK","includeMetadata","namespace","score","extractTextFromJson","jsonInput","_jsonData$metadata","jsonData","metadata","_item$metadata","safeJsonForPrompt","readable","_item$metadata2","toFixed","handleFollowUpConversation","_handleFollowUpConversation","currentHistory","mainPromptText","trainingdataCall2","followUpPrompt","responseArray","updatedHistory","savePromptAnalysis","saveTrainingData","handleInitialConversation","_handleInitialConversation","initialCallPrompt","outputArray","initialHistory","handleConversation","_handleConversation","mainPrompt","validationSystemPrompt","validationMainPrompt","validationResults","analysisData","clientRequest","cleanText","validationCorrection","_x14","_validationCorrection","_callee14","initialResponse","promptAnalysisData","responseString","validationResultsString","correctionPrompt","correctedResponseArray","correctionOutputPath","correctedResponseString","_getAICallsProcessedResponse","userInputString","dbResults","plainTextResults","enhancedPrompt","combinedInputForAI","Office","onReady","info","showDeveloperModeView","showClientModeView","showStartupMenuView","sendClientButton","resetClientChatButton","writeToExcelClientButton","insertToEditorClientButton","userInputClient","startupMenu","developerModeButton","clientModeButton","appBody","backToMenuDevButton","backToMenuClientButton","host","HostType","onclick","addEventListener","event","shiftKey","preventDefault","loadedCodeStrings","codeDatabase","lastEditorCursorPosition","loadCodeDatabase","_loadCodeDatabase","showError","conversationHistory","isResponse","conversationHistoryClient","showMessage","messageDiv","padding","margin","borderRadius","insertBefore","firstChild","errorDiv","setButtonLoading","newDisplay","setButtonLoadingClient","lastResponse","writeToExcel","_writeToExcel","startCol","codeStrings","fullText","getSelectedRange","columnIndex","getRangeByIndexes","appendMessage","chatLogId","welcomeMessageId","messageContent","handleSend","_handleSend","conversationResult","handleSendClient","_handleSendClient","fullAssistantResponse","user","assistant","resetChat","resetChatClient","welcomeTitleClient","getTabBlocks","tabBlocks","tabRegex","indices","exec","tag","start","end","blockText","insertSheetsAndRunCodes","_insertSheetsAndRunCodes","codesTextarea","codesToRun","previousCodes","allCodeContentToProcess","_runResult2","financialsSheetExists","worksheetsArrayBuffer","worksheetsUint8Array","worksheetsBinaryString","worksheetsBase64String","currentTabs","previousTabs","previousTabMap","hasAnyChanges","codeRegex","currentTab","currentTag","currentText","previousText","newTabCodes","currentCodes","previousCodesSet","tabHasChanges","codesToAddForThisTab","currentCode","_validationErrors","_errorMsg","_context15","_ref12","block","_ref14","insertResponseToEditor","_insertResponseToEditor","responseText","codeStringsToInsert","insertionPoint","tabPrefix","defaultTabString","addDefaultTab","textBefore","textAfter","textToInsert","newCursorPos","focus","setSelectionRange","showDeveloperMode","showClientMode","showStartupMenu","userInputClientTextarea","height","newHeight","maxHeight","button","writeButton","resetButton","resetChatClientButton","resetChatIconButton","generateTabStringButton","editParamsButton","paramsModal","paramsModalForm","closeModalButton","querySelector","applyParamsButton","cancelParamsButton","modalFindInput","modalReplaceInput","modalReplaceAllButton","modalSearchStatus","currentCodeStringRange","currentCodeStringType","modalSearchableElements","resetModalSearchState","querySelectorAll","updateModalSearchStatus","hideParamsModal","codeInfo","cursorPos","textBeforeCursor","textAfterCursor","lastOpenBracket","lastIndexOf","firstCloseBracketAfter","findCodeStringAroundCursor","selectionStart","_parseCodeParameters","paramRegex","lastIndex","parseCodeParameters","paramEntryDiv","inputElement","htmlFor","isLongValue","isLIParam","rows","dataset","paramKey","isOriginalLi","liContainer","originalLiKey","addButton","targetLiKey","sourceInput","newValueContainer","newInput","cloneNode","isAddedLi","removeButton","target","parentNode","populateParamsModal","paramValues","isOriginalLI","isAddedLI","addedInput","originalKey","updatedParams","finalValue","newCodeStringContent","newCodeString","searchTerm","replaceTerm","replacementsMade","element","currentValue","escapedSearchTerm","newValue","RegExp","_ref5","setAPIKeys","parsedHistory","loadConversationHistory","storedCodes","updateCursorPosition","insertToEditorButton","dynamicSuggestionsContainer","backgroundColor","zIndex","nextSibling","updateSuggestionPosition","rect","getBoundingClientRect","width","offsetWidth","top","bottom","scrollY","left","scrollX","highlightedSuggestionIndex","currentSuggestions","updateHighlight","newIndex","suggestionItems","scrollIntoView","oninput","isTrusted","cursorPosition","isInsideBrackets","searchStart","char","trimmedSearchTerm","suggestions","suggestionDiv","codeToAdd","insertionPosition","wasAdjusted","nextCloseBracket","nextNumbers","maxNumbers","regex","numberStr","number","getMaxDriverNumbers","rowPart","existingNumberStr","pipePart","newNumber","replacement","textAfterInsertion","textBeforeFinal","tempSearchStart","searchTermToRemove","firstNewlineIndexInSuffix","remainderOfOriginalLine","subsequentLines","newText","onmouseover","showSuggestionsForTerm","onkeydown","click","ctrlKey","altKey","metaKey","activeElement","URL"],"sourceRoot":""}