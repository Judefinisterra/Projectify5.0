{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/handling.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/assistant/chatStream.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/http.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/fetch.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/index.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/retries.js","webpack://excel-custom-functions-js/../../../node_modules/process/browser.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/config.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/normalizeUrl.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/request.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/base.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/debugLog.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/environment.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/index.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/convertKeys.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/utils.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/user-agent.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/queryParamsStringify.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/validation.js","webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/webpack/runtime/global","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions-js/webpack/runtime/publicPath","webpack://excel-custom-functions-js/webpack/runtime/jsonp chunk loading","webpack://excel-custom-functions-js/./src/taskpane/Validation.js","webpack://excel-custom-functions-js/./src/taskpane/CodeCollection.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.html"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleApiError = void 0;\nconst utils_1 = require(\"./utils\");\nconst http_1 = require(\"./http\");\nconst request_1 = require(\"./request\");\n/** @internal */\nconst handleApiError = async (e, customMessage, url) => {\n    if (e instanceof Error && e.name === 'ResponseError') {\n        const responseError = e;\n        const rawMessage = await (0, utils_1.extractMessage)(responseError);\n        const statusCode = responseError.response.status;\n        const message = customMessage\n            ? await customMessage(statusCode, rawMessage)\n            : rawMessage;\n        return (0, http_1.mapHttpStatusError)({\n            status: responseError.response.status,\n            url: responseError.response.url || url,\n            message: message,\n        });\n    }\n    else if (e instanceof request_1.PineconeConnectionError) {\n        // If we've already wrapped this error, just return it\n        return e;\n    }\n    else {\n        // There seem to be some situations where \"e instanceof Error\" is erroneously\n        // false (perhaps the custom errors emitted by cross-fetch do not extend Error?)\n        // but we can still cast it to an Error type because all we're going to do\n        // with it is store off a reference to whatever it is under the \"cause\"\n        const err = e;\n        return new request_1.PineconeConnectionError(err);\n    }\n};\nexports.handleApiError = handleApiError;\n//# sourceMappingURL=handling.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChatStream = void 0;\nconst convertKeys_1 = require(\"../utils/convertKeys\");\n/**\n * Implements an async iterable that processes the readable stream of an assistant chat response.\n *\n * This class expects each chunk of data in the stream to begin with `data:` and be followed by a valid chunk of JSON.\n * If a chunk contains malformed JSON, it is skipped, and a debug message is logged.\n *\n * @template Item - The type of items yielded by the iterable.\n */\nclass ChatStream {\n    constructor(stream) {\n        this.stream = stream;\n    }\n    async *[Symbol.asyncIterator]() {\n        let buffer = '';\n        for await (const chunk of this.stream) {\n            buffer += chunk.toString();\n            let newlineIndex;\n            while ((newlineIndex = buffer.indexOf('\\n')) !== -1) {\n                const line = buffer.slice(0, newlineIndex).trim();\n                buffer = buffer.slice(newlineIndex + 1);\n                // each chunk of json should begin with 'data:'\n                if (line && line.startsWith('data:')) {\n                    const json = line.slice(5).trim();\n                    try {\n                        const parsedJson = JSON.parse(json);\n                        const convertedJson = (0, convertKeys_1.convertKeysToCamelCase)(parsedJson);\n                        yield convertedJson;\n                    }\n                    catch (err) {\n                        console.debug(`Skipping malformed JSON:${line}`);\n                        continue;\n                    }\n                }\n            }\n        }\n        if (buffer.trim()) {\n            try {\n                const parsedJson = JSON.parse(buffer);\n                const convertedJson = (0, convertKeys_1.convertKeysToCamelCase)(parsedJson);\n                yield convertedJson;\n            }\n            catch (err) {\n                console.debug(`Skipping malformed JSON:${buffer}`);\n            }\n        }\n    }\n}\nexports.ChatStream = ChatStream;\n//# sourceMappingURL=chatStream.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mapHttpStatusError = exports.PineconeUnmappedHttpError = exports.PineconeNotImplementedError = exports.PineconeUnavailableError = exports.PineconeMaxRetriesExceededError = exports.PineconeInternalServerError = exports.PineconeConflictError = exports.PineconeNotFoundError = exports.PineconeAuthorizationError = exports.PineconeBadRequestError = void 0;\nconst base_1 = require(\"./base\");\nconst CONFIG_HELP = `You can find the configuration values for your project in the Pinecone developer console at https://app.pinecone.io`;\n/** This error is thrown when API requests return with status 400. Typically this is due to some aspect of the request being incorrect or invalid.\n *\n * Some examples when this error could occur:\n * - While attempting to create an index with no available quota in your project.\n * - While upserting records that do not match the `dimension` of your index\n * - While attempting to create an index using an invalid name (\"!@#$%\")\n */\nclass PineconeBadRequestError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { message } = failedRequest;\n        super(message);\n        this.name = 'PineconeBadRequestError';\n    }\n}\nexports.PineconeBadRequestError = PineconeBadRequestError;\n/**\n * This error occurs when API requests are attempted using invalid configurations such as a mispelled or revoked API key.\n *\n * Log in to https://app.pinecone.io to verify you have configured the { @link Pinecone }\n * client using the correct values.\n */\nclass PineconeAuthorizationError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url } = failedRequest;\n        if (url) {\n            super(`The API key you provided was rejected while calling ${url}. Please check your configuration values and try again. ${CONFIG_HELP}`);\n        }\n        else {\n            super(`The API key you provided was rejected. Please check your configuration values and try again. ${CONFIG_HELP}`);\n        }\n        this.name = 'PineconeAuthorizationError';\n    }\n}\nexports.PineconeAuthorizationError = PineconeAuthorizationError;\n/**\n * This error is thrown when interacting with a resource such as an index or collection\n * that cannot be found.\n */\nclass PineconeNotFoundError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url } = failedRequest;\n        if (url) {\n            super(`A call to ${url} returned HTTP status 404.`);\n        }\n        else {\n            super('The requested resource could not be found.');\n        }\n        this.name = 'PineconeNotFoundError';\n    }\n}\nexports.PineconeNotFoundError = PineconeNotFoundError;\n/**\n * This error is thrown when attempting to create a resource such as an index or\n * collection with a name that is already in use.\n * */\nclass PineconeConflictError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, message } = failedRequest;\n        if (url) {\n            super(`A call to ${url} returned HTTP status 409. ${message ? message : ''}`);\n        }\n        else {\n            super('The resource you are attempting to create already exists.');\n        }\n        this.name = 'PineconeConflictError';\n    }\n}\nexports.PineconeConflictError = PineconeConflictError;\n/**\n * This error indicates API responses are returning with status 500 and\n * something is wrong with Pinecone. Check the [status page](https://status.pinecone.io/)\n * for information about current or recent outages.\n *\n * @see [Pinecone's status page](https://status.pinecone.io/)\n */\nclass PineconeInternalServerError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, body, status } = failedRequest;\n        const intro = url\n            ? `An internal server error occurred while calling the ${url} endpoint.`\n            : '';\n        const help = `To see overall service health and learn whether this seems like a large-scale problem or one specific to your request, please go to https://status.pinecone.io/ to view our status page. If you believe the error reflects a problem with this client, please file a bug report in the github issue tracker at https://github.com/pinecone-io/pinecone-ts-client`;\n        const statusMessage = status ? `Status Code: ${status}.` : '';\n        const bodyMessage = body ? `Body: ${body}` : '';\n        super([intro, statusMessage, help, bodyMessage].join(' ').trim());\n        this.name = 'PineconeInternalServerError';\n    }\n}\nexports.PineconeInternalServerError = PineconeInternalServerError;\n/* We can choose to throw this error when we want to limit requests to the server. When instantiated, pass the\n number of retries the user has made already. */\nclass PineconeMaxRetriesExceededError extends base_1.BasePineconeError {\n    constructor(retries) {\n        const intro = `You have exceeded the max configured retries (${retries}). `;\n        const help = 'Increase the maxRetries field in the RetryOptions object to retry more times. If you believe the' +\n            ' error reflects a problem with this client, please file a bug report in the github issue tracker at https://github.com/pinecone-io/pinecone-ts-client';\n        super([intro, help].join(' ').trim());\n        this.name = 'PineconeMaxRetriesExceededError';\n    }\n}\nexports.PineconeMaxRetriesExceededError = PineconeMaxRetriesExceededError;\n/**\n * This error indicates API responses are returning with status 503 and\n * Pinecone itself is down. Check the [status page](https://status.pinecone.io/)\n * for information about current or recent outages.\n *\n * The difference between this error (503) and a PineconeInternalServerError (500) is that this error does NOT indicate\n * that the server is _unable_ to process the request, just that the server will not process the request.\n *\n * @see [Pinecone's status page](https://status.pinecone.io/)\n */\nclass PineconeUnavailableError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, body, status } = failedRequest;\n        const intro = url\n            ? `The Pinecone service (${url}) is temporarily unavailable.`\n            : '';\n        const statusMessage = status ? `Status Code: ${status}.` : '';\n        const help = `To see overall service health and learn whether this seems like a large-scale problem or one specific to your request, please go to https://status.pinecone.io/ to view our status page. If you believe the error reflects a problem with this client, please file a bug report in the github issue tracker at https://github.com/pinecone-io/pinecone-ts-client`;\n        const bodyMessage = body ? `Body: ${body}` : '';\n        super([intro, statusMessage, help, bodyMessage].join(' ').trim());\n        this.name = 'PineconeUnavailableError';\n    }\n}\nexports.PineconeUnavailableError = PineconeUnavailableError;\n/**\n * This error is thrown when you are attempting to use a feature that is\n * not implemented or unavailable to you on your current plan. Free indexes\n * only support a subset of Pinecone's capabilities, and if you are seeing\n * these exceptions then you should consult the\n * [pricing page](https://www.pinecone.io/pricing/) to see whether upgrading\n * makes sense for your use case.\n */\nclass PineconeNotImplementedError extends base_1.BasePineconeError {\n    constructor(requestInfo) {\n        const { url, message } = requestInfo;\n        if (url) {\n            super(`A call to ${url} returned HTTP status 501. ${message ? message : ''}`);\n        }\n        else {\n            super();\n        }\n        this.name = 'PineconeNotImplementedError';\n    }\n}\nexports.PineconeNotImplementedError = PineconeNotImplementedError;\n/**\n * This catch-all exception is thrown when a request error that is not\n * specifically mapped to another exception is thrown.\n */\nclass PineconeUnmappedHttpError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, status, body, message } = failedRequest;\n        const intro = url\n            ? `An unexpected error occured while calling the ${url} endpoint. `\n            : '';\n        const statusMsg = status ? `Status: ${status}. ` : '';\n        const bodyMsg = body ? `Body: ${body}` : '';\n        super([intro, message, statusMsg, bodyMsg].join(' ').trim());\n        this.name = 'PineconeUnmappedHttpError';\n    }\n}\nexports.PineconeUnmappedHttpError = PineconeUnmappedHttpError;\n/** @internal */\nconst mapHttpStatusError = (failedRequestInfo) => {\n    switch (failedRequestInfo.status) {\n        case 400:\n            return new PineconeBadRequestError(failedRequestInfo);\n        case 401:\n            return new PineconeAuthorizationError(failedRequestInfo);\n        case 403:\n            return new PineconeBadRequestError(failedRequestInfo);\n        case 404:\n            return new PineconeNotFoundError(failedRequestInfo);\n        case 409:\n            return new PineconeConflictError(failedRequestInfo);\n        case 500:\n            return new PineconeInternalServerError(failedRequestInfo);\n        case 501:\n            return new PineconeNotImplementedError(failedRequestInfo);\n        case 503:\n            return new PineconeUnavailableError(failedRequestInfo);\n        default:\n            throw new PineconeUnmappedHttpError(failedRequestInfo);\n    }\n};\nexports.mapHttpStatusError = mapHttpStatusError;\n//# sourceMappingURL=http.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFetch = void 0;\nconst errors_1 = require(\"../errors\");\nconst getFetch = (config) => {\n    if (config.fetchApi) {\n        // User-provided fetch implementation, if any, takes precedence.\n        return config.fetchApi;\n    }\n    else if (global.fetch) {\n        // If a fetch implementation is present in the global scope (will work with native fetch in Node18+, Edge runtimes,\n        // etc.), use that. This should prevent confusing failures in\n        // Next.js projects where @vercel/fetch is mandated and\n        // other implementations are stubbed out.\n        return global.fetch;\n    }\n    else {\n        // If no fetch implementation is found, throw an error.\n        throw new errors_1.PineconeConfigurationError('No global or user-provided fetch implementations found. Please supply a fetch implementation.');\n    }\n};\nexports.getFetch = getFetch;\n//# sourceMappingURL=fetch.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChatStream = exports.RetryOnServerFailure = exports.convertKeysToCamelCase = exports.getFetch = exports.buildUserAgent = exports.queryParamsStringify = exports.normalizeUrl = exports.debugLog = void 0;\nconst debugLog_1 = require(\"./debugLog\");\nObject.defineProperty(exports, \"debugLog\", { enumerable: true, get: function () { return debugLog_1.debugLog; } });\nconst normalizeUrl_1 = require(\"./normalizeUrl\");\nObject.defineProperty(exports, \"normalizeUrl\", { enumerable: true, get: function () { return normalizeUrl_1.normalizeUrl; } });\nconst queryParamsStringify_1 = require(\"./queryParamsStringify\");\nObject.defineProperty(exports, \"queryParamsStringify\", { enumerable: true, get: function () { return queryParamsStringify_1.queryParamsStringify; } });\nconst user_agent_1 = require(\"./user-agent\");\nObject.defineProperty(exports, \"buildUserAgent\", { enumerable: true, get: function () { return user_agent_1.buildUserAgent; } });\nconst fetch_1 = require(\"./fetch\");\nObject.defineProperty(exports, \"getFetch\", { enumerable: true, get: function () { return fetch_1.getFetch; } });\nconst retries_1 = require(\"./retries\");\nObject.defineProperty(exports, \"RetryOnServerFailure\", { enumerable: true, get: function () { return retries_1.RetryOnServerFailure; } });\nconst chatStream_1 = require(\"../assistant/chatStream\");\nObject.defineProperty(exports, \"ChatStream\", { enumerable: true, get: function () { return chatStream_1.ChatStream; } });\nconst convertKeys_1 = require(\"./convertKeys\");\nObject.defineProperty(exports, \"convertKeysToCamelCase\", { enumerable: true, get: function () { return convertKeys_1.convertKeysToCamelCase; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RetryOnServerFailure = void 0;\nconst errors_1 = require(\"../errors\");\n// TODO: Parameterize this class to allow for custom error handling (e.g. only retry 400 errors on Chat endpoint,\n//  but not globally\n/* Retry asynchronous operations.\n *\n * @param maxRetries - The maximum number of retries to attempt.\n * @param asyncFn - The asynchronous function to retry.\n */\nclass RetryOnServerFailure {\n    constructor(asyncFn, maxRetries) {\n        /*\n         * Calculate the delay time for retrying an operation.\n         *\n         * @param attempt: The # of times the operation has been attempted.\n         * @param baseDelay: The base delay time in milliseconds.\n         * @param maxDelay: The maximum delay time in milliseconds.\n         * @param jitterFactor: The magnitude of jitter relative to the delay.\n         */\n        this.calculateRetryDelay = (attempt, baseDelay = 200, maxDelay = 20000, jitterFactor = 0.25) => {\n            let delay = baseDelay * 2 ** attempt; // Exponential (baseDelay * 2^attempt)\n            // Apply jitter as a random percentage of the original delay; e.g.: if `jitterFactor` = 0.25 and `baseDelay` = 1000,\n            // then `jitter` is 25% of `baseDelay`\n            const jitter = delay * jitterFactor * (Math.random() - 0.5);\n            delay += jitter;\n            // Ensure delay is not negative or greater than maxDelay\n            return Math.min(maxDelay, Math.max(0, delay));\n        };\n        if (maxRetries) {\n            this.maxRetries = maxRetries;\n        }\n        else {\n            this.maxRetries = 3;\n        }\n        if (this.maxRetries > 10) {\n            throw new Error('Max retries cannot exceed 10');\n        }\n        this.asyncFn = asyncFn;\n    }\n    async execute(...args) {\n        if (this.maxRetries < 1) {\n            return this.asyncFn(...args);\n        }\n        for (let attempt = 0; attempt < this.maxRetries; attempt++) {\n            try {\n                const response = await this.asyncFn(...args);\n                // Return immediately if the response is not a retryable error\n                if (!this.isRetryError(response)) {\n                    return response;\n                }\n                throw response; // Will catch this in next line\n            }\n            catch (error) {\n                const mappedError = this.mapErrorIfNeeded(error);\n                // If the error is not retryable, throw it immediately\n                if (this.shouldStopRetrying(mappedError)) {\n                    throw mappedError;\n                }\n                // On the last retry, throw a MaxRetriesExceededError\n                if (attempt === this.maxRetries - 1) {\n                    throw new errors_1.PineconeMaxRetriesExceededError(this.maxRetries);\n                }\n                // Wait before retrying\n                await this.delay(attempt + 1);\n            }\n        }\n        // This fallback is unnecessary, but included for type safety\n        throw new errors_1.PineconeMaxRetriesExceededError(this.maxRetries);\n    }\n    isRetryError(response) {\n        if (!response) {\n            return false;\n        }\n        if (response) {\n            if (response.name &&\n                ['PineconeUnavailableError', 'PineconeInternalServerError'].includes(response.name)) {\n                return true;\n            }\n            if (response.status && response.status >= 500) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async delay(attempt) {\n        const delayTime = this.calculateRetryDelay(attempt);\n        return new Promise((resolve) => setTimeout(resolve, delayTime));\n    }\n    mapErrorIfNeeded(error) {\n        if (error?.status) {\n            return (0, errors_1.mapHttpStatusError)(error);\n        }\n        return error; // Return original error if no mapping is needed\n    }\n    shouldStopRetrying(error) {\n        if (error.status) {\n            return error.status < 500;\n        }\n        if (error.name) {\n            return (error.name !== 'PineconeUnavailableError' &&\n                error.name !== 'PineconeInternalServerError');\n        }\n        return true;\n    }\n}\nexports.RetryOnServerFailure = RetryOnServerFailure;\n//# sourceMappingURL=retries.js.map","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PineconeUnableToResolveHostError = exports.PineconeEnvironmentVarsNotSupportedError = exports.PineconeUnexpectedResponseError = exports.PineconeConfigurationError = void 0;\nconst base_1 = require(\"./base\");\nconst CONFIG_HELP = `You can find the configuration values for your project in the Pinecone developer console at https://app.pinecone.io.`;\n/**\n * This exception indicates there is a problem with the configuration values\n * you have provided to the client. The error message should contain additional\n * context about what you are missing.\n *\n * @see {@link Pinecone} for information about initializing the client.\n */\nclass PineconeConfigurationError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(`${message} ${CONFIG_HELP}`);\n        this.name = 'PineconeConfigurationError';\n    }\n}\nexports.PineconeConfigurationError = PineconeConfigurationError;\n/**\n * This exception indicates an API call that returned a response that was\n * unable to be parsed or that did not include expected fields. It's not\n * expected to ever occur.\n *\n * If you encounter this error, please [file an issue](https://github.com/pinecone-io/pinecone-ts-client/issues) so we can investigate.\n */\nclass PineconeUnexpectedResponseError extends base_1.BasePineconeError {\n    constructor(url, status, body, message) {\n        super(`Unexpected response while calling ${url}. ${message ? message + ' ' : ''}Status: ${status}. Body: ${body}`);\n        this.name = 'PineconeUnexpectedResponseError';\n    }\n}\nexports.PineconeUnexpectedResponseError = PineconeUnexpectedResponseError;\n/**\n * This error occurs when the client tries to read environment variables in\n * an environment that does not have access to the Node.js global `process.env`.\n *\n * If you are seeing this error, you will need to configure the client by passing\n * configuration values to the `Pinecone` constructor.\n *\n * ```typescript\n * import { Pinecone } from '@pinecone-database/pinecone';\n *\n * const pinecone = new Pinecone({\n *    apiKey: 'YOUR_API_KEY',\n * })\n * ```\n *\n * @see Instructions for configuring { @link Pinecone }\n */\nclass PineconeEnvironmentVarsNotSupportedError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(message);\n        this.name = 'PineconeEnvironmentVarsNotSupportedError';\n    }\n}\nexports.PineconeEnvironmentVarsNotSupportedError = PineconeEnvironmentVarsNotSupportedError;\n/**\n * This error occurs when the client is unable to resolve the database host for a given\n * index. This is unexpected to occur unless there is a problem with the Pinecone service.\n *\n * If you encounter this error, please [file an issue](https://github.com/pinecone-io/pinecone-ts-client/issues) so we can investigate.\n */\nclass PineconeUnableToResolveHostError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(message);\n        this.name = 'PineconeUnableToResolveHostError';\n    }\n}\nexports.PineconeUnableToResolveHostError = PineconeUnableToResolveHostError;\n//# sourceMappingURL=config.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeUrl = void 0;\nfunction normalizeUrl(url) {\n    if (!url || url.trim().length === 0) {\n        return;\n    }\n    if (!url.startsWith('http://') && !url.startsWith('https://')) {\n        return 'https://' + url;\n    }\n    return url;\n}\nexports.normalizeUrl = normalizeUrl;\n//# sourceMappingURL=normalizeUrl.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PineconeRequestError = exports.PineconeConnectionError = void 0;\nconst base_1 = require(\"./base\");\n/**\n * This error is thrown when the client attempts to make a\n * request and never receives any response.\n *\n * This could be due to:\n * - Network problems which prevent the request from being completed.\n * - An outage of Pinecone's APIs. See [Pinecone's status page](https://status.pinecone.io/) to find out whether there is an ongoing incident.\n *\n * The `cause` property will contain a reference to the underlying error. Inspect its value to find out more about the root cause of the error.\n * ```\n * import { Pinecone } from '@pinecone-database/pinecone';\n *\n * const p = new Pinecone({ apiKey: 'invalid-api-key-value' })\n *\n * try {\n *  await p.listIndexes();\n * } catch (e) {\n *  console.log(e.name); // PineconeConnectionError\n *  console.log(e.cause); // Error [FetchError]: The request failed and the interceptors did not return an alternative response\n *  console.log(e.cause.cause); // TypeError: fetch failed\n *  console.log(e.cause.cause.cause); // Error: getaddrinfo ENOTFOUND controller.wrong-environment.pinecone.io\n * }\n * ```\n *\n * @see [Pinecone's status page](https://status.pinecone.io/)\n * */\nclass PineconeConnectionError extends base_1.BasePineconeError {\n    constructor(e, url) {\n        let urlMessage = '';\n        if (url) {\n            urlMessage = ` while calling ${url}`;\n        }\n        super(`Request failed to reach Pinecone${urlMessage}. This can occur for reasons such as network problems that prevent the request from being completed, or a Pinecone API outage. Check your network connection, and visit https://status.pinecone.io/ to see whether any outages are ongoing.`, e);\n        this.name = 'PineconeConnectionError';\n    }\n}\nexports.PineconeConnectionError = PineconeConnectionError;\n/**\n * This error is thrown any time a request to the Pinecone API fails.\n *\n * The `cause` property will contain a reference to the underlying error. Inspect its value to find out more about the root cause.\n */\nclass PineconeRequestError extends base_1.BasePineconeError {\n    constructor(context) {\n        if (context.response) {\n            super(`Request failed during a call to ${context.init.method} ${context.url} with status ${context.response.status}`, context.error);\n        }\n        else {\n            super(`Request failed during a call to ${context.init.method} ${context.url}`, context.error);\n        }\n    }\n}\nexports.PineconeRequestError = PineconeRequestError;\n//# sourceMappingURL=request.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BasePineconeError = void 0;\nclass BasePineconeError extends Error {\n    constructor(message, cause) {\n        super(message);\n        // Set the prototype explicitly to ensure instanceof works correctly\n        Object.setPrototypeOf(this, new.target.prototype);\n        // Maintain a proper stack trace in V8 environments (Chrome and Node.js)\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, new.target);\n        }\n        this.name = this.constructor.name;\n        this.cause = cause;\n    }\n}\nexports.BasePineconeError = BasePineconeError;\n//# sourceMappingURL=base.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.debugLog = void 0;\nconst debugLog = (str) => {\n    if (typeof process !== 'undefined' &&\n        process &&\n        process.env &&\n        process.env.PINECONE_DEBUG) {\n        console.log(str);\n    }\n};\nexports.debugLog = debugLog;\n//# sourceMappingURL=debugLog.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isBrowser = exports.isEdge = void 0;\nconst isEdge = () => {\n    // This is the recommended way to detect\n    // running in the Edge Runtime according\n    // to Vercel docs.\n    return typeof EdgeRuntime === 'string';\n};\nexports.isEdge = isEdge;\nconst isBrowser = () => {\n    return typeof window !== 'undefined';\n};\nexports.isBrowser = isBrowser;\n//# sourceMappingURL=environment.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleApiError = exports.extractMessage = exports.PineconeArgumentError = exports.BasePineconeError = exports.PineconeRequestError = exports.PineconeConnectionError = exports.PineconeUnableToResolveHostError = exports.PineconeEnvironmentVarsNotSupportedError = exports.PineconeUnexpectedResponseError = exports.PineconeConfigurationError = void 0;\nvar config_1 = require(\"./config\");\nObject.defineProperty(exports, \"PineconeConfigurationError\", { enumerable: true, get: function () { return config_1.PineconeConfigurationError; } });\nObject.defineProperty(exports, \"PineconeUnexpectedResponseError\", { enumerable: true, get: function () { return config_1.PineconeUnexpectedResponseError; } });\nObject.defineProperty(exports, \"PineconeEnvironmentVarsNotSupportedError\", { enumerable: true, get: function () { return config_1.PineconeEnvironmentVarsNotSupportedError; } });\nObject.defineProperty(exports, \"PineconeUnableToResolveHostError\", { enumerable: true, get: function () { return config_1.PineconeUnableToResolveHostError; } });\n__exportStar(require(\"./http\"), exports);\nvar request_1 = require(\"./request\");\nObject.defineProperty(exports, \"PineconeConnectionError\", { enumerable: true, get: function () { return request_1.PineconeConnectionError; } });\nObject.defineProperty(exports, \"PineconeRequestError\", { enumerable: true, get: function () { return request_1.PineconeRequestError; } });\nvar base_1 = require(\"./base\");\nObject.defineProperty(exports, \"BasePineconeError\", { enumerable: true, get: function () { return base_1.BasePineconeError; } });\nvar validation_1 = require(\"./validation\");\nObject.defineProperty(exports, \"PineconeArgumentError\", { enumerable: true, get: function () { return validation_1.PineconeArgumentError; } });\nvar utils_1 = require(\"./utils\");\nObject.defineProperty(exports, \"extractMessage\", { enumerable: true, get: function () { return utils_1.extractMessage; } });\nvar handling_1 = require(\"./handling\");\nObject.defineProperty(exports, \"handleApiError\", { enumerable: true, get: function () { return handling_1.handleApiError; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertKeysToCamelCase = void 0;\n// converts keys of a json payload from snake_case to camelCase\nconst convertKeysToCamelCase = (object) => {\n    if (Array.isArray(object)) {\n        return object.map((item) => (0, exports.convertKeysToCamelCase)(item));\n    }\n    else if (object !== null && typeof object === 'object') {\n        return Object.entries(object).reduce((acc, [key, value]) => {\n            const camelKey = toCamelCase(key);\n            acc[camelKey] = (0, exports.convertKeysToCamelCase)(value);\n            return acc;\n        }, {});\n    }\n    return object; // return primitives as is\n};\nexports.convertKeysToCamelCase = convertKeysToCamelCase;\n// converts snake-case keys to camelCase\nconst toCamelCase = (str) => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n//# sourceMappingURL=convertKeys.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extractMessage = void 0;\n/** @internal */\nconst extractMessage = async (error) => {\n    let message = await error.response.text();\n    // Error response is sometimes the raw message, sometimes it's JSON\n    // so we will try to parse out the actual message text, but\n    // we wrap it in a try to avoid crashing in a way that obscures\n    // the actual error if the response format changes in the future.\n    try {\n        const messageJSON = JSON.parse(message);\n        if (messageJSON.message) {\n            message = messageJSON.message;\n        }\n    }\n    catch (e) {\n        // noop\n    }\n    return message;\n};\nexports.extractMessage = extractMessage;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.buildUserAgent = void 0;\nconst environment_1 = require(\"./environment\");\nconst packageInfo = __importStar(require(\"../version.json\"));\nconst buildUserAgent = (config) => {\n    // We always want to include the package name and version\n    // along with the langauge name to help distinguish these\n    // requests from those emitted by other clients\n    const userAgentParts = [\n        `${packageInfo.name} v${packageInfo.version}`,\n        'lang=typescript',\n    ];\n    if ((0, environment_1.isEdge)()) {\n        userAgentParts.push('Edge Runtime');\n    }\n    // If available, capture information about the Node.js version\n    if (typeof process !== 'undefined' && process && process.version) {\n        userAgentParts.push(`node ${process.version}`);\n    }\n    if (config.sourceTag) {\n        userAgentParts.push(`source_tag=${normalizeSourceTag(config.sourceTag)}`);\n    }\n    return userAgentParts.join('; ');\n};\nexports.buildUserAgent = buildUserAgent;\nconst normalizeSourceTag = (sourceTag) => {\n    if (!sourceTag) {\n        return;\n    }\n    /**\n     * normalize sourceTag\n     * 1. Lowercase\n     * 2. Limit charset to [a-z0-9_ :]\n     * 3. Trim left/right spaces\n     * 4. Condense multiple spaces to one, and replace with underscore\n     */\n    return sourceTag\n        .toLowerCase()\n        .replace(/[^a-z0-9_ :]/g, '')\n        .trim()\n        .replace(/[ ]+/g, '_');\n};\n//# sourceMappingURL=user-agent.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.queryParamsStringify = void 0;\n// Everything in this file is lifted from the generated openapi runtime.\n// I need to create a small modification of the generated queryParamStringify\n// function in order to fix an issue with array params.\n//\n// See https://github.com/pinecone-io/pinecone-ts-client/pull/74\nfunction queryParamsStringify(params, prefix = '') {\n    return Object.keys(params)\n        .map((key) => querystringSingleKey(key, params[key], prefix))\n        .filter((part) => part.length > 0)\n        .join('&');\n}\nexports.queryParamsStringify = queryParamsStringify;\nfunction querystringSingleKey(key, value, keyPrefix = '') {\n    const fullKey = keyPrefix + (keyPrefix.length ? `[${key}]` : key);\n    // This is a one line change from the default querystring implementation. Checking\n    // with `Array.isArray` instead of `value instanceof Array` allows us to get the\n    // the correct behavior when stringifying array params.\n    if (Array.isArray(value)) {\n        const multiValue = value\n            .map((singleValue) => encodeURIComponent(String(singleValue)))\n            .join(`&${encodeURIComponent(fullKey)}=`);\n        return `${encodeURIComponent(fullKey)}=${multiValue}`;\n    }\n    if (value instanceof Set) {\n        const valueAsArray = Array.from(value);\n        return querystringSingleKey(key, valueAsArray, keyPrefix);\n    }\n    if (value instanceof Date) {\n        return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;\n    }\n    if (value instanceof Object) {\n        return queryParamsStringify(value, fullKey);\n    }\n    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;\n}\n//# sourceMappingURL=queryParamsStringify.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PineconeArgumentError = void 0;\nconst base_1 = require(\"./base\");\n/**\n * This error is thrown when arguments passed to a Pinecone\n * client method fail a runtime validation.\n */\nclass PineconeArgumentError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(`${message}`);\n        this.name = 'PineconeArgumentError';\n    }\n}\nexports.PineconeArgumentError = PineconeArgumentError;\n//# sourceMappingURL=validation.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Remove all these imports as they're no longer needed\r\n// import { promises as fs } from 'fs';\r\n// import { join } from 'path';\r\n// import { fileURLToPath } from 'url';\r\n// import { dirname } from 'path';\r\n\r\nexport async function validateCodeStrings(inputCodeStrings) {\r\n    const errors = [];\r\n    const tabLabels = new Set();\r\n    const rowValues = new Set();\r\n    const codeTypes = new Set();\r\n    \r\n    // Clean up input strings by removing anything outside angle brackets\r\n    inputCodeStrings = inputCodeStrings.map(str => {\r\n        const match = str.match(/<[^>]+>/);\r\n        return match ? match[0] : str;\r\n    });\r\n\r\n    console.log(\"CleanedInput Code Strings:\", inputCodeStrings);\r\n\r\n    // Track codes by their suffixes\r\n    const vvCodes = new Set();  // codes ending in -VV\r\n    const vrCodes = new Set();  // codes ending in -VR\r\n    const rrCodes = new Set();  // codes ending in -RR\r\n    const rvCodes = new Set();  // codes ending in -RV\r\n    const evCodes = new Set();  // codes ending in -EV\r\n    const erCodes = new Set();  // codes ending in -ER\r\n\r\n    // Load valid codes from the correct location\r\n    let validCodes = new Set();\r\n    try {\r\n        const response = await fetch('../prompts/Codes.txt');\r\n        if (!response.ok) {\r\n            throw new Error('Failed to load Codes.txt file');\r\n        }\r\n        const fileContent = await response.text();\r\n        validCodes = new Set(fileContent.split('\\n')\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0));\r\n    } catch (error) {\r\n        errors.push(`Error reading Codes.txt file: ${error.message}`);\r\n        return errors;\r\n    }\r\n\r\n    // First pass: collect all row values, code types, and suffixes\r\n    for (const codeString of inputCodeStrings) {\r\n        if (!codeString.startsWith('<') || !codeString.endsWith('>')) {\r\n            errors.push(`Invalid code string format: ${codeString}`);\r\n            continue;\r\n        }\r\n        // Extract and store row IDs\r\n        if (codeString.startsWith('<BR>')) {\r\n            // Skip extraction for BR tags\r\n            continue;\r\n        }\r\n\r\n        const rowMatches = codeString.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/)[1];\r\n                // Handle spaces before/after the pipe delimiter\r\n                const parts = rowContent.split('|');\r\n                if (parts.length > 0) {\r\n                    // Extract all potential row IDs including those after asterisks\r\n                    parts.forEach(part => {\r\n                        const trimmedPart = part.trim();\r\n                        if (trimmedPart.startsWith('*')) {\r\n                            // Add the ID after the asterisk\r\n                            const afterAsterisk = trimmedPart.substring(1).trim();\r\n                            if (afterAsterisk) {\r\n                                rowValues.add(afterAsterisk);\r\n                            }\r\n                        } else if (trimmedPart) {\r\n                            // Add regular IDs\r\n                            rowValues.add(trimmedPart);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        \r\n        // console.log(rowMatches);\r\n        // Extract code type and suffix\r\n        const codeMatch = codeString.match(/<([^;]+);/);\r\n        if (codeMatch) {\r\n            const codeType = codeMatch[1].trim();\r\n            codeTypes.add(codeType);\r\n\r\n            // Check for suffixes and store them\r\n            if (codeType.endsWith('-VV')) vvCodes.add(codeType);\r\n            if (codeType.endsWith('-VR')) vrCodes.add(codeType);\r\n            if (codeType.endsWith('-RR')) rrCodes.add(codeType);\r\n            if (codeType.endsWith('-RV')) rvCodes.add(codeType);\r\n            if (codeType.endsWith('-EV')) evCodes.add(codeType);\r\n            if (codeType.endsWith('-ER')) erCodes.add(codeType);\r\n        }\r\n    }\r\n\r\n    // Validate suffix relationships\r\n    // Rule 1: -VV or -VR must have -EV or -RV\r\n    for (const code of [...vvCodes, ...vrCodes]) {\r\n        if (evCodes.size === 0 && rvCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -EV or -RV. Fix by adding another code with the correct suffix or by change to the EV/ER version of the same code.`);\r\n        }\r\n    }\r\n\r\n    // Rule 2: -RR or -RV must have -ER or -VR\r\n    for (const code of [...rrCodes, ...rvCodes]) {\r\n        if (erCodes.size === 0 && vrCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -ER or -VR`);\r\n        }\r\n    }\r\n\r\n// Second pass: detailed validation\r\nfor (const codeString of inputCodeStrings) {\r\n    // Skip BR tags completely\r\n    if (codeString === '<BR>') {\r\n        continue;\r\n    }\r\n    \r\n    const codeMatch = codeString.match(/<([^;]+);/);\r\n    if (!codeMatch) {\r\n        errors.push(`Cannot extract code type from: ${codeString}`);\r\n        continue;\r\n    }\r\n\r\n    const codeType = codeMatch[1].trim();\r\n    \r\n    // Validate code exists in description file\r\n    if (!validCodes.has(codeType)) {\r\n        errors.push(`Invalid code type: \"${codeType}\" not found in valid codes list`);\r\n    }\r\n\r\n\r\n\r\n        // Validate TAB labels\r\n        if (codeType === 'TAB') {\r\n            const labelMatch = codeString.match(/label\\d+=\"([^\"]*)\"/);\r\n            if (!labelMatch) {\r\n                errors.push('TAB code missing label parameter');\r\n                continue;\r\n            }\r\n\r\n            const label = labelMatch[1];\r\n            \r\n            if (label.length > 30) {\r\n                errors.push(`Tab label too long (max 30 chars): \"${label}\"`);\r\n            }\r\n            \r\n            if (/[&,\":;]/.test(label)) {\r\n                errors.push(`Tab label contains illegal characters (&,\":;): \"${label}\"`);\r\n            }\r\n            \r\n            if (tabLabels.has(label)) {\r\n                errors.push(`Duplicate tab label: \"${label}\"`);\r\n            }\r\n            tabLabels.add(label);\r\n        }\r\n\r\n        // Validate row format\r\n        const rowMatches = codeString.match(/row\\d+=\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+=\"([^\"]*)\"/)[1];\r\n                const parts = rowContent.split('|');\r\n                if (parts.length < 2) {\r\n                    errors.push(`Invalid row format (missing required fields): \"${rowContent}\"`);\r\n                }\r\n            });\r\n        }\r\n    } // <-- This is the end of the second pass loop\r\n\r\n    // Third pass: validate driver references after all row IDs are collected\r\n    for (const codeString of inputCodeStrings) {\r\n        const driverMatches = codeString.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (driverMatches) {\r\n            driverMatches.forEach(match => {\r\n                const driverValue = match.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/)[1].trim();\r\n                if (!rowValues.has(driverValue)) {\r\n                    errors.push(`Driver value \"${driverValue}\" not found in any row`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Convert array of errors to a single string with line breaks\r\n    return errors.join('\\n');\r\n}\r\n\r\n// Modified export function\r\nexport async function runValidation(inputStrings) {\r\n    try {\r\n        const cleanedStrings = inputStrings\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0)\r\n            .map(line => line.replace(/^'|',$|,$|^\"|\"$/g, ''));\r\n\r\n        const codeStrings = cleanedStrings.join(' ').match(/<[^>]+>/g) || [];\r\n\r\n        if (codeStrings.length === 0) {\r\n            console.error('Validation run with no codestrings - input is empty');\r\n            return ['No code strings found to validate'];\r\n        }\r\n\r\n        const validationErrors = await validateCodeStrings(codeStrings);\r\n        return validationErrors;\r\n    } catch (error) {\r\n        console.error('Validation failed:', error);\r\n        return [`Validation failed: ${error.message}`];\r\n    }\r\n}\r\n\r\n// >>> ADDED: New validation function for Run Codes flow (returns array)\r\nexport async function validateCodeStringsForRun(inputCodeStrings) {\r\n    const errors = [];\r\n    const tabLabels = new Set();\r\n    const rowValues = new Set();\r\n    const codeTypes = new Set();\r\n    \r\n    // Clean up input strings by removing anything outside angle brackets\r\n    inputCodeStrings = inputCodeStrings.map(str => {\r\n        const match = str.match(/<[^>]+>/);\r\n        return match ? match[0] : str;\r\n    });\r\n\r\n    console.log(\"[ValidateForRun] CleanedInput Code Strings:\", inputCodeStrings);\r\n\r\n    // Track codes by their suffixes (Same logic as original)\r\n    const vvCodes = new Set();\r\n    const vrCodes = new Set();\r\n    const rrCodes = new Set();\r\n    const rvCodes = new Set();\r\n    const evCodes = new Set();\r\n    const erCodes = new Set();\r\n\r\n    // Load valid codes (Same logic as original)\r\n    let validCodes = new Set();\r\n    try {\r\n        const response = await fetch('../prompts/Codes.txt');\r\n        if (!response.ok) {\r\n            throw new Error('Failed to load Codes.txt file');\r\n        }\r\n        const fileContent = await response.text();\r\n        validCodes = new Set(fileContent.split('\\n')\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0));\r\n    } catch (error) {\r\n        errors.push(`Error reading Codes.txt file: ${error.message}`);\r\n        return errors; // Return array on critical error\r\n    }\r\n\r\n    // First pass: collect all row values, code types, and suffixes (Same logic as original)\r\n    for (const codeString of inputCodeStrings) {\r\n        if (!codeString.startsWith('<') || !codeString.endsWith('>')) {\r\n            errors.push(`Invalid code string format: ${codeString}`);\r\n            continue;\r\n        }\r\n        if (codeString.startsWith('<BR>')) {\r\n            continue;\r\n        }\r\n        const rowMatches = codeString.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/)[1];\r\n                const parts = rowContent.split('|');\r\n                if (parts.length > 0) {\r\n                    parts.forEach(part => {\r\n                        const trimmedPart = part.trim();\r\n                        if (trimmedPart.startsWith('*')) {\r\n                            const afterAsterisk = trimmedPart.substring(1).trim();\r\n                            if (afterAsterisk) {\r\n                                rowValues.add(afterAsterisk);\r\n                            }\r\n                        } else if (trimmedPart) {\r\n                            rowValues.add(trimmedPart);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        const codeMatch = codeString.match(/<([^;]+);/);\r\n        if (codeMatch) {\r\n            const codeType = codeMatch[1].trim();\r\n            codeTypes.add(codeType);\r\n            if (codeType.endsWith('-VV')) vvCodes.add(codeType);\r\n            if (codeType.endsWith('-VR')) vrCodes.add(codeType);\r\n            if (codeType.endsWith('-RR')) rrCodes.add(codeType);\r\n            if (codeType.endsWith('-RV')) rvCodes.add(codeType);\r\n            if (codeType.endsWith('-EV')) evCodes.add(codeType);\r\n            if (codeType.endsWith('-ER')) erCodes.add(codeType);\r\n        }\r\n    }\r\n\r\n    // Validate suffix relationships (Same logic as original)\r\n    for (const code of [...vvCodes, ...vrCodes]) {\r\n        if (evCodes.size === 0 && rvCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -EV or -RV. Fix by adding another code with the correct suffix or by change to the EV/ER version of the same code.`);\r\n        }\r\n    }\r\n    for (const code of [...rrCodes, ...rvCodes]) {\r\n        if (erCodes.size === 0 && vrCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -ER or -VR`);\r\n        }\r\n    }\r\n\r\n    // Second pass: detailed validation (Same logic as original)\r\n    for (const codeString of inputCodeStrings) {\r\n        if (codeString === '<BR>') {\r\n            continue;\r\n        }\r\n        const codeMatch = codeString.match(/<([^;]+);/);\r\n        if (!codeMatch) {\r\n            errors.push(`Cannot extract code type from: ${codeString}`);\r\n            continue;\r\n        }\r\n        const codeType = codeMatch[1].trim();\r\n        if (!validCodes.has(codeType)) {\r\n            errors.push(`Invalid code type: \"${codeType}\" not found in valid codes list`);\r\n        }\r\n        if (codeType === 'TAB') {\r\n            const labelMatch = codeString.match(/label\\d+=\"([^\"]*)\"/);\r\n            if (!labelMatch) {\r\n                errors.push('TAB code missing label parameter');\r\n                continue;\r\n            }\r\n            const label = labelMatch[1];\r\n            if (label.length > 30) {\r\n                errors.push(`Tab label too long (max 30 chars): \"${label}\"`);\r\n            }\r\n            if (/[&,\":;]/.test(label)) {\r\n                errors.push(`Tab label contains illegal characters (&,\":;): \"${label}\"`);\r\n            }\r\n            if (tabLabels.has(label)) {\r\n                errors.push(`Duplicate tab label: \"${label}\"`);\r\n            }\r\n            tabLabels.add(label);\r\n        }\r\n        const rowMatches = codeString.match(/row\\d+=\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+=\"([^\"]*)\"/)[1];\r\n                const parts = rowContent.split('|');\r\n                if (parts.length < 2) {\r\n                    errors.push(`Invalid row format (missing required fields): \"${rowContent}\"`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Third pass: validate driver references (Same logic as original)\r\n    for (const codeString of inputCodeStrings) {\r\n        const driverMatches = codeString.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (driverMatches) {\r\n            driverMatches.forEach(match => {\r\n                const driverValue = match.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/)[1].trim();\r\n                if (!rowValues.has(driverValue)) {\r\n                    errors.push(`Driver value \"${driverValue}\" not found in any row`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Key Change: Return the array of errors directly\r\n    return errors;\r\n}\r\n// <<< END ADDED FUNCTION\r\n\r\n","/**\n * CodeCollection.js\n * Functions for processing and managing code collections\n */\n\nimport { convertKeysToCamelCase } from \"@pinecone-database/pinecone/dist/utils\";\n\n/**\n * Parses code strings and creates a code collection\n * @param {string} inputText - The input text containing code strings\n * @returns {Array} - An array of code objects with type and parameters\n */\nexport function populateCodeCollection(inputText) {\n    try {\n        console.log(\"Processing input text for code collection\");\n        \n        // Initialize an empty code collection\n        const codeCollection = [];\n        \n        // Split the input text by newlines to process each line\n        const lines = inputText.split('\\n');\n        \n        for (const line of lines) {\n            // Skip empty lines\n            if (!line.trim()) continue;\n            \n            // Extract the code type and parameters\n            const codeMatch = line.match(/<([^;>]+);(.*?)>/);\n            if (!codeMatch) continue;\n            \n            const codeType = codeMatch[1].trim();\n            const paramsString = codeMatch[2].trim();\n            \n            // Parse parameters\n            const params = {};\n            \n            // Handle special case for row parameters with asterisks\n            const rowMatches = paramsString.matchAll(/row(\\d+)\\s*=\\s*\"([^\"]*)\"/g);\n            for (const match of rowMatches) {\n                const rowNum = match[1];\n                const rowValue = match[2];\n                params[`row${rowNum}`] = rowValue;\n            }\n            \n            // Parse other parameters\n            const paramMatches = paramsString.matchAll(/(\\w+)\\s*=\\s*\"([^\"]*)\"/g);\n            for (const match of paramMatches) {\n                const paramName = match[1].trim();\n                const paramValue = match[2].trim();\n                \n                // Skip row parameters as they're already handled\n                if (paramName.startsWith('row')) continue;\n                \n                params[paramName] = paramValue;\n            }\n            \n            // Add the code to the collection\n            codeCollection.push({\n                type: codeType,\n                params: params\n            });\n        }\n        \n        console.log(`Processed ${codeCollection.length} codes`);\n        return codeCollection;\n    } catch (error) {\n        console.error(\"Error in populateCodeCollection:\", error);\n        throw error;\n    }\n}\n\n/**\n * Exports a code collection to text format\n * @param {Array} codeCollection - The code collection to export\n * @returns {string} - A formatted text representation of the code collection\n */\nexport function exportCodeCollectionToText(codeCollection) {\n    try {\n        if (!codeCollection || !Array.isArray(codeCollection)) {\n            throw new Error(\"Invalid code collection\");\n        }\n        \n        let result = \"Code Collection:\\n\";\n        result += \"================\\n\\n\";\n        \n        codeCollection.forEach((code, index) => {\n            result += `Code ${index + 1}: ${code.type}\\n`;\n            result += \"Parameters:\\n\";\n            \n            // First display non-row parameters\n            for (const [key, value] of Object.entries(code.params)) {\n                if (!key.startsWith('row')) {\n                    result += `  ${key}: ${value}\\n`;\n                }\n            }\n            \n            // Then display row parameters\n            const rowParams = Object.entries(code.params)\n                .filter(([key]) => key.startsWith('row'))\n                .sort((a, b) => {\n                    const numA = parseInt(a[0].replace('row', ''));\n                    const numB = parseInt(b[0].replace('row', ''));\n                    return numA - numB;\n                });\n            \n            if (rowParams.length > 0) {\n                result += \"  Rows:\\n\";\n                for (const [key, value] of rowParams) {\n                    result += `    ${key}: ${value}\\n`;\n                }\n            }\n            \n            result += \"\\n\";\n        });\n        \n        return result;\n    } catch (error) {\n        console.error(\"Error in exportCodeCollectionToText:\", error);\n        throw error;\n    }\n} \n\n/**\n * Processes a code collection and performs operations based on code types\n * @param {Array} codeCollection - The code collection to process\n * @returns {Object} - Results of processing the code collection\n */\nexport async function runCodes(codeCollection) {\n    try {\n        console.log(\"Running code collection processing\");\n        \n        if (!codeCollection || !Array.isArray(codeCollection)) {\n            throw new Error(\"Invalid code collection\");\n        }\n        \n        // Initialize result object\n        const result = {\n            processedCodes: 0,\n            createdTabs: [],\n            errors: []\n        };\n        \n        // Initialize state variables (similar to VBA variables)\n        let currentWorksheetName = null;\n        const assumptionTabs = [];\n        \n        // Process each code in the collection\n        for (let i = 0; i < codeCollection.length; i++) {\n            const code = codeCollection[i];\n            const codeType = code.type;\n            \n            try {\n                // Handle MODEL code type\n                if (codeType === \"MODEL\") {\n                    // Skip for now as mentioned in the original VBA code\n                    console.log(\"MODEL code type encountered - skipping for now\");\n                    continue;\n                }\n                \n                // Handle TAB code type\n                if (codeType === \"TAB\") {\n                    // Accept both label1 and Label1 for backward compatibility\n                    const tabName = code.params.label1 || code.params.Label1 || `Tab_${i}`;\n                    \n                    // Check if worksheet exists and delete it\n                    await Excel.run(async (context) => {\n                        try {\n                            // Get all worksheets\n                            const sheets = context.workbook.worksheets;\n                            sheets.load(\"items/name\");\n                            console.log(\"sheets\", sheets);\n                            await context.sync();\n                            \n                            // Check if worksheet exists\n                            const existingSheet = sheets.items.find(sheet => sheet.name === tabName);\n                            console.log(\"existingSheet\", existingSheet);\n                            // if (existingSheet) {\n                            //     // Delete the worksheet if it exists\n                            //     existingSheet.delete();\n                            //     await context.sync();\n                            // }\n                            // console.log(\"existingSheet deleted\");\n                            \n                            // Get the Calcs worksheet AND the Financials worksheet\n                            const sourceCalcsWS = context.workbook.worksheets.getItem(\"Calcs\");\n                            const financialsSheet = context.workbook.worksheets.getItem(\"Financials\");\n                            financialsSheet.load(\"position\"); // Load Financials sheet position\n                            await context.sync(); // Sync to get Financials position\n                            console.log(`sourceCalcsWS obtained. Financials sheet is at position ${financialsSheet.position}`);\n                            \n\n                            if (!existingSheet) {\n                            // Create a new worksheet by copying the Calcs worksheet\n                            const newSheet = sourceCalcsWS.copy();\n                            console.log(\"newSheet created by copying Calcs worksheet\");\n                            \n                            // Rename it\n                            newSheet.name = tabName;\n                            console.log(\"newSheet renamed to\", tabName);\n                            \n                            // <<< NEW: Set position relative to Financials sheet >>>\n                            newSheet.position = financialsSheet.position + 1;\n                            console.log(`Set position of ${tabName} to ${newSheet.position}`);\n                               // Add to assumption tabs collection\n                               assumptionTabs.push({\n                                name: tabName,\n                                worksheet: newSheet\n                               }); // <-- Added closing brace and semicolon here\n\n\n                                currentWorksheetName = tabName;\n                            \n                                await context.sync();\n                                \n                                result.createdTabs.push(tabName);\n                                console.log(\"Tab created successfully:\", tabName);\n                            // }); <-- Removed this closing parenthesis, it belongs to Excel.run below\n                        \n                            }\n\n                            else {\n                                console.log(\"Worksheet already exists:\", tabName);\n                                assumptionTabs.push({\n                                    name: tabName,\n                                    worksheet: existingSheet\n                                });\n                                // Need to set currentWorksheetName here too if the sheet exists\n                                currentWorksheetName = tabName; \n                            }\n                      \n       \n                            \n                         \n                            \n                            // Set the current worksheet name <-- This comment is now redundant/misplaced\n                       \n                        } catch (error) {\n                            console.error(\"Detailed error in TAB processing:\", error);\n                            throw error;\n                        }\n                    }).catch(error => { // <-- This is the correct closing for Excel.run\n                        console.error(`Error processing TAB code: ${error.message}`);\n                        result.errors.push({\n                            codeIndex: i,\n                            codeType: codeType,\n                            error: error.message\n                        });\n                    });\n                    \n                    continue;\n                }\n                \n                // Handle non-TAB codes\n                if (codeType !== \"TAB\") {\n                    await Excel.run(async (context) => {\n                        try {\n                            // Get the Codes worksheet\n                            const codesWS = context.workbook.worksheets.getItem(\"Codes\");\n                            console.log(\"Got Codes worksheet\");\n                            \n                            // Get the used range of the Codes worksheet\n                            const usedRange = codesWS.getUsedRange();\n                            usedRange.load(\"rowCount\");\n                            usedRange.load(\"columnCount\");\n                            await context.sync();\n                            console.log(`Used range: ${usedRange.rowCount} rows x ${usedRange.columnCount} columns`);\n                            \n                            // Get the current worksheet\n                            const currentWS = context.workbook.worksheets.getItem(currentWorksheetName);\n                            console.log(\"Got current worksheet:\", currentWorksheetName);\n                            \n                            // Get the last row in the current worksheet\n                            const lastUsedRow = currentWS.getUsedRange().getLastRow();\n                            lastUsedRow.load(\"rowIndex\");\n                            await context.sync();\n                            const pasteRow = lastUsedRow.rowIndex + 2; // Adjusted to paste one row lower\n                            console.log(\"Paste row:\", pasteRow);\n                            \n                            // Search for the code type in column D (index 3)\n                            let firstRow = -1;\n                            let lastRow = -1;\n                            \n                            // Load the values of column D\n                            const columnD = codesWS.getRange(`D1:D${usedRange.rowCount}`);\n                            columnD.load(\"values\");\n                            await context.sync();\n                            \n                            console.log(\"Loaded column D values\");\n                            \n                            // Check if values are loaded properly\n                            if (!columnD.values) {\n                                console.error(\"columnD.values is null or undefined\");\n                                throw new Error(`Failed to load values from column D in Codes worksheet`);\n                            }\n                            \n                            console.log(`columnD.values length: ${columnD.values.length}`);\n                            \n                            // Debug print the first few values in column D\n                            console.log(\"First 10 values in column D:\");\n                            for (let i = 0; i < Math.min(10, columnD.values.length); i++) {\n                                console.log(`Row ${i+1}: ${columnD.values[i][0]}`);\n                            }\n                            \n                            // Find the first and last row with the code\n                            for (let row = 0; row < columnD.values.length; row++) {\n                                if (columnD.values[row][0] === codeType) {\n                                    if (firstRow === -1) {\n                                        firstRow = row + 1; // Excel rows are 1-indexed\n                                    }\n                                    lastRow = row + 1;\n                                }\n                            }\n                            \n                            // Check if the code type was found\n                            const codeTypeFound = firstRow !== -1 && lastRow !== -1;\n                            \n                            if (!codeTypeFound) {\n                                console.warn(`Code type ${codeType} not found in Codes worksheet. Skipping this code.`);\n                                result.errors.push({\n                                    codeIndex: i,\n                                    codeType: codeType,\n                                    error: `Code type ${codeType} not found in Codes worksheet`\n                                });\n                                // Skip to the next code\n                                result.processedCodes++;\n                            } else {\n                                console.log(`Found code type ${codeType} in rows ${firstRow} to ${lastRow}`);\n                                \n                                // Try the suggested approach to copy the range with all properties\n                                await Excel.run(async (context) => {\n                                    // Get the source range\n                                    const sourceRange = context.workbook.worksheets.getItem(\"Codes\").getRange(`A${firstRow}:CX${lastRow}`);\n                                    \n                                    // Get the destination range\n                                    const destinationRange = context.workbook.worksheets.getItem(currentWorksheetName).getRange(`A${pasteRow}`);\n                                    \n                                    // Copy the range with all properties\n                                    destinationRange.copyFrom(sourceRange, Excel.RangeCopyType.all);\n                                    \n                                    await context.sync();\n                                });\n                                \n                                await context.sync();\n                                \n                                // Apply the driver and assumption inputs function to the current worksheet\n                                try {\n                                    console.log(`Applying driver and assumption inputs to worksheet: ${currentWorksheetName}`);\n                                    \n                                    // Get the current worksheet and load its properties\n                                    const currentWorksheet = context.workbook.worksheets.getItem(currentWorksheetName);\n                                    currentWorksheet.load('name');\n                                    await context.sync();\n                                    \n                                    await driverAndAssumptionInputs(\n                                        currentWorksheet,\n                                        pasteRow,\n                                        code\n                                    );\n                                    console.log(`Successfully applied driver and assumption inputs to worksheet: ${currentWorksheetName}`);\n                                } catch (error) {\n                                    console.error(`Error applying driver and assumption inputs: ${error.message}`);\n                                    result.errors.push({\n                                        codeIndex: i,\n                                        codeType: codeType,\n                                        error: `Error applying driver and assumption inputs: ${error.message}`\n                                    });\n                                }\n                                \n                                result.processedCodes++;\n                            }\n                        } catch (error) {\n                            console.error(`Error processing code ${codeType}:`, error);\n                            throw error;\n                        }\n                    }).catch(error => {\n                        console.error(`Error processing code ${codeType}: ${error.message}`);\n                        result.errors.push({\n                            codeIndex: i,\n                            codeType: codeType,\n                            error: error.message\n                        });\n                    });\n                }\n            } catch (error) {\n                console.error(`Error processing code ${i}:`, error);\n                result.errors.push({\n                    codeIndex: i,\n                    codeType: codeType,\n                    error: error.message\n                });\n            }\n        }\n        \n        // Prepare the final result object, including the names of assumption tabs\n        const finalResult = {\n            ...result, // Includes processedCodes, errors\n            assumptionTabs: assumptionTabs.map(tab => tab.name) // Return only the names\n        };\n\n        console.log(\"runCodes finished. Returning:\", finalResult);\n        return finalResult; // Return the modified result object\n\n    } catch (error) {\n        console.error(\"Error in runCodes:\", error);\n        // Consider how to return errors. Throwing stops execution.\n        // Returning them in the result allows the caller to decide.\n        throw error; // Or return { errors: [error.message], assumptionTabs: [] }\n    }\n}\n\n/**\n * Helper function to update cell references in formulas when rows are inserted\n * @param {string} formula - The formula to update\n * @param {number} rowOffset - The number of rows to offset\n * @returns {string} - The updated formula\n */\nfunction updateFormulaReferences(formula, rowOffset) {\n    if (!formula || !formula.startsWith('=')) {\n        return formula;\n    }\n    \n    // Regular expression to match cell references (e.g., A1, B2, etc.)\n    const cellRefRegex = /([A-Z]+)([0-9]+)/g;\n    \n    // Replace each cell reference with an updated one\n    return formula.replace(cellRefRegex, (match, col, row) => {\n        const rowNum = parseInt(row);\n        return `${col}${rowNum + rowOffset}`;\n    });\n}\n\n/**\n * Tests if the active cell's fill color is #CCFFCC (light green)\n * @returns {Promise<boolean>} - True if the active cell is green, false otherwise\n */\nexport async function isActiveCellGreen() {\n    try {\n        console.log(\"Testing if cell B2 is green (#CCFFCC)\");\n        \n        return await Excel.run(async (context) => {\n            // Get cell B2 instead of the active cell\n            const cellB2 = context.workbook.worksheets.getActiveWorksheet().getRange(\"B2\");\n            \n            // Load the fill color property and address\n            cellB2.load([\"format/fill/color\", \"address\"]);\n            \n            // Execute the request\n            await context.sync();\n            \n            // Check if the color is #CCFFCC\n            const isGreen = cellB2.format.fill.color === \"#CCFFCC\";\n            \n            console.log(`Cell B2 address: ${cellB2.address}, color: ${cellB2.format.fill.color}, Is green: ${isGreen}`);\n            \n            return isGreen;\n        });\n    } catch (error) {\n        console.error(\"Error in isActiveCellGreen:\", error);\n        throw error;\n    }\n}\n\n\n/**\n * Processes driver and assumption inputs for a worksheet based on code parameters,\n * replicating the logic from the VBA Driver_and_Assumption_Inputs function.\n * @param {Excel.Worksheet} worksheet - The initial Excel worksheet object.\n * @param {number} calcsPasteRow - The starting row for finding the code block.\n * @param {Object} code - The code object with type and parameters.\n * @returns {Promise<void>}\n */\nexport async function driverAndAssumptionInputs(worksheet, calcsPasteRow, code) {\n    try {\n        // --- Load worksheet name before calling helper ---\n        // This requires its own context if worksheet object might not have name loaded yet\n        let worksheetName = 'unknown';\n        try {\n             await Excel.run(async (context) => {\n                 worksheet.load('name');\n                 await context.sync();\n                 worksheetName = worksheet.name;\n                 \n             });\n         } catch(nameLoadError) {\n             console.error(\"Failed to load worksheet name before calling helper\", nameLoadError);\n             throw new Error(\"Cannot determine worksheet name to proceed.\");\n         }\n\n        // Define variable to store lastRow outside Excel.run scope so we can use it later\n        let lastRow = 1000; // Default value in case of failure\n\n        try {\n            // Get a fresh worksheet reference and find the last row within a proper Excel.run context\n            lastRow = await Excel.run(async (context) => {    \n                // Get worksheet reference within THIS context by name\n                const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\n                \n                // Get the used range of the worksheet\n                const usedRange = currentWorksheet.getUsedRange();\n\n                // Get the last row within the used range\n                const lastRowRange = usedRange.getLastRow();\n\n                // Load the rowIndex property of the last row\n                lastRowRange.load(\"rowIndex\");\n\n                // Synchronize the state with the Excel document\n                await context.sync();\n\n                // Calculate the 1-based index of the last row\n                const result = lastRowRange.rowIndex + 1;\n                console.log('lastRow', result);\n                \n                // Return the value so it's accessible outside this Excel.run\n                return result;\n            });\n        } catch(lastRowError) {\n            console.error(\"Failed to determine last row\", lastRowError);\n            throw new Error(\"Cannot determine last row to proceed.\");\n        }\n\n        // Ensure lastRow is a valid number (helper should return 1000 on error)\n        if (typeof lastRow !== 'number' || lastRow <= 0) {\n            console.error(`Last row determination failed or returned invalid value (${lastRow}). Cannot proceed safely.`);\n            throw new Error(\"Failed to determine a valid last row for processing.\");\n        }\n        // --- End Determine Last Row ---\n\n        // Now, proceed with the main logic within its own Excel.run\n        await Excel.run(async (context) => {\n            // Pass the determined lastRow into this context\n            const determinedLastRow = lastRow; \n            \n            // Get worksheet reference within THIS context by name\n            const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\n            \n            // USE calcsPasteRow in console log\n            console.log(`Processing driver/assumption inputs for worksheet: ${worksheetName}, Code: ${code.type}, Start Row: ${calcsPasteRow}, Using Last Row: ${determinedLastRow}`);\n\n            const columnSequence = ['A', 'B', 'C', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'O', 'P', 'R'];\n            \n            // Get the code value\n            const codeValue = code.type;\n\n            // Find the search row (first row >= calcsPasteRow where CodeValue is found in Col D)\n            // Note: Using determinedLastRow obtained from the helper function\n            let searchRow = -1; // 1-based index\n            let searchRange = null; \n            let searchRangeAddress = ''; \n\n            try {\n                // USE calcsPasteRow in console log\n                console.log(`Attempting to get searchRange. calcsPasteRow: ${calcsPasteRow}, determinedLastRow: ${determinedLastRow}`);\n                // USE calcsPasteRow in condition\n                if (typeof calcsPasteRow !== 'number' || typeof determinedLastRow !== 'number' || calcsPasteRow <= 0 || determinedLastRow < calcsPasteRow) {\n                     console.error(`Invalid range parameters for searchRange: calcsPasteRow=${calcsPasteRow}, determinedLastRow=${determinedLastRow}. Skipping search.`);\n                     searchRow = -1; \n                 } else {\n                     // USE calcsPasteRow for search range address\n                     searchRangeAddress = `D${calcsPasteRow}:D${determinedLastRow}`;\n                     console.log(`Creating searchRange with address: ${searchRangeAddress}`);\n                     // Need to use the worksheet object available in *this* context\n                     searchRange = currentWorksheet.getRange(searchRangeAddress);\n\n                     console.log(`Loading values for searchRange: ${searchRangeAddress}`);\n                     searchRange.load('values');\n                     await context.sync();\n                     console.log(`Successfully loaded values for searchRange: ${searchRangeAddress}`);\n                 }\n\n            } catch (loadError) {\n                 console.error(`Error loading/syncing searchRange (${searchRangeAddress}): ${loadError.message}`, loadError);\n                 searchRow = -1; \n            }\n\n            // Check if searchRange was successfully created and loaded before accessing .values\n            if (searchRange && searchRange.values) { // Check searchRange first!\n                 console.log(`SearchRange (${searchRangeAddress}) has loaded values. Searching for codeValue: ${codeValue}`);\n                 for (let i = 0; i < searchRange.values.length; i++) {\n                    if (searchRange.values[i][0] === codeValue) {\n                        // USE calcsPasteRow to calculate searchRow\n                        searchRow = calcsPasteRow + i; // Found the row (1-based)\n                        console.log(`Found codeValue '${codeValue}' at index ${i}, resulting searchRow: ${searchRow}`);\n                        break;\n                    }\n                }\n                 if (searchRow === -1) { // If loop finished without finding\n                     console.log(`CodeValue '${codeValue}' not found within the loaded values of searchRange (${searchRangeAddress}).`);\n                 }\n            } else if (searchRow !== -1) { // Only log warning if we didn't already hit the loadError or invalid params\n                 console.warn(`searchRange (${searchRangeAddress}) object exists but '.values' property is not available after sync. Search cannot be performed.`);\n                 searchRow = -1; // Ensure we trigger the \"not found\" logic\n            }\n\n            if (searchRow === -1) {\n                 console.warn(`Code type ${codeValue} not found or could not be searched for in column D (Range: ${searchRangeAddress || 'Invalid'}). Skipping inputs for this code.`);\n                 return; // Exit if code not found or search failed\n            }\n            console.log(`Found code ${codeValue} at search row: ${searchRow}`);\n\n\n            // Find the check row (first row >= searchrow where Col B is not light green #CCFFCC)\n            // VBA: Do While .Cells(checkrow, 2).Interior.Color = RGB(204, 255, 204)\n            let checkRow = searchRow;\n            let isGreen = true;\n            while (isGreen) {\n                const cellB = currentWorksheet.getRange(`B${checkRow}`);\n                cellB.load('format/fill/color');\n                await context.sync();\n                 // Handle potential errors if cell color can't be loaded\n                 if (cellB.format && cellB.format.fill) {\n                    isGreen = cellB.format.fill.color === '#CCFFCC';\n                 } else {\n                     console.warn(`Could not read fill color for cell B${checkRow}. Assuming not green.`);\n                     isGreen = false; // Assume not green if color cannot be determined\n                 }\n\n                if (isGreen) {\n                    checkRow++;\n                    // Add a safety break condition?\n                    if (checkRow > determinedLastRow + 50) { // Use determinedLastRow\n                         console.error(\"Check row exceeded expected limits. Breaking loop.\");\n                         throw new Error(\"Failed to find non-green check row within reasonable bounds.\");\n                    }\n                }\n            }\n            console.log(`Found check row (first non-green row in B at/after search row): ${checkRow}`);\n\n\n            // Process drivers, labels, and financialsdriver (relative to searchRow)\n            for (let k = 1; k <= 9; k++) {\n                const targetRow = searchRow + k - 1;\n                if (targetRow > determinedLastRow + 20) { // Safety check: Don't write way past the data\n                    console.warn(`Target row ${targetRow} seems too high. Skipping write for k=${k}.`);\n                    continue;\n                }\n\n                // Financials Driver (only for k=1)\n                if (k === 1 && code.params.financialsdriver) {\n                    const finDriverCell = currentWorksheet.getRange(`I${targetRow}`);\n                    finDriverCell.values = [[code.params.financialsdriver]];\n                    console.log(`Set financialsdriver at I${targetRow}: ${code.params.financialsdriver}`);\n                }\n\n                // Driver\n                const driverParam = code.params[`driver${k}`];\n                if (driverParam) {\n                    const driverCell = currentWorksheet.getRange(`F${targetRow}`);\n                    driverCell.values = [[driverParam]];\n                     console.log(`Set driver${k} at F${targetRow}: ${driverParam}`);\n                }\n\n                // Label\n                const labelParam = code.params[`label${k}`];\n                if (labelParam) {\n                    const labelCell = currentWorksheet.getRange(`B${targetRow}`);\n                    labelCell.values = [[labelParam]];\n                     console.log(`Set label${k} at B${targetRow}: ${labelParam}`);\n                }\n            }\n            await context.sync(); // Sync after loop for efficiency\n\n\n            // Process row items (inserting rows relative to checkRow)\n            let currentCheckRowForInserts = checkRow; // Use a separate variable to track cumulative insertions correctly\n            for (let g = 1; g <= 200; g++) { // Max 200 row parameters as in VBA\n                const rowParam = code.params[`row${g}`];\n                if (!rowParam) continue; // Skip if rowg parameter doesn't exist\n\n                 console.log(`Processing row${g}: ${rowParam}`);\n\n                const rowItems = rowParam.split('*');\n                const numNewRows = rowItems.length - 1; // Number of rows to insert\n\n                // Calculate the 1-based row number *before* potential insertions for this 'g' iteration\n                // This takes into account rows inserted by previous 'g' loops via currentCheckRowForInserts\n                const baseRowForThisG = currentCheckRowForInserts + g - 1;\n                console.log(`Base row for row${g}: ${baseRowForThisG}, numNewRows: ${numNewRows}`);\n\n                if (numNewRows > 0) {\n                    // Insert new rows below the baseRowForThisG\n                    const insertStartAddress = `${baseRowForThisG + 1}:${baseRowForThisG + numNewRows}`;\n                    console.log(`Inserting ${numNewRows} rows at ${insertStartAddress}`);\n                    const insertRange = currentWorksheet.getRange(insertStartAddress);\n                    insertRange.insert(Excel.InsertShiftDirection.down);\n                    await context.sync(); // Sync after insert\n\n                    // Sequentially copy formats and formulas from the previous row to the newly inserted ones\n                    // This helps ensure relative formulas are adjusted correctly step-by-step\n                    console.log(`Copying formats/formulas sequentially for inserted rows.`);\n                    for (let i = 0; i < numNewRows; i++) {\n                        const sourceRowNum = baseRowForThisG + i;\n                        const targetRowNum = baseRowForThisG + i + 1; // The newly inserted row\n                        const sourceRowRange = currentWorksheet.getRange(`${sourceRowNum}:${sourceRowNum}`);\n                        const targetRowRange = currentWorksheet.getRange(`${targetRowNum}:${targetRowNum}`);\n\n                        // Copy formats\n                        console.log(`  Copying formats from row ${sourceRowNum} to ${targetRowNum}`);\n                        targetRowRange.copyFrom(sourceRowRange, Excel.RangeCopyType.formats);\n\n                        // Copy formulas (should adjust relative references)\n                        console.log(`  Copying formulas from row ${sourceRowNum} to ${targetRowNum}`);\n                        targetRowRange.copyFrom(sourceRowRange, Excel.RangeCopyType.formulas);\n\n                        // We could use RangeCopyType.all, but separate copy ensures population step overrides values cleanly.\n                    }\n                    await context.sync(); // Sync after all copies for this 'g' group are done\n                    console.log(\"Finished sequential copy for inserted rows.\");\n                }\n\n                // Populate the row(s) (original row + inserted rows)\n                // This runs AFTER rows are inserted and structure (formats/formulas) is copied.\n                for (let yy = 0; yy <= numNewRows; yy++) {\n                    const currentRowNum = baseRowForThisG + yy; // 1-based row number to write to\n                    const splitArray = rowItems[yy].split('|');\n                    console.log(`Populating row ${currentRowNum} with items: ${rowItems[yy]}`);\n\n                    for (let x = 0; x < splitArray.length; x++) {\n                        // Check bounds for columnSequence\n                        if (x >= columnSequence.length) {\n                            console.warn(`Data item index ${x} exceeds columnSequence length (${columnSequence.length}). Skipping.`);\n                            continue;\n                        }\n\n                        const valueToWrite = splitArray[x];\n                        // VBA check: If splitArray(x) <> \"\" And splitArray(x) <> \"F\" Then\n                        // 'F' likely means \"Formula\", so we don't overwrite if the value is 'F'.\n                        if (valueToWrite && valueToWrite.toUpperCase() !== 'F') {\n                            const colLetter = columnSequence[x];\n                            const cellToWrite = currentWorksheet.getRange(`${colLetter}${currentRowNum}`);\n                            // Attempt to infer data type (basic number check)\n                            const numValue = Number(valueToWrite);\n                            if (!isNaN(numValue) && valueToWrite.trim() !== '') {\n                                cellToWrite.values = [[numValue]];\n                            } else {\n                                // Preserve existing value if empty string, otherwise write text\n                                if (valueToWrite.trim() !== '') {\n                                    cellToWrite.values = [[valueToWrite]];\n                                }\n                            }\n                            // console.log(`  Wrote '${valueToWrite}' to ${colLetter}${currentRowNum}`);\n                        }\n                    }\n                }\n                await context.sync(); // Sync after populating each 'g' group\n\n                // Adjust the base check row marker for subsequent 'g' iterations\n                // by adding the number of rows inserted in *this* iteration.\n                currentCheckRowForInserts += numNewRows;\n                console.log(`Finished processing row${g}. currentCheckRowForInserts is now ${currentCheckRowForInserts}`);\n\n            } // End for g loop\n\n            console.log(`Completed processing driver and assumption inputs for code ${codeValue} in worksheet ${worksheetName}`);\n        }); // End main Excel.run\n    } catch (error) {\n        console.error(`Error in driverAndAssumptionInputs MAIN CATCH for code '${code.type}' in worksheet '${worksheet?.name || 'unknown'}': ${error.message}`, error);\n        throw error;\n    }\n}\n\n\n/**\n * Finds the last used row in a specific column of a worksheet.\n * @param {Excel.Worksheet} worksheet - The worksheet to search in.\n * @param {string} columnLetter - The column letter (e.g., \"B\").\n * @returns {Promise<number>} - The 1-based index of the last used row, or 0 if the column is empty or an error occurs.\n */\nasync function getLastUsedRow(worksheet, columnLetter) {\n    // Re-use worksheet object passed into the function within this Excel.run\n    // Need context from the caller's Excel.run or wrap this in its own\n    console.log(`Attempting to get last used row for column ${columnLetter} in sheet ${worksheet.name}`);\n    try {\n        // It's safer to re-get the worksheet by name if this is called outside the main loop's context\n        // However, if called within the loop's context, using the passed object is fine.\n        // For simplicity assuming it's called within a valid context for now.\n        const fullColumn = worksheet.getRange(`${columnLetter}:${columnLetter}`);\n        const usedRange = fullColumn.getUsedRange(true); // Use 'true' for valuesOnly parameter\n        const lastCell = usedRange.getLastCell();\n        lastCell.load(\"rowIndex\");\n        await worksheet.context.sync(); // Use the context associated with the worksheet object\n        const lastRowIndex = lastCell.rowIndex + 1; // Convert 0-based index to 1-based row number\n        console.log(`Last used row in column ${columnLetter} is ${lastRowIndex}`);\n        return lastRowIndex;\n    } catch (error) {\n        // Handle cases where the column might be completely empty or other errors\n        if (error.code === \"ItemNotFound\" || error.code === \"GeneralException\") {\n            console.warn(`Could not find used range or last cell in column ${columnLetter} of sheet ${worksheet.name}. Assuming empty or header only (returning 0).`);\n            return 0; // Return 0 if column is empty or error occurs\n        }\n        console.error(`Error in getLastUsedRow for column ${columnLetter} on sheet ${worksheet.name}:`, error);\n        // It's often better to let the caller handle the error if it's unexpected.\n        throw error; // Re-throw other errors\n    }\n    // Note: Removed the inner Excel.run as it complicates context management.\n    // This function now expects to be called *within* an existing Excel.run context.\n}\n\n/**\n * Adjusts driver references in column AE based on lookups in column A.\n * Replicates the core logic of VBA Adjust_Drivers.\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\n * @param {number} lastRow - The last row to process (inclusive).\n */\nasync function adjustDriversJS(worksheet, lastRow) {\n    const START_ROW = 10; // <<< CHANGED FROM 9\n    const DRIVER_CODE_COL = \"F\"; // Column containing the driver code to look up\n    const LOOKUP_COL = \"A\";      // Column to search for the driver code\n    const TARGET_COL = \"AE\";     // Column where the result address string is written\n\n    console.log(`Running adjustDriversJS for sheet: ${worksheet.name} from row ${START_ROW} to ${lastRow}`);\n\n    // Ensure lastRow is valid before proceeding\n    if (lastRow < START_ROW) {\n        console.warn(`adjustDriversJS: lastRow (${lastRow}) is less than START_ROW (${START_ROW}). Skipping.`);\n        return;\n    }\n\n    try {\n        // Define the ranges to load\n        const driverCodeRangeAddress = `${DRIVER_CODE_COL}${START_ROW}:${DRIVER_CODE_COL}${lastRow}`;\n        const lookupRangeAddress = `${LOOKUP_COL}${START_ROW}:${LOOKUP_COL}${lastRow}`;\n        const driverCodeRange = worksheet.getRange(driverCodeRangeAddress);\n        const lookupRange = worksheet.getRange(lookupRangeAddress);\n\n        // Load values from both columns\n        driverCodeRange.load(\"values\");\n        lookupRange.load(\"values\");\n        await worksheet.context.sync(); // Sync to get the values\n\n        const driverCodeValues = driverCodeRange.values;\n        const lookupValues = lookupRange.values;\n\n        // Create a map for efficient lookup: { lookupValue: rowIndex }\n        // Note: rowIndex here is the 1-based Excel row number\n        const lookupMap = new Map();\n        for (let i = 0; i < lookupValues.length; i++) {\n            const value = lookupValues[i][0];\n            // Only add non-empty values to the map. Handle potential duplicates?\n            // VBA's .Find typically finds the first match. Map naturally stores the last encountered.\n            if (value !== null && value !== \"\") {\n                 // The row number in Excel is START_ROW + index\n                lookupMap.set(value, START_ROW + i);\n            }\n        }\n        console.log(`Built lookup map from ${LOOKUP_COL}${START_ROW}:${LOOKUP_COL}${lastRow} with ${lookupMap.size} entries.`);\n\n        // Prepare the output values for the target column AE\n        // Initialize with nulls or empty strings to clear previous values potentially\n        const outputValues = []; // Array of arrays for Excel range: [[value1], [value2], ...]\n        let foundCount = 0;\n        let notFoundCount = 0;\n\n        for (let i = 0; i < driverCodeValues.length; i++) {\n            const driverCode = driverCodeValues[i][0];\n            const currentRow = START_ROW + i; // Current Excel row being processed\n\n            if (driverCode !== null && driverCode !== \"\") {\n                if (lookupMap.has(driverCode)) {\n                    const foundRow = lookupMap.get(driverCode);\n                    const targetAddress = `${TARGET_COL}${foundRow}`;\n                    outputValues.push([targetAddress]); // Store as [[value]] for range write\n                    foundCount++;\n                    // console.log(`Row ${currentRow} (${DRIVER_CODE_COL}): Found '${driverCode}' in ${LOOKUP_COL} at row ${foundRow}. Setting ${TARGET_COL}${currentRow} = '${targetAddress}'`);\n                } else {\n                    // Value in F not found in A\n                    console.warn(`adjustDriversJS: Driver code '${driverCode}' from cell ${DRIVER_CODE_COL}${currentRow} not found in range ${lookupRangeAddress}.`);\n                    outputValues.push([null]); // Or [\"\"] or keep existing? VBA doesn't explicitly clear. Using null.\n                    notFoundCount++;\n                }\n            } else {\n                // Empty cell in F, write null to corresponding AE cell\n                outputValues.push([null]);\n            }\n        }\n\n        // Write the results back to column AE\n        if (outputValues.length > 0) {\n            const targetRangeAddress = `${TARGET_COL}${START_ROW}:${TARGET_COL}${lastRow}`;\n            const targetRange = worksheet.getRange(targetRangeAddress);\n            console.log(`Writing ${foundCount} results (${notFoundCount} not found) to ${targetRangeAddress}`);\n            targetRange.values = outputValues;\n            // Sync will happen in the caller's context\n        } else {\n             console.log(`adjustDriversJS: No values to write to ${TARGET_COL}.`);\n        }\n\n    } catch (error) {\n        console.error(`Error in adjustDriversJS for sheet ${worksheet.name}:`, error);\n        // Decide if error should be re-thrown to stop the whole process\n        // throw error;\n    }\n    // No context.sync() here - it should be handled by the calling function (processAssumptionTabs)\n}\n\n/**\n * Replaces INDIRECT functions in a specified column range with their evaluated values.\n * Mimics the VBA Replace_Indirects logic using batched range value lookups.\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\n * @param {number} lastRow - The last row to process.\n */\nasync function replaceIndirectsJS(worksheet, lastRow) {\n    const START_ROW = 10; // <<< CHANGED FROM 9\n    const TARGET_COL = \"AE\";\n\n    console.log(`Running replaceIndirectsJS for sheet: ${worksheet.name} from row ${START_ROW} to ${lastRow}`);\n\n    if (lastRow < START_ROW) {\n        console.warn(`replaceIndirectsJS: lastRow (${lastRow}) is less than START_ROW (${START_ROW}). Skipping.`);\n        return;\n    }\n\n    const targetRangeAddress = `${TARGET_COL}${START_ROW}:${TARGET_COL}${lastRow}`;\n    const targetRange = worksheet.getRange(targetRangeAddress);\n\n    try {\n        // 1. Load formulas from the target range\n        targetRange.load(\"formulas\");\n        await worksheet.context.sync();\n\n        const originalFormulas = targetRange.formulas; // 2D array [[f1], [f2], ...]\n        const referencesToLookup = new Map(); // Map<string, { range: Excel.Range | null, value: any }>\n        const formulaData = []; // Array<{ originalFormula: string, index: number }>\n\n        // 2. First Pass: Identify all unique INDIRECT arguments\n        console.log(\"Replace_Indirects: Pass 1 - Identifying INDIRECT arguments\");\n        for (let i = 0; i < originalFormulas.length; i++) {\n            let formula = originalFormulas[i][0];\n            formulaData.push({ originalFormula: formula, index: i }); // Store original formula and index\n\n            if (typeof formula === 'string') {\n                // Use a loop to find all INDIRECT occurrences in a single formula\n                let searchStartIndex = 0;\n                while (true) {\n                    const upperFormula = formula.toUpperCase();\n                    const indirectStartIndex = upperFormula.indexOf(\"INDIRECT(\", searchStartIndex);\n\n                    // Stop if no more INDIRECT found or if it might be part of INDEX\n                    if (indirectStartIndex === -1 || upperFormula.includes(\"INDEX(\")) {\n                        break;\n                    }\n\n                    // Find the matching closing parenthesis (simple approach)\n                    const parenStartIndex = indirectStartIndex + \"INDIRECT(\".length;\n                    const parenEndIndex = formula.indexOf(\")\", parenStartIndex);\n\n                    if (parenEndIndex === -1) {\n                        console.warn(`Row ${START_ROW + i}: Malformed INDIRECT found in formula: ${formula}`);\n                        break; // Cannot process this INDIRECT\n                    }\n\n                    const argString = formula.substring(parenStartIndex, parenEndIndex).trim();\n\n                    // Validate argString looks like a cell/range reference (basic check)\n                    // This helps avoid trying to load ranges like \"Sheet1!A:A\" which might fail or be slow\n                    if (argString && /^[A-Za-z0-9_!$:'\". ]+$/.test(argString) && !referencesToLookup.has(argString)) {\n                         console.log(`  Found reference to lookup: ${argString}`);\n                         referencesToLookup.set(argString, { range: null, value: undefined }); // Placeholder\n                    }\n\n                    // Continue searching after this INDIRECT\n                    searchStartIndex = parenEndIndex + 1;\n                }\n            }\n        }\n\n        // 3. Batch Load Values for identified references\n        console.log(`Replace_Indirects: Loading values for ${referencesToLookup.size} unique references.`);\n        if (referencesToLookup.size > 0) {\n            for (const [refString, data] of referencesToLookup.entries()) {\n                try {\n                    // Attempt to get the range and load its value\n                    data.range = worksheet.getRange(refString);\n                    // Load values. Consider loading formulas too if INDIRECT might point to a formula cell.\n                    // Loading numberFormat might help distinguish between 0 and empty.\n                    data.range.load([\"values\", \"text\"]); // Load text to handle \"DELETE\" easily\n                } catch (rangeError) {\n                    console.warn(`Replace_Indirects: Error getting range for reference \"${refString}\". It might be invalid or on another sheet.`, rangeError.debugInfo || rangeError.message);\n                     // Keep data.range as null, will be handled later\n                    referencesToLookup.set(refString, { range: null, value: '#REF!' }); // Mark as error\n                }\n            }\n            await worksheet.context.sync(); // Sync all loaded values\n\n            // Populate the values in the map\n            for (const [refString, data] of referencesToLookup.entries()) {\n                 if (data.range) { // If range was successfully retrieved\n                     try {\n                         // Use .text to directly compare with \"DELETE\"\n                         // Use .values for the actual numeric/boolean value if not \"DELETE\"\n                        const cellText = data.range.text[0][0];\n                        if (cellText === \"DELETE\") {\n                            data.value = \"0\"; // Replace \"DELETE\" with \"0\" string as per VBA\n                        } else {\n                             // Use the actual value (could be string, number, boolean)\n                             // Prefer values[0][0] as it respects data types better than text\n                             data.value = data.range.values[0][0];\n                        }\n                     } catch (valueError) {\n                         console.warn(`Replace_Indirects: Error reading value for reference \"${refString}\" after sync.`, valueError.debugInfo || valueError.message);\n                         data.value = '#VALUE!'; // Or another suitable error indicator\n                     }\n                 }\n                 // If data.range was null or value fetch failed, data.value remains '#REF!' or '#VALUE!'\n            }\n             console.log(\"Replace_Indirects: Finished loading reference values.\");\n        }\n\n\n        // 4. Second Pass: Replace INDIRECT with looked-up values\n        console.log(\"Replace_Indirects: Pass 2 - Replacing INDIRECT calls.\");\n        const newFormulas = []; // Array of arrays: [[newF1], [newF2], ...]\n        for (const item of formulaData) {\n            let currentFormula = item.originalFormula;\n\n            if (typeof currentFormula === 'string') {\n                let loopCount = 0; // Safety break\n                const MAX_LOOPS = 20; // Prevent infinite loops for complex/circular cases\n\n                while (loopCount < MAX_LOOPS) {\n                    const upperFormula = currentFormula.toUpperCase();\n                    const indirectStartIndex = upperFormula.indexOf(\"INDIRECT(\");\n\n                    if (indirectStartIndex === -1 || upperFormula.includes(\"INDEX(\")) {\n                        break; // No more INDIRECTs (or INDEX present)\n                    }\n\n                    const parenStartIndex = indirectStartIndex + \"INDIRECT(\".length;\n                    const parenEndIndex = currentFormula.indexOf(\")\", parenStartIndex);\n\n                    if (parenEndIndex === -1) {\n                         // Already warned in pass 1, just break here\n                        break;\n                    }\n\n                    const indString = currentFormula.substring(indirectStartIndex, parenEndIndex + 1); // The full INDIRECT(...)\n                    const argString = currentFormula.substring(parenStartIndex, parenEndIndex).trim();\n\n                    let directRef = '#REF!'; // Default if lookup fails\n                     if (referencesToLookup.has(argString)) {\n                         directRef = referencesToLookup.get(argString).value;\n                     } else {\n                         // Argument wasn't identified/loaded (maybe invalid?)\n                         console.warn(`Row ${START_ROW + item.index}: INDIRECT argument \"${argString}\" not found in lookup map during replacement.`);\n                     }\n\n                    // Handle potential null/undefined values from lookup - treat as 0? VBA doesn't explicitly handle this.\n                    // Let's treat null/undefined as 0 for replacement to avoid inserting 'null' or 'undefined' into formulas.\n                     // Empty string \"\" should probably remain \"\" unless it was \"DELETE\".\n                     if (directRef === null || typeof directRef === 'undefined') {\n                         directRef = 0; // Replace null/undefined with numeric 0\n                     } else if (directRef === \"\") {\n                          // Keep empty string as empty string unless it was originally \"DELETE\"\n                          // The map handles \"DELETE\" -> \"0\" already\n                     } else if (typeof directRef === 'string') {\n                         // If the resolved value is a string, potentially needs quoting if replacing in a formula context?\n                         // VBA seems to just concatenate the value directly. Let's follow that.\n                         // Example: =SUM(INDIRECT(\"A1\")) where A1 contains \"B2\" becomes =SUM(B2)\n                         // Example: =CONCATENATE(\"Result: \",INDIRECT(\"A1\")) where A1 contains \"Success\" becomes =CONCATENATE(\"Result: \",\"Success\") - requires quotes?\n                         // VBA appears to handle this implicitly. JS replace won't add quotes.\n                         // Let's test behavior, may need adjustment if it breaks formulas expecting strings.\n                         // For now, direct replacement. Consider adding quotes if `directRef` is text AND the context requires it.\n                     } else if (typeof directRef === 'boolean') {\n                         directRef = directRef ? 'TRUE' : 'FALSE'; // Convert boolean to formula text\n                     }\n                     // Numeric values are fine as is.\n\n                    // Perform the replacement. Use replace directly on the found indString.\n                    currentFormula = currentFormula.replace(indString, String(directRef));\n                    loopCount++;\n\n                } // End while loop for single formula processing\n\n                if (loopCount === MAX_LOOPS) {\n                    console.warn(`Row ${START_ROW + item.index}: Max replacement loops reached for formula. Result might be incomplete: ${currentFormula}`);\n                }\n            }\n            // Add the processed formula (or original if not string/no INDIRECT) to the result array\n            newFormulas.push([currentFormula]);\n\n        } // End for loop processing all formulas\n\n        // 5. Write the modified formulas back to the range\n        console.log(`Replace_Indirects: Writing ${newFormulas.length} updated formulas back to ${targetRangeAddress}`);\n        targetRange.formulas = newFormulas;\n\n        // Sync is handled by the caller (processAssumptionTabs)\n\n    } catch (error) {\n        console.error(`Error in replaceIndirectsJS for sheet ${worksheet.name} range ${targetRangeAddress}:`, error.debugInfo || error);\n        // Re-throw the error to allow the calling function to handle it\n        throw error;\n    }\n}\n\n/**\n * Placeholder for Populate_Financials VBA logic.\n * Populates the \"Financials\" sheet based on codes in the assumption sheet.\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\n * @param {number} lastRow - The last row to process in the assumption sheet.\n * @param {Excel.Worksheet} financialsSheet - The \"Financials\" worksheet (within the same Excel.run context).\n */\nasync function populateFinancialsJS(worksheet, lastRow, financialsSheet) {\n    console.log(`Running populateFinancialsJS for sheet: ${worksheet.name} (lastRow: ${lastRow}) -> ${financialsSheet.name}`);\n    // This function MUST be called within an Excel.run context.\n\n    const CALCS_FIRST_ROW = 10; // <<< CHANGED FROM 9 // Same as START_ROW elsewhere\n    const ASSUMPTION_CODE_COL = \"C\"; // Column with code to lookup on assumption sheet\n    const ASSUMPTION_LINK_COL_B = \"B\";\n    const ASSUMPTION_LINK_COL_D = \"D\";\n    // Column on assumption sheet to link for monthly data\n    const ASSUMPTION_MONTHS_START_COL = \"AE\";\n\n    const FINANCIALS_CODE_COLUMN = \"I\"; // Column to search for code on Financials sheet\n    const FINANCIALS_TARGET_COL_B = \"B\";\n    const FINANCIALS_TARGET_COL_D = \"D\";\n    const FINANCIALS_ANNUALS_START_COL = \"J\"; // Annuals start here\n    const FINANCIALS_MONTHS_START_COL = \"AE\"; // Months start here\n\n    // --- Updated Column Definitions ---\n    const ANNUALS_END_COL = \"P\";       // Annuals end here\n    const MONTHS_END_COL = \"CX\";       // Months end here\n    // --- End Updated Column Definitions ---\n\n    // Formatting constants\n    // const PURPLE_COLOR = \"#800080\"; // RGB(128, 0, 128) - Removed as Actuals section is removed\n    const GREEN_COLOR = \"#008000\";  // RGB(0, 128, 0)\n    const CURRENCY_FORMAT = '_(* $#,##0_);_(* $(#,##0);_(* \"$\" -_);_(@_)';\n\n    // Ensure lastRow is valid\n    if (lastRow < CALCS_FIRST_ROW) {\n        console.warn(`populateFinancialsJS: lastRow (${lastRow}) is less than CALCS_FIRST_ROW (${CALCS_FIRST_ROW}). Skipping.`);\n        return;\n    }\n\n    try {\n        // 1. Load data from Assumption Sheet\n        console.log(`populateFinancialsJS: Loading assumption data up to row ${lastRow}`);\n        const assumptionCodeRange = worksheet.getRange(`${ASSUMPTION_CODE_COL}${CALCS_FIRST_ROW}:${ASSUMPTION_CODE_COL}${lastRow}`);\n        // No need to load B, D, AE addresses/values here anymore if only used for linking\n\n        assumptionCodeRange.load(\"values\");\n\n        // 2. Load data from Financials Sheet (Find last row in code column I)\n        const financialsSearchCol = financialsSheet.getRange(`${FINANCIALS_CODE_COLUMN}:${FINANCIALS_CODE_COLUMN}`);\n        const financialsUsedRange = financialsSearchCol.getUsedRange(true);\n        financialsUsedRange.load(\"rowCount\");\n        // It's okay to sync assumption and initial financials loads together\n        // await worksheet.context.sync(); // Removed intermediate sync\n\n        let financialsLastRow = 0;\n        // Sync financials rowCount load before calculating financialsLastRow\n        await worksheet.context.sync();\n        if (financialsUsedRange.rowCount > 0) {\n           try {\n              const lastCell = financialsUsedRange.getLastCell();\n              lastCell.load(\"rowIndex\");\n               await worksheet.context.sync();\n              financialsLastRow = lastCell.rowIndex + 1;\n           } catch(e) {\n               console.warn(`Could not get last cell directly for Financials col ${FINANCIALS_CODE_COLUMN}. Error: ${e.message}. Attempting fallback range loading.`);\n               try {\n                   // Use a potentially more reliable column like B for last row fallback\n                   const fallbackRange = financialsSheet.getRange(`${FINANCIALS_TARGET_COL_B}1:${FINANCIALS_TARGET_COL_B}10000`); // Check Col B\n                   fallbackRange.load(\"values\");\n                   await worksheet.context.sync();\n                   for (let i = fallbackRange.values.length - 1; i >= 0; i--) {\n                       if (fallbackRange.values[i][0] !== null && fallbackRange.values[i][0] !== \"\") {\n                           financialsLastRow = i + 1;\n                           break;\n                       }\n                   }\n                   if (financialsLastRow === 0) console.warn(`Fallback range load for Financials col ${FINANCIALS_TARGET_COL_B} also yielded no data.`);\n               } catch (fallbackError) {\n                    console.error(`Error during fallback range loading for Financials col ${FINANCIALS_TARGET_COL_B}:`, fallbackError);\n                    financialsLastRow = 0; // Keep it 0 if fallback fails\n               }\n           }\n        }\n        // Recalculate financialsLastRow based on Col B if it's potentially larger\n        try {\n            const lastRowB = await getLastUsedRow(financialsSheet, FINANCIALS_TARGET_COL_B);\n            financialsLastRow = Math.max(financialsLastRow, lastRowB);\n        } catch (lastRowBErr) {\n            console.warn(`Could not get last row from Col B: ${lastRowBErr.message}`);\n        }\n\n        console.log(`Financials last relevant row used for processing: ${financialsLastRow}`);\n\n\n        // 3. Create Map of Financials Codes (Col I) -> Row Number\n        const financialsCodeMap = new Map();\n        if (financialsLastRow > 0) {\n            const financialsCodeRange = financialsSheet.getRange(`${FINANCIALS_CODE_COLUMN}1:${FINANCIALS_CODE_COLUMN}${financialsLastRow}`);\n            financialsCodeRange.load(\"values\");\n            await worksheet.context.sync(); // Sync map data load\n            for (let i = 0; i < financialsCodeRange.values.length; i++) {\n                const code = financialsCodeRange.values[i][0];\n                if (code !== null && code !== \"\") {\n                    // Only map the first occurrence of a code, like .Find would\n                    if (!financialsCodeMap.has(code)) {\n                         financialsCodeMap.set(code, i + 1);\n                    }\n                }\n            }\n            console.log(`Built Financials code map with ${financialsCodeMap.size} entries.`);\n        } else {\n            console.warn(`Financials sheet column ${FINANCIALS_CODE_COLUMN} appears empty or last row not found. No codes loaded for map.`);\n        }\n\n        // *** NEW: Build set of existing data links from Financials Column B ***\n        const existingDataLinks = new Set();\n        if (financialsLastRow > 0) {\n            console.log(`Loading existing formulas from Financials column ${FINANCIALS_TARGET_COL_B} up to row ${financialsLastRow}`);\n            const financialsLinkColRange = financialsSheet.getRange(`${FINANCIALS_TARGET_COL_B}1:${FINANCIALS_TARGET_COL_B}${financialsLastRow}`);\n            financialsLinkColRange.load(\"formulas\");\n            await worksheet.context.sync(); // Sync formulas load\n\n            const financialsFormulasB = financialsLinkColRange.formulas;\n            if (financialsFormulasB) {\n                for (let i = 0; i < financialsFormulasB.length; i++) {\n                    const formula = financialsFormulasB[i][0];\n                    // Check if it looks like a link formula ='SheetName'!CellRef\n                    if (typeof formula === 'string' && formula.startsWith(\"='\") && formula.includes(\"'!\")) {\n                        existingDataLinks.add(formula);\n                    }\n                }\n            }\n            console.log(`Built set of ${existingDataLinks.size} existing link formulas from Financials Col ${FINANCIALS_TARGET_COL_B}.`);\n        }\n        // *** END NEW ***\n\n        // 4. Identify rows to insert and prepare task data\n        const tasks = [];\n        console.log(\"populateFinancialsJS: Syncing assumption codes load...\");\n        await worksheet.context.sync(); // Sync needed for assumptionCodeRange.values\n\n        const assumptionCodes = assumptionCodeRange.values;\n        console.log(`populateFinancialsJS: Processing ${assumptionCodes?.length ?? 0} assumption rows.`);\n\n        // --- REMOVED Debug logging for row 17 values/addresses ---\n\n        for (let i = 0; i < (assumptionCodes?.length ?? 0); i++) {\n            const code = assumptionCodes[i][0];\n            const assumptionRow = CALCS_FIRST_ROW + i; // This is the correct Excel row number\n\n            if (code !== null && code !== \"\") {\n                // Construct the potential link formulas first\n                const linkFormulaB = `='${worksheet.name}'!${ASSUMPTION_LINK_COL_B}${assumptionRow}`;\n                const linkFormulaD = `='${worksheet.name}'!${ASSUMPTION_LINK_COL_D}${assumptionRow}`;\n                const linkFormulaMonths = `='${worksheet.name}'!${ASSUMPTION_MONTHS_START_COL}${assumptionRow}`;\n\n                // *** NEW CHECK 1: Skip if this assumption row link already exists in Financials Col B ***\n                if (existingDataLinks.has(linkFormulaB)) {\n                    console.log(`  Skipping Code ${code} (Assumption Row ${assumptionRow}): Link ${linkFormulaB} already exists in Financials!${FINANCIALS_TARGET_COL_B}.`);\n                    continue; // Skip to next assumption code\n                }\n\n                // *** ORIGINAL CHECK (modified): Check if code exists in the Financials template map ***\n                if (!financialsCodeMap.has(code)) {\n                     console.log(`  Skipping Code ${code} (Assumption Row ${assumptionRow}): Code not found in Financials template column ${FINANCIALS_CODE_COLUMN}. Cannot determine target row.`);\n                     continue; // Skip if no template row found\n                }\n\n                // If both checks pass, proceed to create the task\n                const targetRow = financialsCodeMap.get(code); // Get the row number from the map\n                console.log(`  Task Prep: Code ${code} (Assumption Row ${assumptionRow}) -> Target Financials Row (for insertion): ${targetRow}`);\n\n                tasks.push({\n                    targetRow: targetRow,\n                    assumptionRow: assumptionRow,\n                    code: code,\n                    addressB: linkFormulaB,     // Use the constructed formula link\n                    addressD: linkFormulaD,     // Use the constructed formula link\n                    addressMonths: linkFormulaMonths // Use the constructed formula link\n                });\n            }\n        }\n\n        if (tasks.length === 0) {\n            console.log(\"No matching codes found. Nothing to insert or populate.\");\n            return;\n        }\n\n        // 5. Sort tasks by targetRow DESCENDING\n        tasks.sort((a, b) => b.targetRow - a.targetRow);\n        console.log(`Sorted ${tasks.length} tasks for insertion.`);\n        // --- DEBUG: Log the tasks array --- \n        // console.log(\"Tasks array (sorted desc by targetRow):\", JSON.stringify(tasks)); // REMOVED DEBUG\n        // --- END DEBUG ---\n\n        // 6. Perform Insertions (bottom-up)\n        console.log(\"Performing row insertions...\");\n        for (const task of tasks) { // Uses the DESCENDING sorted tasks\n            financialsSheet.getRange(`${task.targetRow}:${task.targetRow}`).insert(Excel.InsertShiftDirection.down);\n            // *** It's generally more efficient to sync less often, but syncing after each insert\n            // ensures the row model is updated for potential complex dependencies if they existed.\n            // Keep sync here for now unless performance becomes an issue. ***\n            // await worksheet.context.sync(); // Sync after EACH insertion -- REMOVED THIS LINE\n        }\n        await worksheet.context.sync(); // Sync AFTER all insertions are queued\n        console.log(\"Finished row insertions.\");\n\n        // Pre-calculate the final adjusted row for each task after all insertions\n        console.log(\"Calculating final adjusted rows for population/autofill...\");\n        // Get unique original target rows, sorted ascending\n        const originalTargetRowsAsc = [...new Set(tasks.map(t => t.targetRow))].sort((a, b) => a - b);\n        const taskAdjustedRows = new Map(); // Map to store { assumptionRow: adjustedRow }\n        let totalShift = 0; // Total shift accumulated from previous rows\n\n        // --- DEBUG: Log originalTargetRowsAsc ---\n        // console.log(\"Original Target Rows (unique, asc):\", originalTargetRowsAsc); // REMOVED DEBUG\n        // --- END DEBUG ---\n\n        originalTargetRowsAsc.forEach(uniqueRow => {\n            // --- DEBUG: Log current uniqueRow ---\n            // console.log(`Processing uniqueRow: ${uniqueRow}`); // REMOVED DEBUG\n            // --- END DEBUG ---\n\n            // Find all tasks that originally targeted this unique row\n            // CORRECTED PROPERTY NAME IN FILTER: task.targetRow instead of task.originalTargetRow\n            const tasksAtThisRow = tasks.filter(task => task.targetRow === uniqueRow);\n\n            // --- DEBUG: Log tasks found for this uniqueRow ---\n            // console.log(`  Tasks found for uniqueRow ${uniqueRow}:`, JSON.stringify(tasksAtThisRow)); // REMOVED DEBUG\n            // --- END DEBUG ---\n\n            // Optional: Sort tasksAtThisRow by assumptionRow for deterministic order, though might not be strictly necessary\n            // tasksAtThisRow.sort((a, b) => a.assumptionRow - b.assumptionRow);\n\n            let currentAdjustedRowForGroup = uniqueRow + totalShift; // Starting adjusted row for this group\n\n            // Assign consecutive adjusted rows to each task in this group\n            tasksAtThisRow.forEach(task => {\n                taskAdjustedRows.set(task.assumptionRow, currentAdjustedRowForGroup); // Use assumptionRow as key\n                console.log(`  Mapping: Code ${task.code}, Assumption Row ${task.assumptionRow}, Original Target ${uniqueRow}, Final Adjusted Row ${currentAdjustedRowForGroup}`);\n                currentAdjustedRowForGroup++; // Increment for the next task inserting at the same original spot\n            });\n\n            // Update the total shift for subsequent unique rows\n            totalShift += tasksAtThisRow.length;\n        });\n\n        // --- DEBUG: Log the contents of the map --- \n        // console.log(\"taskAdjustedRows map contents:\", taskAdjustedRows); // REMOVED DEBUG\n        // --- END DEBUG ---\n\n        // 7. Populate and Format inserted rows using ADJUSTED row numbers\n        console.log(\"Populating inserted rows (using adjusted rows)...\");\n        for (const task of tasks) { // Iterates descending sorted tasks (order doesn't strictly matter here, but using the same loop)\n            // const originalTargetRow = task.targetRow; // No longer needed for lookup\n            const populateRow = taskAdjustedRows.get(task.assumptionRow); // Get the calculated adjusted row using assumptionRow\n\n            // Check if populateRow was found\n            if (typeof populateRow === 'undefined' || populateRow === null) {\n                console.error(`Could not find adjusted row for task with Assumption Row ${task.assumptionRow}, Code ${task.code}. Skipping population.`);\n                continue; // Skip this task if mapping failed\n            }\n\n            // Use populateRow instead of task.targetRow for getRange calls\n            const cellB = financialsSheet.getRange(`${FINANCIALS_TARGET_COL_B}${populateRow}`);\n            const cellD = financialsSheet.getRange(`${FINANCIALS_TARGET_COL_D}${populateRow}`);\n            const cellAnnualsStart = financialsSheet.getRange(`${FINANCIALS_ANNUALS_START_COL}${populateRow}`);\n            const cellMonthsStart = financialsSheet.getRange(`${FINANCIALS_MONTHS_START_COL}${populateRow}`);\n\n            // --- Populate Column B ---\n            cellB.formulas = [[task.addressB]]; // Set formula directly\n            cellB.format.font.bold = false;\n            cellB.format.font.italic = false;\n            cellB.format.indentLevel = 2;\n\n            // --- Populate Column D ---\n            cellD.formulas = [[task.addressD]]; // Set formula directly\n            cellD.format.font.bold = false;\n            cellD.format.font.italic = false;\n            cellD.format.indentLevel = 2;\n\n            // --- Populate Annuals Start Column (J) with SUMIF ---\n            const codePrefix = String(task.code).substring(0, 2).toUpperCase();\n            let formulaJ = \"\";\n            if (codePrefix === \"IS\" || codePrefix === \"CF\") {\n                 // Corrected R2C[1] to R2C: Criteria should reference current column's header (J$2)\n                 formulaJ = `=SUMIF(R3,R2C,R[0])`;\n            } else {\n                 // Corrected R2C[1] to R2C: Criteria should reference current column's header (J$2)\n                 formulaJ = `=SUMIF(R4,R2C,R[0])`;\n            }\n            cellAnnualsStart.formulasR1C1 = [[formulaJ]]; // Use formulasR1C1 for SUMIF\n            cellAnnualsStart.format.font.bold = false;\n            cellAnnualsStart.format.font.italic = false;\n            cellAnnualsStart.format.numberFormat = CURRENCY_FORMAT;\n\n            // --- Populate Months Start Column (AE) with Link ---\n            cellMonthsStart.formulas = [[task.addressMonths]]; // Set formula directly\n            cellMonthsStart.format.font.bold = false;\n            cellMonthsStart.format.font.italic = false;\n            cellMonthsStart.format.font.color = GREEN_COLOR; // Keep green color for month links\n            cellMonthsStart.format.numberFormat = CURRENCY_FORMAT;\n\n            // Removed Actuals column population (was L in previous version)\n            \n            // --- NEW: Populate Actuals Columns S:AD with SUMIFS formula ---\n            try {\n                const actualsRange = financialsSheet.getRange(`S${populateRow}:AD${populateRow}`);\n                const sumifsFormula = \"=SUMIFS('Actual Data'!$B:$B,'Actual Data'!$D:$D,EOMONTH(INDIRECT(ADDRESS(2,COLUMN())),0),'Actual Data'!$E:$E,@INDIRECT(ADDRESS(ROW(),2)))\";\n                \n                // Create a 2D array matching the range dimensions\n                const numCols = columnLetterToIndex('AD') - columnLetterToIndex('S') + 1;\n                const formulasArray = [Array(numCols).fill(sumifsFormula)];\n                actualsRange.formulas = formulasArray;\n                \n                // Apply formatting\n                actualsRange.format.numberFormat = CURRENCY_FORMAT;\n                actualsRange.format.font.bold = false;\n                actualsRange.format.font.italic = false;\n                actualsRange.format.font.color = \"#7030A0\"; // Set font color\n                console.log(`  Set SUMIFS formula for S${populateRow}:AD${populateRow}`);\n            } catch (sumifsError) {\n                console.error(`Error setting SUMIFS formula for row ${populateRow} (Code: ${task.code}):`, sumifsError.debugInfo || sumifsError);\n            }\n            // --- END NEW SECTION ---\n        }\n        console.log(\"Finished setting values/formulas/formats for inserted rows.\");\n        await worksheet.context.sync(); // Sync all population and formatting\n\n\n        // 8. Perform Autofills using ADJUSTED row numbers\n        console.log(\"Performing autofills (using adjusted rows)...\");\n        for (const task of tasks) { // Uses the DESCENDING sorted tasks again\n             // const originalTargetRow = task.targetRow; // No longer needed for lookup\n             const populateRow = taskAdjustedRows.get(task.assumptionRow); // Get the calculated adjusted row using assumptionRow\n\n             // Check if populateRow was found\n            if (typeof populateRow === 'undefined' || populateRow === null) {\n                console.error(`Could not find adjusted row for task with Assumption Row ${task.assumptionRow}, Code ${task.code}. Skipping autofill.`);\n                continue; // Skip this task if mapping failed\n            }\n\n             try {\n                // Use populateRow for autofill ranges\n                // Autofill Annuals: J -> P\n                const sourceAnnuals = financialsSheet.getRange(`${FINANCIALS_ANNUALS_START_COL}${populateRow}`); // Use adjusted row\n                const destAnnuals = financialsSheet.getRange(`${FINANCIALS_ANNUALS_START_COL}${populateRow}:${ANNUALS_END_COL}${populateRow}`); // Use adjusted row\n                sourceAnnuals.autoFill(destAnnuals, Excel.AutoFillType.fillDefault);\n                // console.log(`  Autofilled ${FINANCIALS_ANNUALS_START_COL}${populateRow} to ${ANNUALS_END_COL}${populateRow}`);\n\n                // Autofill Months: AE -> CX\n                const sourceMonths = financialsSheet.getRange(`${FINANCIALS_MONTHS_START_COL}${populateRow}`); // Use adjusted row\n                const destMonths = financialsSheet.getRange(`${FINANCIALS_MONTHS_START_COL}${populateRow}:${MONTHS_END_COL}${populateRow}`); // Use adjusted row\n                sourceMonths.autoFill(destMonths, Excel.AutoFillType.fillDefault);\n                // console.log(`  Autofilled ${FINANCIALS_MONTHS_START_COL}${populateRow} to ${MONTHS_END_COL}${populateRow}`);\n\n                // Removed Actuals autofill\n             } catch(autofillError) {\n                 // Update error message to use adjusted row\n                 console.error(`Error during autofill for adjusted row ${populateRow} (Code: ${task.code}, Original Target: ${task.targetRow}):`, autofillError.debugInfo || autofillError);\n             }\n        }\n        console.log(\"Finished setting up autofills.\");\n        await worksheet.context.sync(); // Sync all autofill operations\n        console.log(\"Autofills synced.\");\n\n        console.log(`populateFinancialsJS successfully completed for ${worksheet.name} -> ${financialsSheet.name}`);\n\n    } catch (error) {\n        console.error(`Error in populateFinancialsJS for sheet ${worksheet.name} -> ${financialsSheet.name}:`, error.debugInfo || error);\n        throw error;\n    }\n}\n\n/**\n * Placeholder for Format_Changes_In_Working_Capital VBA logic.\n * Inserts a row and adjusts formatting in \"Financials\" based on specific codes.\n * @param {Excel.Worksheet} financialsSheet - The \"Financials\" worksheet (within an Excel.run context).\n */\nasync function formatChangesInWorkingCapitalJS(financialsSheet) {\n    console.log(`Running formatChangesInWorkingCapitalJS for sheet: ${financialsSheet.name}`);\n    // This function MUST be called within an Excel.run context.\n    const FIND_TEXT_1 = \"CF: Non-cash\";\n    const FIND_TEXT_2 = \"CF: WC\";\n    const SEARCH_COLUMN = \"I\";\n     // Define ranges for border removal based on VBA (e.g., \"K\" + (foundRow + 1) + \":P\" + (foundRow + 1))\n\n    // TODO: Implement Format_Changes_In_Working_Capital logic\n    // 1. Find FIND_TEXT_1 in SEARCH_COLUMN using range.find\n    // 2. If found:\n    //    a. Get cell above (offset -1, 0)\n    //    b. Load its value\n    //    c. Sync\n    //    d. Check if value is FIND_TEXT_2\n    //    e. If yes:\n    //       i. Get the entire row of the found cell (.getEntireRow())\n    //       ii. Insert a new row above it (insert(Excel.InsertShiftDirection.down))\n    //       iii. Get ranges in the *original* row (now shifted down one) and remove borders.\n    financialsSheet.load('name'); // Keep reference valid if needed later in the SAME context\n    await financialsSheet.context.sync();\n     console.warn(`formatChangesInWorkingCapitalJS on ${financialsSheet.name} not implemented yet.`);\n}\n\n/**\n * Processes assumption tabs after runCodes, replicating VBA logic.\n * Expects an array of assumption tab names.\n * @param {string[]} assumptionTabNames - Array of assumption tab names created by runCodes.\n */\nexport async function processAssumptionTabs(assumptionTabNames) {\n    console.log(`Starting processing for ${assumptionTabNames.length} assumption tabs:`, assumptionTabNames);\n    if (!assumptionTabNames || assumptionTabNames.length === 0) {\n        console.log(\"No assumption tabs provided to process.\");\n        return;\n    }\n\n    const FINANCIALS_SHEET_NAME = \"Financials\"; // Define constant\n    const AUTOFILL_START_COLUMN = \"AE\";\n    const AUTOFILL_END_COLUMN = \"CX\";\n    const START_ROW = 10; // <<< CHANGED FROM 9 // Standard start row for processing\n\n    try {\n        // --- Loop through each assumption tab name ---\n        for (const worksheetName of assumptionTabNames) {\n             console.log(`\\nProcessing Assumption Tab: ${worksheetName}`);\n\n            try {\n                 // Perform operations for a single tab within one Excel.run for efficiency\n                 await Excel.run(async (context) => {\n                     // Get worksheet and financials sheet references within THIS context\n                     const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\n                     const financialsSheet = context.workbook.worksheets.getItem(FINANCIALS_SHEET_NAME);\n                     currentWorksheet.load('name'); // Load basic properties\n                     financialsSheet.load('name');\n                     await context.sync(); // Ensure sheets are loaded\n\n                     console.log(`Successfully got references for ${currentWorksheet.name} and ${financialsSheet.name}`);\n\n                     // 1. Get Last Row for the current assumption tab\n                     // getLastUsedRow needs context, so call it here\n                     const lastRow = await getLastUsedRow(currentWorksheet, \"B\"); // Pass currentWorksheet from this context\n                     if (lastRow < START_ROW) {\n                         console.warn(`Skipping tab ${worksheetName} as last used row in Col B (${lastRow}) is before start row (${START_ROW}).`);\n                         return; // Skip to next tab if empty or too short\n                     }\n                     console.log(`Last row in Col B for ${worksheetName}: ${lastRow}`);\n\n                     // --- Call helper functions IN ORDER, passing worksheet objects from this context ---\n                     // These helpers now expect to run within this context\n\n                     // 2. Adjust Drivers\n                     await adjustDriversJS(currentWorksheet, lastRow);\n\n                     // 3. Replace Indirects\n                     await replaceIndirectsJS(currentWorksheet, lastRow);\n\n                     // 4. Get Last Row Again (if Replace_Indirects might change it)\n                     // const updatedLastRow = await getLastUsedRow(currentWorksheet, \"B\"); // Recalculate if necessary\n                     const updatedLastRow = lastRow; // Assuming Replace_Indirects doesn't change last row for now\n                     console.log(`Using last row for subsequent steps: ${updatedLastRow}`);\n                     if (updatedLastRow < START_ROW) {\n                         console.warn(`Skipping remaining steps for ${worksheetName} as updated last row (${updatedLastRow}) is invalid.`);\n                         return;\n                     }\n\n                     // 5. Populate Financials\n                     await populateFinancialsJS(currentWorksheet, updatedLastRow, financialsSheet);\n\n                     // 6. Delete rows with green background (#CCFFCC)\n                     console.log(`Deleting green rows in ${worksheetName}...`);\n                     const finalLastRow = await deleteGreenRows(currentWorksheet, START_ROW, updatedLastRow);\n                     console.log(`After deleting green rows, last row is now: ${finalLastRow}`);\n\n                     // 6.5 Set font color to white in column A\n                     await setColumnAFontWhite(currentWorksheet, START_ROW, finalLastRow);\n                     console.log(`Set font color to white in column A from rows ${START_ROW}-${finalLastRow}`);\n\n                     // 7. Autofill AE9:AE<lastRow> -> CX<lastRow> on Assumption Tab\n                     console.log(`Autofilling ${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${finalLastRow} to ${AUTOFILL_END_COLUMN} on ${worksheetName}`);\n                     const sourceRange = currentWorksheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${finalLastRow}`);\n                     const fillRange = currentWorksheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_END_COLUMN}${finalLastRow}`);\n                     sourceRange.autoFill(fillRange, Excel.AutoFillType.fillDefault);\n\n                     // 8. Set Row 9 interior color to none\n                     console.log(`Setting row 9 interior color to none for ${worksheetName}`);\n                     const row9Range = currentWorksheet.getRange(\"9:9\");\n                     row9Range.format.fill.clear();\n\n                     // Sync all batched operations for this tab\n                     await context.sync();\n                     console.log(`Finished processing and syncing for tab ${worksheetName}`);\n\n                 }); // End Excel.run for single tab processing\n\n             } catch (tabError) {\n                 console.error(`Error processing tab ${worksheetName}:`, tabError);\n                 // Optionally add to an error list and continue with the next tab\n                 // Be mindful that subsequent tabs might depend on this one succeeding.\n             }\n        } // --- End loop through assumption tabs ---\n\n        // --- Final Operations on Financials Sheet ---\n        console.log(`\\nPerforming final operations on ${FINANCIALS_SHEET_NAME}`);\n        try {\n             await Excel.run(async (context) => {\n                 const finSheet = context.workbook.worksheets.getItem(FINANCIALS_SHEET_NAME);\n                 finSheet.load('name'); // Load name for logging\n                 await context.sync(); // Ensure sheet is loaded\n\n                 // 1. Format Changes In Working Capital\n                 // await formatChangesInWorkingCapitalJS(finSheet); // <<< COMMENTED OUT\n\n                 // 2. Get Last Row for Financials\n                 const financialsLastRow = await getLastUsedRow(finSheet, \"B\"); // Pass sheet from this context\n                 if (financialsLastRow < START_ROW) {\n                     console.warn(`Skipping final autofill on ${FINANCIALS_SHEET_NAME} as last row (${financialsLastRow}) is before start row (${START_ROW}).`);\n                     return;\n                 }\n                 console.log(`Last row in Col B for ${FINANCIALS_SHEET_NAME}: ${financialsLastRow}`);\n\n                //  // 3. Autofill AE9:AE<lastRow> -> CX<lastRow> on Financials\n                //  console.log(`Autofilling ${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${financialsLastRow} to ${AUTOFILL_END_COLUMN} on ${FINANCIALS_SHEET_NAME}`);\n                //  const sourceRangeFin = finSheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${financialsLastRow}`);\n                //  const fillRangeFin = finSheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_END_COLUMN}${financialsLastRow}`);\n                //  sourceRangeFin.autoFill(fillRangeFin, Excel.AutoFillType.fillDefault);\n\n\n                 // Sync final Financials sheet operations\n                 await context.sync();\n                 console.log(`Finished final operations on ${FINANCIALS_SHEET_NAME}`);\n             });\n         } catch (financialsError) {\n             console.error(`Error during final operations on ${FINANCIALS_SHEET_NAME}:`, financialsError);\n         }\n\n        console.log(\"Finished processing all assumption tabs.\");\n\n    } catch (error) {\n        console.error(\"Error in processAssumptionTabs main function:\", error);\n        // Potentially re-throw or handle top-level errors\n    }\n}\n\n/**\n * Deletes rows with light green background (#CCFFCC) in column B\n * @param {Excel.Worksheet} worksheet - The worksheet to process\n * @param {number} startRow - The first row to check\n * @param {number} lastRow - The last row to check\n * @returns {Promise<number>} - The new last row after deletions\n */\nasync function deleteGreenRows(worksheet, startRow, lastRow) {\n    console.log(`Deleting green rows (#CCFFCC) in ${worksheet.name} from row ${startRow} to ${lastRow}`);\n    \n    try {\n        // Create an array to store rows that need deletion (in descending order)\n        const rowsToDelete = [];\n        \n        // Process each row individually instead of as a range to avoid collection issues\n        for (let rowNum = startRow; rowNum <= lastRow; rowNum++) {\n            const cellAddress = `B${rowNum}`;\n            const cell = worksheet.getRange(cellAddress);\n            cell.load(\"format/fill/color\");\n            \n            try {\n                await worksheet.context.sync();\n                \n                // Safely check if properties exist and if color matches\n                if (cell.format && \n                    cell.format.fill && \n                    cell.format.fill.color === \"#CCFFCC\") {\n                    rowsToDelete.push(rowNum);\n                }\n            } catch (cellError) {\n                console.warn(`Error checking color for ${cellAddress}: ${cellError.message}`);\n                // Continue to next cell if there's an error with this one\n            }\n        }\n        \n        // Sort in descending order to delete from bottom to top\n        rowsToDelete.sort((a, b) => b - a);\n        \n        console.log(`Found ${rowsToDelete.length} green rows to delete`);\n        \n        // Delete each row (from bottom to top)\n        if (rowsToDelete.length > 0) {\n            for (const rowNum of rowsToDelete) {\n                console.log(`Deleting row ${rowNum}`);\n                const rowRange = worksheet.getRange(`${rowNum}:${rowNum}`);\n                rowRange.delete(Excel.DeleteShiftDirection.up);\n            }\n            \n            await worksheet.context.sync();\n            \n            // Recalculate the last row\n            const newLastRow = await getLastUsedRow(worksheet, \"B\");\n            console.log(`New last row after deletions: ${newLastRow}`);\n            \n            return newLastRow;\n        } else {\n            console.log(\"No green rows found to delete\");\n            return lastRow; // Return original lastRow if no rows deleted\n        }\n    } catch (error) {\n        console.error(`Error in deleteGreenRows: ${error.message}`, error);\n        // Return the original lastRow on error\n        return lastRow;\n    }\n}\n\n/**\n * Sets the font color to white for all cells in column A\n * @param {Excel.Worksheet} worksheet - The worksheet to process\n * @param {number} startRow - The first row to format\n * @param {number} lastRow - The last row to format\n * @returns {Promise<void>}\n */\nasync function setColumnAFontWhite(worksheet, startRow, lastRow) {\n    console.log(`Setting font color to white in column A for ${worksheet.name} from row ${startRow} to ${lastRow}`);\n    \n    try {\n        // Get the entire range for column A from startRow to lastRow\n        const columnARange = worksheet.getRange(`A${startRow}:A${lastRow}`);\n        \n        // Set the font color to white\n        columnARange.format.font.color = \"#FFFFFF\";\n        \n        await worksheet.context.sync();\n        console.log(`Successfully set font color to white in column A for rows ${startRow}-${lastRow}`);\n    } catch (error) {\n        console.error(`Error in setColumnAFontWhite: ${error.message}`, error);\n    }\n}\n\n// --- Helper Functions for Column Conversion ---\n\n/**\n * Converts a 0-based column index into a column letter (e.g., 0 -> A, 1 -> B, 26 -> AA).\n * @param {number} index - The 0-based column index.\n * @returns {string} The column letter.\n */\nfunction columnIndexToLetter(index) {\n    let letter = '';\n    while (index >= 0) {\n        letter = String.fromCharCode(index % 26 + 'A'.charCodeAt(0)) + letter;\n        index = Math.floor(index / 26) - 1;\n    }\n    return letter;\n}\n\n/**\n * Converts a column letter into a 0-based column index (e.g., A -> 0, B -> 1, AA -> 26).\n * @param {string} letter - The column letter (case-insensitive).\n * @returns {number} The 0-based column index.\n */\nfunction columnLetterToIndex(letter) {\n    letter = letter.toUpperCase();\n    let index = 0;\n    for (let i = 0; i < letter.length; i++) {\n        index = index * 26 + (letter.charCodeAt(i) - 'A'.charCodeAt(0) + 1);\n    }\n    return index - 1; // Adjust to 0-based\n}\n\n/**\n * Hides Columns C-I, Rows 2-8, and specific Actuals columns on specified sheets,\n * then navigates to cell A1 of the Financials sheet.\n * @param {string[]} assumptionTabNames - Array of assumption tab names created by runCodes.\n * @returns {Promise<void>}\n */\nexport async function hideColumnsAndNavigate(assumptionTabNames) { // Renamed and added parameter\n    // Define Actuals columns\n    const ACTUALS_START_COL = \"S\";\n    const ACTUALS_END_COL = \"AD\";\n\n    try {\n        const targetSheetNames = [...assumptionTabNames, \"Financials\"]; // Combine assumption tabs and Financials\n        console.log(`Attempting to hide specific rows/columns on sheets [${targetSheetNames.join(', ')}] and navigate...`);\n\n        await Excel.run(async (context) => {\n            // Get all worksheets\n            const worksheets = context.workbook.worksheets;\n            // Load only names needed for matching\n            worksheets.load(\"items/name\");\n            await context.sync();\n\n            console.log(`Found ${worksheets.items.length} worksheets. Targeting ${targetSheetNames.length} specific sheets.`);\n            let hideAttempted = false;\n\n            // Calculate actuals end column for assumption tabs\n            const actualsEndIndex = columnLetterToIndex(ACTUALS_END_COL);\n            const actualsEndMinusOneCol = actualsEndIndex > 0 ? columnIndexToLetter(actualsEndIndex - 1) : ACTUALS_START_COL; // Handle edge case\n\n            // --- Queue hiding operations for target sheets ---\n            for (const worksheet of worksheets.items) {\n                const sheetName = worksheet.name;\n                if (targetSheetNames.includes(sheetName)) { // Check if sheet is in our target list\n                    console.log(`Queueing hide operations for: ${sheetName}`);\n                    try {\n                        // Hide Rows 2:8 (Applies to both)\n                        const rows28 = worksheet.getRange(\"2:8\");\n                        rows28.rowHidden = true;\n\n                        // Conditional Column Hiding\n                        if (sheetName === \"Financials\") {\n                            console.log(`  -> Hiding Columns C:I for Financials`);\n                            const colsCI = worksheet.getRange(\"C:I\");\n                            colsCI.columnHidden = true;\n                        } else {\n                            // Hide Columns C:E for Assumption Tabs\n                            console.log(`  -> Hiding Columns C:E for ${sheetName}`);\n                            const colsCE = worksheet.getRange(\"C:E\");\n                            colsCE.columnHidden = true;\n                        }\n\n                        // Hide Actuals Columns based on sheet type\n                        if (sheetName === \"Financials\") {\n                            console.log(`  -> Hiding Actuals range ${ACTUALS_START_COL}:${ACTUALS_END_COL}`);\n                            const actualsRangeFin = worksheet.getRange(`${ACTUALS_START_COL}:${ACTUALS_END_COL}`);\n                            actualsRangeFin.columnHidden = true;\n                        } else if (assumptionTabNames.includes(sheetName)) {\n                             console.log(`  -> Hiding Actuals range ${ACTUALS_START_COL}:${actualsEndMinusOneCol}`);\n                             const actualsRangeAssum = worksheet.getRange(`${ACTUALS_START_COL}:${actualsEndMinusOneCol}`);\n                             actualsRangeAssum.columnHidden = true;\n                        }\n\n                        hideAttempted = true; // Mark that at least one hide was queued\n                    } catch (error) {\n                        // Log unexpected errors during the queuing attempt\n                        console.error(`  Error queuing hide operations for ${sheetName}: ${error.message}`, {\n                            code: error.code,\n                            debugInfo: error.debugInfo ? JSON.stringify(error.debugInfo) : 'N/A'\n                        });\n                    }\n                }\n            }\n\n            // --- Sync all queued hide operations ---\n            if (hideAttempted) {\n                console.log(`Attempting to sync hide columns/rows operations...`);\n                try {\n                    await context.sync();\n                    console.log(\"Successfully synced hide columns/rows operations.\");\n                } catch (syncError) {\n                    console.error(`Error syncing hide columns/rows operations: ${syncError.message}`, {\n                        code: syncError.code,\n                        debugInfo: syncError.debugInfo ? JSON.stringify(syncError.debugInfo) : 'N/A'\n                    });\n                     // Report failure but continue to navigation attempt\n                }\n            } else {\n                 console.log(\"No target sheets found or no hide operations were queued.\");\n            }\n\n            // --- Activate and Select A1 on each assumption tab (mimic Ctrl+Home) ---\n            console.log(\"Activating and selecting A1 on assumption tabs...\");\n            // Note: This requires syncing inside the loop for the activate/select effect per sheet\n            for (const sheetName of assumptionTabNames) {\n                try {\n                    console.log(`  Activating and selecting A1 for: ${sheetName}`);\n                    const worksheet = context.workbook.worksheets.getItem(sheetName);\n                    worksheet.activate(); // Activate the sheet first\n                    const rangeA1 = worksheet.getRange(\"A1\");\n                    rangeA1.select(); // Then select A1\n                    await context.sync(); // Sync *immediately* to apply activation and selection for this sheet\n                    console.log(`  Synced A1 view reset for ${sheetName}.`);\n                } catch (error) {\n                     console.error(`  Error resetting view for ${sheetName}: ${error.message}`);\n                     // Optionally continue to the next sheet even if one fails\n                }\n            }\n            // No final sync needed for this loop as it happens inside\n\n            // --- Activate and Select J9 on each assumption tab ---\n            console.log(\"Activating and selecting J9 on assumption tabs...\");\n            // Note: This requires syncing inside the loop for the activate/select effect per sheet\n            for (const sheetName of assumptionTabNames) {\n                try {\n                    console.log(`  Activating and selecting J9 for: ${sheetName}`);\n                    const worksheet = context.workbook.worksheets.getItem(sheetName);\n                    worksheet.activate(); // Activate the sheet first\n                    const rangeJ9 = worksheet.getRange(\"J9\"); // Get J9\n                    rangeJ9.select(); // Then select J9\n                    await context.sync(); // Sync *immediately* to apply activation and selection for this sheet\n                    console.log(`  Synced J9 view reset for ${sheetName}.`);\n                } catch (error) {\n                     console.error(`  Error resetting view to J9 for ${sheetName}: ${error.message}`);\n                     // Optionally continue to the next sheet even if one fails\n                }\n            }\n            // No final sync needed for this loop as it happens inside\n\n            // --- Navigate to Financials sheet and select cell J9 ---\n            // (This ensures Financials is the final active sheet)\n            try {\n                console.log(\"Navigating to Financials sheet and selecting J9...\");\n                const financialsSheet = context.workbook.worksheets.getItem(\"Financials\");\n                // This activate/select sequence overrides the previous active sheet.\n                financialsSheet.activate(); \n                const rangeJ9 = financialsSheet.getRange(\"J9\"); // Get J9\n                rangeJ9.select(); // Select J9\n                await context.sync(); // Sync the final activate/select\n                console.log(\"Successfully navigated to Financials!J9.\");\n            } catch (navError) {\n                console.error(`Error navigating to Financials sheet J9: ${navError.message}`, {\n                    code: navError.code,\n                    debugInfo: navError.debugInfo ? JSON.stringify(navError.debugInfo) : 'N/A'\n                });\n                // Do not throw here, allow the function to finish\n            }\n\n            console.log(\"Finished hideColumnsAndNavigate function.\");\n\n        }); // End Excel.run\n    } catch (error) {\n        // Catch errors from the Excel.run call itself\n        console.error(\"Critical error in hideColumnsAndNavigate:\", error);\n        throw error; // Re-throw critical errors\n    }\n}\n\n/**\n * Hides specific rows and columns on all worksheets except for specified exclusions.\n * Hides rows 1-8, columns C-I (3-9), and columns S-AC (19-29).\n * @param {string[]} excludedSheetNames - An array of sheet names to exclude from hiding.\n * @returns {Promise<void>}\n */\nexport async function hideRowsAndColumnsOnSheets(excludedSheetNames = [\"Actuals Data\", \"Actuals Categorization\"]) {\n    try {\n        console.log(`Hiding rows/columns on sheets, excluding: ${excludedSheetNames.join(', ')}`);\n\n        await Excel.run(async (context) => {\n            const worksheets = context.workbook.worksheets;\n            worksheets.load(\"items/name\");\n            await context.sync();\n\n            for (const worksheet of worksheets.items) {\n                const sheetName = worksheet.name;\n                if (excludedSheetNames.includes(sheetName)) {\n                    console.log(`Skipping sheet: ${sheetName} (excluded)`);\n                    continue;\n                }\n\n                console.log(`Processing sheet: ${sheetName}`);\n\n                try {\n                    // Hide Rows 1-8\n                    const rowRange = worksheet.getRange(\"1:8\");\n                    rowRange.rowHidden = true;\n                    console.log(`  Hiding rows 1-8`);\n\n                    // Hide Columns C-E (Changed from C:I)\n                    const colRange1 = worksheet.getRange(\"C:E\"); // Changed range\n                    colRange1.columnHidden = true;\n                    console.log(`  Hiding columns C-E`); // Update log message\n\n                    // Hide Columns S-AC\n                    const colRange2 = worksheet.getRange(\"S:AC\");\n                    colRange2.columnHidden = true;\n                    console.log(`  Hiding columns S-AC`);\n\n                    // It's often more efficient to batch sync operations,\n                    // but sometimes hiding needs immediate effect or separate syncs.\n                    // Let's sync after hiding for this sheet.\n                    await context.sync();\n                    console.log(`  Finished hiding for ${sheetName}`);\n\n                } catch (hideError) {\n                    console.error(`  Error hiding rows/columns on sheet ${sheetName}: ${hideError.message}`, {\n                        code: hideError.code,\n                        debugInfo: hideError.debugInfo ? JSON.stringify(hideError.debugInfo) : 'N/A'\n                    });\n                    // Continue to the next sheet even if one fails\n                }\n            }\n\n            console.log(\"Finished processing all sheets for hiding rows/columns.\");\n        }); // End Excel.run\n\n    } catch (error) {\n        console.error(\"Critical error in hideRowsAndColumnsOnSheets:\", error);\n        throw error;\n    }\n}\n\n// TODO: Implement the actual logic within the JS helper functions (adjustDriversJS, replaceIndirectsJS, etc.).\n// TODO: Implement findRowByValue helper function if Retained Earnings logic is needed.\n// TODO: Update the calling code (e.g., button handler in taskpane.js) to call `processAssumptionTabs` after `runCodes`.\n\n/**\n * Inserts worksheets from a base64-encoded Excel file into the current workbook\n * @param {string} base64String - Base64-encoded string of the source Excel file\n * @param {string[]} [sheetNames] - Optional array of sheet names to insert. If not provided, all sheets will be inserted.\n * @returns {Promise<void>}\n */\nexport async function handleInsertWorksheetsFromBase64(base64String, sheetNames = null) {\n    try {\n        // Validate base64 string\n        if (!base64String || typeof base64String !== 'string') {\n            throw new Error(\"Invalid base64 string provided\");\n        }\n\n        // Validate base64 format\n        if (!/^[A-Za-z0-9+/]*={0,2}$/.test(base64String)) {\n            throw new Error(\"Invalid base64 format\");\n        }\n\n        await Excel.run(async (context) => {\n            const workbook = context.workbook;\n            \n            // Check if we have the required API version\n            if (!workbook.insertWorksheetsFromBase64) {\n                throw new Error(\"This feature requires Excel API requirement set 1.13 or later\");\n            }\n            \n            // Insert the worksheets with error handling\n            try {\n                await workbook.insertWorksheetsFromBase64(base64String, {\n                    sheetNames: sheetNames\n                });\n                \n                await context.sync();\n                console.log(\"Worksheets inserted successfully\");\n            } catch (error) {\n                console.error(\"Error during worksheet insertion:\", error);\n                throw new Error(`Failed to insert worksheets: ${error.message}`);\n            }\n        });\n    } catch (error) {\n        console.error(\"Error inserting worksheets from base64:\", error);\n        throw error;\n    }\n}","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n\n// Remove imports from Langchain to avoid ESM module issues\n// Using direct fetch calls instead\n// Add this test function\nimport { validateCodeStrings } from './Validation.js';\n// Import the spreadsheet utilities\n// import { handleInsertWorksheetsFromBase64 } from './SpreadsheetUtils.js';\n// Import code collection functions\nimport { populateCodeCollection, exportCodeCollectionToText, runCodes, processAssumptionTabs, collapseGroupingsAndNavigateToFinancials, hideColumnsAndNavigate, handleInsertWorksheetsFromBase64 } from './CodeCollection.js';\n// >>> ADDED: Import the new validation function\nimport { validateCodeStringsForRun } from './Validation.js';\n// Add the codeStrings variable with the specified content\n// REMOVED hardcoded codeStrings variable\n\n// Mock fs module for browser environment\nconst fs = {\n    writeFileSync: (path, content) => {\n        console.log(`Mock writeFileSync called with path: ${path}`);\n        // In browser, we'll just log the content instead of writing to file\n        console.log(`Content would be written to ${path}:`, content.substring(0, 100) + '...');\n    }\n};\n\n//*********Setup*********\n// Start the timer\nconst startTime = performance.now();\n\n//Debugging Toggle\nconst DEBUG = true; \n\n// Variable to store loaded code strings\nlet loadedCodeStrings = \"\";\n\n// Variable to store the parsed code database\nlet codeDatabase = [];\n\n// >>> ADDED: Variables for search/replace state <<<\nlet lastSearchTerm = '';\nlet lastSearchIndex = -1; // Tracks the starting index of the last found match\nlet searchResultIndices = []; // Stores indices of all matches for Replace All\nlet currentHighlightIndex = -1; // Index within searchResultIndices for Find Next\n\n// API keys storage\nlet API_KEYS = {\n  OPENAI_API_KEY: \"\",\n  PINECONE_API_KEY: \"\"\n};\n\nconst srcPaths = [\n  'https://localhost:3002/src/prompts/Encoder_System.txt',\n  'https://localhost:3002/src/prompts/Encoder_Main.txt',\n  'https://localhost:3002/src/prompts/Followup_System.txt',\n  'https://localhost:3002/src/prompts/Structure_System.txt',\n  'https://localhost:3002/src/prompts/Validation_System.txt',\n  'https://localhost:3002/src/prompts/Validation_Main.txt'\n];\n\n// Function to load the code string database\nasync function loadCodeDatabase() {\n  try {\n    console.log(\"Loading code database...\");\n    const response = await fetch('https://localhost:3002/assets/codestringDB.txt');\n    if (!response.ok) {\n      throw new Error(`Failed to load codestringDB.txt: ${response.statusText}`);\n    }\n    const text = await response.text();\n    const lines = text.split(/[\\r\\n]+/).filter(line => line.trim() !== ''); // Split by lines and remove empty ones\n\n    codeDatabase = lines.map(line => {\n      const parts = line.split('\\t'); // Assuming tab-separated\n      if (parts.length >= 2) {\n        return { name: parts[0].trim(), code: parts[1].trim() };\n      }\n      console.warn(`Skipping malformed line in codestringDB.txt: ${line}`);\n      return null;\n    }).filter(item => item !== null); // Filter out null entries from malformed lines\n\n    console.log(`Code database loaded successfully with ${codeDatabase.length} entries.`);\n    if (DEBUG && codeDatabase.length > 0) {\n        console.log(\"First few code database entries:\", codeDatabase.slice(0, 5));\n    }\n\n  } catch (error) {\n    console.error(\"Error loading code database:\", error);\n    showError(\"Failed to load code database. Search functionality will be unavailable.\");\n    codeDatabase = []; // Ensure it's empty on error\n  }\n}\n\n// Function to load API keys from a config file\n// This allows the keys to be stored in a separate file that's .gitignored\nasync function initializeAPIKeys() {\n  try {\n    console.log(\"Initializing API keys...\");\n    \n    // Try to load config.js which is .gitignored\n    try {\n      const configResponse = await fetch('https://localhost:3002/config.js');\n      if (configResponse.ok) {\n        const configText = await configResponse.text();\n        // Extract keys from the config text using regex\n        const openaiKeyMatch = configText.match(/OPENAI_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\n        const pineconeKeyMatch = configText.match(/PINECONE_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\n        \n        if (openaiKeyMatch && openaiKeyMatch[1]) {\n          API_KEYS.OPENAI_API_KEY = openaiKeyMatch[1];\n          console.log(\"OpenAI API key loaded from config.js\");\n        }\n        \n        if (pineconeKeyMatch && pineconeKeyMatch[1]) {\n          API_KEYS.PINECONE_API_KEY = pineconeKeyMatch[1];\n          console.log(\"Pinecone API key loaded from config.js\");\n        }\n      }\n    } catch (error) {\n      console.warn(\"Could not load config.js, will use empty API keys:\", error);\n    }\n    \n    // Add debug logging with secure masking of keys\n    console.log(\"OPENAI_API_KEY:\", API_KEYS.OPENAI_API_KEY ? \n      `${API_KEYS.OPENAI_API_KEY.substring(0, 3)}...${API_KEYS.OPENAI_API_KEY.substring(API_KEYS.OPENAI_API_KEY.length - 3)}` : \n      \"Not found\");\n    console.log(\"PINECONE_API_KEY:\", API_KEYS.PINECONE_API_KEY ? \n      `${API_KEYS.PINECONE_API_KEY.substring(0, 3)}...${API_KEYS.PINECONE_API_KEY.substring(API_KEYS.PINECONE_API_KEY.length - 3)}` : \n      \"Not found\");\n    \n    return API_KEYS.OPENAI_API_KEY && API_KEYS.PINECONE_API_KEY;\n  } catch (error) {\n    console.error(\"Error initializing API keys:\", error);\n    return false;\n  }\n}\n\n// Update Pinecone configuration to handle multiple indexes\nconst PINECONE_ENVIRONMENT = \"gcp-starter\";\n\n// Define configurations for each index\nconst PINECONE_INDEXES = {\n    codes: {\n        name: \"codes\",\n        apiEndpoint: \"https://codes-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\n    },\n    call2trainingdata: {\n        name: \"call2trainingdata\",\n        apiEndpoint: \"https://call2trainingdata-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\n    },\n    call2context: {\n        name: \"call2context\",\n        apiEndpoint: \"https://call2context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\n    },\n    call1context: {\n        name: \"call1context\",\n        apiEndpoint: \"https://call1context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\n    }\n};\n\n//Models\nconst GPT4O_MINI = \"gpt-4o-mini\"\nconst GPT4O = \"gpt-4o\"\nconst GPT45_TURBO = \"gpt-4.5-turbo\"\nconst GPT35_TURBO = \"gpt-3.5-turbo\"\nconst GPT4_TURBO = \"gpt-4-turbo\"\nconst GPTFT1 =  \"ft:gpt-3.5-turbo-1106:orsi-advisors:cohcolumnsgpt35:B6Wlrql1\"\n\n// Conversation history storage\nlet conversationHistory = [];\n\n// Functions to save and load conversation history\nfunction saveConversationHistory(history) {\n    try {\n        localStorage.setItem('conversationHistory', JSON.stringify(history));\n        if (DEBUG) console.log('Conversation history saved to localStorage');\n    } catch (error) {\n        console.error(\"Error saving conversation history:\", error);\n    }\n}\n\nfunction loadConversationHistory() {\n    try {\n        const history = localStorage.getItem('conversationHistory');\n        if (history) {\n            if (DEBUG) console.log('Loaded conversation history from localStorage');\n            const parsedHistory = JSON.parse(history);\n            \n            if (!Array.isArray(parsedHistory)) {\n                console.error(\"Invalid history format, expected array\");\n                return [];\n            }\n            \n            return parsedHistory;\n        }\n        if (DEBUG) console.log(\"No conversation history found in localStorage\");\n        return [];\n    } catch (error) {\n        console.error(\"Error loading conversation history:\", error);\n        return [];\n    }\n}\n\n// Direct OpenAI API call function (replaces LangChain)\nasync function callOpenAI(messages, model = GPT4O, temperature = 0.7) {\n  try {\n    console.log(`Calling OpenAI API with model: ${model}`);\n    \n    // Check for API key\n    if (!API_KEYS.OPENAI_API_KEY) {\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\n    }\n    \n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${API_KEYS.OPENAI_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: model,\n        messages: messages,\n        temperature: temperature\n      })\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      console.error(\"OpenAI API error response:\", errorData);\n      throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    console.log(\"OpenAI API response received\");\n    \n    return data.choices[0].message.content;\n  } catch (error) {\n    console.error(\"Error calling OpenAI API:\", error);\n    throw error;\n  }\n}\n\n// OpenAI embeddings function (replaces LangChain)\nasync function createEmbedding(text) {\n  try {\n    console.log(\"Creating embedding for text\");\n    \n    // Check for API key\n    if (!API_KEYS.OPENAI_API_KEY) {\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\n    }\n    \n    const response = await fetch('https://api.openai.com/v1/embeddings', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${API_KEYS.OPENAI_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: \"text-embedding-3-large\",\n        input: text\n      })\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      console.error(\"OpenAI Embeddings API error response:\", errorData);\n      throw new Error(`OpenAI Embeddings API error: ${response.status} ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    console.log(\"OpenAI Embeddings API response received\");\n    \n    return data.data[0].embedding;\n  } catch (error) {\n    console.error(\"Error creating embedding:\", error);\n    throw error;\n  }\n}\n\n// Remove the PROMPTS object and add a function to load prompts\nasync function loadPromptFromFile(promptKey) {\n  try {\n    // Use a simplified path approach that works with dev server with correct port\n    const paths = [\n      `https://localhost:3002/prompts/${promptKey}.txt`,\n    ];\n    \n    // Combine all paths to try\n    paths.push(...srcPaths);\n \n    // Try each path until one works\n    let response = null;\n    for (const path of paths) {\n      console.log(`Attempting to load prompt from: ${path}`);\n      try {\n        response = await fetch(path);\n        if (response.ok) {\n          console.log(`Successfully loaded prompt from: ${path}`);\n          break;\n        }\n      } catch (err) {\n        console.log(`Path ${path} failed: ${err.message}`);\n      }\n    }\n    \n    if (!response || !response.ok) {\n      throw new Error(`Failed to load prompt: ${promptKey} (Could not find file in any location)`);\n    }\n    \n    return await response.text();\n  } catch (error) {\n    console.error(`Error loading prompt ${promptKey}:`, error);\n    throw error; // Re-throw the error to be handled by the caller\n  }\n}\n\n// Update the getSystemPromptFromFile function\nconst getSystemPromptFromFile = async (promptKey) => {\n  try {\n    const prompt = await loadPromptFromFile(promptKey);\n    if (!prompt) {\n      throw new Error(`Prompt key \"${promptKey}\" not found`);\n    }\n    return prompt;\n  } catch (error) {\n    console.error(`Error getting prompt for key ${promptKey}:`, error);\n    return null;\n  }\n};\n\n//************Functions************\n// Function 1: OpenAI Call with conversation history support\nasync function processPrompt({ userInput, systemPrompt, model, temperature, history = [] }) {\n    console.log(\"API Key being used:\", API_KEYS.OPENAI_API_KEY ? `${API_KEYS.OPENAI_API_KEY.substring(0, 3)}...` : \"None\");\n    \n    // Format messages in the way OpenAI expects\n    const messages = [\n        { role: \"system\", content: systemPrompt }\n    ];\n    \n    // Add conversation history\n    if (history.length > 0) {\n        history.forEach(message => {\n            messages.push({ \n                role: message[0] === \"human\" ? \"user\" : \"assistant\", \n                content: message[1] \n            });\n        });\n    }\n    \n    // Add current user input\n    messages.push({ role: \"user\", content: userInput });\n    \n    try {\n        // Call OpenAI API directly\n        const responseContent = await callOpenAI(messages, model, temperature);\n        \n        // Try to parse JSON response if applicable\n        try {\n            const parsed = JSON.parse(responseContent);\n            if (Array.isArray(parsed)) {\n                return parsed;\n            }\n            return responseContent.split('\\n').filter(line => line.trim());\n        } catch (e) {\n            // If not JSON, treat as text and split by lines\n            return responseContent.split('\\n').filter(line => line.trim());\n        }\n    } catch (error) {\n        console.error(\"Error in processPrompt:\", error);\n        throw error;\n    }\n}\n\nasync function structureDatabasequeries(clientprompt) {\n  if (DEBUG) console.log(\"Processing structured database queries:\", clientprompt);\n\n  try {\n      console.log(\"Getting structure system prompt\");\n      const systemStructurePrompt = await getSystemPromptFromFile('Structure_System');\n      \n      if (!systemStructurePrompt) {\n          throw new Error(\"Failed to load structure system prompt\");\n      }\n\n      console.log(\"Got system prompt, processing query strings\");\n      const queryStrings = await processPrompt({\n          userInput: clientprompt,\n          systemPrompt: systemStructurePrompt,\n          model: GPT4O,\n          temperature: 1\n      });\n\n      if (!queryStrings || !Array.isArray(queryStrings)) {\n          throw new Error(\"Failed to get valid query strings\");\n      }\n\n      console.log(\"Got query strings:\", queryStrings);\n      const results = [];\n\n      for (const queryString of queryStrings) {\n          console.log(\"Processing query:\", queryString);\n          try {\n              const queryResults = {\n                  query: queryString,\n                  trainingData: await queryVectorDB({\n                      queryPrompt: queryString,\n                      similarityThreshold: .2,\n                      indexName: 'call2trainingdata',\n                      numResults: 3\n                  }),\n                  call2Context: await queryVectorDB({\n                      queryPrompt: queryString,\n                      similarityThreshold: .2,\n                      indexName: 'call2context',\n                      numResults: 5\n                  }),\n                  call1Context: await queryVectorDB({\n                      queryPrompt: queryString,\n                      similarityThreshold: .2,\n                      indexName: 'call1context',\n                      numResults: 5\n                  }),\n                  codeOptions: await queryVectorDB({\n                      queryPrompt: queryString,\n                      indexName: 'codes',\n                      numResults: 3,\n                      similarityThreshold: .1\n                  })\n              };\n\n              results.push(queryResults);\n              console.log(\"Successfully processed query:\", queryString);\n          } catch (error) {\n              console.error(`Error processing query \"${queryString}\":`, error);\n              // Continue with next query instead of failing completely\n              continue;\n          }\n      }\n\n      if (results.length === 0) {\n          throw new Error(\"No valid results were obtained from any queries\");\n      }\n\n      return results;\n  } catch (error) {\n      console.error(\"Error in structureDatabasequeries:\", error);\n      throw error;\n  }\n}\n\n// Function 3: Query Vector Database using Pinecone REST API\nasync function queryVectorDB({ queryPrompt, indexName = 'codes', numResults = 10, similarityThreshold = null }) {\n    try {\n        console.log(\"Generating embeddings for query:\", queryPrompt);\n        \n        // Generate embeddings using our direct API call\n        const embedding = await createEmbedding(queryPrompt);\n        console.log(\"Embeddings generated successfully\");\n        \n        // Get the correct endpoint for the specified index\n        const indexConfig = PINECONE_INDEXES[indexName];\n        if (!indexConfig) {\n            throw new Error(`Invalid index name: ${indexName}`);\n        }\n        \n        const url = `${indexConfig.apiEndpoint}/query`;\n        console.log(\"Making Pinecone API request to:\", url);\n        \n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'api-key': API_KEYS.PINECONE_API_KEY,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                vector: embedding,\n                topK: numResults,\n                includeMetadata: true,\n                namespace: \"ns1\"\n            })\n        });\n\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error(\"Pinecone API error details:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorText\n            });\n            throw new Error(`Pinecone API error: ${response.status} ${response.statusText} - ${errorText}`);\n        }\n\n        const data = await response.json();\n        console.log(\"Pinecone API response received\");\n        \n        let matches = data.matches || [];\n\n        if (similarityThreshold !== null) {\n            matches = matches.filter(match => match.score >= similarityThreshold);\n        }\n\n        matches = matches.slice(0, numResults);\n\n        matches = matches.map(match => {\n            try {\n                if (match.metadata && match.metadata.text) {\n                    return {\n                        ...match,\n                        text: match.metadata.text\n                    };\n                }\n                return match;\n            } catch (error) {\n                console.error(\"Error processing match:\", error);\n                return match;\n            }\n        });\n\n        if (DEBUG) {\n            const matchesDescription = matches\n                .map((match, i) => `Match ${i + 1} (score: ${match.score.toFixed(4)}): ${match.text || JSON.stringify(match.metadata)}`)\n                .join('\\n');\n            console.log(matchesDescription);\n        }\n\n        const cleanMatches = matches.map(match => extractTextFromJson(match));\n        return cleanMatches.filter(text => text !== \"\");\n\n    } catch (error) {\n        console.error(\"Error during vector database query:\", error);\n        throw error;\n    }\n}\n\nfunction extractTextFromJson(jsonInput) {\n   try {\n       const jsonData = typeof jsonInput === 'string' ? JSON.parse(jsonInput) : jsonInput;\n       \n       if (Array.isArray(jsonData)) {\n           for (const item of jsonData) {\n               if (item.metadata && item.metadata.text) {\n                   return item.metadata.text;\n               }\n           }\n           throw new Error(\"No text field found in the JSON array\");\n       } \n       else if (jsonData.metadata && jsonData.metadata.text) {\n           return jsonData.metadata.text;\n       } \n       else {\n           throw new Error(\"Invalid JSON structure: missing metadata.text field\");\n       }\n   } catch (error) {\n       console.error(`Error processing JSON: ${error.message}`);\n       return \"\";\n   }\n}\n\nfunction safeJsonForPrompt(obj, readable = true) {\n    if (!readable) {\n        let jsonString = JSON.stringify(obj);\n        jsonString = jsonString.replace(/\"values\":\\s*\\[\\],\\s*\"metadata\":/g, '');\n        return jsonString\n            .replace(/{/g, '\\\\u007B')\n            .replace(/}/g, '\\\\u007D');\n    }\n    \n    if (Array.isArray(obj)) {\n        return obj.map(item => {\n            if (item.metadata && item.metadata.text) {\n                const text = item.metadata.text.replace(/~/g, ',');\n                const parts = text.split(';');\n                \n                let result = '';\n                if (parts.length >= 1) result += parts[0].trim();\n                if (parts.length >= 2) result += '\\n' + parts[1].trim();\n                if (parts.length >= 3) result += '\\n' + parts[2].trim();\n                \n                if (item.score) {\n                    result += `\\nSimilarity Score: ${item.score.toFixed(4)}`;\n                }\n                \n                return result;\n            }\n            return JSON.stringify(item).replace(/~/g, ',');\n        }).join('\\n\\n');\n    }\n    \n    const jsonString = JSON.stringify(obj, null, 2).replace(/~/g, ',');\n    return jsonString\n        .replace(/{/g, '\\\\u007B')\n        .replace(/}/g, '\\\\u007D');\n}\n\nasync function handleFollowUpConversation(clientprompt) {\n    if (DEBUG) console.log(\"Processing follow-up question. Loading conversation history...\");\n    conversationHistory = loadConversationHistory();\n    \n    if (conversationHistory.length > 0) {\n        if (DEBUG) console.log(\"Processing follow-up question:\", clientprompt);\n        if (DEBUG) console.log(\"Loaded conversation history:\", JSON.stringify(conversationHistory, null, 2));\n        \n        const systemPrompt = await getSystemPromptFromFile('Followup_System');\n        // const MainPrompt = await getSystemPromptFromFile('main');\n        \n        const trainingdataCall2 = await queryVectorDB({\n            queryPrompt: clientprompt,\n            similarityThreshold: .4,\n            indexName: 'call2trainingdata',\n            numResults: 3\n        });\n\n        const call2context = await queryVectorDB({\n            queryPrompt: clientprompt + trainingdataCall2,\n            similarityThreshold: .3,\n            indexName: 'call2context',\n            numResults: 5\n        });\n\n        const call1context = await queryVectorDB({\n            queryPrompt: clientprompt + trainingdataCall2,\n            similarityThreshold: .3,\n            indexName: 'call1context',\n            numResults: 5\n        });\n\n        const codeOptions = await queryVectorDB({\n            queryPrompt: clientprompt + trainingdataCall2 + call1context,\n            indexName: 'codes',\n            numResults: 10,\n            similarityThreshold: .1\n        });\n        \n        const followUpPrompt = \"Client request: \" + clientprompt + \"\\n\" +\n                       \"Main Prompt: \" + MainPrompt + \"\\n\" +\n                       \"Training Data: \" + safeJsonForPrompt(trainingdataCall2).replace(/~/g, ',') + \"\\n\" +\n                       \"Code choosing context: \" + safeJsonForPrompt(call1context) + \"\\n\" +\n                       \"Code editing Context: \" + safeJsonForPrompt(call2context) + \"\\n\" +\n                       \"Code descriptions: \" + safeJsonForPrompt(codeOptions);\n        \n        const response = await processPrompt({\n            userInput: followUpPrompt,\n            systemPrompt: systemPrompt,\n            model: GPT4O,\n            temperature: 1,\n            history: conversationHistory\n        });\n        \n        conversationHistory.push([\"human\", clientprompt]);\n        conversationHistory.push([\"assistant\", response.join(\"\\n\")]);\n        \n        saveConversationHistory(conversationHistory);\n        \n        if (DEBUG) console.log(\"Updated conversation history:\", JSON.stringify(conversationHistory, null, 2));\n        \n        savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, call2context, call1context, trainingdataCall2, codeOptions, response);\n        saveTrainingData(clientprompt, response);\n        \n        return response;\n    } else {\n        if (DEBUG) console.log(\"No conversation history found. Treating as initial question.\");\n        return handleInitialConversation(clientprompt);\n    }\n}\n\nasync function handleConversation(clientprompt, isFollowUp = false) {\n    try {\n        if (isFollowUp) {\n            return await handleFollowUpConversation(clientprompt);\n        } else {\n            return await handleInitialConversation(clientprompt);\n        }\n    } catch (error) {\n        console.error(\"Error in conversation handling:\", error);\n        return [\"Error processing your request: \" + error.message];\n    }\n}\n\nasync function handleInitialConversation(clientprompt) {\n    if (DEBUG) console.log(\"Processing initial question:\", clientprompt);\n    \n    const systemPrompt = await getSystemPromptFromFile('Encoder_System');\n    console.log(\"SYSTEM PROMPT: \", systemPrompt);\n    const MainPrompt = await getSystemPromptFromFile('Encoder_Main');\n    console.log(\"MAIN PROMPT: \", MainPrompt);\n\n\n    const Call2prompt = \"Client request: \" + clientprompt + \"\\n\" +\n                       \"Main Prompt: \" + MainPrompt;\n    \n    const outputArray2 = await processPrompt({\n        userInput: Call2prompt,\n        systemPrompt: systemPrompt,\n        model: GPT4O,\n        temperature: 1 \n    });\n    \n    conversationHistory = [\n        [\"human\", clientprompt],\n        [\"assistant\", outputArray2.join(\"\\n\")]\n    ];\n    \n    saveConversationHistory(conversationHistory);\n    \n    savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, [], [], [], [], outputArray2);\n    saveTrainingData(clientprompt, outputArray2);\n    \n    console.log(\"Initial Response - in the function:\", outputArray2);\n    return outputArray2;\n\n}\n\nfunction savePromptAnalysis(clientprompt, systemPrompt, MainPrompt, validationSystemPrompt, validationMainPrompt, validationResults, call2context, call1context, trainingdataCall2, codeOptions, outputArray2) {\n    try {\n        const analysisData = {\n            clientRequest: clientprompt,\n            systemPrompt,\n            mainPrompt: MainPrompt,\n            validationSystemPrompt,\n            validationMainPrompt,\n            validationResults,\n            call2context,\n            call1context,\n            trainingdataCall2,\n            codeOptions,\n            outputArray2\n        };\n        \n        localStorage.setItem('promptAnalysis', JSON.stringify(analysisData));\n        if (DEBUG) console.log('Prompt analysis saved to localStorage');\n    } catch (error) {\n        console.error(\"Error saving prompt analysis:\", error);\n    }\n}\n\nfunction saveTrainingData(clientprompt, outputArray2) {\n    try {\n        function cleanText(text) {\n            if (!text) return '';\n            return text.toString()\n                .replace(/\\r?\\n|\\r/g, ' ')\n                .trim();\n        }\n        \n        const trainingData = {\n            prompt: cleanText(clientprompt),\n            response: cleanText(JSON.stringify(outputArray2))\n        };\n        \n        localStorage.setItem('trainingData', JSON.stringify(trainingData));\n        if (DEBUG) console.log('Training data saved to localStorage');\n    } catch (error) {\n        console.error(\"Error saving training data:\", error);\n    }\n}\n\nasync function validationCorrection(clientprompt, initialResponse, validationResults) {\n    try {\n        const conversationHistory = loadConversationHistory();\n        \n        const trainingData = localStorage.getItem('trainingData') || \"\";\n        const codeDescriptions = localStorage.getItem('codeDescriptions') || \"\";\n        const lastCallContext = localStorage.getItem('lastCallContext') || \"\";\n        \n        const validationSystemPrompt = await getSystemPromptFromFile('Validation_System');\n        const validationMainPrompt = await getSystemPromptFromFile('Validation_Main');\n        \n        if (!validationSystemPrompt) {\n            throw new Error(\"Failed to load validation system prompt\");\n        }\n        \n        const responseString = Array.isArray(initialResponse) ? initialResponse.join(\"\\n\") : String(initialResponse);\n        \n        const correctionPrompt = \n            \"Main Prompt: \" + validationMainPrompt + \"\\n\\n\" +\n            \"Original User Input: \" + clientprompt + \"\\n\\n\" +\n            \"Initial Response: \" + responseString + \"\\n\\n\" +\n            \"Validation Results: \" + validationResults + \"\\n\\n\" +\n            \"Training Data: \" + trainingData + \"\\n\\n\" +\n            \"Code Descriptions: \" + codeDescriptions + \"\\n\\n\" +\n            \"Context from Last Call: \" + lastCallContext;\n        \n        if (DEBUG) {\n            console.log(\"====== VALIDATION CORRECTION INPUT ======\");\n            console.log(correctionPrompt.substring(0, 500) + \"...(truncated)\");\n            console.log(\"=========================================\");\n        }\n        \n        const correctedResponse = await processPrompt({\n            userInput: correctionPrompt,\n            systemPrompt: validationSystemPrompt,\n            model: GPT4O,\n            temperature: 0.7\n        });\n        \n        const correctionOutputPath = \"C:\\\\Users\\\\joeor\\\\Dropbox\\\\B - Freelance\\\\C_Projectify\\\\VanPC\\\\Training Data\\\\Main Script Training and Context Data\\\\validation_correction_output.txt\";\n        fs.writeFileSync(correctionOutputPath, Array.isArray(correctedResponse) ? correctedResponse.join(\"\\n\") : correctedResponse);\n        \n        if (DEBUG) console.log(`Validation correction saved to ${correctionOutputPath}`);\n        \n        return correctedResponse;\n    } catch (error) {\n        console.error(\"Error in validation correction:\", error);\n        console.error(error.stack);\n        return [\"Error during validation correction: \" + error.message];\n    }\n}\n\n// Add this function at the top level\nfunction showMessage(message) {\n    const messageDiv = document.createElement('div');\n    messageDiv.style.color = 'green';\n    messageDiv.style.padding = '10px';\n    messageDiv.style.margin = '10px';\n    messageDiv.style.border = '1px solid green';\n    messageDiv.style.borderRadius = '4px';\n    messageDiv.textContent = message;\n    \n    const appBody = document.getElementById('app-body');\n    appBody.insertBefore(messageDiv, appBody.firstChild);\n    \n    // Remove the message after 5 seconds\n    setTimeout(() => {\n        messageDiv.remove();\n    }, 5000);\n}\n\n// Add this function at the top level\nfunction showError(message) {\n    const errorDiv = document.createElement('div');\n    errorDiv.style.color = 'red';\n    errorDiv.style.padding = '10px';\n    errorDiv.style.margin = '10px';\n    errorDiv.style.border = '1px solid red';\n    errorDiv.style.borderRadius = '4px';\n    errorDiv.textContent = `Error: ${message}`;\n    \n    const appBody = document.getElementById('app-body');\n    appBody.insertBefore(errorDiv, appBody.firstChild);\n    \n    // Remove the error message after 5 seconds\n    setTimeout(() => {\n        errorDiv.remove();\n    }, 5000);\n}\n\n// Add this function at the top level\nfunction setButtonLoading(isLoading) {\n    const sendButton = document.getElementById('send');\n    const loadingAnimation = document.getElementById('loading-animation');\n    \n    if (sendButton) {\n        sendButton.disabled = isLoading;\n    }\n    \n    if (loadingAnimation) {\n        loadingAnimation.style.display = isLoading ? 'flex' : 'none';\n    }\n}\n\n// Add this variable to store the last response\nlet lastResponse = null;\n\n// Add this variable to track if the current message is a response\nlet isResponse = false;\n\n// Add this function to write to Excel\nasync function writeToExcel() {\n    if (!lastResponse) {\n        showError('No response to write to Excel');\n        return;\n    }\n\n    try {\n        await Excel.run(async (context) => {\n            const range = context.workbook.getSelectedRange();\n            range.load(\"rowIndex\");\n            range.load(\"columnIndex\");\n            await context.sync();\n            \n            const startRow = range.rowIndex;\n            const startCol = range.columnIndex;\n            \n            // Split the response into individual code strings\n            let codeStrings = [];\n            if (Array.isArray(lastResponse)) {\n                // Join the array elements and then split by brackets\n                const fullText = lastResponse.join(' ');\n                codeStrings = fullText.match(/<[^>]+>/g) || [];\n            } else if (typeof lastResponse === 'string') {\n                codeStrings = lastResponse.match(/<[^>]+>/g) || [];\n            }\n            \n            if (codeStrings.length === 0) {\n                throw new Error(\"No valid code strings found in response\");\n            }\n            \n            // Create a range that spans all the rows we need\n            const targetRange = range.worksheet.getRangeByIndexes(\n                startRow,\n                startCol,\n                codeStrings.length,\n                1\n            );\n            \n            // Set all values at once, with each code string in its own row\n            targetRange.values = codeStrings.map(str => [str]);\n            \n            await context.sync();\n            console.log(\"Response written to Excel\");\n        });\n    } catch (error) {\n        console.error(\"Error writing to Excel:\", error);\n        showError(error.message);\n    }\n}\n\n// Add this function to append messages to the chat log\nfunction appendMessage(content, isUser = false) {\n    const chatLog = document.getElementById('chat-log');\n    const welcomeMessage = document.getElementById('welcome-message');\n    \n    // Hide welcome message when first message is added\n    if (welcomeMessage) {\n        welcomeMessage.style.display = 'none';\n    }\n    \n    const messageDiv = document.createElement('div');\n    messageDiv.className = `chat-message ${isUser ? 'user-message' : 'assistant-message'}`;\n    \n    const messageContent = document.createElement('p');\n    messageContent.className = 'message-content';\n    messageContent.textContent = content;\n    \n    messageDiv.appendChild(messageContent);\n    chatLog.appendChild(messageDiv);\n    \n    // Scroll to bottom\n    chatLog.scrollTop = chatLog.scrollHeight;\n}\n\n// Modify the handleSend function\nasync function handleSend() {\n    const userInput = document.getElementById('user-input').value.trim();\n    \n    if (!userInput) {\n        showError('Please enter a request');\n        return;\n    }\n\n    // Check if this is a response to a previous message\n    isResponse = conversationHistory.length > 0;\n\n    // Add user message to chat\n    appendMessage(userInput, true);\n    \n    // Clear input\n    document.getElementById('user-input').value = '';\n\n    setButtonLoading(true);\n    try {\n        // Process the text through the main function\n        console.log(\"Starting structureDatabasequeries\");\n        const dbResults = await structureDatabasequeries(userInput);\n        console.log(\"Database queries completed\");\n        \n        if (!dbResults || !Array.isArray(dbResults)) {\n            console.error(\"Invalid database results:\", dbResults);\n            throw new Error(\"Failed to get valid database results\");\n        }\n        \n        // Format the database results into a string\n        const plainTextResults = dbResults.map(result => {\n            if (!result) return \"No results found\";\n            \n            return `Query: ${result.query || 'No query'}\\n` +\n                   `Training Data:\\n${(result.trainingData || []).join('\\n')}\\n` +\n                   `Code Options:\\n${(result.codeOptions || []).join('\\n')}\\n` +\n                   `Code Choosing Context:\\n${(result.call1Context || []).join('\\n')}\\n` +\n                   `Code Editing Context:\\n${(result.call2Context || []).join('\\n')}\\n` +\n                   `---\\n`;\n        }).join('\\n');\n\n        const enhancedPrompt = `Client Request: ${userInput}\\n\\nDatabase Results:\\n${plainTextResults}`;\n        console.log(\"Enhanced prompt created\");\n        console.log(\"Enhanced prompt:\", enhancedPrompt);\n\n        console.log(\"Starting handleConversation\");\n        let response = await handleConversation(enhancedPrompt, isResponse);\n        console.log(\"Conversation completed\");\n        console.log(\"Initial Response:\", response);\n\n        if (!response || !Array.isArray(response)) {\n            console.error(\"Invalid response:\", response);\n            throw new Error(\"Failed to get valid response from conversation\");\n        }\n\n        // Run validation and correction if needed\n        console.log(\"Starting validation\");\n        const validationResults = await validateCodeStrings(response);\n        console.log(\"Validation completed:\", validationResults);\n\n        if (validationResults && validationResults.length > 0) {\n            console.log(\"Starting validation correction\");\n            response = await validationCorrection(userInput, response, validationResults);\n            console.log(\"Validation correction completed\");\n        }\n        \n        // Store the response for Excel writing\n        lastResponse = response;\n        \n        // Add assistant message to chat\n        appendMessage(response.join('\\n'));\n        \n    } catch (error) {\n        console.error(\"Error in handleSend:\", error);\n        showError(error.message);\n        // Add error message to chat\n        appendMessage(`Error: ${error.message}`);\n    } finally {\n        setButtonLoading(false);\n    }\n}\n\n// Add this function to reset the chat\nfunction resetChat() {\n    // Clear the chat log\n    const chatLog = document.getElementById('chat-log');\n    chatLog.innerHTML = '';\n    \n    // Restore welcome message\n    const welcomeMessage = document.createElement('div');\n    welcomeMessage.id = 'welcome-message';\n    welcomeMessage.className = 'welcome-message';\n    const welcomeTitle = document.createElement('h1');\n    welcomeTitle.textContent = 'What would you like to model?';\n    welcomeMessage.appendChild(welcomeTitle);\n    chatLog.appendChild(welcomeMessage);\n    \n    // Clear the conversation history\n    conversationHistory = [];\n    saveConversationHistory(conversationHistory);\n    \n    // Reset the response flag and last response\n    isResponse = false;\n    lastResponse = null;\n    \n    // Clear the input field\n    document.getElementById('user-input').value = '';\n    \n    console.log(\"Chat reset completed\");\n}\n\n/**\n * Inserts worksheets from a base64-encoded Excel file\n */\nasync function insertSheetsFromBase64() {\n    try {\n        // Fetch the Excel file\n        const response = await fetch('https://localhost:3002/assets/Worksheets_4.3.25 v1.xlsx');\n        if (!response.ok) {\n            throw new Error('Failed to load Excel file');\n        }\n        \n        // Convert the response to an ArrayBuffer\n        const arrayBuffer = await response.arrayBuffer();\n        \n        // Convert ArrayBuffer to base64 string in chunks\n        const uint8Array = new Uint8Array(arrayBuffer);\n        let binaryString = '';\n        const chunkSize = 8192; // Process in 8KB chunks\n        \n        for (let i = 0; i < uint8Array.length; i += chunkSize) {\n            const chunk = uint8Array.slice(i, Math.min(i + chunkSize, uint8Array.length));\n            binaryString += String.fromCharCode.apply(null, chunk);\n        }\n        \n        const base64String = btoa(binaryString);\n        \n        // Call the function to insert worksheets\n        await handleInsertWorksheetsFromBase64(base64String);\n        console.log(\"Worksheets inserted successfully\");\n    } catch (error) {\n        console.error(\"Error inserting worksheets:\", error);\n        showError(error.message);\n    }\n}\n\n// *** Define Helper Function Globally (BEFORE Office.onReady) ***\nfunction getTabBlocks(codeString) {\n    if (!codeString) return [];\n    const tabBlocks = [];\n    const tabRegex = /(<TAB;[^>]*>)/g;\n    let match;\n    const indices = [];\n    while ((match = tabRegex.exec(codeString)) !== null) {\n        indices.push({ index: match.index, tag: match[1] });\n    }\n    if (indices.length === 0) {\n        if (codeString.trim().length > 0) {\n            console.warn(\"Code string provided but no <TAB;...> tags found. Processing cannot proceed based on Tabs.\");\n        }\n        return []; \n    } \n    for (let i = 0; i < indices.length; i++) {\n        const start = indices[i].index;\n        const tag = indices[i].tag;\n        const end = (i + 1 < indices.length) ? indices[i + 1].index : codeString.length;\n        const blockText = codeString.substring(start, end).trim();\n        if (blockText) {\n            tabBlocks.push({ tag: tag, text: blockText });\n        }\n    }\n    return tabBlocks;\n}\n\n// Helper function to find max driver numbers in existing text\nfunction getMaxDriverNumbers(text) {\n    const maxNumbers = {};\n    // MODIFIED Regex: Allow optional spaces around =\n    const regex = /row\\d+\\s*=\\s*\"([A-Z]+)(\\d*)\\|/g;\n    let match;\n    console.log(\"Scanning text for drivers:\", text.substring(0, 200) + \"...\"); // Log input text\n\n    while ((match = regex.exec(text)) !== null) {\n        const prefix = match[1];\n        const numberStr = match[2];\n        const number = numberStr ? parseInt(numberStr, 10) : 0;\n        console.log(`Found driver match: prefix='${prefix}', numberStr='${numberStr}', number=${number}`); // Log each match\n\n        if (isNaN(number)) {\n             console.warn(`Parsed NaN for number from '${numberStr}' for prefix '${prefix}'. Skipping.`);\n             continue;\n        }\n\n        if (!maxNumbers[prefix] || number > maxNumbers[prefix]) {\n            maxNumbers[prefix] = number;\n            console.log(`Updated max for '${prefix}' to ${number}`); // Log updates\n        }\n    }\n    if (Object.keys(maxNumbers).length === 0) {\n        console.log(\"No existing drivers found matching the pattern.\");\n    }\n    console.log(\"Final max existing driver numbers:\", maxNumbers);\n    return maxNumbers;\n}\n\nasync function findNewCodes(previousText, currentText) {\n    const codeRegex = /<[^>]+>/g; // Regex to find <...> codes\n    const prevCodes = new Set(previousText.match(codeRegex) || []);\n    const currentCodes = currentText.match(codeRegex) || [];\n    \n    // Filter current codes to find those not present in the previous set\n    const newCodes = currentCodes.filter(code => !prevCodes.has(code));\n    console.log(`[findNewCodes] Found ${newCodes.length} new codes by comparing content.`);\n    if (newCodes.length > 0 && DEBUG) {\n        console.log(\"[findNewCodes] New codes:\", newCodes);\n    }\n    return newCodes;\n}\n\n// Helper function to extract the sheet name from the label1 parameter within a TAB tag\nfunction getSheetNameFromTabTag(tabTag) {\n    // Matches label1=\"Sheet Name\" inside the tag, capturing \"Sheet Name\"\n    // Allows for optional spaces around =\n    const match = tabTag.match(/label1\\s*=\\s*\"([^\"]+)\"/);\n    if (match && match[1]) {\n        const sheetName = match[1].trim();\n        console.log(`[getSheetNameFromTabTag] Extracted sheet name '${sheetName}' from tag: ${tabTag}`);\n        return sheetName;\n    }\n    // Fallback or error handling if label1 is not found\n    console.warn(`[getSheetNameFromTabTag] Could not extract sheet name (label1) from tab tag: ${tabTag}`);\n    return null; // Return null if name cannot be extracted\n}\n\nasync function insertSheetsAndRunCodes() {\n\n    // >>> ADDED: Get codes from textarea and save automatically\n    const codesTextarea = document.getElementById('codes-textarea');\n    if (!codesTextarea) {\n        showError(\"Could not find the code input area. Cannot run codes.\");\n        return;\n    }\n    loadedCodeStrings = codesTextarea.value; // Update global variable\n    try {\n        localStorage.setItem('userCodeStrings', loadedCodeStrings);\n        console.log(\"[Run Codes] Automatically saved codes from textarea to localStorage.\");\n    } catch (error) {\n        console.error(\"[Run Codes] Error auto-saving codes to localStorage:\", error);\n        showError(`Error automatically saving codes: ${error.message}. Run may not reflect latest changes.`);\n    }\n    // <<< END ADDED CODE\n\n    let codesToRun = loadedCodeStrings;\n    let previousCodes = null;\n    // >>> REVISED: Unified list for all content to process\n    let allCodeContentToProcess = \"\"; // Holds full text of *all* new AND modified tabs\n    let runResult = null; // To store result from runCodes if called\n    // Removed: codesToProcessForRunCodes, tabsToInsertIncrementally, codeStringToValidate (use allCodeContentToProcess)\n\n    // Main processing wrapped in try/catch/finally\n    try {\n        // --- Check Financials Sheet Existence ---\n        let financialsSheetExists = false;\n        await Excel.run(async (context) => {\n            try {\n                const financialsSheet = context.workbook.worksheets.getItem(\"Financials\");\n                financialsSheet.load(\"name\");\n                await context.sync();\n                financialsSheetExists = true;\n            } catch (error) {\n                if (error instanceof OfficeExtension.Error && error.code === Excel.ErrorCodes.itemNotFound) {\n                    financialsSheetExists = false;\n                } else { throw error; } // Rethrow other errors\n            }\n        });\n\n        // Set calculation mode to manual (do this early)\n        await Excel.run(async (context) => {\n            context.application.calculationMode = Excel.CalculationMode.manual;\n            await context.sync();\n        });\n\n        setButtonLoading(true);\n        console.log(\"Starting code processing...\");\n\n        // --- Pass Logic: Determine sheets to insert and codes to process ---\n        if (!financialsSheetExists) {\n            // *** FIRST PASS ***\n            console.log(\"[Run Codes] FIRST PASS: Financials sheet not found.\");\n            allCodeContentToProcess = codesToRun; // All codes are new\n\n            // >>> VALIDATION FOR FIRST PASS <<<\n            if (allCodeContentToProcess.trim().length > 0) {\n                console.log(\"Validating ALL codes before initial base sheet insertion...\");\n                const validationErrors = await validateCodeStringsForRun(allCodeContentToProcess.split(/\\r?\\n/).filter(line => line.trim() !== ''));\n                if (validationErrors && validationErrors.length > 0) {\n                    const errorMsg = \"Initial validation failed. Please fix the errors before running:\\n\" + validationErrors.join(\"\\n\");\n                    console.error(\"Code validation failed:\", validationErrors);\n                    showError(\"Code validation failed. See chat for details.\");\n                    appendMessage(errorMsg);\n                    setButtonLoading(false);\n                    return; // Stop execution\n                }\n                console.log(\"Initial code validation successful.\");\n            } else {\n                console.log(\"[Run Codes] No codes to validate on first pass.\");\n                // If no codes, no need to insert base sheets? Or insert anyway? Assuming insert needed.\n            }\n\n            // --- Insert BASE sheets ---\n            console.log(\"Inserting base sheets from Worksheets_4.3.25 v1.xlsx...\");\n            // ... (fetch and handleInsertWorksheetsFromBase64 for Worksheets_4.3.25 remains the same) ...\n            const worksheetsResponse = await fetch('https://localhost:3002/assets/Worksheets_4.3.25 v1.xlsx');\n            if (!worksheetsResponse.ok) throw new Error(`Worksheets load failed: ${worksheetsResponse.statusText}`);\n            const worksheetsArrayBuffer = await worksheetsResponse.arrayBuffer();\n            console.log(\"Converting base file to base64 (using chunks)...\");\n            const worksheetsUint8Array = new Uint8Array(worksheetsArrayBuffer);\n            let worksheetsBinaryString = '';\n            const chunkSize = 8192;\n            for (let i = 0; i < worksheetsUint8Array.length; i += chunkSize) {\n                const chunk = worksheetsUint8Array.slice(i, Math.min(i + chunkSize, worksheetsUint8Array.length));\n                worksheetsBinaryString += String.fromCharCode.apply(null, chunk);\n            }\n            const worksheetsBase64String = btoa(worksheetsBinaryString);\n            console.log(\"Base64 conversion complete.\");\n            await handleInsertWorksheetsFromBase64(worksheetsBase64String);\n            console.log(\"Base sheets inserted.\");\n            // No need to insert codes.xlsx here, it happens after runCodes\n\n        } else {\n            // *** SECOND PASS (or later) ***\n            console.log(\"[Run Codes] SUBSEQUENT PASS: Financials sheet found.\");\n\n            // Load previous codes for comparison\n            try {\n                previousCodes = localStorage.getItem('previousRunCodeStrings');\n            } catch (error) {\n                 console.error(\"[Run Codes] Error loading previous codes for comparison:\", error);\n                 console.warn(\"[Run Codes] Could not load previous codes. Processing ALL current codes as fallback.\");\n                 previousCodes = null; // Treat as if all codes are new if loading fails\n            }\n\n            // Check for NO changes first\n            if (previousCodes !== null && previousCodes === codesToRun) {\n                 console.log(\"[Run Codes] No change in code strings since last run. Nothing to process.\");\n                 // Update previous state just in case, though it's identical\n                 try { localStorage.setItem('previousRunCodeStrings', codesToRun); } catch(e) { console.error(\"Err updating prev codes:\", e); }\n                 showMessage(\"No code changes to run.\");\n                 setButtonLoading(false);\n                 return; // <<< EXIT EARLY\n            }\n\n            // --- Identify New and Modified Tabs & Collect ALL content ---\n            const currentTabs = getTabBlocks(codesToRun);\n            const previousTabs = getTabBlocks(previousCodes || \"\"); // Use empty string if previousCodes is null\n            const previousTabMap = new Map(previousTabs.map(block => [block.tag, block.text]));\n\n            let hasAnyChanges = false; // Flag to check if codes.xlsx needs inserting\n\n            for (const currentTab of currentTabs) {\n                const currentTag = currentTab.tag;\n                const currentText = currentTab.text;\n                const previousText = previousTabMap.get(currentTag);\n\n                if (previousText === undefined) {\n                    // *** New Tab ***\n                    console.log(`[Run Codes] Identified NEW tab: ${currentTag}`);\n                    allCodeContentToProcess += currentText + \"\\n\\n\"; // Add full content\n                    hasAnyChanges = true;\n                } else if (previousText !== currentText) {\n                    // *** Modified Existing Tab ***\n                    console.log(`[Run Codes] Identified MODIFIED tab: ${currentTag}.`);\n                    allCodeContentToProcess += currentText + \"\\n\\n\"; // Add full content\n                    hasAnyChanges = true; // Mark change because the text differs\n                }\n                // else: Tab exists and text is identical - do nothing.\n            }\n\n            // --- Validate ALL collected content BEFORE inserting codes.xlsx ---\n            if (hasAnyChanges) {\n                if (allCodeContentToProcess.trim().length > 0) {\n                    console.log(\"Validating ALL content from new/modified tabs BEFORE inserting codes.xlsx...\");\n                    const validationErrors = await validateCodeStringsForRun(allCodeContentToProcess.split(/\\r?\\n/).filter(line => line.trim() !== ''));\n\n                    if (validationErrors && validationErrors.length > 0) {\n                        const errorMsg = \"Validation failed. Please fix the errors before running:\\n\" + validationErrors.join(\"\\n\");\n                        console.error(\"Code validation failed:\", validationErrors);\n                        showError(\"Code validation failed. See chat for details.\");\n                        appendMessage(errorMsg);\n                        setButtonLoading(false);\n                        return; // Stop execution\n                    }\n                    console.log(\"Code validation successful for new/modified tabs.\");\n                } else {\n                    console.log(\"[Run Codes] Changes detected, but no code content found for validation in new/modified tabs.\");\n                     // This case might occur if only whitespace/comments changed within tabs\n                     // Decide if codes.xlsx insertion is still needed? Assuming yes if hasAnyChanges=true\n                }\n\n                // --- Insert codes.xlsx only AFTER successful validation if changes were detected ---\n                console.log(\"[Run Codes] Changes detected and validated. Inserting base sheets from codes.xlsx...\");\n                try {\n                    const codesResponse = await fetch('https://localhost:3002/assets/codes.xlsx');\n                    if (!codesResponse.ok) throw new Error(`codes.xlsx load failed: ${codesResponse.statusText}`);\n                    const codesArrayBuffer = await codesResponse.arrayBuffer();\n                    console.log(\"Converting codes.xlsx file to base64 (using chunks)...\");\n                    // ... (base64 conversion remains the same) ...\n                    const codesUint8Array = new Uint8Array(codesArrayBuffer);\n                    let codesBinaryString = '';\n                    const chunkSize_codes = 8192;\n                    for (let i = 0; i < codesUint8Array.length; i += chunkSize_codes) {\n                        const chunk = codesUint8Array.slice(i, Math.min(i + chunkSize_codes, codesUint8Array.length));\n                        codesBinaryString += String.fromCharCode.apply(null, chunk);\n                    }\n                    const codesBase64String = btoa(codesBinaryString);\n\n                    console.log(\"codes.xlsx Base64 conversion complete.\");\n                    await handleInsertWorksheetsFromBase64(codesBase64String);\n                    console.log(\"codes.xlsx sheets inserted.\");\n                } catch (e) {\n                    console.error(\"Failed to insert sheets from codes.xlsx:\", e);\n                    showError(\"Failed to insert necessary sheets from codes.xlsx. Aborting.\");\n                    setButtonLoading(false);\n                    return;\n                }\n            } else {\n                 console.log(\"[Run Codes] No changes identified in tabs compared to previous run. Nothing to insert or process.\");\n                 // Update previous state as the content is effectively the same\n                 try { localStorage.setItem('previousRunCodeStrings', codesToRun); } catch(e) { console.error(\"Err updating prev codes:\", e); }\n                 showMessage(\"No code changes identified to run.\");\n                 setButtonLoading(false);\n                 return; // Exit if no actionable changes\n            }\n\n        } // End of pass logic (if/else financialsSheetExists)\n\n        // --- Execute Processing ---\n\n        // >>> REMOVED: Incremental Insertion block <<<\n\n        // --- Process ALL collected content (New + Modified Tabs) using runCodes ---\n        if (allCodeContentToProcess.trim().length > 0) {\n            console.log(\"[Run Codes] Processing collected content from new/modified tabs...\");\n            console.log(\"Populating collection...\");\n            const collection = populateCodeCollection(allCodeContentToProcess);\n            console.log(`Collection populated with ${collection.length} code(s)`);\n\n             // Check if collection is empty after population (might happen if only comments/whitespace)\n            if (collection.length > 0) {\n                console.log(\"Running codes...\");\n                runResult = await runCodes(collection); // Store the result\n                console.log(\"Codes executed:\", runResult);\n            } else {\n                 console.log(\"[Run Codes] Collection is empty after population, skipping runCodes execution.\");\n                 // Ensure runResult is initialized for post-processing\n                 if (!runResult) runResult = { assumptionTabs: [] };\n            }\n        } else {\n            console.log(\"[Run Codes] No code content collected to process via runCodes.\");\n             // Initialize runResult structure if needed by post-processing\n             if (!runResult) runResult = { assumptionTabs: [] }; // Ensure runResult exists\n        }\n\n        // --- Post-processing (Runs regardless) ---\n        console.log(\"[Run Codes] Starting post-processing steps...\");\n        if (runResult && runResult.assumptionTabs && runResult.assumptionTabs.length > 0) {\n            console.log(\"Processing assumption tabs...\");\n            await processAssumptionTabs(runResult.assumptionTabs);\n        } else {\n             console.log(\"No assumption tabs to process.\");\n        }\n        console.log(\"Hiding specific columns and navigating...\");\n        // Pass assumption tabs from runResult (if any), otherwise an empty array.\n        await hideColumnsAndNavigate(runResult?.assumptionTabs || []);\n\n        // Cleanup\n        console.log(\"Deleting Codes sheet / Skipping hiding Calcs sheet...\");\n        await Excel.run(async (context) => {\n            try {\n                const codesSheet = context.workbook.worksheets.getItem(\"Codes\");\n                codesSheet.delete();\n                console.log(\"Codes sheet deleted.\");\n            } catch (e) {\n                if (e instanceof OfficeExtension.Error && e.code === Excel.ErrorCodes.itemNotFound) {\n                     console.warn(\"Codes sheet not found, skipping deletion.\");\n                } else { console.error(\"Error deleting Codes sheet:\", e); }\n            }\n            // Hiding Calcs sheet logic was removed previously, keeping it out.\n            await context.sync();\n        }).catch(error => { console.error(\"Error during sheet cleanup:\", error); });\n\n        // --- IMPORTANT: Update previous codes state AFTER successful processing ---\n        try {\n            localStorage.setItem('previousRunCodeStrings', codesToRun);\n            console.log(\"[Run Codes] Updated previous run state with full current codes.\");\n        } catch (error) {\n             console.error(\"[Run Codes] Failed to update previous run state:\", error);\n        }\n\n        showMessage(\"Code processing finished successfully!\");\n\n    } catch (error) {\n        console.error(\"An error occurred during the build process:\", error);\n        showError(`Operation failed: ${error.message || error.toString()}`);\n    } finally {\n        // Always set calculation mode back to automatic and hide loading\n        try {\n            await Excel.run(async (context) => {\n                context.application.calculationMode = Excel.CalculationMode.automatic;\n                await context.sync();\n            });\n        } catch (finalError) {\n            console.error(\"Error setting calculation mode to automatic:\", finalError);\n        }\n        setButtonLoading(false);\n    }\n}\n\n// Ensure Office.onReady sets up the button click handler for the REVISED function\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // Assign the REVISED async function as the handler\n    const button = document.getElementById(\"insert-and-run\");\n    if (button) {\n        button.onclick = insertSheetsAndRunCodes; // Use the revised function\n    } else {\n        console.error(\"Could not find button with id='insert-and-run'\");\n    }\n\n    // >>> ADDED: Helper function findNewCodes (defined above, ensure it's accessible)\n    // No need to add it here again if defined globally or within taskpane.js scope before Office.onReady\n\n\n    // ... (rest of your Office.onReady remains the same) ...\n\n    // Keep the setup for your other buttons (send-button, reset-button, etc.)\n    const sendButton = document.getElementById('send');\n    if (sendButton) sendButton.onclick = handleSend;\n\n    const writeButton = document.getElementById('write-to-excel');\n    if (writeButton) writeButton.onclick = writeToExcel;\n\n    const resetButton = document.getElementById('reset-chat');\n    if (resetButton) resetButton.onclick = resetChat;\n\n    const codesTextarea = document.getElementById('codes-textarea');\n    const editParamsButton = document.getElementById('edit-code-params-button');\n    const paramsModal = document.getElementById('code-params-modal');\n    const paramsModalForm = document.getElementById('code-params-modal-form');\n    const closeModalButton = paramsModal.querySelector('.close-button');\n    const applyParamsButton = document.getElementById('apply-code-params-button');\n    const cancelParamsButton = document.getElementById('cancel-code-params-button');\n\n    // Modal Find/Replace elements\n    const modalFindInput = document.getElementById('modal-find-input');\n    const modalReplaceInput = document.getElementById('modal-replace-input');\n    const modalReplaceAllButton = document.getElementById('modal-replace-all-button');\n    const modalSearchStatus = document.getElementById('modal-search-status');\n\n    let currentCodeStringRange = null; // To store {start, end} of the code string being edited\n    let currentCodeStringType = ''; // To store the type like 'VOL-EV'\n\n    // State for modal find/replace (Simplified)\n    let modalSearchableElements = []; // Stores {element, originalValue}\n    // Removed modalSearchTerm, modalCurrentMatchIndex, modalAllMatches\n\n    // Function to reset modal search state (Simplified)\n    const resetModalSearchState = () => {\n        modalSearchableElements = Array.from(paramsModalForm.querySelectorAll('input[data-param-key], textarea[data-param-key]'));\n        if (modalSearchStatus) modalSearchStatus.textContent = '';\n        // Clear input fields as well?\n        // if (modalFindInput) modalFindInput.value = '';\n        // if (modalReplaceInput) modalReplaceInput.value = '';\n        console.log(\"Modal search state reset.\");\n    };\n\n    // Function to update modal search status\n    const updateModalSearchStatus = (message) => {\n        if (modalSearchStatus) {\n            modalSearchStatus.textContent = message;\n        }\n    };\n\n    // Removed findAllMatchesInModal function\n\n    // Function to show the modal\n    const showParamsModal = () => {\n        if (paramsModal) {\n            paramsModal.style.display = 'block';\n            resetModalSearchState(); // Reset search when modal opens\n        }\n    };\n\n    // Function to hide the modal\n    const hideParamsModal = () => {\n        if (paramsModal) {\n            paramsModal.style.display = 'none';\n            paramsModalForm.innerHTML = ''; // Clear the form\n            currentCodeStringRange = null; // Reset state\n            currentCodeStringType = '';\n            resetModalSearchState(); // Also reset search state on close\n        }\n    };\n\n    // Function to find the <...> block around the cursor\n    const findCodeStringAroundCursor = (text, cursorPos) => {\n        const textBeforeCursor = text.substring(0, cursorPos);\n        const textAfterCursor = text.substring(cursorPos);\n\n        const lastOpenBracket = textBeforeCursor.lastIndexOf('<');\n        const lastCloseBracketBefore = textBeforeCursor.lastIndexOf('>');\n\n        // Check if cursor is potentially inside brackets\n        if (lastOpenBracket > lastCloseBracketBefore) {\n            const firstCloseBracketAfter = textAfterCursor.indexOf('>');\n            if (firstCloseBracketAfter !== -1) {\n                const start = lastOpenBracket;\n                const end = cursorPos + firstCloseBracketAfter + 1; // +1 to include '>'\n                const codeString = text.substring(start, end);\n                console.log(`Found code string: ${codeString} at range [${start}, ${end})`);\n                return { codeString, start, end };\n            }\n        }\n        console.log(\"Cursor not inside a <...> block.\");\n        return null; // Cursor is not inside a valid <...> block\n    };\n\n    // Function to parse parameters from the code string content (inside <...>)\n    const parseCodeParameters = (content) => {\n        const parts = content.split(';');\n        if (parts.length < 1) return { type: '', params: {} };\n\n        const type = parts[0].trim();\n        const params = {};\n        // Regex to match key=\"value\" or key=value (no quotes)\n        const paramRegex = /\\s*([^=\\s]+)\\s*=\\s*(?:\"([^\"]*)\"|([^;]*))/g;\n\n        for (let i = 1; i < parts.length; i++) {\n            const part = parts[i].trim();\n            if (!part) continue;\n\n            // Reset regex index before each exec\n            paramRegex.lastIndex = 0;\n            const match = paramRegex.exec(part);\n\n            if (match) {\n                const key = match[1];\n                // Value could be in group 2 (quoted) or group 3 (unquoted)\n                const value = match[2] !== undefined ? match[2] : match[3];\n                 if (key) { // Ensure key is valid\n                    params[key] = value.trim();\n                }\n            } else {\n                console.warn(`Could not parse parameter part: '${part}'`);\n            }\n        }\n        console.log(`Parsed type: ${type}, params:`, params);\n        return { type, params };\n    };\n\n    // Function to populate the modal form (needs to update searchable elements)\n    const populateParamsModal = (type, params) => {\n        paramsModalForm.innerHTML = ''; // Clear previous form items\n        currentCodeStringType = type; // Store the type\n\n        Object.entries(params).forEach(([key, value]) => {\n            const paramEntryDiv = document.createElement('div');\n            paramEntryDiv.className = 'param-entry';\n\n            const label = document.createElement('label');\n            label.htmlFor = `param-${key}`;\n            label.textContent = key;\n\n            let inputElement;\n            const isLongValue = key.toLowerCase().includes('row') || value.length > 60;\n            const isLIParam = /LI\\d+\\|/.test(value.trim()); // Check if value starts with LI<digit>|\n\n            if (isLongValue || isLIParam) { // Use textarea for LI params too, for consistency\n                inputElement = document.createElement('textarea');\n                inputElement.rows = isLIParam ? 2 : 3; // Slightly smaller for LI rows initially\n            } else {\n                inputElement = document.createElement('input');\n                inputElement.type = 'text';\n            }\n\n            inputElement.id = `param-${key}`;\n            inputElement.value = value;\n            inputElement.dataset.paramKey = key;\n            if (isLIParam) {\n                inputElement.dataset.isOriginalLi = \"true\"; // Mark original LI fields\n            }\n\n            paramEntryDiv.appendChild(label);\n\n            if (isLIParam) {\n                // Create a container for the LI field and its add button\n                const liContainer = document.createElement('div');\n                liContainer.className = 'li-parameter-container';\n                liContainer.dataset.originalLiKey = key; // Link container to original key\n\n                liContainer.appendChild(inputElement); // Add the input field first\n\n                // Create the Add button\n                const addButton = document.createElement('button');\n                addButton.type = 'button'; // Important: prevent form submission\n                addButton.textContent = '+';\n                addButton.className = 'ms-Button ms-Button--icon add-li-button'; // Add specific class\n                addButton.title = 'Add another LI item based on this one';\n                addButton.dataset.targetLiKey = key; // Link button to the input's key\n\n                addButton.onclick = (event) => {\n                    const sourceInput = document.getElementById(`param-${key}`);\n                    if (!sourceInput) return;\n\n                    const newValueContainer = document.createElement('div');\n                    newValueContainer.className = 'added-li-item';\n\n                    const newInput = sourceInput.cloneNode(true); // Clone the original input/textarea\n                    // Clear ID, mark as added, remove original marker\n                    newInput.id = '';\n                    newInput.dataset.isAddedLi = \"true\";\n                    delete newInput.dataset.isOriginalLi;\n                    newInput.dataset.originalLiKey = key; // Link back to the original key\n                    // Keep the same value as the original initially\n                    newInput.value = sourceInput.value; // Duplicate the content\n\n                    // Add a remove button for the added item\n                    const removeButton = document.createElement('button');\n                    removeButton.type = 'button';\n                    removeButton.textContent = '-';\n                    removeButton.className = 'ms-Button ms-Button--icon remove-li-button';\n                    removeButton.title = 'Remove this added LI item';\n                    removeButton.onclick = () => {\n                        newValueContainer.remove();\n                    };\n\n                    newValueContainer.appendChild(newInput);\n                    newValueContainer.appendChild(removeButton);\n\n                    // Insert the new container after the clicked button\n                    // or after the last added item within this container\n                    event.target.parentNode.appendChild(newValueContainer);\n                     // Maybe scroll container? paramsModalForm.scrollTop = paramsModalForm.scrollHeight;\n                };\n\n                liContainer.appendChild(addButton); // Add button after input\n                paramEntryDiv.appendChild(liContainer); // Add container to entry div\n\n            } else {\n                 paramEntryDiv.appendChild(inputElement); // Non-LI params added directly\n            }\n\n            paramsModalForm.appendChild(paramEntryDiv);\n        });\n        // IMPORTANT: Update searchable elements after populating\n        resetModalSearchState(); // Reset search state after populating form\n    };\n\n    // --- Event Listener for the Edit Parameters Button ---\n    if (editParamsButton && codesTextarea && paramsModal) {\n        editParamsButton.onclick = () => {\n            const text = codesTextarea.value;\n            const cursorPos = codesTextarea.selectionStart;\n\n            const codeInfo = findCodeStringAroundCursor(text, cursorPos);\n\n            if (codeInfo) {\n                // Extract content within < >\n                const content = codeInfo.codeString.substring(1, codeInfo.codeString.length - 1);\n                const { type, params } = parseCodeParameters(content);\n\n                if (type) {\n                    currentCodeStringRange = { start: codeInfo.start, end: codeInfo.end };\n                    populateParamsModal(type, params);\n                    showParamsModal();\n                } else {\n                    showError(\"Could not parse the code string structure.\");\n                }\n            } else {\n                showError(\"Place cursor inside a <...> code block to edit parameters.\");\n            }\n        };\n    }\n\n    // --- Event Listeners for Modal Actions ---\n    if (closeModalButton) {\n        closeModalButton.onclick = hideParamsModal;\n    }\n    if (cancelParamsButton) {\n        cancelParamsButton.onclick = hideParamsModal;\n    }\n\n    // --- APPLY CHANGES LOGIC (MODIFIED) ---\n    if (applyParamsButton && codesTextarea) {\n        applyParamsButton.onclick = () => {\n            if (!currentCodeStringRange || !currentCodeStringType) return; // Safety check\n\n            // Use a map to reconstruct parameters, handling LI aggregation\n            const paramValues = {};\n\n            // Process all input/textarea fields in the form\n            const formElements = paramsModalForm.querySelectorAll('input[data-param-key], textarea[data-param-key]');\n\n            formElements.forEach(input => {\n                const key = input.dataset.paramKey;\n                const isOriginalLI = input.dataset.isOriginalLi === \"true\";\n                const isAddedLI = input.dataset.isAddedLi === \"true\";\n                const value = input.value;\n\n                if (isOriginalLI) {\n                    // If it's an original LI, initialize its value in the map\n                    if (!paramValues[key]) {\n                        paramValues[key] = value; // Start with the original value\n                    }\n                } else if (isAddedLI) {\n                    // This case handled below by finding related elements\n                    // We only need to store original keys first\n                } else if (key && !isAddedLI) {\n                    // Standard parameter, just store its value\n                     if (!paramValues[key]) { // Check prevents overwriting if key appears twice (shouldn't happen)\n                       paramValues[key] = value;\n                    }\n                }\n            });\n\n            // Now, aggregate added LI items\n            const addedLiElements = paramsModalForm.querySelectorAll('textarea[data-is-added-li=\"true\"]');\n            addedLiElements.forEach(addedInput => {\n                 const originalKey = addedInput.dataset.originalLiKey;\n                 if (originalKey && paramValues[originalKey]) {\n                      // Append the added value, prefixed with *\n                      paramValues[originalKey] += ` *${addedInput.value}`;\n                 }\n            });\n\n            // Build the final parameter string parts\n            const updatedParams = Object.entries(paramValues).map(([key, finalValue]) => {\n                 // Re-add quotes around the final aggregated value\n                 return `${key}=\"${finalValue}\"`;\n            });\n\n            // Reconstruct the code string\n            const newCodeStringContent = `${currentCodeStringType}; ${updatedParams.join('; ')}`;\n            const newCodeString = `<${newCodeStringContent}>`;\n\n            // Update the textarea content\n            const currentText = codesTextarea.value;\n            const textBefore = currentText.substring(0, currentCodeStringRange.start);\n            const textAfter = currentText.substring(currentCodeStringRange.end);\n\n            codesTextarea.value = textBefore + newCodeString + textAfter;\n\n            console.log(`Updated code string at [${currentCodeStringRange.start}, ${currentCodeStringRange.start + newCodeString.length})`);\n            console.log(\"New string:\", newCodeString);\n\n            // Optionally, update cursor position\n            const newCursorPos = currentCodeStringRange.start + newCodeString.length;\n            codesTextarea.focus();\n            codesTextarea.setSelectionRange(newCursorPos, newCursorPos);\n\n            hideParamsModal(); // Close modal after applying\n        };\n    }\n\n    // --- Modal Find/Replace Logic (Simplified) ---\n\n    const modalReplaceAll = () => {\n        const searchTerm = modalFindInput.value;\n        const replaceTerm = modalReplaceInput.value;\n        if (!searchTerm) {\n            updateModalSearchStatus(\"Enter search term.\");\n            return;\n        }\n\n        // Ensure searchable elements are up-to-date\n        modalSearchableElements = Array.from(paramsModalForm.querySelectorAll('input[data-param-key], textarea[data-param-key]'));\n\n        let replacementsMade = 0;\n        modalSearchableElements.forEach((element, index) => {\n            let currentValue = element.value;\n            // Escape regex special characters in search term\n            const escapedSearchTerm = searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n            let newValue = currentValue.replace(new RegExp(escapedSearchTerm, 'g'), () => {\n                replacementsMade++;\n                return replaceTerm;\n            });\n            if (currentValue !== newValue) {\n                element.value = newValue;\n                console.log(`Modal Replace All: Made replacements in element ${index}`);\n            }\n        });\n\n        if (replacementsMade > 0) {\n            updateModalSearchStatus(`Replaced ${replacementsMade} occurrence(s).`);\n            // No need to reset search state as there's no find next\n        } else {\n            updateModalSearchStatus(`\"${searchTerm}\" not found.`);\n        }\n    };\n\n    // Add event listeners for modal find/replace buttons (Simplified)\n    // Removed listeners for Find Next and Replace\n    if (modalReplaceAllButton) modalReplaceAllButton.onclick = modalReplaceAll;\n    // Removed input listener for modalFindInput\n\n    // --- Event Listeners for Modal Actions ---\n    if (closeModalButton) {\n        closeModalButton.onclick = hideParamsModal;\n    }\n\n    // ... (rest of your Office.onReady, including suggestion logic, initializations)\n\n    // Make sure initialization runs after setting up modal logic\n    Promise.all([\n        initializeAPIKeys(),\n        loadCodeDatabase()\n    ]).then(([keysLoaded]) => {\n      if (!keysLoaded) {\n        showError(\"Failed to load API keys. Please check configuration.\");\n      }\n      conversationHistory = loadConversationHistory();\n\n      try {\n          const storedCodes = localStorage.getItem('userCodeStrings');\n          if (storedCodes !== null) {\n              loadedCodeStrings = storedCodes;\n              if (codesTextarea) {\n                  codesTextarea.value = loadedCodeStrings;\n              }\n              console.log(\"Code strings loaded from localStorage into global variable.\");\n          } else {\n              console.log(\"No code strings found in localStorage, initializing global variable as empty.\");\n              loadedCodeStrings = \"\";\n          }\n          // Also load the previous run codes if available\n           const storedPreviousCodes = localStorage.getItem('previousRunCodeStrings');\n           if (storedPreviousCodes) {\n               console.log(\"Previous run code strings loaded from localStorage.\");\n           }\n\n      } catch (error) {\n          console.error(\"Error loading code strings from localStorage:\", error);\n          showError(`Error loading codes from storage: ${error.message}`);\n          loadedCodeStrings = \"\";\n      }\n\n    }).catch(error => {\n        console.error(\"Error during initialization:\", error);\n        showError(\"Error during initialization: \" + error.message);\n    });\n\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"block\";\n\n    // ... (existing modal logic: applyParamsButton.onclick, window.onclick)\n\n    // --- Code Suggestion Logic (Restored) ---\n    let dynamicSuggestionsContainer = document.getElementById('dynamic-suggestions-container');\n    if (!dynamicSuggestionsContainer) {\n        dynamicSuggestionsContainer = document.createElement('div');\n        dynamicSuggestionsContainer.id = 'dynamic-suggestions-container';\n        dynamicSuggestionsContainer.className = 'code-suggestions'; // Reuse class if styling exists\n        dynamicSuggestionsContainer.style.display = 'none';\n        // Basic positioning styles (adjust in CSS for better control)\n        dynamicSuggestionsContainer.style.position = 'absolute';\n        dynamicSuggestionsContainer.style.border = '1px solid #ccc';\n        dynamicSuggestionsContainer.style.backgroundColor = 'white';\n        dynamicSuggestionsContainer.style.maxHeight = '150px';\n        dynamicSuggestionsContainer.style.overflowY = 'auto';\n        dynamicSuggestionsContainer.style.zIndex = '1000';\n\n        // Insert after the textarea's container or adjust as needed\n        if (codesTextarea && codesTextarea.parentNode) { // Check if codesTextarea exists\n            codesTextarea.parentNode.insertBefore(dynamicSuggestionsContainer, codesTextarea.nextSibling);\n        } else {\n            // Fallback: Append to body, though less ideal positioning\n            document.body.appendChild(dynamicSuggestionsContainer);\n        }\n\n        // Function to update position and width\n        const updateSuggestionPosition = () => {\n          if (dynamicSuggestionsContainer.style.display === 'block' && codesTextarea) {\n              const rect = codesTextarea.getBoundingClientRect();\n              dynamicSuggestionsContainer.style.width = codesTextarea.offsetWidth + 'px';\n              dynamicSuggestionsContainer.style.top = (rect.bottom + window.scrollY) + 'px';\n              dynamicSuggestionsContainer.style.left = (rect.left + window.scrollX) + 'px';\n          }\n        };\n\n        // Update on resize and scroll\n        window.addEventListener('resize', updateSuggestionPosition);\n        window.addEventListener('scroll', updateSuggestionPosition, true); // Use capture phase for scroll\n    }\n\n    let highlightedSuggestionIndex = -1;\n    let currentSuggestions = [];\n\n    const updateHighlight = (newIndex) => {\n      if (!dynamicSuggestionsContainer) return; // Guard against null\n      const suggestionItems = dynamicSuggestionsContainer.querySelectorAll('.code-suggestion-item');\n      if (highlightedSuggestionIndex >= 0 && highlightedSuggestionIndex < suggestionItems.length) {\n        suggestionItems[highlightedSuggestionIndex].classList.remove('suggestion-highlight');\n      }\n      if (newIndex >= 0 && newIndex < suggestionItems.length) {\n        suggestionItems[newIndex].classList.add('suggestion-highlight');\n        suggestionItems[newIndex].scrollIntoView({ block: 'nearest' });\n      }\n      highlightedSuggestionIndex = newIndex;\n    };\n\n    const showSuggestionsForTerm = (searchTerm) => {\n        if (!dynamicSuggestionsContainer || !codesTextarea) return; // Guard against null\n\n        searchTerm = searchTerm.toLowerCase().trim();\n        console.log(`[showSuggestionsForTerm] Search Term: '${searchTerm}'`);\n\n        dynamicSuggestionsContainer.innerHTML = '';\n        highlightedSuggestionIndex = -1;\n        currentSuggestions = [];\n\n        if (searchTerm.length < 2) {\n            console.log(\"[showSuggestionsForTerm] Search term too short, hiding suggestions.\");\n            dynamicSuggestionsContainer.style.display = 'none';\n            return;\n        }\n\n        console.log(\"[showSuggestionsForTerm] Filtering code database...\");\n        const suggestions = codeDatabase\n            .filter(item => {\n                const hasName = item && typeof item.name === 'string';\n                return hasName && item.name.toLowerCase().includes(searchTerm);\n            })\n            .slice(0, 10);\n\n        currentSuggestions = suggestions;\n        console.log(`[showSuggestionsForTerm] Found ${currentSuggestions.length} suggestions:`, currentSuggestions);\n\n        if (currentSuggestions.length > 0) {\n            console.log(\"[showSuggestionsForTerm] Populating suggestions container...\");\n            currentSuggestions.forEach((item, i) => {\n                const suggestionDiv = document.createElement('div');\n                suggestionDiv.className = 'code-suggestion-item';\n                suggestionDiv.textContent = item.name;\n                suggestionDiv.dataset.index = i;\n\n                suggestionDiv.onclick = () => {\n                    console.log(`Suggestion clicked: '${item.name}'`);\n                    const currentText = codesTextarea.value;\n                    const cursorPosition = codesTextarea.selectionStart;\n                    let codeToAdd = item.code;\n\n                    let insertionPosition = cursorPosition;\n                    let wasAdjusted = false;\n                    const textBeforeCursor = currentText.substring(0, cursorPosition);\n                    const lastOpenBracket = textBeforeCursor.lastIndexOf('<');\n                    const lastCloseBracket = textBeforeCursor.lastIndexOf('>');\n\n                    if (lastOpenBracket > lastCloseBracket) {\n                        const textAfterCursor = currentText.substring(cursorPosition);\n                        const nextCloseBracket = textAfterCursor.indexOf('>');\n                        if (nextCloseBracket !== -1) {\n                            insertionPosition = cursorPosition + nextCloseBracket + 1;\n                            wasAdjusted = true;\n                            console.log(`Cursor inside <>, adjusting insertion point to after > at ${insertionPosition}`);\n                        }\n                    }\n\n                    const maxNumbers = getMaxDriverNumbers(currentText);\n                    // Corrected regex - double escapes not needed in string literal here\n                    const driverRegex = /(row\\d+\\s*=\\s*\")([A-Z]+)(\\d*)(\\|)/g;\n                    const nextNumbers = { ...maxNumbers };\n\n                    codeToAdd = codeToAdd.replace(driverRegex, (match, rowPart, prefix, existingNumberStr, pipePart) => {\n                        nextNumbers[prefix] = (nextNumbers[prefix] || 0) + 1;\n                        const newNumber = nextNumbers[prefix];\n                        const replacement = `${rowPart}${prefix}${newNumber}${pipePart}`;\n                        console.log(`Replacing driver: '${prefix}${existingNumberStr || ''}|' with '${prefix}${newNumber}|'`);\n                        return replacement;\n                    });\n\n                    console.log(\"Modified code to add:\", codeToAdd);\n\n                    const textAfterInsertion = currentText.substring(insertionPosition);\n                    let textBeforeFinal = \"\";\n                    let searchStartIndex = insertionPosition;\n\n                    if (!wasAdjusted) {\n                        const textBeforeInsertion = currentText.substring(0, insertionPosition);\n                        let tempSearchStart = cursorPosition - 1;\n                        while (tempSearchStart >= 0) {\n                            const char = textBeforeCursor[tempSearchStart];\n                             // CORRECTED REGEX IN ONCLICK:\n                            if (/\\s|\\n|>|<|;|\\|/.test(char)) {\n                                tempSearchStart++;\n                                break;\n                            }\n                            tempSearchStart--;\n                        }\n                        if (tempSearchStart < 0) tempSearchStart = 0;\n\n                        searchStartIndex = tempSearchStart;\n                        const searchTermToRemove = textBeforeCursor.substring(searchStartIndex, cursorPosition);\n                        console.log(`Attempting to replace term: '${searchTermToRemove}' starting at index ${searchStartIndex}`);\n                        textBeforeFinal = currentText.substring(0, searchStartIndex);\n                    } else {\n                         textBeforeFinal = currentText.substring(0, insertionPosition);\n                         searchStartIndex = insertionPosition;\n                    }\n\n                    const firstNewlineIndexInSuffix = textAfterInsertion.indexOf('\\n');\n                    let remainderOfOriginalLine = \"\";\n                    let subsequentLines = \"\";\n\n                    if (firstNewlineIndexInSuffix === -1) {\n                        remainderOfOriginalLine = textAfterInsertion;\n                    } else {\n                        remainderOfOriginalLine = textAfterInsertion.substring(0, firstNewlineIndexInSuffix);\n                        subsequentLines = textAfterInsertion.substring(firstNewlineIndexInSuffix);\n                    }\n\n                    const newText = textBeforeFinal +\n                                    codeToAdd +\n                                    (remainderOfOriginalLine.length > 0 ? '\\n' : '') +\n                                    remainderOfOriginalLine +\n                                    subsequentLines;\n\n                    codesTextarea.value = newText;\n\n                    const newCursorPosition = (textBeforeFinal + codeToAdd).length;\n                    codesTextarea.focus();\n                    codesTextarea.setSelectionRange(newCursorPosition, newCursorPosition);\n\n                    dynamicSuggestionsContainer.innerHTML = '';\n                    dynamicSuggestionsContainer.style.display = 'none';\n                    highlightedSuggestionIndex = -1;\n                    currentSuggestions = [];\n                };\n\n                suggestionDiv.onmouseover = () => {\n                    updateHighlight(i);\n                };\n\n                dynamicSuggestionsContainer.appendChild(suggestionDiv);\n            });\n            console.log(\"[showSuggestionsForTerm] Setting suggestions display to 'block'\");\n\n            const rect = codesTextarea.getBoundingClientRect();\n            dynamicSuggestionsContainer.style.width = codesTextarea.offsetWidth + 'px';\n            dynamicSuggestionsContainer.style.top = (rect.bottom + window.scrollY) + 'px';\n            dynamicSuggestionsContainer.style.left = (rect.left + window.scrollX) + 'px';\n            dynamicSuggestionsContainer.style.display = 'block';\n        } else {\n            console.log(\"[showSuggestionsForTerm] No suggestions found, hiding container.\");\n            dynamicSuggestionsContainer.style.display = 'none';\n        }\n    };\n\n    if (codesTextarea && dynamicSuggestionsContainer) {\n        codesTextarea.oninput = (event) => {\n             if (!event.isTrusted || !dynamicSuggestionsContainer) {\n                 return;\n             }\n            const cursorPosition = codesTextarea.selectionStart;\n            const currentText = codesTextarea.value;\n\n            const textBeforeCursor = currentText.substring(0, cursorPosition);\n            const lastOpenBracket = textBeforeCursor.lastIndexOf('<');\n            const lastCloseBracket = textBeforeCursor.lastIndexOf('>');\n            let isInsideBrackets = false;\n            if (lastOpenBracket > lastCloseBracket) {\n                const textAfterCursor = currentText.substring(cursorPosition);\n                const nextCloseBracket = textAfterCursor.indexOf('>');\n                if (nextCloseBracket !== -1 ) {\n                    isInsideBrackets = true;\n                }\n            }\n\n            if (isInsideBrackets) {\n                console.log(\"[Textarea Input] Cursor inside <>, hiding suggestions.\");\n                dynamicSuggestionsContainer.style.display = 'none';\n                highlightedSuggestionIndex = -1;\n                currentSuggestions = [];\n            } else {\n                let searchStart = cursorPosition - 1;\n                while (searchStart >= 0) {\n                    const char = textBeforeCursor[searchStart];\n                    // CORRECTED REGEX: No double escapes needed\n                    if (/\\s|\\n|>|<|;|\\|/.test(char)) {\n                        searchStart++;\n                        break;\n                    }\n                    searchStart--;\n                }\n                if (searchStart < 0) searchStart = 0;\n\n                console.log(`[Textarea Input Debug] cursorPosition: ${cursorPosition}, calculated searchStart: ${searchStart}, char at searchStart: '${searchStart < currentText.length ? textBeforeCursor[searchStart] : 'EOF'}'`);\n\n                const searchTerm = textBeforeCursor.substring(searchStart, cursorPosition);\n                const trimmedSearchTerm = searchTerm.trim();\n\n                if (trimmedSearchTerm.length === 0 || !/^[a-zA-Z]/.test(trimmedSearchTerm)) {\n                     if (trimmedSearchTerm.length === 0) {\n                         console.log(`[Textarea Input] Hiding suggestions (empty term detected immediately after delimiter)`);\n                     } else {\n                         console.log(`[Textarea Input] Hiding suggestions (term does not start with letter: '${searchTerm}')`);\n                     }\n                    dynamicSuggestionsContainer.style.display = 'none';\n                    highlightedSuggestionIndex = -1;\n                    currentSuggestions = [];\n                } else {\n                    console.log(`[Textarea Input] Cursor outside <>, potential search term: '${searchTerm}'`);\n                    showSuggestionsForTerm(searchTerm);\n                }\n            }\n        };\n\n        codesTextarea.onkeydown = (event) => {\n            if (!dynamicSuggestionsContainer || dynamicSuggestionsContainer.style.display !== 'block' || currentSuggestions.length === 0) {\n                return;\n            }\n\n            const suggestionItems = dynamicSuggestionsContainer.querySelectorAll('.code-suggestion-item');\n            let newIndex = highlightedSuggestionIndex;\n\n            switch (event.key) {\n                case 'ArrowDown':\n                case 'ArrowUp':\n                    event.preventDefault();\n                    newIndex = event.key === 'ArrowDown'\n                        ? (highlightedSuggestionIndex + 1) % currentSuggestions.length\n                        : (highlightedSuggestionIndex - 1 + currentSuggestions.length) % currentSuggestions.length;\n                    updateHighlight(newIndex);\n                    break;\n\n                case 'Enter':\n                 case 'Tab':\n                    event.preventDefault();\n                    if (highlightedSuggestionIndex >= 0 && highlightedSuggestionIndex < suggestionItems.length) {\n                        suggestionItems[highlightedSuggestionIndex].click();\n                    } else if (currentSuggestions.length > 0 && suggestionItems.length > 0) {\n                         suggestionItems[0].click(); // Select first if none highlighted\n                    }\n                    // Suggestion click handles hiding\n                    break;\n\n                case 'Escape':\n                    event.preventDefault();\n                    dynamicSuggestionsContainer.style.display = 'none';\n                    highlightedSuggestionIndex = -1;\n                    currentSuggestions = [];\n                    break;\n\n                default:\n                    if (!event.ctrlKey && !event.altKey && !event.metaKey && event.key.length === 1) {\n                       updateHighlight(-1);\n                    }\n                    break;\n            }\n        };\n\n         codesTextarea.addEventListener('blur', () => {\n             if (!dynamicSuggestionsContainer) return;\n             setTimeout(() => {\n                 if (!dynamicSuggestionsContainer.contains(document.activeElement)) {\n                      dynamicSuggestionsContainer.style.display = 'none';\n                      highlightedSuggestionIndex = -1;\n                 }\n             }, 150);\n         });\n    }\n    // --- End of Code Suggestion Logic ---\n\n\n    // ... (rest of your Office.onReady, e.g., Promise.all)\n\n    // Make sure initialization runs after setting up modal logic\n  }\n});\n\n// >>> ADDED: Search and Replace Functions <<<\n\nfunction clearSearchHighlight() {\n    const textarea = document.getElementById('codes-textarea');\n    if (textarea && lastSearchIndex !== -1) {\n        // Simple way: just reset selection to the start\n        textarea.setSelectionRange(0, 0);\n        textarea.blur(); // Remove focus to clear visible selection highlight\n        textarea.focus();\n        console.log(\"Cleared search highlight.\");\n    }\n    lastSearchIndex = -1;\n    searchResultIndices = [];\n    currentHighlightIndex = -1;\n    updateSearchStatus('');\n}\n\nfunction updateSearchStatus(message) {\n    const statusElement = document.getElementById('search-status');\n    if (statusElement) {\n        statusElement.textContent = message;\n    }\n}\n\nfunction findNext() {\n    const textarea = document.getElementById('codes-textarea');\n    const searchTerm = document.getElementById('search-input').value;\n    const statusElement = document.getElementById('search-status');\n    const selectionOnlyCheckbox = document.getElementById('search-selection-only');\n\n    if (!textarea || !searchTerm) {\n        updateSearchStatus(\"Enter a search term.\");\n        return;\n    }\n\n    const isSelectionOnly = selectionOnlyCheckbox?.checked;\n    let currentText = textarea.value;\n    let scopeStartIndex = 0;\n    let selectionEndIndex = currentText.length; // Use current length\n\n    if (isSelectionOnly) {\n        scopeStartIndex = textarea.selectionStart;\n        selectionEndIndex = textarea.selectionEnd;\n        if (scopeStartIndex === selectionEndIndex) {\n            updateSearchStatus(\"Select text first for 'Search Selection Only'.\");\n            return;\n        }\n        let searchScopeText = currentText.substring(scopeStartIndex, selectionEndIndex);\n        console.log(`Searching within selection (${scopeStartIndex}-${selectionEndIndex}): \"${searchScopeText}\"`);\n\n        // Determine if a re-scan is needed\n        const storedSelStart = textarea.dataset.lastSelectionScanStart;\n        const storedSelEnd = textarea.dataset.lastSelectionScanEnd;\n        const needsRescan = lastSearchTerm !== searchTerm || \n                            !storedSelStart || \n                            storedSelStart != scopeStartIndex || \n                            storedSelEnd != selectionEndIndex;\n\n        if (needsRescan) {\n            console.log(\"Re-scanning selection.\");\n            lastSearchTerm = searchTerm;\n            textarea.dataset.lastSelectionScanStart = scopeStartIndex; // Store bounds used for THIS scan\n            textarea.dataset.lastSelectionScanEnd = selectionEndIndex;\n            lastSearchIndex = -1; // Absolute index reset\n            currentHighlightIndex = -1;\n            searchResultIndices = []; // Stores relative indices\n\n            let relativeIndex = searchScopeText.indexOf(searchTerm);\n            while (relativeIndex !== -1) {\n                searchResultIndices.push(relativeIndex);\n                relativeIndex = searchScopeText.indexOf(searchTerm, relativeIndex + 1);\n            }\n            console.log(`Found ${searchResultIndices.length} occurrences within selection. Relative Indices:`, searchResultIndices);\n        }\n        // If no re-scan needed, we continue with existing searchResultIndices and currentHighlightIndex\n\n        if (searchResultIndices.length === 0) {\n            updateSearchStatus(`\"${searchTerm}\" not found in selection.`);\n            return;\n        }\n    }\n    else { // Full text search\n        const storedSelStart = textarea.dataset.lastSelectionScanStart;\n        // Reset if term changed or switching FROM selection mode\n        if (searchTerm !== lastSearchTerm || storedSelStart) {\n            console.log(\"Scanning full text.\");\n            lastSearchTerm = searchTerm;\n            lastSearchIndex = -1; // Absolute index\n            currentHighlightIndex = -1;\n            searchResultIndices = []; // Stores absolute indices\n            textarea.dataset.lastSelectionScanStart = ''; // Clear selection memory\n            textarea.dataset.lastSelectionScanEnd = '';\n\n            let index = currentText.indexOf(searchTerm);\n            while (index !== -1) {\n                searchResultIndices.push(index);\n                index = currentText.indexOf(searchTerm, index + 1);\n            }\n            console.log(`Found ${searchResultIndices.length} occurrences of \"${searchTerm}\". Absolute Indices:`, searchResultIndices);\n        }\n\n        if (searchResultIndices.length === 0) {\n            updateSearchStatus(`\"${searchTerm}\" not found.`);\n            return;\n        }\n    }\n\n    // Cycle through the found indices\n    currentHighlightIndex = (currentHighlightIndex + 1) % searchResultIndices.length;\n    const foundIndex = searchResultIndices[currentHighlightIndex]; // Could be relative or absolute\n\n    // Highlight the found text (calculate absolute index)\n    const highlightStartIndex = isSelectionOnly ? scopeStartIndex + foundIndex : foundIndex;\n    const highlightEndIndex = highlightStartIndex + searchTerm.length;\n\n    // Store the absolute index of the current highlight for replace validation\n    lastSearchIndex = highlightStartIndex;\n\n    textarea.focus();\n    textarea.setSelectionRange(highlightStartIndex, highlightEndIndex);\n    textarea.scrollTop = textarea.scrollHeight * (highlightStartIndex / currentText.length) - 50; // Estimate scroll position\n\n    updateSearchStatus(`Found at index ${highlightStartIndex} (${currentHighlightIndex + 1}/${searchResultIndices.length})${isSelectionOnly ? ' (in selection)' : ''}`);\n    console.log(`Highlighting ${isSelectionOnly ? 'relative index ' + foundIndex : 'absolute index'} (Absolute: ${highlightStartIndex})`);\n}\n\nfunction replace() {\n    const textarea = document.getElementById('codes-textarea');\n    const searchTerm = document.getElementById('search-input').value;\n    const replaceTerm = document.getElementById('replace-input').value;\n    const selectionOnlyCheckbox = document.getElementById('search-selection-only');\n\n    if (!textarea || !searchTerm) {\n        updateSearchStatus(\"Enter a search term.\");\n        return;\n    }\n\n    // Must have a valid highlighted match from findNext\n    if (lastSearchIndex === -1 || textarea.selectionStart !== lastSearchIndex || textarea.selectionEnd !== lastSearchIndex + searchTerm.length) {\n         updateSearchStatus(\"Find match first.\");\n         // Attempt to find the first match if none is selected\n         findNext();\n         return;\n    }\n\n    const isSelectionOnly = selectionOnlyCheckbox?.checked;\n\n    // If selection only, double-check the match is within the bounds used for the last scan\n    if (isSelectionOnly) {\n        const storedSelStart = parseInt(textarea.dataset.lastSelectionScanStart || '-1', 10);\n        const storedSelEnd = parseInt(textarea.dataset.lastSelectionScanEnd || '-1', 10);\n        if (storedSelStart === -1 || lastSearchIndex < storedSelStart || (lastSearchIndex + searchTerm.length) > storedSelEnd) {\n            updateSearchStatus(\"Match is outside selection bounds. Find Next?\");\n            console.log(\"Replace cancelled: Highlight outside selection scan bounds.\");\n            // Reset highlight and let user find again\n            clearSearchHighlight();\n            lastSearchTerm = searchTerm; // Keep term\n            return;\n        }\n    }\n\n    // Perform the replacement\n    const currentText = textarea.value;\n    const before = currentText.substring(0, lastSearchIndex);\n    const after = currentText.substring(lastSearchIndex + searchTerm.length);\n    const lengthDifference = replaceTerm.length - searchTerm.length;\n\n    textarea.value = before + replaceTerm + after;\n    console.log(`Replaced \"${searchTerm}\" with \"${replaceTerm}\" at absolute index ${lastSearchIndex}`);\n\n    // --- State Update ---\n    if (isSelectionOnly) {\n        // Update the END boundary used for the scan to reflect the change\n        const storedSelEnd = parseInt(textarea.dataset.lastSelectionScanEnd || '-1', 10);\n        if (storedSelEnd !== -1) {\n            textarea.dataset.lastSelectionScanEnd = storedSelEnd + lengthDifference;\n            console.log(`Updated selection scan end boundary to: ${textarea.dataset.lastSelectionScanEnd}`);\n        }\n        // Clear the specific match state, forcing findNext to re-scan the selection\n        lastSearchIndex = -1;\n        searchResultIndices = [];\n        currentHighlightIndex = -1;\n    } else {\n        // Full text replace: Just clear everything, simplest approach\n        clearSearchHighlight();\n        lastSearchTerm = searchTerm; // Keep term\n    }\n\n    // Set cursor position after the replaced text\n    textarea.focus();\n    const newCursorPos = lastSearchIndex + replaceTerm.length; // lastSearchIndex is the START of the replaced section\n    textarea.setSelectionRange(newCursorPos, newCursorPos);\n\n    updateSearchStatus(`Replaced at ${lastSearchIndex}. Find Next?`);\n\n    // DO NOT automatically call findNext(). Let the user do it.\n}\n\nfunction replaceAll() {\n    const textarea = document.getElementById('codes-textarea');\n    const searchTerm = document.getElementById('search-input').value;\n    const replaceTerm = document.getElementById('replace-input').value;\n    const selectionOnlyCheckbox = document.getElementById('search-selection-only'); // <<< ADDED\n\n    if (!textarea || !searchTerm) {\n        updateSearchStatus(\"Enter search term.\");\n        return;\n    }\n\n    const isSelectionOnly = selectionOnlyCheckbox?.checked; // <<< ADDED\n    let replacementsMade = 0;\n    const originalText = textarea.value;\n    let newText = originalText;\n\n    // Escaping regex special characters in search term for safety\n    const escapedSearchTerm = searchTerm.replace(/[.*+?^${}()|[\\\\]\\\\\\\\]/g, '\\\\\\\\$&');\n    const regex = new RegExp(escapedSearchTerm, 'g'); // Global flag\n\n    // <<< ADDED: Logic for Selection Only >>>\n    if (isSelectionOnly) {\n        const startIndex = textarea.selectionStart;\n        const endIndex = textarea.selectionEnd;\n\n        if (startIndex === endIndex) {\n            updateSearchStatus(\"Select text first for 'Replace All in Selection'.\");\n            return;\n        }\n\n        const selectedText = originalText.substring(startIndex, endIndex);\n        let replacedSelectedText = selectedText.replace(regex, () => {\n            replacementsMade++;\n            return replaceTerm;\n        });\n\n        if (replacementsMade > 0) {\n            newText = originalText.substring(0, startIndex) + replacedSelectedText + originalText.substring(endIndex);\n             textarea.value = newText;\n             // Optionally re-select the modified text\n             textarea.focus();\n             textarea.setSelectionRange(startIndex, startIndex + replacedSelectedText.length);\n\n             console.log(`Replaced ${replacementsMade} occurrences within selection.`);\n             updateSearchStatus(`Replaced ${replacementsMade} in selection.`);\n             // Reset search state\n             lastSearchTerm = '';\n             clearSearchHighlight();\n        } else {\n             updateSearchStatus(`\"${searchTerm}\" not found in selection.`);\n             console.log(`\"${searchTerm}\" not found for Replace All within selection.`);\n        }\n\n    }\n    // <<< END ADDED >>>\n    else {\n        // Full text replace (existing logic)\n        newText = originalText.replace(regex, () => {\n            replacementsMade++;\n            return replaceTerm;\n        });\n\n        if (replacementsMade > 0) {\n            textarea.value = newText;\n            console.log(`Replaced ${replacementsMade} occurrences of \"${searchTerm}\" with \"${replaceTerm}\".`);\n            updateSearchStatus(`Replaced ${replacementsMade} occurrences.`);\n            // Reset search state as content has significantly changed\n            lastSearchTerm = '';\n            clearSearchHighlight();\n        } else {\n            updateSearchStatus(`\"${searchTerm}\" not found.`);\n            console.log(`\"${searchTerm}\" not found for Replace All.`);\n        }\n    }\n}\n\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"../../assets/ChatGPT Image Apr 2, 2025, 10_34_50 PM.png\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_2___ = new URL(\"./taskpane.js\", import.meta.url);\n// Module\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Contoso Task Pane Add-in</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"><\" + \"/script> <\" + \"script src=\\\"https://cdn.sheetjs.com/xlsx-0.20.1/package/dist/xlsx.full.min.js\\\"><\" + \"/script> <link rel=\\\"stylesheet noopener\\\" href=\\\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.1.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-Fabric\\\"> <section id=\\\"sideload-msg\\\" class=\\\"ms-welcome__main\\\"> <h2 class=\\\"ms-font-xl\\\">Please <a target=\\\"_blank\\\" rel=\\\"noopener\\\" href=\\\"https://learn.microsoft.com/office/dev/add-ins/testing/test-debug-office-add-ins#sideload-an-office-add-in-for-testing\\\">sideload</a> your add-in to see app body.</h2> </section> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main app-container\\\" style=\\\"display:none\\\"> <section id=\\\"chat-section\\\" class=\\\"chat-section\\\"> <div class=\\\"logo-container\\\"> <img src=\\\"\" + ___HTML_LOADER_IMPORT_1___ + \"\\\" alt=\\\"Projectify.AI Logo\\\" class=\\\"logo-image\\\"> </div> <div id=\\\"chat-log\\\" class=\\\"chat-log\\\"> <div id=\\\"welcome-message\\\" class=\\\"welcome-message\\\"> <h1>What would you like to model?</h1> </div> </div> <div class=\\\"chat-input-container\\\"> <textarea id=\\\"user-input\\\" class=\\\"ms-TextField-field\\\" rows=\\\"3\\\" placeholder=\\\"Type your request here...\\\"></textarea> <div class=\\\"chat-button-container\\\"> <button id=\\\"send\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Send</span> </button> <button id=\\\"reset-chat\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Reset Chat</span> </button> </div> <div id=\\\"loading-animation\\\" class=\\\"loading-animation\\\" style=\\\"display:none\\\"> <div class=\\\"spinner\\\"></div> <div class=\\\"loading-text\\\">Processing...</div> </div> </div> <div id=\\\"status-message\\\" class=\\\"status-message\\\"></div> <div id=\\\"error-display-area\\\" class=\\\"error-display-area\\\" style=\\\"display:none\\\"></div> </section> <section id=\\\"code-section\\\" class=\\\"code-section\\\"> <h2>Code Strings</h2> <div class=\\\"code-controls\\\"> <textarea id=\\\"codes-textarea\\\" class=\\\"codes-textarea\\\" rows=\\\"10\\\"></textarea> <div class=\\\"code-button-container\\\"> <button id=\\\"insert-and-run\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Run Codes</span> </button> <button id=\\\"edit-code-params-button\\\" class=\\\"ms-Button\\\" title=\\\"Edit Parameters of Selected Code\\\"> <i class=\\\"ms-Icon ms-Icon--Edit\\\"></i> Params </button> </div> </div> </section> </main> <div id=\\\"code-params-modal\\\" class=\\\"modal\\\"> <div class=\\\"modal-content\\\"> <span class=\\\"close-button\\\">&times;</span> <h3>Edit Code Parameters</h3> <div class=\\\"modal-find-replace\\\"> <input type=\\\"text\\\" id=\\\"modal-find-input\\\" placeholder=\\\"Find in values\\\"> <input type=\\\"text\\\" id=\\\"modal-replace-input\\\" placeholder=\\\"Replace with\\\"> <button id=\\\"modal-replace-all-button\\\" class=\\\"ms-Button ms-Button--small\\\">Replace All</button> <span id=\\\"modal-search-status\\\" class=\\\"modal-search-status-message\\\"></span> </div> <div id=\\\"code-params-modal-form\\\"> </div> <div class=\\\"modal-actions\\\"> <button id=\\\"apply-code-params-button\\\" class=\\\"ms-Button ms-Button--primary\\\">Apply Changes</button> <button id=\\\"cancel-code-params-button\\\" class=\\\"ms-Button\\\">Cancel</button> </div> </div> </div> <\" + \"script type=\\\"module\\\" src=\\\"\" + ___HTML_LOADER_IMPORT_2___ + \"\\\"><\" + \"/script> </body> </html>\";\n// Exports\nexport default code;"],"names":["Object","defineProperty","exports","value","handleApiError","utils_1","http_1","request_1","async","e","customMessage","url","Error","name","responseError","rawMessage","extractMessage","statusCode","response","status","message","mapHttpStatusError","PineconeConnectionError","err","ChatStream","convertKeys_1","constructor","stream","this","Symbol","asyncIterator","buffer","chunk","newlineIndex","toString","indexOf","line","slice","trim","startsWith","json","parsedJson","JSON","parse","convertedJson","convertKeysToCamelCase","console","debug","PineconeUnmappedHttpError","PineconeNotImplementedError","PineconeUnavailableError","PineconeMaxRetriesExceededError","PineconeInternalServerError","PineconeConflictError","PineconeNotFoundError","PineconeAuthorizationError","PineconeBadRequestError","base_1","CONFIG_HELP","BasePineconeError","failedRequest","super","body","join","retries","requestInfo","failedRequestInfo","getFetch","errors_1","config","fetchApi","g","fetch","PineconeConfigurationError","RetryOnServerFailure","asyncFn","maxRetries","calculateRetryDelay","attempt","baseDelay","maxDelay","jitterFactor","delay","Math","random","min","max","execute","args","isRetryError","error","mappedError","mapErrorIfNeeded","shouldStopRetrying","includes","delayTime","Promise","resolve","setTimeout","cachedSetTimeout","cachedClearTimeout","process","module","defaultSetTimout","defaultClearTimeout","runTimeout","fun","call","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","Array","arguments","i","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","PineconeUnableToResolveHostError","PineconeEnvironmentVarsNotSupportedError","PineconeUnexpectedResponseError","normalizeUrl","PineconeRequestError","urlMessage","context","init","method","cause","setPrototypeOf","captureStackTrace","debugLog","str","PINECONE_DEBUG","log","isBrowser","isEdge","EdgeRuntime","window","__createBinding","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","__exportStar","p","hasOwnProperty","PineconeArgumentError","config_1","validation_1","handling_1","object","isArray","map","item","entries","reduce","acc","key","toCamelCase","replace","_","letter","toUpperCase","text","messageJSON","__setModuleDefault","v","__importStar","mod","result","buildUserAgent","environment_1","packageInfo","userAgentParts","sourceTag","normalizeSourceTag","toLowerCase","queryParamsStringify","params","prefix","keys","querystringSingleKey","filter","part","keyPrefix","fullKey","multiValue","singleValue","encodeURIComponent","String","Set","from","Date","toISOString","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis","Function","obj","prop","scriptUrl","importScripts","location","document","currentScript","tagName","src","scripts","getElementsByTagName","test","b","baseURI","self","href","_regeneratorRuntime","t","r","n","a","iterator","c","u","toStringTag","define","wrap","Generator","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","__await","then","callInvokeWithMethodAndArg","done","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","__proto__","awrap","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","catch","delegateYield","_toConsumableArray","_arrayLikeToArray","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","_createForOfIteratorHelper","_n","F","asyncGeneratorStep","_asyncToGenerator","_next","_throw","validateCodeStrings","_x","_validateCodeStrings","_callee","inputCodeStrings","errors","tabLabels","rowValues","codeTypes","vvCodes","vrCodes","rrCodes","rvCodes","evCodes","erCodes","validCodes","fileContent","_iterator","_step","codeString","rowMatches","codeMatch","codeType","_i","_arr","code","_i2","_arr2","_code","_iterator2","_step2","_codeString","_codeMatch","_codeType","labelMatch","label","_rowMatches","_iterator3","_step3","_codeString2","driverMatches","_context","match","ok","split","t0","endsWith","parts","trimmedPart","afterAsterisk","substring","add","t1","size","has","rowContent","t2","driverValue","validateCodeStringsForRun","_x3","_validateCodeStringsForRun","_callee3","_iterator4","_step4","_i3","_arr3","_i4","_arr4","_code2","_iterator5","_step5","_codeString3","_codeMatch2","_codeType2","_rowMatches2","_iterator6","_step6","_codeString4","_context3","ownKeys","getOwnPropertySymbols","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","toPrimitive","_toPrimitive","_toPropertyKey","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","populateCodeCollection","inputText","codeCollection","paramsString","matchAll","rowNum","rowValue","paramName","paramValue","runCodes","_runCodes","_callee4","currentWorksheetName","assumptionTabs","_loop","finalResult","_context5","processedCodes","createdTabs","tabName","_context4","label1","Label1","Excel","_ref3","sheets","existingSheet","sourceCalcsWS","financialsSheet","newSheet","workbook","worksheets","load","sync","items","find","sheet","getItem","position","copy","worksheet","_x24","codeIndex","_ref4","codesWS","usedRange","currentWS","lastUsedRow","pasteRow","firstRow","lastRow","columnD","row","currentWorksheet","getUsedRange","rowCount","columnCount","getLastRow","rowIndex","getRange","warn","_ref5","_callee2","sourceRange","_context2","copyFrom","RangeCopyType","all","_x26","driverAndAssumptionInputs","_x25","tab","_x2","_x4","_driverAndAssumptionInputs","_callee10","calcsPasteRow","worksheetName","_context11","_ref7","_callee7","_context8","_x28","_ref8","_callee8","lastRowRange","_context9","_x29","_ref9","_callee9","determinedLastRow","columnSequence","codeValue","searchRow","searchRange","searchRangeAddress","checkRow","isGreen","cellB","targetRow","driverParam","labelParam","currentCheckRowForInserts","rowParam","rowItems","numNewRows","baseRowForThisG","insertStartAddress","sourceRowNum","targetRowNum","sourceRowRange","targetRowRange","yy","currentRowNum","splitArray","x","valueToWrite","colLetter","cellToWrite","numValue","_context10","format","fill","color","financialsdriver","insert","InsertShiftDirection","down","formats","formulas","Number","_x30","getLastUsedRow","_x5","_x6","_getLastUsedRow","_callee11","columnLetter","fullColumn","lastCell","lastRowIndex","_context12","getLastCell","adjustDriversJS","_x7","_x8","_adjustDriversJS","_callee12","START_ROW","DRIVER_CODE_COL","LOOKUP_COL","TARGET_COL","driverCodeRangeAddress","lookupRangeAddress","driverCodeRange","lookupRange","driverCodeValues","lookupValues","lookupMap","outputValues","foundCount","notFoundCount","driverCode","currentRow","foundRow","targetAddress","targetRangeAddress","targetRange","_context13","Map","set","replaceIndirectsJS","_x9","_x10","_replaceIndirectsJS","_callee13","originalFormulas","referencesToLookup","formulaData","formula","searchStartIndex","upperFormula","indirectStartIndex","parenStartIndex","parenEndIndex","argString","_step5$value","refString","data","_step6$value","_refString","_data","cellText","newFormulas","_i5","_formulaData","currentFormula","loopCount","MAX_LOOPS","_upperFormula","_indirectStartIndex","_parenStartIndex","_parenEndIndex","indString","_argString","directRef","_context14","originalFormula","index","range","rangeError","debugInfo","valueError","populateFinancialsJS","_x11","_x12","_x13","_populateFinancialsJS","_callee14","CALCS_FIRST_ROW","ASSUMPTION_CODE_COL","ASSUMPTION_LINK_COL_B","ASSUMPTION_LINK_COL_D","ASSUMPTION_MONTHS_START_COL","FINANCIALS_CODE_COLUMN","FINANCIALS_TARGET_COL_B","FINANCIALS_TARGET_COL_D","FINANCIALS_ANNUALS_START_COL","FINANCIALS_MONTHS_START_COL","ANNUALS_END_COL","MONTHS_END_COL","GREEN_COLOR","CURRENCY_FORMAT","_assumptionCodes$leng","assumptionCodeRange","financialsSearchCol","financialsUsedRange","financialsLastRow","fallbackRange","lastRowB","financialsCodeMap","financialsCodeRange","_i6","existingDataLinks","financialsLinkColRange","financialsFormulasB","_i7","tasks","assumptionCodes","_i8","_assumptionCodes$leng2","assumptionRow","linkFormulaB","linkFormulaD","linkFormulaMonths","_i9","_tasks","task","originalTargetRowsAsc","taskAdjustedRows","totalShift","_i10","_tasks2","_task","populateRow","cellD","cellAnnualsStart","cellMonthsStart","codePrefix","formulaJ","actualsRange","numCols","formulasArray","_i11","_tasks3","_task2","_populateRow","sourceAnnuals","destAnnuals","sourceMonths","destMonths","_context15","addressB","addressD","addressMonths","sort","uniqueRow","tasksAtThisRow","currentAdjustedRowForGroup","font","bold","italic","indentLevel","formulasR1C1","numberFormat","columnLetterToIndex","sumifsError","autoFill","AutoFillType","fillDefault","autofillError","t3","processAssumptionTabs","_x15","_processAssumptionTabs","_callee18","assumptionTabNames","FINANCIALS_SHEET_NAME","AUTOFILL_START_COLUMN","_iterator7","_step7","_loop2","_context20","_context19","_ref11","_callee17","updatedLastRow","finalLastRow","fillRange","_context18","deleteGreenRows","setColumnAFontWhite","clear","_x32","_ref10","_callee16","finSheet","_context17","_x31","_x16","_x17","_x18","_deleteGreenRows","_callee19","startRow","rowsToDelete","cellAddress","cell","_iterator8","_step8","_rowNum","newLastRow","_context21","delete","DeleteShiftDirection","up","_x19","_x20","_x21","_setColumnAFontWhite","_callee20","_context22","columnIndexToLetter","fromCharCode","charCodeAt","floor","hideColumnsAndNavigate","_x22","_hideColumnsAndNavigate","_callee22","ACTUALS_START_COL","ACTUALS_END_COL","targetSheetNames","_context24","_ref12","_callee21","hideAttempted","actualsEndIndex","actualsEndMinusOneCol","_iterator9","_step9","sheetName","_iterator10","_step10","_sheetName","_worksheet","_iterator11","_step11","_sheetName2","_worksheet2","_context23","rowHidden","columnHidden","stringify","activate","select","t4","t5","_x33","handleInsertWorksheetsFromBase64","_x23","_handleInsertWorksheetsFromBase","_callee26","base64String","sheetNames","_args28","_context28","_ref14","_callee25","_context27","insertWorksheetsFromBase64","_x35","loadedCodeStrings","performance","now","codeDatabase","API_KEYS","OPENAI_API_KEY","PINECONE_API_KEY","srcPaths","loadCodeDatabase","_loadCodeDatabase","lines","statusText","showError","initializeAPIKeys","_initializeAPIKeys","configResponse","configText","openaiKeyMatch","pineconeKeyMatch","PINECONE_INDEXES","codes","apiEndpoint","call2trainingdata","call2context","call1context","GPT4O","conversationHistory","saveConversationHistory","history","localStorage","setItem","loadConversationHistory","parsedHistory","callOpenAI","_callOpenAI","messages","model","temperature","errorData","_args4","headers","choices","content","createEmbedding","_createEmbedding","_callee5","input","embedding","loadPromptFromFile","_loadPromptFromFile","_callee6","promptKey","paths","_paths","path","_context6","getSystemPromptFromFile","_ref","prompt","processPrompt","_processPrompt","_ref2","userInput","systemPrompt","_ref2$history","responseContent","parsed","_context7","role","structureDatabasequeries","_structureDatabasequeries","clientprompt","systemStructurePrompt","queryStrings","results","queryString","queryResults","queryVectorDB","queryPrompt","similarityThreshold","indexName","numResults","query","trainingData","call2Context","call1Context","codeOptions","t6","t7","_queryVectorDB","_ref3$indexName","_ref3$numResults","_ref3$similarityThres","indexConfig","errorText","matches","matchesDescription","cleanMatches","vector","topK","includeMetadata","namespace","score","metadata","toFixed","extractTextFromJson","jsonInput","jsonData","safeJsonForPrompt","jsonString","handleFollowUpConversation","_handleFollowUpConversation","trainingdataCall2","followUpPrompt","MainPrompt","savePromptAnalysis","saveTrainingData","handleInitialConversation","handleConversation","_handleConversation","isFollowUp","_args11","_handleInitialConversation","Call2prompt","outputArray2","validationSystemPrompt","validationMainPrompt","validationResults","analysisData","clientRequest","mainPrompt","cleanText","validationCorrection","_validationCorrection","initialResponse","codeDescriptions","lastCallContext","responseString","correctionPrompt","correctedResponse","stack","showMessage","messageDiv","createElement","style","padding","margin","border","borderRadius","textContent","appBody","getElementById","insertBefore","firstChild","remove","errorDiv","setButtonLoading","isLoading","sendButton","loadingAnimation","disabled","display","lastResponse","isResponse","writeToExcel","_writeToExcel","_callee15","startCol","codeStrings","fullText","getSelectedRange","columnIndex","getRangeByIndexes","appendMessage","isUser","chatLog","welcomeMessage","className","messageContent","appendChild","scrollTop","scrollHeight","handleSend","_handleSend","dbResults","plainTextResults","enhancedPrompt","_context16","resetChat","innerHTML","id","welcomeTitle","getTabBlocks","tabBlocks","tabRegex","indices","exec","tag","start","end","blockText","insertSheetsAndRunCodes","_insertSheetsAndRunCodes","_callee23","codesTextarea","codesToRun","previousCodes","allCodeContentToProcess","runResult","_runResult","financialsSheetExists","validationErrors","errorMsg","worksheetsResponse","worksheetsArrayBuffer","worksheetsUint8Array","worksheetsBinaryString","worksheetsBase64String","currentTabs","previousTabs","previousTabMap","hasAnyChanges","currentTab","currentTag","currentText","previousText","_validationErrors","_errorMsg","codesResponse","codesArrayBuffer","codesUint8Array","codesBinaryString","_chunk","codesBase64String","collection","OfficeExtension","ErrorCodes","itemNotFound","application","calculationMode","CalculationMode","manual","arrayBuffer","Uint8Array","btoa","block","_ref13","automatic","Office","onReady","info","host","HostType","button","onclick","writeButton","resetButton","editParamsButton","paramsModal","paramsModalForm","closeModalButton","querySelector","applyParamsButton","cancelParamsButton","modalFindInput","modalReplaceInput","modalReplaceAllButton","modalSearchStatus","currentCodeStringRange","currentCodeStringType","modalSearchableElements","resetModalSearchState","querySelectorAll","updateModalSearchStatus","hideParamsModal","codeInfo","cursorPos","textBeforeCursor","textAfterCursor","lastOpenBracket","lastIndexOf","firstCloseBracketAfter","findCodeStringAroundCursor","selectionStart","_parseCodeParameters","paramRegex","lastIndex","parseCodeParameters","paramEntryDiv","inputElement","htmlFor","isLongValue","isLIParam","rows","dataset","paramKey","isOriginalLi","liContainer","originalLiKey","addButton","targetLiKey","event","sourceInput","newValueContainer","newInput","cloneNode","isAddedLi","removeButton","target","parentNode","populateParamsModal","paramValues","isOriginalLI","isAddedLI","addedInput","originalKey","updatedParams","_ref6","finalValue","newCodeStringContent","newCodeString","textBefore","textAfter","newCursorPos","focus","setSelectionRange","searchTerm","replaceTerm","replacementsMade","element","currentValue","escapedSearchTerm","newValue","RegExp","storedCodes","dynamicSuggestionsContainer","backgroundColor","maxHeight","overflowY","zIndex","nextSibling","updateSuggestionPosition","rect","getBoundingClientRect","width","offsetWidth","top","bottom","scrollY","left","scrollX","addEventListener","highlightedSuggestionIndex","currentSuggestions","updateHighlight","newIndex","suggestionItems","classList","scrollIntoView","oninput","isTrusted","cursorPosition","isInsideBrackets","searchStart","char","trimmedSearchTerm","suggestions","suggestionDiv","codeToAdd","insertionPosition","wasAdjusted","nextCloseBracket","nextNumbers","maxNumbers","regex","numberStr","number","parseInt","getMaxDriverNumbers","rowPart","existingNumberStr","pipePart","newNumber","replacement","textAfterInsertion","textBeforeFinal","tempSearchStart","searchTermToRemove","firstNewlineIndexInSuffix","remainderOfOriginalLine","subsequentLines","newText","newCursorPosition","onmouseover","showSuggestionsForTerm","onkeydown","preventDefault","click","ctrlKey","altKey","metaKey","contains","activeElement","URL"],"sourceRoot":""}