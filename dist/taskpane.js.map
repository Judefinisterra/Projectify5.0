{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/handling.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/assistant/chatStream.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/http.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/fetch.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/index.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/retries.js","webpack://excel-custom-functions-js/../../../node_modules/process/browser.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/config.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/normalizeUrl.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/request.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/base.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/debugLog.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/environment.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/index.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/convertKeys.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/utils.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/user-agent.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/utils/queryParamsStringify.js","webpack://excel-custom-functions-js/../../../node_modules/@pinecone-database/pinecone/dist/errors/validation.js","webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/webpack/runtime/global","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions-js/webpack/runtime/publicPath","webpack://excel-custom-functions-js/webpack/runtime/jsonp chunk loading","webpack://excel-custom-functions-js/./src/taskpane/Validation.js","webpack://excel-custom-functions-js/./src/taskpane/CodeCollection.js","webpack://excel-custom-functions-js/./src/taskpane/IndexWorksheet.js","webpack://excel-custom-functions-js/./src/taskpane/AIcalls.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.html"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleApiError = void 0;\nconst utils_1 = require(\"./utils\");\nconst http_1 = require(\"./http\");\nconst request_1 = require(\"./request\");\n/** @internal */\nconst handleApiError = async (e, customMessage, url) => {\n    if (e instanceof Error && e.name === 'ResponseError') {\n        const responseError = e;\n        const rawMessage = await (0, utils_1.extractMessage)(responseError);\n        const statusCode = responseError.response.status;\n        const message = customMessage\n            ? await customMessage(statusCode, rawMessage)\n            : rawMessage;\n        return (0, http_1.mapHttpStatusError)({\n            status: responseError.response.status,\n            url: responseError.response.url || url,\n            message: message,\n        });\n    }\n    else if (e instanceof request_1.PineconeConnectionError) {\n        // If we've already wrapped this error, just return it\n        return e;\n    }\n    else {\n        // There seem to be some situations where \"e instanceof Error\" is erroneously\n        // false (perhaps the custom errors emitted by cross-fetch do not extend Error?)\n        // but we can still cast it to an Error type because all we're going to do\n        // with it is store off a reference to whatever it is under the \"cause\"\n        const err = e;\n        return new request_1.PineconeConnectionError(err);\n    }\n};\nexports.handleApiError = handleApiError;\n//# sourceMappingURL=handling.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChatStream = void 0;\nconst convertKeys_1 = require(\"../utils/convertKeys\");\n/**\n * Implements an async iterable that processes the readable stream of an assistant chat response.\n *\n * This class expects each chunk of data in the stream to begin with `data:` and be followed by a valid chunk of JSON.\n * If a chunk contains malformed JSON, it is skipped, and a debug message is logged.\n *\n * @template Item - The type of items yielded by the iterable.\n */\nclass ChatStream {\n    constructor(stream) {\n        this.stream = stream;\n    }\n    async *[Symbol.asyncIterator]() {\n        let buffer = '';\n        for await (const chunk of this.stream) {\n            buffer += chunk.toString();\n            let newlineIndex;\n            while ((newlineIndex = buffer.indexOf('\\n')) !== -1) {\n                const line = buffer.slice(0, newlineIndex).trim();\n                buffer = buffer.slice(newlineIndex + 1);\n                // each chunk of json should begin with 'data:'\n                if (line && line.startsWith('data:')) {\n                    const json = line.slice(5).trim();\n                    try {\n                        const parsedJson = JSON.parse(json);\n                        const convertedJson = (0, convertKeys_1.convertKeysToCamelCase)(parsedJson);\n                        yield convertedJson;\n                    }\n                    catch (err) {\n                        console.debug(`Skipping malformed JSON:${line}`);\n                        continue;\n                    }\n                }\n            }\n        }\n        if (buffer.trim()) {\n            try {\n                const parsedJson = JSON.parse(buffer);\n                const convertedJson = (0, convertKeys_1.convertKeysToCamelCase)(parsedJson);\n                yield convertedJson;\n            }\n            catch (err) {\n                console.debug(`Skipping malformed JSON:${buffer}`);\n            }\n        }\n    }\n}\nexports.ChatStream = ChatStream;\n//# sourceMappingURL=chatStream.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mapHttpStatusError = exports.PineconeUnmappedHttpError = exports.PineconeNotImplementedError = exports.PineconeUnavailableError = exports.PineconeMaxRetriesExceededError = exports.PineconeInternalServerError = exports.PineconeConflictError = exports.PineconeNotFoundError = exports.PineconeAuthorizationError = exports.PineconeBadRequestError = void 0;\nconst base_1 = require(\"./base\");\nconst CONFIG_HELP = `You can find the configuration values for your project in the Pinecone developer console at https://app.pinecone.io`;\n/** This error is thrown when API requests return with status 400. Typically this is due to some aspect of the request being incorrect or invalid.\n *\n * Some examples when this error could occur:\n * - While attempting to create an index with no available quota in your project.\n * - While upserting records that do not match the `dimension` of your index\n * - While attempting to create an index using an invalid name (\"!@#$%\")\n */\nclass PineconeBadRequestError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { message } = failedRequest;\n        super(message);\n        this.name = 'PineconeBadRequestError';\n    }\n}\nexports.PineconeBadRequestError = PineconeBadRequestError;\n/**\n * This error occurs when API requests are attempted using invalid configurations such as a mispelled or revoked API key.\n *\n * Log in to https://app.pinecone.io to verify you have configured the { @link Pinecone }\n * client using the correct values.\n */\nclass PineconeAuthorizationError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url } = failedRequest;\n        if (url) {\n            super(`The API key you provided was rejected while calling ${url}. Please check your configuration values and try again. ${CONFIG_HELP}`);\n        }\n        else {\n            super(`The API key you provided was rejected. Please check your configuration values and try again. ${CONFIG_HELP}`);\n        }\n        this.name = 'PineconeAuthorizationError';\n    }\n}\nexports.PineconeAuthorizationError = PineconeAuthorizationError;\n/**\n * This error is thrown when interacting with a resource such as an index or collection\n * that cannot be found.\n */\nclass PineconeNotFoundError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url } = failedRequest;\n        if (url) {\n            super(`A call to ${url} returned HTTP status 404.`);\n        }\n        else {\n            super('The requested resource could not be found.');\n        }\n        this.name = 'PineconeNotFoundError';\n    }\n}\nexports.PineconeNotFoundError = PineconeNotFoundError;\n/**\n * This error is thrown when attempting to create a resource such as an index or\n * collection with a name that is already in use.\n * */\nclass PineconeConflictError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, message } = failedRequest;\n        if (url) {\n            super(`A call to ${url} returned HTTP status 409. ${message ? message : ''}`);\n        }\n        else {\n            super('The resource you are attempting to create already exists.');\n        }\n        this.name = 'PineconeConflictError';\n    }\n}\nexports.PineconeConflictError = PineconeConflictError;\n/**\n * This error indicates API responses are returning with status 500 and\n * something is wrong with Pinecone. Check the [status page](https://status.pinecone.io/)\n * for information about current or recent outages.\n *\n * @see [Pinecone's status page](https://status.pinecone.io/)\n */\nclass PineconeInternalServerError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, body, status } = failedRequest;\n        const intro = url\n            ? `An internal server error occurred while calling the ${url} endpoint.`\n            : '';\n        const help = `To see overall service health and learn whether this seems like a large-scale problem or one specific to your request, please go to https://status.pinecone.io/ to view our status page. If you believe the error reflects a problem with this client, please file a bug report in the github issue tracker at https://github.com/pinecone-io/pinecone-ts-client`;\n        const statusMessage = status ? `Status Code: ${status}.` : '';\n        const bodyMessage = body ? `Body: ${body}` : '';\n        super([intro, statusMessage, help, bodyMessage].join(' ').trim());\n        this.name = 'PineconeInternalServerError';\n    }\n}\nexports.PineconeInternalServerError = PineconeInternalServerError;\n/* We can choose to throw this error when we want to limit requests to the server. When instantiated, pass the\n number of retries the user has made already. */\nclass PineconeMaxRetriesExceededError extends base_1.BasePineconeError {\n    constructor(retries) {\n        const intro = `You have exceeded the max configured retries (${retries}). `;\n        const help = 'Increase the maxRetries field in the RetryOptions object to retry more times. If you believe the' +\n            ' error reflects a problem with this client, please file a bug report in the github issue tracker at https://github.com/pinecone-io/pinecone-ts-client';\n        super([intro, help].join(' ').trim());\n        this.name = 'PineconeMaxRetriesExceededError';\n    }\n}\nexports.PineconeMaxRetriesExceededError = PineconeMaxRetriesExceededError;\n/**\n * This error indicates API responses are returning with status 503 and\n * Pinecone itself is down. Check the [status page](https://status.pinecone.io/)\n * for information about current or recent outages.\n *\n * The difference between this error (503) and a PineconeInternalServerError (500) is that this error does NOT indicate\n * that the server is _unable_ to process the request, just that the server will not process the request.\n *\n * @see [Pinecone's status page](https://status.pinecone.io/)\n */\nclass PineconeUnavailableError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, body, status } = failedRequest;\n        const intro = url\n            ? `The Pinecone service (${url}) is temporarily unavailable.`\n            : '';\n        const statusMessage = status ? `Status Code: ${status}.` : '';\n        const help = `To see overall service health and learn whether this seems like a large-scale problem or one specific to your request, please go to https://status.pinecone.io/ to view our status page. If you believe the error reflects a problem with this client, please file a bug report in the github issue tracker at https://github.com/pinecone-io/pinecone-ts-client`;\n        const bodyMessage = body ? `Body: ${body}` : '';\n        super([intro, statusMessage, help, bodyMessage].join(' ').trim());\n        this.name = 'PineconeUnavailableError';\n    }\n}\nexports.PineconeUnavailableError = PineconeUnavailableError;\n/**\n * This error is thrown when you are attempting to use a feature that is\n * not implemented or unavailable to you on your current plan. Free indexes\n * only support a subset of Pinecone's capabilities, and if you are seeing\n * these exceptions then you should consult the\n * [pricing page](https://www.pinecone.io/pricing/) to see whether upgrading\n * makes sense for your use case.\n */\nclass PineconeNotImplementedError extends base_1.BasePineconeError {\n    constructor(requestInfo) {\n        const { url, message } = requestInfo;\n        if (url) {\n            super(`A call to ${url} returned HTTP status 501. ${message ? message : ''}`);\n        }\n        else {\n            super();\n        }\n        this.name = 'PineconeNotImplementedError';\n    }\n}\nexports.PineconeNotImplementedError = PineconeNotImplementedError;\n/**\n * This catch-all exception is thrown when a request error that is not\n * specifically mapped to another exception is thrown.\n */\nclass PineconeUnmappedHttpError extends base_1.BasePineconeError {\n    constructor(failedRequest) {\n        const { url, status, body, message } = failedRequest;\n        const intro = url\n            ? `An unexpected error occured while calling the ${url} endpoint. `\n            : '';\n        const statusMsg = status ? `Status: ${status}. ` : '';\n        const bodyMsg = body ? `Body: ${body}` : '';\n        super([intro, message, statusMsg, bodyMsg].join(' ').trim());\n        this.name = 'PineconeUnmappedHttpError';\n    }\n}\nexports.PineconeUnmappedHttpError = PineconeUnmappedHttpError;\n/** @internal */\nconst mapHttpStatusError = (failedRequestInfo) => {\n    switch (failedRequestInfo.status) {\n        case 400:\n            return new PineconeBadRequestError(failedRequestInfo);\n        case 401:\n            return new PineconeAuthorizationError(failedRequestInfo);\n        case 403:\n            return new PineconeBadRequestError(failedRequestInfo);\n        case 404:\n            return new PineconeNotFoundError(failedRequestInfo);\n        case 409:\n            return new PineconeConflictError(failedRequestInfo);\n        case 500:\n            return new PineconeInternalServerError(failedRequestInfo);\n        case 501:\n            return new PineconeNotImplementedError(failedRequestInfo);\n        case 503:\n            return new PineconeUnavailableError(failedRequestInfo);\n        default:\n            throw new PineconeUnmappedHttpError(failedRequestInfo);\n    }\n};\nexports.mapHttpStatusError = mapHttpStatusError;\n//# sourceMappingURL=http.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFetch = void 0;\nconst errors_1 = require(\"../errors\");\nconst getFetch = (config) => {\n    if (config.fetchApi) {\n        // User-provided fetch implementation, if any, takes precedence.\n        return config.fetchApi;\n    }\n    else if (global.fetch) {\n        // If a fetch implementation is present in the global scope (will work with native fetch in Node18+, Edge runtimes,\n        // etc.), use that. This should prevent confusing failures in\n        // Next.js projects where @vercel/fetch is mandated and\n        // other implementations are stubbed out.\n        return global.fetch;\n    }\n    else {\n        // If no fetch implementation is found, throw an error.\n        throw new errors_1.PineconeConfigurationError('No global or user-provided fetch implementations found. Please supply a fetch implementation.');\n    }\n};\nexports.getFetch = getFetch;\n//# sourceMappingURL=fetch.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChatStream = exports.RetryOnServerFailure = exports.convertKeysToCamelCase = exports.getFetch = exports.buildUserAgent = exports.queryParamsStringify = exports.normalizeUrl = exports.debugLog = void 0;\nconst debugLog_1 = require(\"./debugLog\");\nObject.defineProperty(exports, \"debugLog\", { enumerable: true, get: function () { return debugLog_1.debugLog; } });\nconst normalizeUrl_1 = require(\"./normalizeUrl\");\nObject.defineProperty(exports, \"normalizeUrl\", { enumerable: true, get: function () { return normalizeUrl_1.normalizeUrl; } });\nconst queryParamsStringify_1 = require(\"./queryParamsStringify\");\nObject.defineProperty(exports, \"queryParamsStringify\", { enumerable: true, get: function () { return queryParamsStringify_1.queryParamsStringify; } });\nconst user_agent_1 = require(\"./user-agent\");\nObject.defineProperty(exports, \"buildUserAgent\", { enumerable: true, get: function () { return user_agent_1.buildUserAgent; } });\nconst fetch_1 = require(\"./fetch\");\nObject.defineProperty(exports, \"getFetch\", { enumerable: true, get: function () { return fetch_1.getFetch; } });\nconst retries_1 = require(\"./retries\");\nObject.defineProperty(exports, \"RetryOnServerFailure\", { enumerable: true, get: function () { return retries_1.RetryOnServerFailure; } });\nconst chatStream_1 = require(\"../assistant/chatStream\");\nObject.defineProperty(exports, \"ChatStream\", { enumerable: true, get: function () { return chatStream_1.ChatStream; } });\nconst convertKeys_1 = require(\"./convertKeys\");\nObject.defineProperty(exports, \"convertKeysToCamelCase\", { enumerable: true, get: function () { return convertKeys_1.convertKeysToCamelCase; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RetryOnServerFailure = void 0;\nconst errors_1 = require(\"../errors\");\n// TODO: Parameterize this class to allow for custom error handling (e.g. only retry 400 errors on Chat endpoint,\n//  but not globally\n/* Retry asynchronous operations.\n *\n * @param maxRetries - The maximum number of retries to attempt.\n * @param asyncFn - The asynchronous function to retry.\n */\nclass RetryOnServerFailure {\n    constructor(asyncFn, maxRetries) {\n        /*\n         * Calculate the delay time for retrying an operation.\n         *\n         * @param attempt: The # of times the operation has been attempted.\n         * @param baseDelay: The base delay time in milliseconds.\n         * @param maxDelay: The maximum delay time in milliseconds.\n         * @param jitterFactor: The magnitude of jitter relative to the delay.\n         */\n        this.calculateRetryDelay = (attempt, baseDelay = 200, maxDelay = 20000, jitterFactor = 0.25) => {\n            let delay = baseDelay * 2 ** attempt; // Exponential (baseDelay * 2^attempt)\n            // Apply jitter as a random percentage of the original delay; e.g.: if `jitterFactor` = 0.25 and `baseDelay` = 1000,\n            // then `jitter` is 25% of `baseDelay`\n            const jitter = delay * jitterFactor * (Math.random() - 0.5);\n            delay += jitter;\n            // Ensure delay is not negative or greater than maxDelay\n            return Math.min(maxDelay, Math.max(0, delay));\n        };\n        if (maxRetries) {\n            this.maxRetries = maxRetries;\n        }\n        else {\n            this.maxRetries = 3;\n        }\n        if (this.maxRetries > 10) {\n            throw new Error('Max retries cannot exceed 10');\n        }\n        this.asyncFn = asyncFn;\n    }\n    async execute(...args) {\n        if (this.maxRetries < 1) {\n            return this.asyncFn(...args);\n        }\n        for (let attempt = 0; attempt < this.maxRetries; attempt++) {\n            try {\n                const response = await this.asyncFn(...args);\n                // Return immediately if the response is not a retryable error\n                if (!this.isRetryError(response)) {\n                    return response;\n                }\n                throw response; // Will catch this in next line\n            }\n            catch (error) {\n                const mappedError = this.mapErrorIfNeeded(error);\n                // If the error is not retryable, throw it immediately\n                if (this.shouldStopRetrying(mappedError)) {\n                    throw mappedError;\n                }\n                // On the last retry, throw a MaxRetriesExceededError\n                if (attempt === this.maxRetries - 1) {\n                    throw new errors_1.PineconeMaxRetriesExceededError(this.maxRetries);\n                }\n                // Wait before retrying\n                await this.delay(attempt + 1);\n            }\n        }\n        // This fallback is unnecessary, but included for type safety\n        throw new errors_1.PineconeMaxRetriesExceededError(this.maxRetries);\n    }\n    isRetryError(response) {\n        if (!response) {\n            return false;\n        }\n        if (response) {\n            if (response.name &&\n                ['PineconeUnavailableError', 'PineconeInternalServerError'].includes(response.name)) {\n                return true;\n            }\n            if (response.status && response.status >= 500) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async delay(attempt) {\n        const delayTime = this.calculateRetryDelay(attempt);\n        return new Promise((resolve) => setTimeout(resolve, delayTime));\n    }\n    mapErrorIfNeeded(error) {\n        if (error?.status) {\n            return (0, errors_1.mapHttpStatusError)(error);\n        }\n        return error; // Return original error if no mapping is needed\n    }\n    shouldStopRetrying(error) {\n        if (error.status) {\n            return error.status < 500;\n        }\n        if (error.name) {\n            return (error.name !== 'PineconeUnavailableError' &&\n                error.name !== 'PineconeInternalServerError');\n        }\n        return true;\n    }\n}\nexports.RetryOnServerFailure = RetryOnServerFailure;\n//# sourceMappingURL=retries.js.map","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PineconeUnableToResolveHostError = exports.PineconeEnvironmentVarsNotSupportedError = exports.PineconeUnexpectedResponseError = exports.PineconeConfigurationError = void 0;\nconst base_1 = require(\"./base\");\nconst CONFIG_HELP = `You can find the configuration values for your project in the Pinecone developer console at https://app.pinecone.io.`;\n/**\n * This exception indicates there is a problem with the configuration values\n * you have provided to the client. The error message should contain additional\n * context about what you are missing.\n *\n * @see {@link Pinecone} for information about initializing the client.\n */\nclass PineconeConfigurationError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(`${message} ${CONFIG_HELP}`);\n        this.name = 'PineconeConfigurationError';\n    }\n}\nexports.PineconeConfigurationError = PineconeConfigurationError;\n/**\n * This exception indicates an API call that returned a response that was\n * unable to be parsed or that did not include expected fields. It's not\n * expected to ever occur.\n *\n * If you encounter this error, please [file an issue](https://github.com/pinecone-io/pinecone-ts-client/issues) so we can investigate.\n */\nclass PineconeUnexpectedResponseError extends base_1.BasePineconeError {\n    constructor(url, status, body, message) {\n        super(`Unexpected response while calling ${url}. ${message ? message + ' ' : ''}Status: ${status}. Body: ${body}`);\n        this.name = 'PineconeUnexpectedResponseError';\n    }\n}\nexports.PineconeUnexpectedResponseError = PineconeUnexpectedResponseError;\n/**\n * This error occurs when the client tries to read environment variables in\n * an environment that does not have access to the Node.js global `process.env`.\n *\n * If you are seeing this error, you will need to configure the client by passing\n * configuration values to the `Pinecone` constructor.\n *\n * ```typescript\n * import { Pinecone } from '@pinecone-database/pinecone';\n *\n * const pinecone = new Pinecone({\n *    apiKey: 'YOUR_API_KEY',\n * })\n * ```\n *\n * @see Instructions for configuring { @link Pinecone }\n */\nclass PineconeEnvironmentVarsNotSupportedError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(message);\n        this.name = 'PineconeEnvironmentVarsNotSupportedError';\n    }\n}\nexports.PineconeEnvironmentVarsNotSupportedError = PineconeEnvironmentVarsNotSupportedError;\n/**\n * This error occurs when the client is unable to resolve the database host for a given\n * index. This is unexpected to occur unless there is a problem with the Pinecone service.\n *\n * If you encounter this error, please [file an issue](https://github.com/pinecone-io/pinecone-ts-client/issues) so we can investigate.\n */\nclass PineconeUnableToResolveHostError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(message);\n        this.name = 'PineconeUnableToResolveHostError';\n    }\n}\nexports.PineconeUnableToResolveHostError = PineconeUnableToResolveHostError;\n//# sourceMappingURL=config.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeUrl = void 0;\nfunction normalizeUrl(url) {\n    if (!url || url.trim().length === 0) {\n        return;\n    }\n    if (!url.startsWith('http://') && !url.startsWith('https://')) {\n        return 'https://' + url;\n    }\n    return url;\n}\nexports.normalizeUrl = normalizeUrl;\n//# sourceMappingURL=normalizeUrl.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PineconeRequestError = exports.PineconeConnectionError = void 0;\nconst base_1 = require(\"./base\");\n/**\n * This error is thrown when the client attempts to make a\n * request and never receives any response.\n *\n * This could be due to:\n * - Network problems which prevent the request from being completed.\n * - An outage of Pinecone's APIs. See [Pinecone's status page](https://status.pinecone.io/) to find out whether there is an ongoing incident.\n *\n * The `cause` property will contain a reference to the underlying error. Inspect its value to find out more about the root cause of the error.\n * ```\n * import { Pinecone } from '@pinecone-database/pinecone';\n *\n * const p = new Pinecone({ apiKey: 'invalid-api-key-value' })\n *\n * try {\n *  await p.listIndexes();\n * } catch (e) {\n *  console.log(e.name); // PineconeConnectionError\n *  console.log(e.cause); // Error [FetchError]: The request failed and the interceptors did not return an alternative response\n *  console.log(e.cause.cause); // TypeError: fetch failed\n *  console.log(e.cause.cause.cause); // Error: getaddrinfo ENOTFOUND controller.wrong-environment.pinecone.io\n * }\n * ```\n *\n * @see [Pinecone's status page](https://status.pinecone.io/)\n * */\nclass PineconeConnectionError extends base_1.BasePineconeError {\n    constructor(e, url) {\n        let urlMessage = '';\n        if (url) {\n            urlMessage = ` while calling ${url}`;\n        }\n        super(`Request failed to reach Pinecone${urlMessage}. This can occur for reasons such as network problems that prevent the request from being completed, or a Pinecone API outage. Check your network connection, and visit https://status.pinecone.io/ to see whether any outages are ongoing.`, e);\n        this.name = 'PineconeConnectionError';\n    }\n}\nexports.PineconeConnectionError = PineconeConnectionError;\n/**\n * This error is thrown any time a request to the Pinecone API fails.\n *\n * The `cause` property will contain a reference to the underlying error. Inspect its value to find out more about the root cause.\n */\nclass PineconeRequestError extends base_1.BasePineconeError {\n    constructor(context) {\n        if (context.response) {\n            super(`Request failed during a call to ${context.init.method} ${context.url} with status ${context.response.status}`, context.error);\n        }\n        else {\n            super(`Request failed during a call to ${context.init.method} ${context.url}`, context.error);\n        }\n    }\n}\nexports.PineconeRequestError = PineconeRequestError;\n//# sourceMappingURL=request.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BasePineconeError = void 0;\nclass BasePineconeError extends Error {\n    constructor(message, cause) {\n        super(message);\n        // Set the prototype explicitly to ensure instanceof works correctly\n        Object.setPrototypeOf(this, new.target.prototype);\n        // Maintain a proper stack trace in V8 environments (Chrome and Node.js)\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, new.target);\n        }\n        this.name = this.constructor.name;\n        this.cause = cause;\n    }\n}\nexports.BasePineconeError = BasePineconeError;\n//# sourceMappingURL=base.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.debugLog = void 0;\nconst debugLog = (str) => {\n    if (typeof process !== 'undefined' &&\n        process &&\n        process.env &&\n        process.env.PINECONE_DEBUG) {\n        console.log(str);\n    }\n};\nexports.debugLog = debugLog;\n//# sourceMappingURL=debugLog.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isBrowser = exports.isEdge = void 0;\nconst isEdge = () => {\n    // This is the recommended way to detect\n    // running in the Edge Runtime according\n    // to Vercel docs.\n    return typeof EdgeRuntime === 'string';\n};\nexports.isEdge = isEdge;\nconst isBrowser = () => {\n    return typeof window !== 'undefined';\n};\nexports.isBrowser = isBrowser;\n//# sourceMappingURL=environment.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleApiError = exports.extractMessage = exports.PineconeArgumentError = exports.BasePineconeError = exports.PineconeRequestError = exports.PineconeConnectionError = exports.PineconeUnableToResolveHostError = exports.PineconeEnvironmentVarsNotSupportedError = exports.PineconeUnexpectedResponseError = exports.PineconeConfigurationError = void 0;\nvar config_1 = require(\"./config\");\nObject.defineProperty(exports, \"PineconeConfigurationError\", { enumerable: true, get: function () { return config_1.PineconeConfigurationError; } });\nObject.defineProperty(exports, \"PineconeUnexpectedResponseError\", { enumerable: true, get: function () { return config_1.PineconeUnexpectedResponseError; } });\nObject.defineProperty(exports, \"PineconeEnvironmentVarsNotSupportedError\", { enumerable: true, get: function () { return config_1.PineconeEnvironmentVarsNotSupportedError; } });\nObject.defineProperty(exports, \"PineconeUnableToResolveHostError\", { enumerable: true, get: function () { return config_1.PineconeUnableToResolveHostError; } });\n__exportStar(require(\"./http\"), exports);\nvar request_1 = require(\"./request\");\nObject.defineProperty(exports, \"PineconeConnectionError\", { enumerable: true, get: function () { return request_1.PineconeConnectionError; } });\nObject.defineProperty(exports, \"PineconeRequestError\", { enumerable: true, get: function () { return request_1.PineconeRequestError; } });\nvar base_1 = require(\"./base\");\nObject.defineProperty(exports, \"BasePineconeError\", { enumerable: true, get: function () { return base_1.BasePineconeError; } });\nvar validation_1 = require(\"./validation\");\nObject.defineProperty(exports, \"PineconeArgumentError\", { enumerable: true, get: function () { return validation_1.PineconeArgumentError; } });\nvar utils_1 = require(\"./utils\");\nObject.defineProperty(exports, \"extractMessage\", { enumerable: true, get: function () { return utils_1.extractMessage; } });\nvar handling_1 = require(\"./handling\");\nObject.defineProperty(exports, \"handleApiError\", { enumerable: true, get: function () { return handling_1.handleApiError; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertKeysToCamelCase = void 0;\n// converts keys of a json payload from snake_case to camelCase\nconst convertKeysToCamelCase = (object) => {\n    if (Array.isArray(object)) {\n        return object.map((item) => (0, exports.convertKeysToCamelCase)(item));\n    }\n    else if (object !== null && typeof object === 'object') {\n        return Object.entries(object).reduce((acc, [key, value]) => {\n            const camelKey = toCamelCase(key);\n            acc[camelKey] = (0, exports.convertKeysToCamelCase)(value);\n            return acc;\n        }, {});\n    }\n    return object; // return primitives as is\n};\nexports.convertKeysToCamelCase = convertKeysToCamelCase;\n// converts snake-case keys to camelCase\nconst toCamelCase = (str) => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n//# sourceMappingURL=convertKeys.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extractMessage = void 0;\n/** @internal */\nconst extractMessage = async (error) => {\n    let message = await error.response.text();\n    // Error response is sometimes the raw message, sometimes it's JSON\n    // so we will try to parse out the actual message text, but\n    // we wrap it in a try to avoid crashing in a way that obscures\n    // the actual error if the response format changes in the future.\n    try {\n        const messageJSON = JSON.parse(message);\n        if (messageJSON.message) {\n            message = messageJSON.message;\n        }\n    }\n    catch (e) {\n        // noop\n    }\n    return message;\n};\nexports.extractMessage = extractMessage;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.buildUserAgent = void 0;\nconst environment_1 = require(\"./environment\");\nconst packageInfo = __importStar(require(\"../version.json\"));\nconst buildUserAgent = (config) => {\n    // We always want to include the package name and version\n    // along with the langauge name to help distinguish these\n    // requests from those emitted by other clients\n    const userAgentParts = [\n        `${packageInfo.name} v${packageInfo.version}`,\n        'lang=typescript',\n    ];\n    if ((0, environment_1.isEdge)()) {\n        userAgentParts.push('Edge Runtime');\n    }\n    // If available, capture information about the Node.js version\n    if (typeof process !== 'undefined' && process && process.version) {\n        userAgentParts.push(`node ${process.version}`);\n    }\n    if (config.sourceTag) {\n        userAgentParts.push(`source_tag=${normalizeSourceTag(config.sourceTag)}`);\n    }\n    return userAgentParts.join('; ');\n};\nexports.buildUserAgent = buildUserAgent;\nconst normalizeSourceTag = (sourceTag) => {\n    if (!sourceTag) {\n        return;\n    }\n    /**\n     * normalize sourceTag\n     * 1. Lowercase\n     * 2. Limit charset to [a-z0-9_ :]\n     * 3. Trim left/right spaces\n     * 4. Condense multiple spaces to one, and replace with underscore\n     */\n    return sourceTag\n        .toLowerCase()\n        .replace(/[^a-z0-9_ :]/g, '')\n        .trim()\n        .replace(/[ ]+/g, '_');\n};\n//# sourceMappingURL=user-agent.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.queryParamsStringify = void 0;\n// Everything in this file is lifted from the generated openapi runtime.\n// I need to create a small modification of the generated queryParamStringify\n// function in order to fix an issue with array params.\n//\n// See https://github.com/pinecone-io/pinecone-ts-client/pull/74\nfunction queryParamsStringify(params, prefix = '') {\n    return Object.keys(params)\n        .map((key) => querystringSingleKey(key, params[key], prefix))\n        .filter((part) => part.length > 0)\n        .join('&');\n}\nexports.queryParamsStringify = queryParamsStringify;\nfunction querystringSingleKey(key, value, keyPrefix = '') {\n    const fullKey = keyPrefix + (keyPrefix.length ? `[${key}]` : key);\n    // This is a one line change from the default querystring implementation. Checking\n    // with `Array.isArray` instead of `value instanceof Array` allows us to get the\n    // the correct behavior when stringifying array params.\n    if (Array.isArray(value)) {\n        const multiValue = value\n            .map((singleValue) => encodeURIComponent(String(singleValue)))\n            .join(`&${encodeURIComponent(fullKey)}=`);\n        return `${encodeURIComponent(fullKey)}=${multiValue}`;\n    }\n    if (value instanceof Set) {\n        const valueAsArray = Array.from(value);\n        return querystringSingleKey(key, valueAsArray, keyPrefix);\n    }\n    if (value instanceof Date) {\n        return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;\n    }\n    if (value instanceof Object) {\n        return queryParamsStringify(value, fullKey);\n    }\n    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;\n}\n//# sourceMappingURL=queryParamsStringify.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PineconeArgumentError = void 0;\nconst base_1 = require(\"./base\");\n/**\n * This error is thrown when arguments passed to a Pinecone\n * client method fail a runtime validation.\n */\nclass PineconeArgumentError extends base_1.BasePineconeError {\n    constructor(message) {\n        super(`${message}`);\n        this.name = 'PineconeArgumentError';\n    }\n}\nexports.PineconeArgumentError = PineconeArgumentError;\n//# sourceMappingURL=validation.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// Remove all these imports as they're no longer needed\r\n// import { promises as fs } from 'fs';\r\n// import { join } from 'path';\r\n// import { fileURLToPath } from 'url';\r\n// import { dirname } from 'path';\r\n\r\nexport async function validateCodeStrings(inputCodeStrings) {\r\n    const errors = [];\r\n    const tabLabels = new Set();\r\n    const rowValues = new Set();\r\n    const codeTypes = new Set();\r\n    \r\n    // Clean up input strings by removing anything outside angle brackets\r\n    inputCodeStrings = inputCodeStrings.map(str => {\r\n        const match = str.match(/<[^>]+>/);\r\n        return match ? match[0] : str;\r\n    });\r\n\r\n    console.log(\"CleanedInput Code Strings:\", inputCodeStrings);\r\n\r\n    // Track codes by their suffixes\r\n    const vvCodes = new Set();  // codes ending in -VV\r\n    const vrCodes = new Set();  // codes ending in -VR\r\n    const rrCodes = new Set();  // codes ending in -RR\r\n    const rvCodes = new Set();  // codes ending in -RV\r\n    const evCodes = new Set();  // codes ending in -EV\r\n    const erCodes = new Set();  // codes ending in -ER\r\n\r\n    // Load valid codes from the correct location\r\n    let validCodes = new Set();\r\n    try {\r\n        const response = await fetch('../prompts/Codes.txt');\r\n        if (!response.ok) {\r\n            throw new Error('Failed to load Codes.txt file');\r\n        }\r\n        const fileContent = await response.text();\r\n        validCodes = new Set(fileContent.split('\\n')\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0));\r\n    } catch (error) {\r\n        errors.push(`Error reading Codes.txt file: ${error.message}`);\r\n        return errors;\r\n    }\r\n\r\n    // First pass: collect all row values, code types, and suffixes\r\n    for (const codeString of inputCodeStrings) {\r\n        if (!codeString.startsWith('<') || !codeString.endsWith('>')) {\r\n            errors.push(`Invalid code string format: ${codeString}`);\r\n            continue;\r\n        }\r\n        // Extract and store row IDs\r\n        if (codeString.startsWith('<BR>')) {\r\n            // Skip extraction for BR tags\r\n            continue;\r\n        }\r\n\r\n        const rowMatches = codeString.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/)[1];\r\n                // Handle spaces before/after the pipe delimiter\r\n                const parts = rowContent.split('|');\r\n                if (parts.length > 0) {\r\n                    // Extract all potential row IDs including those after asterisks\r\n                    parts.forEach(part => {\r\n                        const trimmedPart = part.trim();\r\n                        if (trimmedPart.startsWith('*')) {\r\n                            // Add the ID after the asterisk\r\n                            const afterAsterisk = trimmedPart.substring(1).trim();\r\n                            if (afterAsterisk) {\r\n                                rowValues.add(afterAsterisk);\r\n                            }\r\n                        } else if (trimmedPart) {\r\n                            // Add regular IDs\r\n                            rowValues.add(trimmedPart);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        \r\n        // console.log(rowMatches);\r\n        // Extract code type and suffix\r\n        const codeMatch = codeString.match(/<([^;]+);/);\r\n        if (codeMatch) {\r\n            const codeType = codeMatch[1].trim();\r\n            codeTypes.add(codeType);\r\n\r\n            // Check for suffixes and store them\r\n            if (codeType.endsWith('-VV')) vvCodes.add(codeType);\r\n            if (codeType.endsWith('-VR')) vrCodes.add(codeType);\r\n            if (codeType.endsWith('-RR')) rrCodes.add(codeType);\r\n            if (codeType.endsWith('-RV')) rvCodes.add(codeType);\r\n            if (codeType.endsWith('-EV')) evCodes.add(codeType);\r\n            if (codeType.endsWith('-ER')) erCodes.add(codeType);\r\n        }\r\n    }\r\n\r\n    // Validate suffix relationships\r\n    // Rule 1: -VV or -VR must have -EV or -RV\r\n    for (const code of [...vvCodes, ...vrCodes]) {\r\n        if (evCodes.size === 0 && rvCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -EV or -RV. Fix by adding another code with the correct suffix or by change to the EV/ER version of the same code.`);\r\n        }\r\n    }\r\n\r\n    // Rule 2: -RR or -RV must have -ER or -VR\r\n    for (const code of [...rrCodes, ...rvCodes]) {\r\n        if (erCodes.size === 0 && vrCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -ER or -VR`);\r\n        }\r\n    }\r\n\r\n// Second pass: detailed validation\r\nfor (const codeString of inputCodeStrings) {\r\n    // Skip BR tags completely\r\n    if (codeString === '<BR>') {\r\n        continue;\r\n    }\r\n    \r\n    const codeMatch = codeString.match(/<([^;]+);/);\r\n    if (!codeMatch) {\r\n        errors.push(`Cannot extract code type from: ${codeString}`);\r\n        continue;\r\n    }\r\n\r\n    const codeType = codeMatch[1].trim();\r\n    \r\n    // Validate code exists in description file\r\n    if (!validCodes.has(codeType)) {\r\n        errors.push(`Invalid code type: \"${codeType}\" not found in valid codes list`);\r\n    }\r\n\r\n\r\n\r\n        // Validate TAB labels\r\n        if (codeType === 'TAB') {\r\n            const labelMatch = codeString.match(/label\\d+=\"([^\"]*)\"/);\r\n            if (!labelMatch) {\r\n                errors.push('TAB code missing label parameter');\r\n                continue;\r\n            }\r\n\r\n            const label = labelMatch[1];\r\n            \r\n            if (label.length > 30) {\r\n                errors.push(`Tab label too long (max 30 chars): \"${label}\"`);\r\n            }\r\n            \r\n            if (/[&,\":;]/.test(label)) {\r\n                errors.push(`Tab label contains illegal characters (&,\":;): \"${label}\"`);\r\n            }\r\n            \r\n            if (tabLabels.has(label)) {\r\n                errors.push(`Duplicate tab label: \"${label}\"`);\r\n            }\r\n            tabLabels.add(label);\r\n        }\r\n\r\n        // Validate row format\r\n        const rowMatches = codeString.match(/row\\d+=\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+=\"([^\"]*)\"/)[1];\r\n                const parts = rowContent.split('|');\r\n                if (parts.length < 2) {\r\n                    errors.push(`Invalid row format (missing required fields): \"${rowContent}\"`);\r\n                }\r\n            });\r\n        }\r\n    } // <-- This is the end of the second pass loop\r\n\r\n    // Third pass: validate driver references after all row IDs are collected\r\n    for (const codeString of inputCodeStrings) {\r\n        const driverMatches = codeString.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (driverMatches) {\r\n            driverMatches.forEach(match => {\r\n                const driverValue = match.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/)[1].trim();\r\n                if (!rowValues.has(driverValue)) {\r\n                    errors.push(`Driver value \"${driverValue}\" not found in any row`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Convert array of errors to a single string with line breaks\r\n    return errors.join('\\n');\r\n}\r\n\r\n// Modified export function\r\nexport async function runValidation(inputStrings) {\r\n    try {\r\n        const cleanedStrings = inputStrings\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0)\r\n            .map(line => line.replace(/^'|',$|,$|^\"|\"$/g, ''));\r\n\r\n        const codeStrings = cleanedStrings.join(' ').match(/<[^>]+>/g) || [];\r\n\r\n        if (codeStrings.length === 0) {\r\n            console.error('Validation run with no codestrings - input is empty');\r\n            return ['No code strings found to validate'];\r\n        }\r\n\r\n        const validationErrors = await validateCodeStrings(codeStrings);\r\n        return validationErrors;\r\n    } catch (error) {\r\n        console.error('Validation failed:', error);\r\n        return [`Validation failed: ${error.message}`];\r\n    }\r\n}\r\n\r\n// >>> ADDED: New validation function for Run Codes flow (returns array)\r\nexport async function validateCodeStringsForRun(inputCodeStrings) {\r\n    const errors = [];\r\n    const tabLabels = new Set();\r\n    const rowValues = new Set();\r\n    const codeTypes = new Set();\r\n    \r\n    // Clean up input strings by removing anything outside angle brackets\r\n    inputCodeStrings = inputCodeStrings.map(str => {\r\n        const match = str.match(/<[^>]+>/);\r\n        return match ? match[0] : str;\r\n    });\r\n\r\n    console.log(\"[ValidateForRun] CleanedInput Code Strings:\", inputCodeStrings);\r\n\r\n    // Track codes by their suffixes (Same logic as original)\r\n    const vvCodes = new Set();\r\n    const vrCodes = new Set();\r\n    const rrCodes = new Set();\r\n    const rvCodes = new Set();\r\n    const evCodes = new Set();\r\n    const erCodes = new Set();\r\n\r\n    // Load valid codes (Same logic as original)\r\n    let validCodes = new Set();\r\n    try {\r\n        const response = await fetch('../prompts/Codes.txt');\r\n        if (!response.ok) {\r\n            throw new Error('Failed to load Codes.txt file');\r\n        }\r\n        const fileContent = await response.text();\r\n        validCodes = new Set(fileContent.split('\\n')\r\n            .map(line => line.trim())\r\n            .filter(line => line.length > 0));\r\n    } catch (error) {\r\n        errors.push(`Error reading Codes.txt file: ${error.message}`);\r\n        return errors; // Return array on critical error\r\n    }\r\n\r\n    // First pass: collect all row values, code types, and suffixes (Same logic as original)\r\n    for (const codeString of inputCodeStrings) {\r\n        if (!codeString.startsWith('<') || !codeString.endsWith('>')) {\r\n            errors.push(`Invalid code string format: ${codeString}`);\r\n            continue;\r\n        }\r\n        if (codeString.startsWith('<BR>')) {\r\n            continue;\r\n        }\r\n        const rowMatches = codeString.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+\\s*=\\s*\"([^\"]*)\"/)[1];\r\n                const parts = rowContent.split('|');\r\n                if (parts.length > 0) {\r\n                    parts.forEach(part => {\r\n                        const trimmedPart = part.trim();\r\n                        if (trimmedPart.startsWith('*')) {\r\n                            const afterAsterisk = trimmedPart.substring(1).trim();\r\n                            if (afterAsterisk) {\r\n                                rowValues.add(afterAsterisk);\r\n                            }\r\n                        } else if (trimmedPart) {\r\n                            rowValues.add(trimmedPart);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        const codeMatch = codeString.match(/<([^;]+);/);\r\n        if (codeMatch) {\r\n            const codeType = codeMatch[1].trim();\r\n            codeTypes.add(codeType);\r\n            if (codeType.endsWith('-VV')) vvCodes.add(codeType);\r\n            if (codeType.endsWith('-VR')) vrCodes.add(codeType);\r\n            if (codeType.endsWith('-RR')) rrCodes.add(codeType);\r\n            if (codeType.endsWith('-RV')) rvCodes.add(codeType);\r\n            if (codeType.endsWith('-EV')) evCodes.add(codeType);\r\n            if (codeType.endsWith('-ER')) erCodes.add(codeType);\r\n        }\r\n    }\r\n\r\n    // Validate suffix relationships (Same logic as original)\r\n    for (const code of [...vvCodes, ...vrCodes]) {\r\n        if (evCodes.size === 0 && rvCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -EV or -RV. Fix by adding another code with the correct suffix or by change to the EV/ER version of the same code.`);\r\n        }\r\n    }\r\n    for (const code of [...rrCodes, ...rvCodes]) {\r\n        if (erCodes.size === 0 && vrCodes.size === 0) {\r\n            errors.push(`Code ${code} requires another code with suffix -ER or -VR`);\r\n        }\r\n    }\r\n\r\n    // Second pass: detailed validation (Same logic as original)\r\n    for (const codeString of inputCodeStrings) {\r\n        if (codeString === '<BR>') {\r\n            continue;\r\n        }\r\n        const codeMatch = codeString.match(/<([^;]+);/);\r\n        if (!codeMatch) {\r\n            errors.push(`Cannot extract code type from: ${codeString}`);\r\n            continue;\r\n        }\r\n        const codeType = codeMatch[1].trim();\r\n        if (!validCodes.has(codeType)) {\r\n            errors.push(`Invalid code type: \"${codeType}\" not found in valid codes list`);\r\n        }\r\n        if (codeType === 'TAB') {\r\n            const labelMatch = codeString.match(/label\\d+=\"([^\"]*)\"/);\r\n            if (!labelMatch) {\r\n                errors.push('TAB code missing label parameter');\r\n                continue;\r\n            }\r\n            const label = labelMatch[1];\r\n            if (label.length > 30) {\r\n                errors.push(`Tab label too long (max 30 chars): \"${label}\"`);\r\n            }\r\n            if (/[&,\":;]/.test(label)) {\r\n                errors.push(`Tab label contains illegal characters (&,\":;): \"${label}\"`);\r\n            }\r\n            if (tabLabels.has(label)) {\r\n                errors.push(`Duplicate tab label: \"${label}\"`);\r\n            }\r\n            tabLabels.add(label);\r\n        }\r\n        const rowMatches = codeString.match(/row\\d+=\"([^\"]*)\"/g);\r\n        if (rowMatches) {\r\n            rowMatches.forEach(match => {\r\n                const rowContent = match.match(/row\\d+=\"([^\"]*)\"/)[1];\r\n                const parts = rowContent.split('|');\r\n                if (parts.length < 2) {\r\n                    errors.push(`Invalid row format (missing required fields): \"${rowContent}\"`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Third pass: validate driver references (Same logic as original)\r\n    for (const codeString of inputCodeStrings) {\r\n        const driverMatches = codeString.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/g);\r\n        if (driverMatches) {\r\n            driverMatches.forEach(match => {\r\n                const driverValue = match.match(/driver\\d+\\s*=\\s*\"([^\"]*)\"/)[1].trim();\r\n                if (!rowValues.has(driverValue)) {\r\n                    errors.push(`Driver value \"${driverValue}\" not found in any row`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Key Change: Return the array of errors directly\r\n    return errors;\r\n}\r\n// <<< END ADDED FUNCTION\r\n\r\n","/**\n * CodeCollection.js\n * Functions for processing and managing code collections\n */\n\nimport { convertKeysToCamelCase } from \"@pinecone-database/pinecone/dist/utils\";\n\n/**\n * Parses code strings and creates a code collection\n * @param {string} inputText - The input text containing code strings\n * @returns {Array} - An array of code objects with type and parameters\n */\nexport function populateCodeCollection(inputText) {\n    try {\n        console.log(\"Processing input text for code collection\");\n         \n        // Initialize an empty code collection\n        const codeCollection = [];\n        \n        // Split the input text by newlines (handles \\n and \\r\\n)\n        const lines = inputText.split(/\\r?\\n/);\n        \n        for (const line of lines) {\n            // Skip empty lines\n            if (!line.trim()) continue;\n            \n            // Extract the code type and parameters\n            const codeMatch = line.match(/<([^;>]+);(.*?)>/);\n            if (!codeMatch) continue;\n            \n            const codeType = codeMatch[1].trim();\n            // Remove potential leftover newline/carriage return characters from the params string\n            const paramsString = codeMatch[2].replace(/[\\r\\n]+/g, '').trim();\n            \n            // Parse parameters\n            const params = {};\n            \n            // Handle special case for row parameters with asterisks\n            // Use the cleaned paramsString\n            const rowMatches = paramsString.matchAll(/row(\\d+)\\s*=\\s*\"([^\"]*)\"/g);\n            for (const match of rowMatches) {\n                const rowNum = match[1];\n                const rowValue = match[2];\n                params[`row${rowNum}`] = rowValue;\n            }\n            \n            // Parse other parameters\n            // Use the cleaned paramsString\n            const paramMatches = paramsString.matchAll(/(\\w+)\\s*=\\s*\"([^\"]*)\"/g);\n            for (const match of paramMatches) {\n                const paramName = match[1].trim();\n                const paramValue = match[2].trim();\n                \n                // Skip row parameters as they're already handled\n                if (paramName.startsWith('row')) continue;\n                \n                params[paramName] = paramValue;\n            }\n            \n            // Add the code to the collection\n            codeCollection.push({\n                type: codeType,\n                params: params\n            });\n        }\n        \n        console.log(`Processed ${codeCollection.length} codes`);\n        return codeCollection;\n    } catch (error) {\n        console.error(\"Error in populateCodeCollection:\", error);\n        throw error;\n    }\n}\n\n/**\n * Exports a code collection to text format\n * @param {Array} codeCollection - The code collection to export\n * @returns {string} - A formatted text representation of the code collection\n */\nexport function exportCodeCollectionToText(codeCollection) {\n    try {\n        if (!codeCollection || !Array.isArray(codeCollection)) {\n            throw new Error(\"Invalid code collection\");\n        }\n        \n        let result = \"Code Collection:\\n\";\n        result += \"================\\n\\n\";\n        \n        codeCollection.forEach((code, index) => {\n            result += `Code ${index + 1}: ${code.type}\\n`;\n            result += \"Parameters:\\n\";\n            \n            // First display non-row parameters\n            for (const [key, value] of Object.entries(code.params)) {\n                if (!key.startsWith('row')) {\n                    result += `  ${key}: ${value}\\n`;\n                }\n            }\n            \n            // Then display row parameters\n            const rowParams = Object.entries(code.params)\n                .filter(([key]) => key.startsWith('row'))\n                .sort((a, b) => {\n                    const numA = parseInt(a[0].replace('row', ''));\n                    const numB = parseInt(b[0].replace('row', ''));\n                    return numA - numB;\n                });\n            \n            if (rowParams.length > 0) {\n                result += \"  Rows:\\n\";\n                for (const [key, value] of rowParams) {\n                    result += `    ${key}: ${value}\\n`;\n                }\n            }\n            \n            result += \"\\n\";\n        });\n        \n        return result;\n    } catch (error) {\n        console.error(\"Error in exportCodeCollectionToText:\", error);\n        throw error;\n    }\n} \n\n/**\n * Processes a code collection and performs operations based on code types\n * @param {Array} codeCollection - The code collection to process\n * @returns {Object} - Results of processing the code collection\n */\nexport async function runCodes(codeCollection) {\n    try {\n        console.log(\"Running code collection processing\");\n        \n        if (!codeCollection || !Array.isArray(codeCollection)) {\n            throw new Error(\"Invalid code collection\");\n        }\n        \n        // Initialize result object\n        const result = {\n            processedCodes: 0,\n            createdTabs: [],\n            errors: []\n        };\n        \n        // Initialize state variables (similar to VBA variables)\n        let currentWorksheetName = null;\n        const assumptionTabs = [];\n        \n        // Process each code in the collection\n        for (let i = 0; i < codeCollection.length; i++) {\n            const code = codeCollection[i];\n            const codeType = code.type;\n            \n            try {\n                // Handle MODEL code type\n                if (codeType === \"MODEL\") {\n                    // Skip for now as mentioned in the original VBA code\n                    console.log(\"MODEL code type encountered - skipping for now\");\n                    continue;\n                }\n                \n                // Handle TAB code type\n                if (codeType === \"TAB\") {\n                    // Accept both label1 and Label1 for backward compatibility\n                    const tabName = code.params.label1 || code.params.Label1 || `Tab_${i}`;\n                    \n                    // Check if worksheet exists and delete it\n                    await Excel.run(async (context) => {\n                        try {\n                            // Get all worksheets\n                            const sheets = context.workbook.worksheets;\n                            sheets.load(\"items/name\");\n                            console.log(\"sheets\", sheets);\n                            await context.sync();\n                            \n                            // Check if worksheet exists\n                            const existingSheet = sheets.items.find(sheet => sheet.name === tabName);\n                            console.log(\"existingSheet\", existingSheet);\n                            // if (existingSheet) {\n                            //     // Delete the worksheet if it exists\n                            //     existingSheet.delete();\n                            //     await context.sync();\n                            // }\n                            // console.log(\"existingSheet deleted\");\n                            \n                            // Get the Financials worksheet (needed for position and as fallback template)\n                            const financialsSheet = context.workbook.worksheets.getItem(\"Financials\");\n                            financialsSheet.load(\"position\"); // Load Financials sheet position\n                            await context.sync(); // Sync to get Financials position\n                            console.log(`Financials sheet is at position ${financialsSheet.position}`);\n                            \n                            // Check if the target tab already exists\n                            if (!existingSheet) {\n                                let newSheet;\n                                let sourceSheetName;\n\n                                // Try to get the Calcs worksheet\n                                try {\n                                    const sourceCalcsWS = context.workbook.worksheets.getItem(\"Calcs\");\n                                    await context.sync(); // Ensure it's loaded if found\n                                    console.log(\"Using Calcs worksheet as template.\");\n                                    newSheet = sourceCalcsWS.copy();\n                                    sourceSheetName = \"Calcs\";\n                                } catch (calcsError) {\n                                    // If Calcs doesn't exist, use Financials as the template\n                                    console.warn(\"Calcs worksheet not found. Using Financials as template.\");\n                                    newSheet = financialsSheet.copy();\n                                    sourceSheetName = \"Financials\";\n                                    // Sync needed *after* copy to reference the new sheet object reliably\n                                    await context.sync(); \n                                    \n                                    // --- Load name before accessing it ---\n                                    newSheet.load(\"name\");\n                                    await context.sync();\n                                    // --- End Load name ---\n                                    \n                                    // --- Clear rows 10 down if copied from Financials ---\n                                    console.log(`Clearing contents and formats from row 10 down in new sheet ${newSheet.name} copied from ${sourceSheetName}`);\n                                    // Use a reasonable large row number or get last row if needed, 10000 should suffice\n                                    const clearRange = newSheet.getRange(\"10:10000\"); \n                                    clearRange.clear(Excel.ClearApplyTo.all);\n                                    // Do NOT sync clear yet, batch with linking below\n\n                                    // --- Link non-empty cells in rows 1-8 back to Financials ---\n                                    console.log(`Linking header rows (1-8) in ${newSheet.name} back to Financials`);\n                                    // Get used range of the new sheet to find last column\n                                    const usedRange = newSheet.getUsedRange(true); // Use valuesOnly = true\n                                    usedRange.load([\"columnCount\", \"rowCount\"]);\n                                    // Sync to get the used range info *before* calculating link range address\n                                    await context.sync();\n\n                                    const lastColIndex = usedRange.columnCount > 0 ? usedRange.columnCount - 1 : 0; \n                                    const lastColLetter = columnIndexToLetter(lastColIndex);\n                                    // Process only up to row 8\n                                    const linkRangeAddress = `A1:${lastColLetter}8`;\n\n                                    console.log(`Processing header link range: ${linkRangeAddress}`);\n                                    const linkRange = newSheet.getRange(linkRangeAddress);\n                                    linkRange.load(\"values\");\n                                    // Sync to load the values *before* iterating and setting formulas\n                                    await context.sync();\n\n                                    const values = linkRange.values;\n                                    // Batch formula setting directly\n                                    for (let r = 0; r < values.length; r++) {\n                                        const rowNum = r + 1;\n                                        for (let c = 0; c < values[r].length; c++) {\n                                            const cellValue = values[r][c];\n                                            if (cellValue !== null && cellValue !== \"\") {\n                                                const colLetter = columnIndexToLetter(c);\n                                                const cellAddress = `${colLetter}${rowNum}`;\n                                                const formula = `=Financials!${cellAddress}`;\n                                                // Get the specific cell and queue the formula update\n                                                const targetCell = newSheet.getRange(cellAddress);\n                                                targetCell.formulas = [[formula]];\n                                                // console.log(`  Queueing formula for ${cellAddress} to ${formula}`); \n                                            }\n                                        }\n                                    }\n                                    // The sync for these formula changes will happen later, along with rename/position.\n                                    // --- End Link header rows ---\n\n                                    // --- Set font color for rows 2-8 ---\n                                    console.log(`Setting font color for rows 2-8 in ${newSheet.name}`);\n                                    const headerFormatRangeAddress = `A2:${lastColLetter}8`;\n                                    const headerFormatRange = newSheet.getRange(headerFormatRangeAddress);\n                                    headerFormatRange.format.font.color = \"#008000\"; // Green\n                                    // --- End Set font color ---\n\n                                    // --- Set tab color ---\n                                    console.log(`Setting tab color for ${newSheet.name}`);\n                                    newSheet.tabColor = \"#4472C4\"; // Blue\n                                    // --- End Set tab color ---\n                                }\n\n                                // Sync copy operation if not already synced (e.g., if Calcs was used)\n                                // If Financials was used, sync happened before clear. If Calcs was used, sync happens here.\n                                if (sourceSheetName === \"Calcs\") {\n                                     await context.sync();\n                                }\n\n                                console.log(`newSheet created by copying ${sourceSheetName} worksheet`);\n\n                                // Rename it\n                                newSheet.name = tabName;\n                                console.log(\"newSheet renamed to\", tabName);\n\n                                // <<< NEW: Set position relative to Financials sheet >>>\n                                newSheet.position = financialsSheet.position + 1;\n                                console.log(`Set position of ${tabName} to ${newSheet.position}`);\n                                // Add to assumption tabs collection\n                                assumptionTabs.push({\n                                    name: tabName,\n                                    worksheet: newSheet\n                                }); // <-- Added closing brace and semicolon here\n\n                                currentWorksheetName = tabName;\n\n                                await context.sync(); // Sync rename and position changes\n\n                                result.createdTabs.push(tabName);\n                                console.log(\"Tab created successfully:\", tabName);\n                            // }); <-- Removed this closing parenthesis, it belongs to Excel.run below\n\n                            }\n\n                            else {\n                                console.log(\"Worksheet already exists:\", tabName);\n                                assumptionTabs.push({\n                                    name: tabName,\n                                    worksheet: existingSheet\n                                });\n                                // Need to set currentWorksheetName here too if the sheet exists\n                                currentWorksheetName = tabName; \n                            }\n                      \n       \n                            \n                         \n                            \n                            // Set the current worksheet name <-- This comment is now redundant/misplaced\n                       \n                        } catch (error) {\n                            console.error(\"Detailed error in TAB processing:\", error);\n                            throw error;\n                        }\n                    }).catch(error => { // <-- This is the correct closing for Excel.run\n                        console.error(`Error processing TAB code: ${error.message}`);\n                        result.errors.push({\n                            codeIndex: i,\n                            codeType: codeType,\n                            error: error.message\n                        });\n                    });\n                    \n                    continue;\n                }\n                \n                // Handle non-TAB codes\n                if (codeType !== \"TAB\") {\n                    await Excel.run(async (context) => {\n                        try {\n                            // Get the Codes worksheet\n                            const codesWS = context.workbook.worksheets.getItem(\"Codes\");\n                            console.log(\"Got Codes worksheet\");\n                            \n                            // Get the used range of the Codes worksheet\n                            const usedRange = codesWS.getUsedRange();\n                            usedRange.load(\"rowCount\");\n                            usedRange.load(\"columnCount\");\n                            await context.sync();\n                            console.log(`Used range: ${usedRange.rowCount} rows x ${usedRange.columnCount} columns`);\n                            \n                            // Get the current worksheet\n                            const currentWS = context.workbook.worksheets.getItem(currentWorksheetName);\n                            console.log(\"Got current worksheet:\", currentWorksheetName);\n                            \n                            // Get the last row in the current worksheet\n                            const lastUsedRow = currentWS.getUsedRange().getLastRow();\n                            lastUsedRow.load(\"rowIndex\");\n                            await context.sync();\n                            const pasteRow = lastUsedRow.rowIndex + 2; // Adjusted to paste one row lower\n                            console.log(\"Paste row:\", pasteRow);\n                            \n                            // Search for the code type in column D (index 3)\n                            let firstRow = -1;\n                            let lastRow = -1;\n                            \n                            // Load the values of column D\n                            const columnD = codesWS.getRange(`D1:D${usedRange.rowCount}`);\n                            columnD.load(\"values\");\n                            await context.sync();\n                            \n                            console.log(\"Loaded column D values\");\n                            \n                            // Check if values are loaded properly\n                            if (!columnD.values) {\n                                console.error(\"columnD.values is null or undefined\");\n                                throw new Error(`Failed to load values from column D in Codes worksheet`);\n                            }\n                            \n                            console.log(`columnD.values length: ${columnD.values.length}`);\n                            \n                            // Debug print the first few values in column D\n                            console.log(\"First 10 values in column D:\");\n                            for (let i = 0; i < Math.min(10, columnD.values.length); i++) {\n                                console.log(`Row ${i+1}: ${columnD.values[i][0]}`);\n                            }\n                            \n                            // Find the first and last row with the code\n                            for (let row = 0; row < columnD.values.length; row++) {\n                                if (columnD.values[row][0] === codeType) {\n                                    if (firstRow === -1) {\n                                        firstRow = row + 1; // Excel rows are 1-indexed\n                                    }\n                                    lastRow = row + 1;\n                                }\n                            }\n                            \n                            // Check if the code type was found\n                            const codeTypeFound = firstRow !== -1 && lastRow !== -1;\n                            \n                            if (!codeTypeFound) {\n                                console.warn(`Code type ${codeType} not found in Codes worksheet. Skipping this code.`);\n                                result.errors.push({\n                                    codeIndex: i,\n                                    codeType: codeType,\n                                    error: `Code type ${codeType} not found in Codes worksheet`\n                                });\n                                // Skip to the next code\n                                result.processedCodes++;\n                            } else {\n                                console.log(`Found code type ${codeType} in rows ${firstRow} to ${lastRow}`);\n                                \n                                // Try the suggested approach to copy the range with all properties\n                                await Excel.run(async (context) => {\n                                    // Get the source range\n                                    const sourceRange = context.workbook.worksheets.getItem(\"Codes\").getRange(`A${firstRow}:CX${lastRow}`);\n                                    \n                                    // Get the destination range\n                                    const destinationRange = context.workbook.worksheets.getItem(currentWorksheetName).getRange(`A${pasteRow}`);\n                                    \n                                    // Copy the range with all properties\n                                    destinationRange.copyFrom(sourceRange, Excel.RangeCopyType.all);\n                                    \n                                    await context.sync();\n                                });\n                                \n                                await context.sync();\n                                \n                                // Apply the driver and assumption inputs function to the current worksheet\n                                try {\n                                    console.log(`Applying driver and assumption inputs to worksheet: ${currentWorksheetName}`);\n                                    \n                                    // Get the current worksheet and load its properties\n                                    const currentWorksheet = context.workbook.worksheets.getItem(currentWorksheetName);\n                                    currentWorksheet.load('name');\n                                    await context.sync();\n                                    \n                                    await driverAndAssumptionInputs(\n                                        currentWorksheet,\n                                        pasteRow,\n                                        code\n                                    );\n                                    console.log(`Successfully applied driver and assumption inputs to worksheet: ${currentWorksheetName}`);\n                                } catch (error) {\n                                    console.error(`Error applying driver and assumption inputs: ${error.message}`);\n                                    result.errors.push({\n                                        codeIndex: i,\n                                        codeType: codeType,\n                                        error: `Error applying driver and assumption inputs: ${error.message}`\n                                    });\n                                }\n                                \n                                result.processedCodes++;\n                            }\n                        } catch (error) {\n                            console.error(`Error processing code ${codeType}:`, error);\n                            throw error;\n                        }\n                    }).catch(error => {\n                        console.error(`Error processing code ${codeType}: ${error.message}`);\n                        result.errors.push({\n                            codeIndex: i,\n                            codeType: codeType,\n                            error: error.message\n                        });\n                    });\n                }\n            } catch (error) {\n                console.error(`Error processing code ${i}:`, error);\n                result.errors.push({\n                    codeIndex: i,\n                    codeType: codeType,\n                    error: error.message\n                });\n            }\n        }\n        \n        // Prepare the final result object, including the names of assumption tabs\n        const finalResult = {\n            ...result, // Includes processedCodes, errors\n            assumptionTabs: assumptionTabs.map(tab => tab.name) // Return only the names\n        };\n\n        console.log(\"runCodes finished. Returning:\", finalResult);\n        return finalResult; // Return the modified result object\n\n    } catch (error) {\n        console.error(\"Error in runCodes:\", error);\n        // Consider how to return errors. Throwing stops execution.\n        // Returning them in the result allows the caller to decide.\n        throw error; // Or return { errors: [error.message], assumptionTabs: [] }\n    }\n}\n\n/**\n * Helper function to update cell references in formulas when rows are inserted\n * @param {string} formula - The formula to update\n * @param {number} rowOffset - The number of rows to offset\n * @returns {string} - The updated formula\n */\nfunction updateFormulaReferences(formula, rowOffset) {\n    if (!formula || !formula.startsWith('=')) {\n        return formula;\n    }\n    \n    // Regular expression to match cell references (e.g., A1, B2, etc.)\n    const cellRefRegex = /([A-Z]+)([0-9]+)/g;\n    \n    // Replace each cell reference with an updated one\n    return formula.replace(cellRefRegex, (match, col, row) => {\n        const rowNum = parseInt(row);\n        return `${col}${rowNum + rowOffset}`;\n    });\n}\n\n/**\n * Tests if the active cell's fill color is #CCFFCC (light green)\n * @returns {Promise<boolean>} - True if the active cell is green, false otherwise\n */\nexport async function isActiveCellGreen() {\n    try {\n        console.log(\"Testing if cell B2 is green (#CCFFCC)\");\n        \n        return await Excel.run(async (context) => {\n            // Get cell B2 instead of the active cell\n            const cellB2 = context.workbook.worksheets.getActiveWorksheet().getRange(\"B2\");\n            \n            // Load the fill color property and address\n            cellB2.load([\"format/fill/color\", \"address\"]);\n            \n            // Execute the request\n            await context.sync();\n            \n            // Check if the color is #CCFFCC\n            const isGreen = cellB2.format.fill.color === \"#CCFFCC\";\n            \n            console.log(`Cell B2 address: ${cellB2.address}, color: ${cellB2.format.fill.color}, Is green: ${isGreen}`);\n            \n            return isGreen;\n        });\n    } catch (error) {\n        console.error(\"Error in isActiveCellGreen:\", error);\n        throw error;\n    }\n}\n\n\n/**\n * Processes driver and assumption inputs for a worksheet based on code parameters,\n * replicating the logic from the VBA Driver_and_Assumption_Inputs function.\n * @param {Excel.Worksheet} worksheet - The initial Excel worksheet object.\n * @param {number} calcsPasteRow - The starting row for finding the code block.\n * @param {Object} code - The code object with type and parameters.\n * @returns {Promise<void>}\n */\nexport async function driverAndAssumptionInputs(worksheet, calcsPasteRow, code) {\n    try {\n        // --- Load worksheet name before calling helper ---\n        // This requires its own context if worksheet object might not have name loaded yet\n        let worksheetName = 'unknown';\n        try {\n             await Excel.run(async (context) => {\n                 worksheet.load('name');\n                 await context.sync();\n                 worksheetName = worksheet.name;\n                 \n             });\n         } catch(nameLoadError) {\n             console.error(\"Failed to load worksheet name before calling helper\", nameLoadError);\n             throw new Error(\"Cannot determine worksheet name to proceed.\");\n         }\n\n        // Define variable to store lastRow outside Excel.run scope so we can use it later\n        let lastRow = 1000; // Default value in case of failure\n\n        try {\n            // Get a fresh worksheet reference and find the last row within a proper Excel.run context\n            lastRow = await Excel.run(async (context) => {    \n                // Get worksheet reference within THIS context by name\n                const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\n                \n                // Get the used range of the worksheet\n                const usedRange = currentWorksheet.getUsedRange();\n\n                // Get the last row within the used range\n                const lastRowRange = usedRange.getLastRow();\n\n                // Load the rowIndex property of the last row\n                lastRowRange.load(\"rowIndex\");\n\n                // Synchronize the state with the Excel document\n                await context.sync();\n\n                // Calculate the 1-based index of the last row\n                const result = lastRowRange.rowIndex + 1;\n                console.log('lastRow', result);\n                \n                // Return the value so it's accessible outside this Excel.run\n                return result;\n            });\n        } catch(lastRowError) {\n            console.error(\"Failed to determine last row\", lastRowError);\n            throw new Error(\"Cannot determine last row to proceed.\");\n        }\n\n        // Ensure lastRow is a valid number (helper should return 1000 on error)\n        if (typeof lastRow !== 'number' || lastRow <= 0) {\n            console.error(`Last row determination failed or returned invalid value (${lastRow}). Cannot proceed safely.`);\n            throw new Error(\"Failed to determine a valid last row for processing.\");\n        }\n        // --- End Determine Last Row ---\n\n        // Now, proceed with the main logic within its own Excel.run\n        await Excel.run(async (context) => {\n            // Pass the determined lastRow into this context\n            const determinedLastRow = lastRow; \n            \n            // Get worksheet reference within THIS context by name\n            const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\n            \n            // USE calcsPasteRow in console log\n            console.log(`Processing driver/assumption inputs for worksheet: ${worksheetName}, Code: ${code.type}, Start Row: ${calcsPasteRow}, Using Last Row: ${determinedLastRow}`);\n\n            const columnSequence = ['A', 'B', 'C', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'O', 'P', 'R'];\n            \n            // Get the code value\n            const codeValue = code.type;\n\n            // Find the search row (first row >= calcsPasteRow where CodeValue is found in Col D)\n            // Note: Using determinedLastRow obtained from the helper function\n            let searchRow = -1; // 1-based index\n            let searchRange = null; \n            let searchRangeAddress = ''; \n\n            try {\n                // USE calcsPasteRow in console log\n                console.log(`Attempting to get searchRange. calcsPasteRow: ${calcsPasteRow}, determinedLastRow: ${determinedLastRow}`);\n                // USE calcsPasteRow in condition\n                if (typeof calcsPasteRow !== 'number' || typeof determinedLastRow !== 'number' || calcsPasteRow <= 0 || determinedLastRow < calcsPasteRow) {\n                     console.error(`Invalid range parameters for searchRange: calcsPasteRow=${calcsPasteRow}, determinedLastRow=${determinedLastRow}. Skipping search.`);\n                     searchRow = -1; \n                 } else {\n                     // USE calcsPasteRow for search range address\n                     searchRangeAddress = `D${calcsPasteRow}:D${determinedLastRow}`;\n                     console.log(`Creating searchRange with address: ${searchRangeAddress}`);\n                     // Need to use the worksheet object available in *this* context\n                     searchRange = currentWorksheet.getRange(searchRangeAddress);\n\n                     console.log(`Loading values for searchRange: ${searchRangeAddress}`);\n                     searchRange.load('values');\n                     await context.sync();\n                     console.log(`Successfully loaded values for searchRange: ${searchRangeAddress}`);\n                 }\n\n            } catch (loadError) {\n                 console.error(`Error loading/syncing searchRange (${searchRangeAddress}): ${loadError.message}`, loadError);\n                 searchRow = -1; \n            }\n\n            // Check if searchRange was successfully created and loaded before accessing .values\n            if (searchRange && searchRange.values) { // Check searchRange first!\n                 console.log(`SearchRange (${searchRangeAddress}) has loaded values. Searching for codeValue: ${codeValue}`);\n                 for (let i = 0; i < searchRange.values.length; i++) {\n                    if (searchRange.values[i][0] === codeValue) {\n                        // USE calcsPasteRow to calculate searchRow\n                        searchRow = calcsPasteRow + i; // Found the row (1-based)\n                        console.log(`Found codeValue '${codeValue}' at index ${i}, resulting searchRow: ${searchRow}`);\n                        break;\n                    }\n                }\n                 if (searchRow === -1) { // If loop finished without finding\n                     console.log(`CodeValue '${codeValue}' not found within the loaded values of searchRange (${searchRangeAddress}).`);\n                 }\n            } else if (searchRow !== -1) { // Only log warning if we didn't already hit the loadError or invalid params\n                 console.warn(`searchRange (${searchRangeAddress}) object exists but '.values' property is not available after sync. Search cannot be performed.`);\n                 searchRow = -1; // Ensure we trigger the \"not found\" logic\n            }\n\n            if (searchRow === -1) {\n                 console.warn(`Code type ${codeValue} not found or could not be searched for in column D (Range: ${searchRangeAddress || 'Invalid'}). Skipping inputs for this code.`);\n                 return; // Exit if code not found or search failed\n            }\n            console.log(`Found code ${codeValue} at search row: ${searchRow}`);\n\n\n            // Find the check row (first row >= searchrow where Col B is not light green #CCFFCC)\n            // VBA: Do While .Cells(checkrow, 2).Interior.Color = RGB(204, 255, 204)\n            let checkRow = searchRow;\n            let isGreen = true;\n            while (isGreen) {\n                const cellB = currentWorksheet.getRange(`B${checkRow}`);\n                cellB.load('format/fill/color');\n                await context.sync();\n                 // Handle potential errors if cell color can't be loaded\n                 if (cellB.format && cellB.format.fill) {\n                    isGreen = cellB.format.fill.color === '#CCFFCC';\n                 } else {\n                     console.warn(`Could not read fill color for cell B${checkRow}. Assuming not green.`);\n                     isGreen = false; // Assume not green if color cannot be determined\n                 }\n\n                if (isGreen) {\n                    checkRow++;\n                    // Add a safety break condition?\n                    if (checkRow > determinedLastRow + 50) { // Use determinedLastRow\n                         console.error(\"Check row exceeded expected limits. Breaking loop.\");\n                         throw new Error(\"Failed to find non-green check row within reasonable bounds.\");\n                    }\n                }\n            }\n            console.log(`Found check row (first non-green row in B at/after search row): ${checkRow}`);\n\n\n            // Process drivers, labels, and financialsdriver (relative to searchRow)\n            for (let k = 1; k <= 9; k++) {\n                const targetRow = searchRow + k - 1;\n                if (targetRow > determinedLastRow + 20) { // Safety check: Don't write way past the data\n                    console.warn(`Target row ${targetRow} seems too high. Skipping write for k=${k}.`);\n                    continue;\n                }\n\n                // Financials Driver (only for k=1)\n                if (k === 1 && code.params.financialsdriver) {\n                    const finDriverCell = currentWorksheet.getRange(`I${targetRow}`);\n                    finDriverCell.values = [[code.params.financialsdriver]];\n                    console.log(`Set financialsdriver at I${targetRow}: ${code.params.financialsdriver}`);\n                }\n\n                // Driver\n                const driverParam = code.params[`driver${k}`];\n                if (driverParam) {\n                    const driverCell = currentWorksheet.getRange(`F${targetRow}`);\n                    driverCell.values = [[driverParam]];\n                     console.log(`Set driver${k} at F${targetRow}: ${driverParam}`);\n                }\n\n                // Label\n                const labelParam = code.params[`label${k}`];\n                if (labelParam) {\n                    const labelCell = currentWorksheet.getRange(`B${targetRow}`);\n                    labelCell.values = [[labelParam]];\n                     console.log(`Set label${k} at B${targetRow}: ${labelParam}`);\n                }\n            }\n            await context.sync(); // Sync after loop for efficiency\n\n\n            // Process row items (inserting rows relative to checkRow)\n            let currentCheckRowForInserts = checkRow; // Use a separate variable to track cumulative insertions correctly\n            for (let g = 1; g <= 200; g++) { // Max 200 row parameters as in VBA\n                const rowParam = code.params[`row${g}`];\n                if (!rowParam) continue; // Skip if rowg parameter doesn't exist\n\n                 console.log(`Processing row${g}: ${rowParam}`);\n\n                const rowItems = rowParam.split('*');\n                const numNewRows = rowItems.length - 1; // Number of rows to insert\n\n                // Calculate the 1-based row number *before* potential insertions for this 'g' iteration\n                // This takes into account rows inserted by previous 'g' loops via currentCheckRowForInserts\n                const baseRowForThisG = currentCheckRowForInserts + g - 1;\n                console.log(`Base row for row${g}: ${baseRowForThisG}, numNewRows: ${numNewRows}`);\n\n                // <<< NEW: Make row references absolute in the source row before potential insertion/copying >>>\n                try {\n                    console.log(`  Making row references absolute in source row: ${baseRowForThisG}`);\n                    const sourceRowRange = currentWorksheet.getRange(`${baseRowForThisG}:${baseRowForThisG}`);\n                    sourceRowRange.load(\"formulas\");\n                    await context.sync(); // Load formulas first\n\n                    const originalFormulas = sourceRowRange.formulas[0]; // Get the 1D array of formulas\n                    const newFormulas = [];\n                    // Regex: Match column letters followed by digits, ensuring it's not preceded by '$' or another letter (to avoid matching A$1 or RC1 style)\n                    const formulaRegex = /(?<![\\$A-Z])([A-Z]+)([0-9]+)/g; \n\n                    for (const formula of originalFormulas) {\n                        if (typeof formula === 'string' && formula.startsWith('=')) {\n                            const modifiedFormula = formula.replace(formulaRegex, (match, col, row) => `${col}\\$${row}`);\n                            if (formula !== modifiedFormula) {\n                                // console.log(`    Original: ${formula} -> Modified: ${modifiedFormula}`); // Optional: Log changes\n                            }\n                            newFormulas.push(modifiedFormula);\n                        } else {\n                            newFormulas.push(formula); // Keep non-formulas or empty cells\n                        }\n                    }\n\n                    // Write back the modified formulas (wrapped in 2D array)\n                    sourceRowRange.formulas = [newFormulas];\n                    await context.sync(); // Sync formula updates before inserting/copying\n                    console.log(`  Finished making row references absolute for row ${baseRowForThisG}.`);\n                } catch (absRefError) {\n                    console.error(`  Error making row references absolute for row ${baseRowForThisG}: ${absRefError.message}`, absRefError);\n                    // Decide whether to throw or continue. Let's continue for now.\n                    // throw absRefError; \n                }\n                // <<< END NEW LOGIC >>>\n\n                if (numNewRows > 0) {\n                    // Insert new rows below the baseRowForThisG\n                    const insertStartAddress = `${baseRowForThisG + 1}:${baseRowForThisG + numNewRows}`;\n                    console.log(`Inserting ${numNewRows} rows at ${insertStartAddress}`);\n                    const insertRange = currentWorksheet.getRange(insertStartAddress);\n                    insertRange.insert(Excel.InsertShiftDirection.down);\n                    await context.sync(); // Sync after insert\n\n                    // Sequentially copy formats and formulas from the previous row to the newly inserted ones\n                    // This helps ensure relative formulas are adjusted correctly step-by-step\n                    console.log(`Copying formats/formulas sequentially for inserted rows.`);\n                    for (let i = 0; i < numNewRows; i++) {\n                        const sourceRowNum = baseRowForThisG + i;\n                        const targetRowNum = baseRowForThisG + i + 1; // The newly inserted row\n                        const sourceRowRange = currentWorksheet.getRange(`${sourceRowNum}:${sourceRowNum}`);\n                        const targetRowRange = currentWorksheet.getRange(`${targetRowNum}:${targetRowNum}`);\n\n                        // Copy formats\n                        console.log(`  Copying formats from row ${sourceRowNum} to ${targetRowNum}`);\n                        targetRowRange.copyFrom(sourceRowRange, Excel.RangeCopyType.formats);\n\n                        // Copy formulas (should adjust relative references)\n                        console.log(`  Copying formulas from row ${sourceRowNum} to ${targetRowNum}`);\n                        targetRowRange.copyFrom(sourceRowRange, Excel.RangeCopyType.formulas);\n\n                        // We could use RangeCopyType.all, but separate copy ensures population step overrides values cleanly.\n                    }\n                    await context.sync(); // Sync after all copies for this 'g' group are done\n                    console.log(\"Finished sequential copy for inserted rows.\");\n                }\n\n                // Populate the row(s) (original row + inserted rows)\n                // This runs AFTER rows are inserted and structure (formats/formulas) is copied.\n                for (let yy = 0; yy <= numNewRows; yy++) {\n                    const currentRowNum = baseRowForThisG + yy; // 1-based row number to write to\n                    const splitArray = rowItems[yy].split('|');\n                    console.log(`Populating row ${currentRowNum} with items: ${rowItems[yy]}`);\n\n                    for (let x = 0; x < splitArray.length; x++) {\n                        // Check bounds for columnSequence\n                        if (x >= columnSequence.length) {\n                            console.warn(`Data item index ${x} exceeds columnSequence length (${columnSequence.length}). Skipping.`);\n                            continue;\n                        }\n\n                        const valueToWrite = splitArray[x];\n                        // VBA check: If splitArray(x) <> \"\" And splitArray(x) <> \"F\" Then\n                        // 'F' likely means \"Formula\", so we don't overwrite if the value is 'F'.\n                        if (valueToWrite && valueToWrite.toUpperCase() !== 'F') {\n                            const colLetter = columnSequence[x];\n                            const cellToWrite = currentWorksheet.getRange(`${colLetter}${currentRowNum}`);\n                            // Attempt to infer data type (basic number check)\n                            const numValue = Number(valueToWrite);\n                            if (!isNaN(numValue) && valueToWrite.trim() !== '') {\n                                cellToWrite.values = [[numValue]];\n                            } else {\n                                // Preserve existing value if empty string, otherwise write text\n                                if (valueToWrite.trim() !== '') {\n                                    cellToWrite.values = [[valueToWrite]];\n                                }\n                            }\n                            // console.log(`  Wrote '${valueToWrite}' to ${colLetter}${currentRowNum}`);\n                        }\n                    }\n                }\n                await context.sync(); // Sync after populating each 'g' group\n\n                // Adjust the base check row marker for subsequent 'g' iterations\n                // by adding the number of rows inserted in *this* iteration.\n                currentCheckRowForInserts += numNewRows;\n                console.log(`Finished processing row${g}. currentCheckRowForInserts is now ${currentCheckRowForInserts}`);\n\n            } // End for g loop\n\n            console.log(`Completed processing driver and assumption inputs for code ${codeValue} in worksheet ${worksheetName}`);\n        }); // End main Excel.run\n    } catch (error) {\n        console.error(`Error in driverAndAssumptionInputs MAIN CATCH for code '${code.type}' in worksheet '${worksheet?.name || 'unknown'}': ${error.message}`, error);\n        throw error;\n    }\n}\n\n\n/**\n * Finds the last used row in a specific column of a worksheet.\n * @param {Excel.Worksheet} worksheet - The worksheet to search in.\n * @param {string} columnLetter - The column letter (e.g., \"B\").\n * @returns {Promise<number>} - The 1-based index of the last used row, or 0 if the column is empty or an error occurs.\n */\nasync function getLastUsedRow(worksheet, columnLetter) {\n    // Re-use worksheet object passed into the function within this Excel.run\n    // Need context from the caller's Excel.run or wrap this in its own\n    console.log(`Attempting to get last used row for column ${columnLetter} in sheet ${worksheet.name}`);\n    try {\n        // It's safer to re-get the worksheet by name if this is called outside the main loop's context\n        // However, if called within the loop's context, using the passed object is fine.\n        // For simplicity assuming it's called within a valid context for now.\n        const fullColumn = worksheet.getRange(`${columnLetter}:${columnLetter}`);\n        const usedRange = fullColumn.getUsedRange(true); // Use 'true' for valuesOnly parameter\n        const lastCell = usedRange.getLastCell();\n        lastCell.load(\"rowIndex\");\n        await worksheet.context.sync(); // Use the context associated with the worksheet object\n        const lastRowIndex = lastCell.rowIndex + 1; // Convert 0-based index to 1-based row number\n        console.log(`Last used row in column ${columnLetter} is ${lastRowIndex}`);\n        return lastRowIndex;\n    } catch (error) {\n        // Handle cases where the column might be completely empty or other errors\n        if (error.code === \"ItemNotFound\" || error.code === \"GeneralException\") {\n            console.warn(`Could not find used range or last cell in column ${columnLetter} of sheet ${worksheet.name}. Assuming empty or header only (returning 0).`);\n            return 0; // Return 0 if column is empty or error occurs\n        }\n        console.error(`Error in getLastUsedRow for column ${columnLetter} on sheet ${worksheet.name}:`, error);\n        // It's often better to let the caller handle the error if it's unexpected.\n        throw error; // Re-throw other errors\n    }\n    // Note: Removed the inner Excel.run as it complicates context management.\n    // This function now expects to be called *within* an existing Excel.run context.\n}\n\n/**\n * Adjusts driver references in column AE based on lookups in column A.\n * Replicates the core logic of VBA Adjust_Drivers.\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\n * @param {number} lastRow - The last row to process (inclusive).\n */\nasync function adjustDriversJS(worksheet, lastRow) {\n    const START_ROW = 10; // <<< CHANGED FROM 9\n    const DRIVER_CODE_COL = \"F\"; // Column containing the driver code to look up\n    const LOOKUP_COL = \"A\";      // Column to search for the driver code\n    const TARGET_COL = \"AE\";     // Column where the result address string is written\n\n    console.log(`Running adjustDriversJS for sheet: ${worksheet.name} from row ${START_ROW} to ${lastRow}`);\n\n    // Ensure lastRow is valid before proceeding\n    if (lastRow < START_ROW) {\n        console.warn(`adjustDriversJS: lastRow (${lastRow}) is less than START_ROW (${START_ROW}). Skipping.`);\n        return;\n    }\n\n    try {\n        // Define the ranges to load\n        const driverCodeRangeAddress = `${DRIVER_CODE_COL}${START_ROW}:${DRIVER_CODE_COL}${lastRow}`;\n        const lookupRangeAddress = `${LOOKUP_COL}${START_ROW}:${LOOKUP_COL}${lastRow}`;\n        const driverCodeRange = worksheet.getRange(driverCodeRangeAddress);\n        const lookupRange = worksheet.getRange(lookupRangeAddress);\n\n        // Load values from both columns\n        driverCodeRange.load(\"values\");\n        lookupRange.load(\"values\");\n        await worksheet.context.sync(); // Sync to get the values\n\n        const driverCodeValues = driverCodeRange.values;\n        const lookupValues = lookupRange.values;\n\n        // Create a map for efficient lookup: { lookupValue: rowIndex }\n        // Note: rowIndex here is the 1-based Excel row number\n        const lookupMap = new Map();\n        for (let i = 0; i < lookupValues.length; i++) {\n            const value = lookupValues[i][0];\n            // Only add non-empty values to the map. Handle potential duplicates?\n            // VBA's .Find typically finds the first match. Map naturally stores the last encountered.\n            if (value !== null && value !== \"\") {\n                 // The row number in Excel is START_ROW + index\n                lookupMap.set(value, START_ROW + i);\n            }\n        }\n        console.log(`Built lookup map from ${LOOKUP_COL}${START_ROW}:${LOOKUP_COL}${lastRow} with ${lookupMap.size} entries.`);\n\n        // Prepare the output values for the target column AE\n        // Initialize with nulls or empty strings to clear previous values potentially\n        const outputValues = []; // Array of arrays for Excel range: [[value1], [value2], ...]\n        let foundCount = 0;\n        let notFoundCount = 0;\n\n        for (let i = 0; i < driverCodeValues.length; i++) {\n            const driverCode = driverCodeValues[i][0];\n            const currentRow = START_ROW + i; // Current Excel row being processed\n\n            if (driverCode !== null && driverCode !== \"\") {\n                if (lookupMap.has(driverCode)) {\n                    const foundRow = lookupMap.get(driverCode);\n                    const targetAddress = `${TARGET_COL}${foundRow}`;\n                    outputValues.push([targetAddress]); // Store as [[value]] for range write\n                    foundCount++;\n                    // console.log(`Row ${currentRow} (${DRIVER_CODE_COL}): Found '${driverCode}' in ${LOOKUP_COL} at row ${foundRow}. Setting ${TARGET_COL}${currentRow} = '${targetAddress}'`);\n                } else {\n                    // Value in F not found in A\n                    console.warn(`adjustDriversJS: Driver code '${driverCode}' from cell ${DRIVER_CODE_COL}${currentRow} not found in range ${lookupRangeAddress}.`);\n                    outputValues.push([null]); // Or [\"\"] or keep existing? VBA doesn't explicitly clear. Using null.\n                    notFoundCount++;\n                }\n            } else {\n                // Empty cell in F, write null to corresponding AE cell\n                outputValues.push([null]);\n            }\n        }\n\n        // Write the results back to column AE\n        if (outputValues.length > 0) {\n            const targetRangeAddress = `${TARGET_COL}${START_ROW}:${TARGET_COL}${lastRow}`;\n            const targetRange = worksheet.getRange(targetRangeAddress);\n            console.log(`Writing ${foundCount} results (${notFoundCount} not found) to ${targetRangeAddress}`);\n            targetRange.values = outputValues;\n            // Sync will happen in the caller's context\n        } else {\n             console.log(`adjustDriversJS: No values to write to ${TARGET_COL}.`);\n        }\n\n    } catch (error) {\n        console.error(`Error in adjustDriversJS for sheet ${worksheet.name}:`, error);\n        // Decide if error should be re-thrown to stop the whole process\n        // throw error;\n    }\n    // No context.sync() here - it should be handled by the calling function (processAssumptionTabs)\n}\n\n/**\n * Replaces INDIRECT functions in a specified column range with their evaluated values.\n * Mimics the VBA Replace_Indirects logic using batched range value lookups.\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\n * @param {number} lastRow - The last row to process.\n */\nasync function replaceIndirectsJS(worksheet, lastRow) {\n    const START_ROW = 10; // <<< CHANGED FROM 9\n    const TARGET_COL = \"AE\";\n\n    console.log(`Running replaceIndirectsJS for sheet: ${worksheet.name} from row ${START_ROW} to ${lastRow}`);\n\n    if (lastRow < START_ROW) {\n        console.warn(`replaceIndirectsJS: lastRow (${lastRow}) is less than START_ROW (${START_ROW}). Skipping.`);\n        return;\n    }\n\n    const targetRangeAddress = `${TARGET_COL}${START_ROW}:${TARGET_COL}${lastRow}`;\n    const targetRange = worksheet.getRange(targetRangeAddress);\n\n    try {\n        // 1. Load formulas from the target range\n        targetRange.load(\"formulas\");\n        await worksheet.context.sync();\n\n        const originalFormulas = targetRange.formulas; // 2D array [[f1], [f2], ...]\n        const referencesToLookup = new Map(); // Map<string, { range: Excel.Range | null, value: any }>\n        const formulaData = []; // Array<{ originalFormula: string, index: number }>\n\n        // 2. First Pass: Identify all unique INDIRECT arguments\n        console.log(\"Replace_Indirects: Pass 1 - Identifying INDIRECT arguments\");\n        for (let i = 0; i < originalFormulas.length; i++) {\n            let formula = originalFormulas[i][0];\n            formulaData.push({ originalFormula: formula, index: i }); // Store original formula and index\n\n            if (typeof formula === 'string') {\n                // Use a loop to find all INDIRECT occurrences in a single formula\n                let searchStartIndex = 0;\n                while (true) {\n                    const upperFormula = formula.toUpperCase();\n                    const indirectStartIndex = upperFormula.indexOf(\"INDIRECT(\", searchStartIndex);\n\n                    // Stop if no more INDIRECT found or if it might be part of INDEX\n                    if (indirectStartIndex === -1 || upperFormula.includes(\"INDEX(\")) {\n                        break;\n                    }\n\n                    // Find the matching closing parenthesis (simple approach)\n                    const parenStartIndex = indirectStartIndex + \"INDIRECT(\".length;\n                    const parenEndIndex = formula.indexOf(\")\", parenStartIndex);\n\n                    if (parenEndIndex === -1) {\n                        console.warn(`Row ${START_ROW + i}: Malformed INDIRECT found in formula: ${formula}`);\n                        break; // Cannot process this INDIRECT\n                    }\n\n                    const argString = formula.substring(parenStartIndex, parenEndIndex).trim();\n\n                    // Validate argString looks like a cell/range reference (basic check)\n                    // This helps avoid trying to load ranges like \"Sheet1!A:A\" which might fail or be slow\n                    if (argString && /^[A-Za-z0-9_!$:'\". ]+$/.test(argString) && !referencesToLookup.has(argString)) {\n                         console.log(`  Found reference to lookup: ${argString}`);\n                         referencesToLookup.set(argString, { range: null, value: undefined }); // Placeholder\n                    }\n\n                    // Continue searching after this INDIRECT\n                    searchStartIndex = parenEndIndex + 1;\n                }\n            }\n        }\n\n        // 3. Batch Load Values for identified references\n        console.log(`Replace_Indirects: Loading values for ${referencesToLookup.size} unique references.`);\n        if (referencesToLookup.size > 0) {\n            for (const [refString, data] of referencesToLookup.entries()) {\n                try {\n                    // Attempt to get the range and load its value\n                    data.range = worksheet.getRange(refString);\n                    // Load values. Consider loading formulas too if INDIRECT might point to a formula cell.\n                    // Loading numberFormat might help distinguish between 0 and empty.\n                    data.range.load([\"values\", \"text\"]); // Load text to handle \"DELETE\" easily\n                } catch (rangeError) {\n                    console.warn(`Replace_Indirects: Error getting range for reference \"${refString}\". It might be invalid or on another sheet.`, rangeError.debugInfo || rangeError.message);\n                     // Keep data.range as null, will be handled later\n                    referencesToLookup.set(refString, { range: null, value: '#REF!' }); // Mark as error\n                }\n            }\n            await worksheet.context.sync(); // Sync all loaded values\n\n            // Populate the values in the map\n            for (const [refString, data] of referencesToLookup.entries()) {\n                 if (data.range) { // If range was successfully retrieved\n                     try {\n                         // Use .text to directly compare with \"DELETE\"\n                         // Use .values for the actual numeric/boolean value if not \"DELETE\"\n                        const cellText = data.range.text[0][0];\n                        if (cellText === \"DELETE\") {\n                            data.value = \"0\"; // Replace \"DELETE\" with \"0\" string as per VBA\n                        } else {\n                             // Use the actual value (could be string, number, boolean)\n                             // Prefer values[0][0] as it respects data types better than text\n                             data.value = data.range.values[0][0];\n                        }\n                     } catch (valueError) {\n                         console.warn(`Replace_Indirects: Error reading value for reference \"${refString}\" after sync.`, valueError.debugInfo || valueError.message);\n                         data.value = '#VALUE!'; // Or another suitable error indicator\n                     }\n                 }\n                 // If data.range was null or value fetch failed, data.value remains '#REF!' or '#VALUE!'\n            }\n             console.log(\"Replace_Indirects: Finished loading reference values.\");\n        }\n\n\n        // 4. Second Pass: Replace INDIRECT with looked-up values\n        console.log(\"Replace_Indirects: Pass 2 - Replacing INDIRECT calls.\");\n        const newFormulas = []; // Array of arrays: [[newF1], [newF2], ...]\n        for (const item of formulaData) {\n            let currentFormula = item.originalFormula;\n\n            if (typeof currentFormula === 'string') {\n                let loopCount = 0; // Safety break\n                const MAX_LOOPS = 20; // Prevent infinite loops for complex/circular cases\n\n                while (loopCount < MAX_LOOPS) {\n                    const upperFormula = currentFormula.toUpperCase();\n                    const indirectStartIndex = upperFormula.indexOf(\"INDIRECT(\");\n\n                    if (indirectStartIndex === -1 || upperFormula.includes(\"INDEX(\")) {\n                        break; // No more INDIRECTs (or INDEX present)\n                    }\n\n                    const parenStartIndex = indirectStartIndex + \"INDIRECT(\".length;\n                    const parenEndIndex = currentFormula.indexOf(\")\", parenStartIndex);\n\n                    if (parenEndIndex === -1) {\n                         // Already warned in pass 1, just break here\n                        break;\n                    }\n\n                    const indString = currentFormula.substring(indirectStartIndex, parenEndIndex + 1); // The full INDIRECT(...)\n                    const argString = currentFormula.substring(parenStartIndex, parenEndIndex).trim();\n\n                    let directRef = '#REF!'; // Default if lookup fails\n                     if (referencesToLookup.has(argString)) {\n                         directRef = referencesToLookup.get(argString).value;\n                     } else {\n                         // Argument wasn't identified/loaded (maybe invalid?)\n                         console.warn(`Row ${START_ROW + item.index}: INDIRECT argument \"${argString}\" not found in lookup map during replacement.`);\n                     }\n\n                    // Handle potential null/undefined values from lookup - treat as 0? VBA doesn't explicitly handle this.\n                    // Let's treat null/undefined as 0 for replacement to avoid inserting 'null' or 'undefined' into formulas.\n                     // Empty string \"\" should probably remain \"\" unless it was \"DELETE\".\n                     if (directRef === null || typeof directRef === 'undefined') {\n                         directRef = 0; // Replace null/undefined with numeric 0\n                     } else if (directRef === \"\") {\n                          // Keep empty string as empty string unless it was originally \"DELETE\"\n                          // The map handles \"DELETE\" -> \"0\" already\n                     } else if (typeof directRef === 'string') {\n                         // If the resolved value is a string, potentially needs quoting if replacing in a formula context?\n                         // VBA seems to just concatenate the value directly. Let's follow that.\n                         // Example: =SUM(INDIRECT(\"A1\")) where A1 contains \"B2\" becomes =SUM(B2)\n                         // Example: =CONCATENATE(\"Result: \",INDIRECT(\"A1\")) where A1 contains \"Success\" becomes =CONCATENATE(\"Result: \",\"Success\") - requires quotes?\n                         // VBA appears to handle this implicitly. JS replace won't add quotes.\n                         // Let's test behavior, may need adjustment if it breaks formulas expecting strings.\n                         // For now, direct replacement. Consider adding quotes if `directRef` is text AND the context requires it.\n                     } else if (typeof directRef === 'boolean') {\n                         directRef = directRef ? 'TRUE' : 'FALSE'; // Convert boolean to formula text\n                     }\n                     // Numeric values are fine as is.\n\n                    // Perform the replacement. Use replace directly on the found indString.\n                    currentFormula = currentFormula.replace(indString, String(directRef));\n                    loopCount++;\n\n                } // End while loop for single formula processing\n\n                if (loopCount === MAX_LOOPS) {\n                    console.warn(`Row ${START_ROW + item.index}: Max replacement loops reached for formula. Result might be incomplete: ${currentFormula}`);\n                }\n            }\n            // Add the processed formula (or original if not string/no INDIRECT) to the result array\n            newFormulas.push([currentFormula]);\n\n        } // End for loop processing all formulas\n\n        // 5. Write the modified formulas back to the range\n        console.log(`Replace_Indirects: Writing ${newFormulas.length} updated formulas back to ${targetRangeAddress}`);\n        targetRange.formulas = newFormulas;\n\n        // Sync is handled by the caller (processAssumptionTabs)\n\n    } catch (error) {\n        console.error(`Error in replaceIndirectsJS for sheet ${worksheet.name} range ${targetRangeAddress}:`, error.debugInfo || error);\n        // Re-throw the error to allow the calling function to handle it\n        throw error;\n    }\n}\n\n/**\n * Placeholder for Populate_Financials VBA logic.\n * Populates the \"Financials\" sheet based on codes in the assumption sheet.\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\n * @param {number} lastRow - The last row to process in the assumption sheet.\n * @param {Excel.Worksheet} financialsSheet - The \"Financials\" worksheet (within the same Excel.run context).\n */\nasync function populateFinancialsJS(worksheet, lastRow, financialsSheet) {\n    console.log(`Running populateFinancialsJS for sheet: ${worksheet.name} (lastRow: ${lastRow}) -> ${financialsSheet.name}`);\n    // This function MUST be called within an Excel.run context.\n\n    const CALCS_FIRST_ROW = 10; // <<< CHANGED FROM 9 // Same as START_ROW elsewhere\n    const ASSUMPTION_CODE_COL = \"C\"; // Column with code to lookup on assumption sheet\n    const ASSUMPTION_LINK_COL_B = \"B\";\n    const ASSUMPTION_LINK_COL_D = \"D\";\n    // Column on assumption sheet to link for monthly data\n    const ASSUMPTION_MONTHS_START_COL = \"AE\";\n\n    const FINANCIALS_CODE_COLUMN = \"I\"; // Column to search for code on Financials sheet\n    const FINANCIALS_TARGET_COL_B = \"B\";\n    const FINANCIALS_TARGET_COL_D = \"D\";\n    const FINANCIALS_ANNUALS_START_COL = \"J\"; // Annuals start here\n    const FINANCIALS_MONTHS_START_COL = \"AE\"; // Months start here\n\n    // --- Updated Column Definitions ---\n    const ANNUALS_END_COL = \"P\";       // Annuals end here\n    const MONTHS_END_COL = \"CX\";       // Months end here\n    // --- End Updated Column Definitions ---\n\n    // Formatting constants\n    // const PURPLE_COLOR = \"#800080\"; // RGB(128, 0, 128) - Removed as Actuals section is removed\n    const GREEN_COLOR = \"#008000\";  // RGB(0, 128, 0)\n    const CURRENCY_FORMAT = '_(* $#,##0_);_(* $(#,##0);_(* \"$\" -_);_(@_)';\n\n    // Ensure lastRow is valid\n    if (lastRow < CALCS_FIRST_ROW) {\n        console.warn(`populateFinancialsJS: lastRow (${lastRow}) is less than CALCS_FIRST_ROW (${CALCS_FIRST_ROW}). Skipping.`);\n        return;\n    }\n\n    try {\n        // 1. Load data from Assumption Sheet\n        console.log(`populateFinancialsJS: Loading assumption data up to row ${lastRow}`);\n        const assumptionCodeRange = worksheet.getRange(`${ASSUMPTION_CODE_COL}${CALCS_FIRST_ROW}:${ASSUMPTION_CODE_COL}${lastRow}`);\n        // No need to load B, D, AE addresses/values here anymore if only used for linking\n\n        assumptionCodeRange.load(\"values\");\n\n        // 2. Load data from Financials Sheet (Find last row in code column I)\n        const financialsSearchCol = financialsSheet.getRange(`${FINANCIALS_CODE_COLUMN}:${FINANCIALS_CODE_COLUMN}`);\n        const financialsUsedRange = financialsSearchCol.getUsedRange(true);\n        financialsUsedRange.load(\"rowCount\");\n        // It's okay to sync assumption and initial financials loads together\n        // await worksheet.context.sync(); // Removed intermediate sync\n\n        let financialsLastRow = 0;\n        // Sync financials rowCount load before calculating financialsLastRow\n        await worksheet.context.sync();\n        if (financialsUsedRange.rowCount > 0) {\n           try {\n              const lastCell = financialsUsedRange.getLastCell();\n              lastCell.load(\"rowIndex\");\n               await worksheet.context.sync();\n              financialsLastRow = lastCell.rowIndex + 1;\n           } catch(e) {\n               console.warn(`Could not get last cell directly for Financials col ${FINANCIALS_CODE_COLUMN}. Error: ${e.message}. Attempting fallback range loading.`);\n               try {\n                   // Use a potentially more reliable column like B for last row fallback\n                   const fallbackRange = financialsSheet.getRange(`${FINANCIALS_TARGET_COL_B}1:${FINANCIALS_TARGET_COL_B}10000`); // Check Col B\n                   fallbackRange.load(\"values\");\n                   await worksheet.context.sync();\n                   for (let i = fallbackRange.values.length - 1; i >= 0; i--) {\n                       if (fallbackRange.values[i][0] !== null && fallbackRange.values[i][0] !== \"\") {\n                           financialsLastRow = i + 1;\n                           break;\n                       }\n                   }\n                   if (financialsLastRow === 0) console.warn(`Fallback range load for Financials col ${FINANCIALS_TARGET_COL_B} also yielded no data.`);\n               } catch (fallbackError) {\n                    console.error(`Error during fallback range loading for Financials col ${FINANCIALS_TARGET_COL_B}:`, fallbackError);\n                    financialsLastRow = 0; // Keep it 0 if fallback fails\n               }\n           }\n        }\n        // Recalculate financialsLastRow based on Col B if it's potentially larger\n        try {\n            const lastRowB = await getLastUsedRow(financialsSheet, FINANCIALS_TARGET_COL_B);\n            financialsLastRow = Math.max(financialsLastRow, lastRowB);\n        } catch (lastRowBErr) {\n            console.warn(`Could not get last row from Col B: ${lastRowBErr.message}`);\n        }\n\n        console.log(`Financials last relevant row used for processing: ${financialsLastRow}`);\n\n\n        // 3. Create Map of Financials Codes (Col I) -> Row Number\n        const financialsCodeMap = new Map();\n        if (financialsLastRow > 0) {\n            const financialsCodeRange = financialsSheet.getRange(`${FINANCIALS_CODE_COLUMN}1:${FINANCIALS_CODE_COLUMN}${financialsLastRow}`);\n            financialsCodeRange.load(\"values\");\n            await worksheet.context.sync(); // Sync map data load\n            for (let i = 0; i < financialsCodeRange.values.length; i++) {\n                const code = financialsCodeRange.values[i][0];\n                if (code !== null && code !== \"\") {\n                    // Only map the first occurrence of a code, like .Find would\n                    if (!financialsCodeMap.has(code)) {\n                         financialsCodeMap.set(code, i + 1);\n                    }\n                }\n            }\n            console.log(`Built Financials code map with ${financialsCodeMap.size} entries.`);\n        } else {\n            console.warn(`Financials sheet column ${FINANCIALS_CODE_COLUMN} appears empty or last row not found. No codes loaded for map.`);\n        }\n\n        // *** REMOVED: Logic for existingDataLinks Set ***\n        // const existingDataLinks = new Set();\n        // if (financialsLastRow > 0) {\n        //     ... load formulas from Financials Col B ...\n        //     ... populate existingDataLinks set ...\n        // }\n        // *** END REMOVED ***\n\n        // 4. Identify rows to insert and prepare task data\n        const tasks = [];\n        console.log(\"populateFinancialsJS: Syncing assumption codes load...\");\n        await worksheet.context.sync(); // Sync needed for assumptionCodeRange.values\n\n        // *** RELOAD assumption codes here AFTER the sync above, just in case ***\n        // It's safer to reload after any potential sync/modification, though unlikely needed here.\n        // Keeping the original load before the Financials code map creation seems okay.\n        const assumptionCodes = assumptionCodeRange.values; // Use the already loaded values\n\n        console.log(`populateFinancialsJS: Processing ${assumptionCodes?.length ?? 0} assumption rows.`);\n\n        // --- REMOVED Debug logging for row 17 values/addresses ---\n\n        for (let i = 0; i < (assumptionCodes?.length ?? 0); i++) {\n            const code = assumptionCodes[i][0];\n            const assumptionRow = CALCS_FIRST_ROW + i; // This is the correct Excel row number\n\n            if (code !== null && code !== \"\") {\n                // Construct the potential link formulas first\n                const linkFormulaB = `='${worksheet.name}'!${ASSUMPTION_LINK_COL_B}${assumptionRow}`;\n                const linkFormulaD = `='${worksheet.name}'!${ASSUMPTION_LINK_COL_D}${assumptionRow}`;\n                const linkFormulaMonths = `='${worksheet.name}'!${ASSUMPTION_MONTHS_START_COL}${assumptionRow}`;\n\n                // *** REMOVED CHECK 1: Skip if this assumption row link already exists in Financials Col B ***\n                // if (existingDataLinks.has(linkFormulaB)) {\n                //     console.log(`  Skipping Code ${code} (Assumption Row ${assumptionRow}): Link ${linkFormulaB} already exists in Financials!${FINANCIALS_TARGET_COL_B}.`);\n                //     continue; // Skip to next assumption code\n                // }\n\n                // *** ORIGINAL CHECK (modified): Check if code exists in the Financials template map ***\n                if (!financialsCodeMap.has(code)) {\n                     console.log(`  Skipping Code ${code} (Assumption Row ${assumptionRow}): Code not found in Financials template column ${FINANCIALS_CODE_COLUMN}. Cannot determine target row.`);\n                     continue; // Skip if no template row found\n                }\n\n                // If the code exists in the map, proceed to create the task\n                const targetRow = financialsCodeMap.get(code); // Get the row number from the map\n                console.log(`  Task Prep: Code ${code} (Assumption Row ${assumptionRow}) -> Target Financials Row (for insertion): ${targetRow}`);\n\n                tasks.push({\n                    targetRow: targetRow,\n                    assumptionRow: assumptionRow,\n                    code: code,\n                    addressB: linkFormulaB,     // Use the constructed formula link\n                    addressD: linkFormulaD,     // Use the constructed formula link\n                    addressMonths: linkFormulaMonths // Use the constructed formula link\n                });\n            }\n        }\n\n        if (tasks.length === 0) {\n            console.log(\"No matching codes found. Nothing to insert or populate.\");\n            return;\n        }\n\n        // 5. Sort tasks by targetRow DESCENDING\n        tasks.sort((a, b) => b.targetRow - a.targetRow);\n        console.log(`Sorted ${tasks.length} tasks for insertion.`);\n        // --- DEBUG: Log the tasks array --- \n        // console.log(\"Tasks array (sorted desc by targetRow):\", JSON.stringify(tasks)); // REMOVED DEBUG\n        // --- END DEBUG ---\n\n        // 6. Perform Insertions (bottom-up)\n        console.log(\"Performing row insertions...\");\n        for (const task of tasks) { // Uses the DESCENDING sorted tasks\n            financialsSheet.getRange(`${task.targetRow}:${task.targetRow}`).insert(Excel.InsertShiftDirection.down);\n            // *** It's generally more efficient to sync less often, but syncing after each insert\n            // ensures the row model is updated for potential complex dependencies if they existed.\n            // Keep sync here for now unless performance becomes an issue. ***\n            // await worksheet.context.sync(); // Sync after EACH insertion -- REMOVED THIS LINE\n        }\n        await worksheet.context.sync(); // Sync AFTER all insertions are queued\n        console.log(\"Finished row insertions.\");\n\n        // Pre-calculate the final adjusted row for each task after all insertions\n        console.log(\"Calculating final adjusted rows for population/autofill...\");\n        // Get unique original target rows, sorted ascending\n        const originalTargetRowsAsc = [...new Set(tasks.map(t => t.targetRow))].sort((a, b) => a - b);\n        const taskAdjustedRows = new Map(); // Map to store { assumptionRow: adjustedRow }\n        let totalShift = 0; // Total shift accumulated from previous rows\n\n        // --- DEBUG: Log originalTargetRowsAsc ---\n        // console.log(\"Original Target Rows (unique, asc):\", originalTargetRowsAsc); // REMOVED DEBUG\n        // --- END DEBUG ---\n\n        originalTargetRowsAsc.forEach(uniqueRow => {\n            // --- DEBUG: Log current uniqueRow ---\n            // console.log(`Processing uniqueRow: ${uniqueRow}`); // REMOVED DEBUG\n            // --- END DEBUG ---\n\n            // Find all tasks that originally targeted this unique row\n            // CORRECTED PROPERTY NAME IN FILTER: task.targetRow instead of task.originalTargetRow\n            const tasksAtThisRow = tasks.filter(task => task.targetRow === uniqueRow);\n\n            // --- DEBUG: Log tasks found for this uniqueRow ---\n            // console.log(`  Tasks found for uniqueRow ${uniqueRow}:`, JSON.stringify(tasksAtThisRow)); // REMOVED DEBUG\n            // --- END DEBUG ---\n\n            // Optional: Sort tasksAtThisRow by assumptionRow for deterministic order, though might not be strictly necessary\n            // tasksAtThisRow.sort((a, b) => a.assumptionRow - b.assumptionRow);\n\n            let currentAdjustedRowForGroup = uniqueRow + totalShift; // Starting adjusted row for this group\n\n            // Assign consecutive adjusted rows to each task in this group\n            tasksAtThisRow.forEach(task => {\n                taskAdjustedRows.set(task.assumptionRow, currentAdjustedRowForGroup); // Use assumptionRow as key\n                console.log(`  Mapping: Code ${task.code}, Assumption Row ${task.assumptionRow}, Original Target ${uniqueRow}, Final Adjusted Row ${currentAdjustedRowForGroup}`);\n                currentAdjustedRowForGroup++; // Increment for the next task inserting at the same original spot\n            });\n\n            // Update the total shift for subsequent unique rows\n            totalShift += tasksAtThisRow.length;\n        });\n\n        // --- DEBUG: Log the contents of the map --- \n        // console.log(\"taskAdjustedRows map contents:\", taskAdjustedRows); // REMOVED DEBUG\n        // --- END DEBUG ---\n\n        // 7. Populate and Format inserted rows using ADJUSTED row numbers\n        console.log(\"Populating inserted rows (using adjusted rows)...\");\n        for (const task of tasks) { // Iterates descending sorted tasks (order doesn't strictly matter here, but using the same loop)\n            // const originalTargetRow = task.targetRow; // No longer needed for lookup\n            const populateRow = taskAdjustedRows.get(task.assumptionRow); // Get the calculated adjusted row using assumptionRow\n\n            // Check if populateRow was found\n            if (typeof populateRow === 'undefined' || populateRow === null) {\n                console.error(`Could not find adjusted row for task with Assumption Row ${task.assumptionRow}, Code ${task.code}. Skipping population.`);\n                continue; // Skip this task if mapping failed\n            }\n\n            // Use populateRow instead of task.targetRow for getRange calls\n            const cellB = financialsSheet.getRange(`${FINANCIALS_TARGET_COL_B}${populateRow}`);\n            const cellD = financialsSheet.getRange(`${FINANCIALS_TARGET_COL_D}${populateRow}`);\n            const cellAnnualsStart = financialsSheet.getRange(`${FINANCIALS_ANNUALS_START_COL}${populateRow}`);\n            const cellMonthsStart = financialsSheet.getRange(`${FINANCIALS_MONTHS_START_COL}${populateRow}`);\n\n            // --- Populate Column B ---\n            cellB.formulas = [[task.addressB]]; // Set formula directly\n            cellB.format.font.bold = false;\n            cellB.format.font.italic = false;\n            cellB.format.indentLevel = 2;\n\n            // --- Populate Column D ---\n            cellD.formulas = [[task.addressD]]; // Set formula directly\n            cellD.format.font.bold = false;\n            cellD.format.font.italic = false;\n            cellD.format.indentLevel = 2;\n\n            // --- Populate Annuals Start Column (J) with SUMIF ---\n            const codePrefix = String(task.code).substring(0, 2).toUpperCase();\n            let formulaJ = \"\";\n            if (codePrefix === \"IS\" || codePrefix === \"CF\") {\n                 // Corrected R2C[1] to R2C: Criteria should reference current column's header (J$2)\n                 formulaJ = `=SUMIF(R3,R2C,R[0])`;\n            } else {\n                 // Corrected R2C[1] to R2C: Criteria should reference current column's header (J$2)\n                 formulaJ = `=SUMIF(R4,R2C,R[0])`;\n            }\n            cellAnnualsStart.formulasR1C1 = [[formulaJ]]; // Use formulasR1C1 for SUMIF\n            cellAnnualsStart.format.font.bold = false;\n            cellAnnualsStart.format.font.italic = false;\n            cellAnnualsStart.format.numberFormat = CURRENCY_FORMAT;\n\n            // --- Populate Months Start Column (AE) with Link ---\n            cellMonthsStart.formulas = [[task.addressMonths]]; // Set formula directly\n            cellMonthsStart.format.font.bold = false;\n            cellMonthsStart.format.font.italic = false;\n            cellMonthsStart.format.font.color = GREEN_COLOR; // Keep green color for month links\n            cellMonthsStart.format.numberFormat = CURRENCY_FORMAT;\n\n            // Removed Actuals column population (was L in previous version)\n            \n            // --- NEW: Populate Actuals Columns S:AD with SUMIFS formula ---\n            try {\n                const actualsRange = financialsSheet.getRange(`S${populateRow}:AD${populateRow}`);\n                const sumifsFormula = \"=SUMIFS('Actual Data'!$B:$B,'Actual Data'!$D:$D,EOMONTH(INDIRECT(ADDRESS(2,COLUMN())),0),'Actual Data'!$E:$E,@INDIRECT(ADDRESS(ROW(),2)))\";\n                \n                // Create a 2D array matching the range dimensions\n                const numCols = columnLetterToIndex('AD') - columnLetterToIndex('S') + 1;\n                const formulasArray = [Array(numCols).fill(sumifsFormula)];\n                actualsRange.formulas = formulasArray;\n                \n                // Apply formatting\n                actualsRange.format.numberFormat = CURRENCY_FORMAT;\n                actualsRange.format.font.bold = false;\n                actualsRange.format.font.italic = false;\n                actualsRange.format.font.color = \"#7030A0\"; // Set font color\n                console.log(`  Set SUMIFS formula for S${populateRow}:AD${populateRow}`);\n            } catch (sumifsError) {\n                console.error(`Error setting SUMIFS formula for row ${populateRow} (Code: ${task.code}):`, sumifsError.debugInfo || sumifsError);\n            }\n            // --- END NEW SECTION ---\n        }\n        console.log(\"Finished setting values/formulas/formats for inserted rows.\");\n        await worksheet.context.sync(); // Sync all population and formatting\n\n\n        // 8. Perform Autofills using ADJUSTED row numbers\n        console.log(\"Performing autofills (using adjusted rows)...\");\n        for (const task of tasks) { // Uses the DESCENDING sorted tasks again\n             // const originalTargetRow = task.targetRow; // No longer needed for lookup\n             const populateRow = taskAdjustedRows.get(task.assumptionRow); // Get the calculated adjusted row using assumptionRow\n\n             // Check if populateRow was found\n            if (typeof populateRow === 'undefined' || populateRow === null) {\n                console.error(`Could not find adjusted row for task with Assumption Row ${task.assumptionRow}, Code ${task.code}. Skipping autofill.`);\n                continue; // Skip this task if mapping failed\n            }\n\n             try {\n                // Use populateRow for autofill ranges\n                // Autofill Annuals: J -> P\n                const sourceAnnuals = financialsSheet.getRange(`${FINANCIALS_ANNUALS_START_COL}${populateRow}`); // Use adjusted row\n                const destAnnuals = financialsSheet.getRange(`${FINANCIALS_ANNUALS_START_COL}${populateRow}:${ANNUALS_END_COL}${populateRow}`); // Use adjusted row\n                sourceAnnuals.autoFill(destAnnuals, Excel.AutoFillType.fillDefault);\n                // console.log(`  Autofilled ${FINANCIALS_ANNUALS_START_COL}${populateRow} to ${ANNUALS_END_COL}${populateRow}`);\n\n                // Autofill Months: AE -> CX\n                const sourceMonths = financialsSheet.getRange(`${FINANCIALS_MONTHS_START_COL}${populateRow}`); // Use adjusted row\n                const destMonths = financialsSheet.getRange(`${FINANCIALS_MONTHS_START_COL}${populateRow}:${MONTHS_END_COL}${populateRow}`); // Use adjusted row\n                sourceMonths.autoFill(destMonths, Excel.AutoFillType.fillDefault);\n                // console.log(`  Autofilled ${FINANCIALS_MONTHS_START_COL}${populateRow} to ${MONTHS_END_COL}${populateRow}`);\n\n                // Removed Actuals autofill\n             } catch(autofillError) {\n                 // Update error message to use adjusted row\n                 console.error(`Error during autofill for adjusted row ${populateRow} (Code: ${task.code}, Original Target: ${task.targetRow}):`, autofillError.debugInfo || autofillError);\n             }\n        }\n        console.log(\"Finished setting up autofills.\");\n        await worksheet.context.sync(); // Sync all autofill operations\n        console.log(\"Autofills synced.\");\n\n        // *** NEW STEP: Modify codes in Assumption Sheet Column C ***\n        console.log(`Modifying codes in ${worksheet.name} column ${ASSUMPTION_CODE_COL} (${CALCS_FIRST_ROW}:${lastRow}) by prepending '-'...`);\n        try {\n            // Re-get the range and load values (ensure we have the latest state)\n            const codeColRange = worksheet.getRange(`${ASSUMPTION_CODE_COL}${CALCS_FIRST_ROW}:${ASSUMPTION_CODE_COL}${lastRow}`);\n            codeColRange.load(\"values\");\n            await worksheet.context.sync(); // Load the values\n\n            const currentCodeValues = codeColRange.values;\n            const modifiedCodeValues = [];\n            let modifiedCount = 0;\n\n            for (let i = 0; i < currentCodeValues.length; i++) {\n                const originalValue = currentCodeValues[i][0];\n                if (originalValue !== null && originalValue !== \"\" && !String(originalValue).startsWith('-')) {\n                    modifiedCodeValues.push([\"-\" + originalValue]); // Prepend \"-\"\n                    modifiedCount++;\n                } else {\n                    modifiedCodeValues.push([originalValue]); // Keep original if empty, null, or already starts with '-'\n                }\n            }\n\n            // Write the modified values back if any changes were made\n            if (modifiedCount > 0) {\n                 console.log(`  Writing ${modifiedCount} modified codes back to ${ASSUMPTION_CODE_COL}${CALCS_FIRST_ROW}:${ASSUMPTION_CODE_COL}${lastRow}`);\n                 codeColRange.values = modifiedCodeValues;\n                 await worksheet.context.sync(); // Sync the code modifications\n                 console.log(\"  Synced code modifications.\");\n            } else {\n                console.log(\"  No codes needed modification.\");\n            }\n        } catch (modifyError) {\n             console.error(`Error modifying codes in ${worksheet.name} column ${ASSUMPTION_CODE_COL}:`, modifyError.debugInfo || modifyError);\n             // Continue even if modification fails? Or throw? Let's log and continue.\n        }\n        // *** END NEW STEP ***\n\n\n        console.log(`populateFinancialsJS successfully completed for ${worksheet.name} -> ${financialsSheet.name}`);\n\n    } catch (error) {\n        console.error(`Error in populateFinancialsJS for sheet ${worksheet.name} -> ${financialsSheet.name}:`, error.debugInfo || error);\n        throw error;\n    }\n}\n\n/**\n * Placeholder for Format_Changes_In_Working_Capital VBA logic.\n * Inserts a row and adjusts formatting in \"Financials\" based on specific codes.\n * @param {Excel.Worksheet} financialsSheet - The \"Financials\" worksheet (within an Excel.run context).\n */\nasync function formatChangesInWorkingCapitalJS(financialsSheet) {\n    console.log(`Running formatChangesInWorkingCapitalJS for sheet: ${financialsSheet.name}`);\n    // This function MUST be called within an Excel.run context.\n    const FIND_TEXT_1 = \"CF: Non-cash\";\n    const FIND_TEXT_2 = \"CF: WC\";\n    const SEARCH_COLUMN = \"I\";\n     // Define ranges for border removal based on VBA (e.g., \"K\" + (foundRow + 1) + \":P\" + (foundRow + 1))\n\n    // TODO: Implement Format_Changes_In_Working_Capital logic\n    // 1. Find FIND_TEXT_1 in SEARCH_COLUMN using range.find\n    // 2. If found:\n    //    a. Get cell above (offset -1, 0)\n    //    b. Load its value\n    //    c. Sync\n    //    d. Check if value is FIND_TEXT_2\n    //    e. If yes:\n    //       i. Get the entire row of the found cell (.getEntireRow())\n    //       ii. Insert a new row above it (insert(Excel.InsertShiftDirection.down))\n    //       iii. Get ranges in the *original* row (now shifted down one) and remove borders.\n    financialsSheet.load('name'); // Keep reference valid if needed later in the SAME context\n    await financialsSheet.context.sync();\n     console.warn(`formatChangesInWorkingCapitalJS on ${financialsSheet.name} not implemented yet.`);\n}\n\n/**\n * Processes assumption tabs after runCodes, replicating VBA logic.\n * Expects an array of assumption tab names.\n * @param {string[]} assumptionTabNames - Array of assumption tab names created by runCodes.\n */\nexport async function processAssumptionTabs(assumptionTabNames) {\n    console.log(`Starting processing for ${assumptionTabNames.length} assumption tabs:`, assumptionTabNames);\n    if (!assumptionTabNames || assumptionTabNames.length === 0) {\n        console.log(\"No assumption tabs provided to process.\");\n        return;\n    }\n\n    const FINANCIALS_SHEET_NAME = \"Financials\"; // Define constant\n    const AUTOFILL_START_COLUMN = \"AE\";\n    const AUTOFILL_END_COLUMN = \"CX\";\n    const START_ROW = 10; // <<< CHANGED FROM 9 // Standard start row for processing\n\n    try {\n        // --- Loop through each assumption tab name ---\n        for (const worksheetName of assumptionTabNames) {\n             console.log(`\\nProcessing Assumption Tab: ${worksheetName}`);\n\n            try {\n                 // Perform operations for a single tab within one Excel.run for efficiency\n                 await Excel.run(async (context) => {\n                     // Get worksheet and financials sheet references within THIS context\n                     const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\n                     const financialsSheet = context.workbook.worksheets.getItem(FINANCIALS_SHEET_NAME);\n                     currentWorksheet.load('name'); // Load basic properties\n                     financialsSheet.load('name');\n                     await context.sync(); // Ensure sheets are loaded\n\n                     console.log(`Successfully got references for ${currentWorksheet.name} and ${financialsSheet.name}`);\n\n                     // 1. Get Last Row for the current assumption tab\n                     // getLastUsedRow needs context, so call it here\n                     const lastRow = await getLastUsedRow(currentWorksheet, \"B\"); // Pass currentWorksheet from this context\n                     if (lastRow < START_ROW) {\n                         console.warn(`Skipping tab ${worksheetName} as last used row in Col B (${lastRow}) is before start row (${START_ROW}).`);\n                         return; // Skip to next tab if empty or too short\n                     }\n                     console.log(`Last row in Col B for ${worksheetName}: ${lastRow}`);\n\n                     // --- Call helper functions IN ORDER, passing worksheet objects from this context ---\n                     // These helpers now expect to run within this context\n\n                     // 2. Adjust Drivers\n                     await adjustDriversJS(currentWorksheet, lastRow);\n\n                     // 3. Replace Indirects\n                     await replaceIndirectsJS(currentWorksheet, lastRow);\n\n                     // 4. Get Last Row Again (if Replace_Indirects might change it)\n                     // const updatedLastRow = await getLastUsedRow(currentWorksheet, \"B\"); // Recalculate if necessary\n                     const updatedLastRow = lastRow; // Assuming Replace_Indirects doesn't change last row for now\n                     console.log(`Using last row for subsequent steps: ${updatedLastRow}`);\n                     if (updatedLastRow < START_ROW) {\n                         console.warn(`Skipping remaining steps for ${worksheetName} as updated last row (${updatedLastRow}) is invalid.`);\n                         return;\n                     }\n\n                     // 5. Populate Financials\n                     await populateFinancialsJS(currentWorksheet, updatedLastRow, financialsSheet);\n\n                     // 6.5 Set font color to white in column A\n                     // We use updatedLastRow here, as deletions haven't happened yet\n                     await setColumnAFontWhite(currentWorksheet, START_ROW, updatedLastRow); \n                     console.log(`Set font color to white in column A from rows ${START_ROW}-${updatedLastRow}`);\n  \n                     // // Force recalculation before Index Growth Curve (especially if manual calc mode)\n                     // console.log(`Performing full workbook recalculation before Index Growth Curve for ${worksheetName}...`);\n                     // context.workbook.application.calculate(Excel.CalculationType.fullRebuild);\n                     // await context.sync(); // Sync the calculation\n                     // console.log(`Recalculation complete for ${worksheetName}.`);\n \n                      // 6.8 Apply Index Growth Curve logic (if applicable)\n                     // Run Index Growth *before* deleting rows. Use updatedLastRow as the boundary.\n                     await applyIndexGrowthCurveJS(currentWorksheet, updatedLastRow); \n                     \n                     // 7. Delete rows with green background (#CCFFCC) - AFTER Index Growth\n                     console.log(`Deleting green rows in ${worksheetName}...`);\n                     // Changed START_ROW to START_ROW - 1 to include row 9\n                     const finalLastRow = await deleteGreenRows(currentWorksheet, START_ROW - 1, updatedLastRow); // Get the new last row AFTER deletions\n                     console.log(`After deleting green rows, last row is now: ${finalLastRow}`);\n \n                     // 8. Autofill AE9:AE<lastRow> -> CX<lastRow> on Assumption Tab - Use finalLastRow\n                     console.log(`Autofilling ${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${finalLastRow} to ${AUTOFILL_END_COLUMN} on ${worksheetName}`);\n                     const sourceRange = currentWorksheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${finalLastRow}`);\n                     const fillRange = currentWorksheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_END_COLUMN}${finalLastRow}`);\n                     sourceRange.autoFill(fillRange, Excel.AutoFillType.fillDefault);\n \n                     // 9. Set Row 9 interior color to none\n                     console.log(`Setting row 9 interior color to none for ${worksheetName}`);\n                     const row9Range = currentWorksheet.getRange(\"9:9\");\n                     row9Range.format.fill.clear();\n\n                     // Sync all batched operations for this tab\n                     await context.sync();\n                     console.log(`Finished processing and syncing for tab ${worksheetName}`);\n\n                 }); // End Excel.run for single tab processing\n\n             } catch (tabError) {\n                 console.error(`Error processing tab ${worksheetName}:`, tabError);\n                 // Optionally add to an error list and continue with the next tab\n                 // Be mindful that subsequent tabs might depend on this one succeeding.\n             }\n        } // --- End loop through assumption tabs ---\n\n        // --- Final Operations on Financials Sheet ---\n        console.log(`\\nPerforming final operations on ${FINANCIALS_SHEET_NAME}`);\n        try {\n             await Excel.run(async (context) => {\n                 const finSheet = context.workbook.worksheets.getItem(FINANCIALS_SHEET_NAME);\n                 finSheet.load('name'); // Load name for logging\n                 await context.sync(); // Ensure sheet is loaded\n\n                 // 1. Format Changes In Working Capital\n                 // await formatChangesInWorkingCapitalJS(finSheet); // <<< COMMENTED OUT\n\n                 // 2. Get Last Row for Financials\n                 const financialsLastRow = await getLastUsedRow(finSheet, \"B\"); // Pass sheet from this context\n                 if (financialsLastRow < START_ROW) {\n                     console.warn(`Skipping final autofill on ${FINANCIALS_SHEET_NAME} as last row (${financialsLastRow}) is before start row (${START_ROW}).`);\n                     return;\n                 }\n                 console.log(`Last row in Col B for ${FINANCIALS_SHEET_NAME}: ${financialsLastRow}`);\n\n                //  // 3. Autofill AE9:AE<lastRow> -> CX<lastRow> on Financials\n                //  console.log(`Autofilling ${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${financialsLastRow} to ${AUTOFILL_END_COLUMN} on ${FINANCIALS_SHEET_NAME}`);\n                //  const sourceRangeFin = finSheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_START_COLUMN}${financialsLastRow}`);\n                //  const fillRangeFin = finSheet.getRange(`${AUTOFILL_START_COLUMN}${START_ROW}:${AUTOFILL_END_COLUMN}${financialsLastRow}`);\n                //  sourceRangeFin.autoFill(fillRangeFin, Excel.AutoFillType.fillDefault);\n\n\n                 // Sync final Financials sheet operations\n                 await context.sync();\n                 console.log(`Finished final operations on ${FINANCIALS_SHEET_NAME}`);\n             });\n         } catch (financialsError) {\n             console.error(`Error during final operations on ${FINANCIALS_SHEET_NAME}:`, financialsError);\n         }\n\n        console.log(\"Finished processing all assumption tabs.\");\n\n    } catch (error) {\n        console.error(\"Error in processAssumptionTabs main function:\", error);\n        // Potentially re-throw or handle top-level errors\n    }\n}\n\n/**\n * Deletes rows with light green background (#CCFFCC) in column B\n * @param {Excel.Worksheet} worksheet - The worksheet to process\n * @param {number} startRow - The first row to check\n * @param {number} lastRow - The last row to check\n * @returns {Promise<number>} - The new last row after deletions\n */\nasync function deleteGreenRows(worksheet, startRow, lastRow) {\n    console.log(`Deleting green rows (#CCFFCC) in ${worksheet.name} from row ${startRow} to ${lastRow}`);\n    \n    try {\n        // Create an array to store rows that need deletion (in descending order)\n        const rowsToDelete = [];\n        \n        // Process each row individually instead of as a range to avoid collection issues\n        for (let rowNum = startRow; rowNum <= lastRow; rowNum++) {\n            const cellAddress = `B${rowNum}`;\n            const cell = worksheet.getRange(cellAddress);\n            cell.load(\"format/fill/color\");\n            \n            try {\n                await worksheet.context.sync();\n                \n                // Safely check if properties exist and if color matches\n                if (cell.format && \n                    cell.format.fill && \n                    cell.format.fill.color === \"#CCFFCC\") {\n                    rowsToDelete.push(rowNum);\n                }\n            } catch (cellError) {\n                console.warn(`Error checking color for ${cellAddress}: ${cellError.message}`);\n                // Continue to next cell if there's an error with this one\n            }\n        }\n        \n        // Sort in descending order to delete from bottom to top\n        rowsToDelete.sort((a, b) => b - a);\n        \n        console.log(`Found ${rowsToDelete.length} green rows to delete`);\n        \n        // Delete each row (from bottom to top)\n        if (rowsToDelete.length > 0) {\n            for (const rowNum of rowsToDelete) {\n                console.log(`Deleting row ${rowNum}`);\n                const rowRange = worksheet.getRange(`${rowNum}:${rowNum}`);\n                rowRange.delete(Excel.DeleteShiftDirection.up);\n            }\n            \n            await worksheet.context.sync();\n            \n            // Recalculate the last row\n            const newLastRow = await getLastUsedRow(worksheet, \"B\");\n            console.log(`New last row after deletions: ${newLastRow}`);\n            \n            return newLastRow;\n        } else {\n            console.log(\"No green rows found to delete\");\n            return lastRow; // Return original lastRow if no rows deleted\n        }\n    } catch (error) {\n        console.error(`Error in deleteGreenRows: ${error.message}`, error);\n        // Return the original lastRow on error\n        return lastRow;\n    }\n}\n\n/**\n * Sets the font color to white for all cells in column A\n * @param {Excel.Worksheet} worksheet - The worksheet to process\n * @param {number} startRow - The first row to format\n * @param {number} lastRow - The last row to format\n * @returns {Promise<void>}\n */\nasync function setColumnAFontWhite(worksheet, startRow, lastRow) {\n    console.log(`Setting font color to white in column A for ${worksheet.name} from row ${startRow} to ${lastRow}`);\n    \n    try {\n        // Get the entire range for column A from startRow to lastRow\n        const columnARange = worksheet.getRange(`A${startRow}:A${lastRow}`);\n        \n        // Set the font color to white\n        columnARange.format.font.color = \"#FFFFFF\";\n        \n        await worksheet.context.sync();\n        console.log(`Successfully set font color to white in column A for rows ${startRow}-${lastRow}`);\n    } catch (error) {\n        console.error(`Error in setColumnAFontWhite: ${error.message}`, error);\n    }\n}\n\n// --- Helper Functions for Column Conversion ---\n\n/**\n * Converts a 0-based column index into a column letter (e.g., 0 -> A, 1 -> B, 26 -> AA).\n * @param {number} index - The 0-based column index.\n * @returns {string} The column letter.\n */\nfunction columnIndexToLetter(index) {\n    let letter = '';\n    while (index >= 0) {\n        letter = String.fromCharCode(index % 26 + 'A'.charCodeAt(0)) + letter;\n        index = Math.floor(index / 26) - 1;\n    }\n    return letter;\n}\n\n/**\n * Converts a column letter into a 0-based column index (e.g., A -> 0, B -> 1, AA -> 26).\n * @param {string} letter - The column letter (case-insensitive).\n * @returns {number} The 0-based column index.\n */\nfunction columnLetterToIndex(letter) {\n    letter = letter.toUpperCase();\n    let index = 0;\n    for (let i = 0; i < letter.length; i++) {\n        index = index * 26 + (letter.charCodeAt(i) - 'A'.charCodeAt(0) + 1);\n    }\n    return index - 1; // Adjust to 0-based\n}\n\n/**\n * Hides Columns C-I, Rows 2-8, and specific Actuals columns on specified sheets,\n * then navigates to cell A1 of the Financials sheet.\n * @param {string[]} assumptionTabNames - Array of assumption tab names created by runCodes.\n * @returns {Promise<void>}\n */\nexport async function hideColumnsAndNavigate(assumptionTabNames) { // Renamed and added parameter\n    // Define Actuals columns\n    const ACTUALS_START_COL = \"S\";\n    const ACTUALS_END_COL = \"AD\";\n\n    try {\n        const targetSheetNames = [...assumptionTabNames, \"Financials\"]; // Combine assumption tabs and Financials\n        console.log(`Attempting to hide specific rows/columns on sheets [${targetSheetNames.join(', ')}] and navigate...`);\n\n        await Excel.run(async (context) => {\n            // Get all worksheets\n            const worksheets = context.workbook.worksheets;\n            // Load only names needed for matching\n            worksheets.load(\"items/name\");\n            await context.sync();\n\n            console.log(`Found ${worksheets.items.length} worksheets. Targeting ${targetSheetNames.length} specific sheets.`);\n            let hideAttempted = false;\n\n            // Calculate actuals end column for assumption tabs\n            const actualsEndIndex = columnLetterToIndex(ACTUALS_END_COL);\n            const actualsEndMinusOneCol = actualsEndIndex > 0 ? columnIndexToLetter(actualsEndIndex - 1) : ACTUALS_START_COL; // Handle edge case\n\n            // --- Queue hiding operations for target sheets ---\n            for (const worksheet of worksheets.items) {\n                const sheetName = worksheet.name;\n                if (targetSheetNames.includes(sheetName)) { // Check if sheet is in our target list\n                    console.log(`Queueing hide operations for: ${sheetName}`);\n                    try {\n                        // Hide Rows 2:8 (Applies to both)\n                        const rows28 = worksheet.getRange(\"2:8\");\n                        rows28.rowHidden = true;\n\n                        // Conditional Column Hiding\n                        if (sheetName === \"Financials\") {\n                            console.log(`  -> Hiding Columns C:I for Financials`);\n                            const colsCI = worksheet.getRange(\"C:I\");\n                            colsCI.columnHidden = true;\n                        } else {\n                            // Hide Columns C:E for Assumption Tabs\n                            console.log(`  -> Hiding Columns C:E for ${sheetName}`);\n                            const colsCE = worksheet.getRange(\"C:E\");\n                            colsCE.columnHidden = true;\n                        }\n\n                        // Hide Actuals Columns based on sheet type\n                        if (sheetName === \"Financials\") {\n                            console.log(`  -> Hiding Actuals range ${ACTUALS_START_COL}:${ACTUALS_END_COL}`);\n                            const actualsRangeFin = worksheet.getRange(`${ACTUALS_START_COL}:${ACTUALS_END_COL}`);\n                            actualsRangeFin.columnHidden = true;\n                        } else if (assumptionTabNames.includes(sheetName)) {\n                             console.log(`  -> Hiding Actuals range ${ACTUALS_START_COL}:${actualsEndMinusOneCol}`);\n                             const actualsRangeAssum = worksheet.getRange(`${ACTUALS_START_COL}:${actualsEndMinusOneCol}`);\n                             actualsRangeAssum.columnHidden = true;\n                        }\n\n                        hideAttempted = true; // Mark that at least one hide was queued\n                    } catch (error) {\n                        // Log unexpected errors during the queuing attempt\n                        console.error(`  Error queuing hide operations for ${sheetName}: ${error.message}`, {\n                            code: error.code,\n                            debugInfo: error.debugInfo ? JSON.stringify(error.debugInfo) : 'N/A'\n                        });\n                    }\n                }\n            }\n\n            // --- Sync all queued hide operations ---\n            if (hideAttempted) {\n                console.log(`Attempting to sync hide columns/rows operations...`);\n                try {\n                    await context.sync();\n                    console.log(\"Successfully synced hide columns/rows operations.\");\n                } catch (syncError) {\n                    console.error(`Error syncing hide columns/rows operations: ${syncError.message}`, {\n                        code: syncError.code,\n                        debugInfo: syncError.debugInfo ? JSON.stringify(syncError.debugInfo) : 'N/A'\n                    });\n                     // Report failure but continue to navigation attempt\n                }\n            } else {\n                 console.log(\"No target sheets found or no hide operations were queued.\");\n            }\n\n            // --- Activate and Select A1 on each assumption tab (mimic Ctrl+Home) ---\n            console.log(\"Activating and selecting A1 on assumption tabs...\");\n            // Note: This requires syncing inside the loop for the activate/select effect per sheet\n            for (const sheetName of assumptionTabNames) {\n                try {\n                    console.log(`  Activating and selecting A1 for: ${sheetName}`);\n                    const worksheet = context.workbook.worksheets.getItem(sheetName);\n                    worksheet.activate(); // Activate the sheet first\n                    const rangeA1 = worksheet.getRange(\"A1\");\n                    rangeA1.select(); // Then select A1\n                    await context.sync(); // Sync *immediately* to apply activation and selection for this sheet\n                    console.log(`  Synced A1 view reset for ${sheetName}.`);\n                } catch (error) {\n                     console.error(`  Error resetting view for ${sheetName}: ${error.message}`);\n                     // Optionally continue to the next sheet even if one fails\n                }\n            }\n            // No final sync needed for this loop as it happens inside\n\n            // --- Activate and Select J9 on each assumption tab ---\n            console.log(\"Activating and selecting J9 on assumption tabs...\");\n            // Note: This requires syncing inside the loop for the activate/select effect per sheet\n            for (const sheetName of assumptionTabNames) {\n                try {\n                    console.log(`  Activating and selecting J9 for: ${sheetName}`);\n                    const worksheet = context.workbook.worksheets.getItem(sheetName);\n                    worksheet.activate(); // Activate the sheet first\n                    const rangeJ9 = worksheet.getRange(\"J9\"); // Get J9\n                    rangeJ9.select(); // Then select J9\n                    await context.sync(); // Sync *immediately* to apply activation and selection for this sheet\n                    console.log(`  Synced J9 view reset for ${sheetName}.`);\n                } catch (error) {\n                     console.error(`  Error resetting view to J9 for ${sheetName}: ${error.message}`);\n                     // Optionally continue to the next sheet even if one fails\n                }\n            }\n            // No final sync needed for this loop as it happens inside\n\n            // --- Navigate to Financials sheet and select cell J9 ---\n            // (This ensures Financials is the final active sheet)\n            try {\n                console.log(\"Navigating to Financials sheet and selecting J9...\");\n                const financialsSheet = context.workbook.worksheets.getItem(\"Financials\");\n                // This activate/select sequence overrides the previous active sheet.\n                financialsSheet.activate(); \n                const rangeJ9 = financialsSheet.getRange(\"J9\"); // Get J9\n                rangeJ9.select(); // Select J9\n                await context.sync(); // Sync the final activate/select\n                console.log(\"Successfully navigated to Financials!J9.\");\n            } catch (navError) {\n                console.error(`Error navigating to Financials sheet J9: ${navError.message}`, {\n                    code: navError.code,\n                    debugInfo: navError.debugInfo ? JSON.stringify(navError.debugInfo) : 'N/A'\n                });\n                // Do not throw here, allow the function to finish\n            }\n\n            console.log(\"Finished hideColumnsAndNavigate function.\");\n\n        }); // End Excel.run\n    } catch (error) {\n        // Catch errors from the Excel.run call itself\n        console.error(\"Critical error in hideColumnsAndNavigate:\", error);\n        throw error; // Re-throw critical errors\n    }\n}\n\n/**\n * Hides specific rows and columns on all worksheets except for specified exclusions.\n * Hides rows 1-8, columns C-I (3-9), and columns S-AC (19-29).\n * @param {string[]} excludedSheetNames - An array of sheet names to exclude from hiding.\n * @returns {Promise<void>}\n */\nexport async function hideRowsAndColumnsOnSheets(excludedSheetNames = [\"Actuals Data\", \"Actuals Categorization\"]) {\n    try {\n        console.log(`Hiding rows/columns on sheets, excluding: ${excludedSheetNames.join(', ')}`);\n\n        await Excel.run(async (context) => {\n            const worksheets = context.workbook.worksheets;\n            worksheets.load(\"items/name\");\n            await context.sync();\n\n            for (const worksheet of worksheets.items) {\n                const sheetName = worksheet.name;\n                if (excludedSheetNames.includes(sheetName)) {\n                    console.log(`Skipping sheet: ${sheetName} (excluded)`);\n                    continue;\n                }\n\n                console.log(`Processing sheet: ${sheetName}`);\n\n                try {\n                    // Hide Rows 1-8\n                    const rowRange = worksheet.getRange(\"1:8\");\n                    rowRange.rowHidden = true;\n                    console.log(`  Hiding rows 1-8`);\n\n                    // Hide Columns C-E (Changed from C:I)\n                    const colRange1 = worksheet.getRange(\"C:E\"); // Changed range\n                    colRange1.columnHidden = true;\n                    console.log(`  Hiding columns C-E`); // Update log message\n\n                    // Hide Columns S-AC\n                    const colRange2 = worksheet.getRange(\"S:AC\");\n                    colRange2.columnHidden = true;\n                    console.log(`  Hiding columns S-AC`);\n\n                    // It's often more efficient to batch sync operations,\n                    // but sometimes hiding needs immediate effect or separate syncs.\n                    // Let's sync after hiding for this sheet.\n                    await context.sync();\n                    console.log(`  Finished hiding for ${sheetName}`);\n\n                } catch (hideError) {\n                    console.error(`  Error hiding rows/columns on sheet ${sheetName}: ${hideError.message}`, {\n                        code: hideError.code,\n                        debugInfo: hideError.debugInfo ? JSON.stringify(hideError.debugInfo) : 'N/A'\n                    });\n                    // Continue to the next sheet even if one fails\n                }\n            }\n\n            console.log(\"Finished processing all sheets for hiding rows/columns.\");\n        }); // End Excel.run\n\n    } catch (error) {\n        console.error(\"Critical error in hideRowsAndColumnsOnSheets:\", error);\n        throw error;\n    }\n}\n\n// TODO: Implement the actual logic within the JS helper functions (adjustDriversJS, replaceIndirectsJS, etc.).\n// TODO: Implement findRowByValue helper function if Retained Earnings logic is needed.\n// TODO: Update the calling code (e.g., button handler in taskpane.js) to call `processAssumptionTabs` after `runCodes`.\n\n/**\n * Inserts worksheets from a base64-encoded Excel file into the current workbook\n * @param {string} base64String - Base64-encoded string of the source Excel file\n * @param {string[]} [sheetNames] - Optional array of sheet names to insert. If not provided, all sheets will be inserted.\n * @returns {Promise<void>}\n */\nexport async function handleInsertWorksheetsFromBase64(base64String, sheetNames = null) {\n    try {\n        // Validate base64 string\n        if (!base64String || typeof base64String !== 'string') {\n            throw new Error(\"Invalid base64 string provided\");\n        }\n\n        // Validate base64 format\n        if (!/^[A-Za-z0-9+/]*={0,2}$/.test(base64String)) {\n            throw new Error(\"Invalid base64 format\");\n        }\n\n        await Excel.run(async (context) => {\n            const workbook = context.workbook;\n            \n            // Check if we have the required API version\n            if (!workbook.insertWorksheetsFromBase64) {\n                throw new Error(\"This feature requires Excel API requirement set 1.13 or later\");\n            }\n            \n            // Insert the worksheets with error handling\n            try {\n                await workbook.insertWorksheetsFromBase64(base64String, {\n                    sheetNames: sheetNames\n                });\n                \n                await context.sync();\n                console.log(\"Worksheets inserted successfully\");\n            } catch (error) {\n                console.error(\"Error during worksheet insertion:\", error);\n                throw new Error(`Failed to insert worksheets: ${error.message}`);\n            }\n        });\n    } catch (error) {\n        console.error(\"Error inserting worksheets from base64:\", error);\n        throw error;\n    }\n}\n\n/**\n * Applies the Index Growth Curve logic to a worksheet, mimicking VBA Function IndexGrowthCurve.\n * Finds INDEXBEGIN/INDEXEND, inserts rows, populates data and formulas, applies formatting.\n * @param {Excel.Worksheet} worksheet - The assumption worksheet (within an Excel.run context).\n * @param {number} initialLastRow - The last row determined before this function runs.\n */\nasync function applyIndexGrowthCurveJS(worksheet, initialLastRow) {\n    console.log(`Running applyIndexGrowthCurveJS for sheet: ${worksheet.name}`);\n    const START_ROW = 9; // Row to start searching for INDEXBEGIN\n    const BEGIN_MARKER = \"INDEXBEGIN\";\n    const END_MARKER = \"INDEXEND\";\n    const DATA_COL = \"C\";\n    const SEARCH_COL = \"D\";\n    const OUTPUT_COL_B = \"B\";\n    const OUTPUT_COL_C = \"C\";\n    const OUTPUT_COL_D = \"D\";\n    const CHECK_COL_B = \"B\"; // Column B for green check\n    const VALUE_COL_A = \"A\"; // Column A for BS/AV check\n    const DRIVER_REF_COL = \"AE\"; // Column containing driver range ref in END_MARKER row\n    const SUMIF_START_COL = \"K\"; // K\n    const SUMIF_END_COL = \"P\"; // P\n    const SUMPRODUCT_COL = \"AE\"; // AE (VBA used AE, not S)\n    const MONTHS_START_COL = \"AE\"; // AE\n    const MONTHS_END_COL = \"CX\"; // CX\n    const LIGHT_BLUE_COLOR = \"#D9E1F2\"; // RGB(217, 225, 242)\n    const LIGHT_GREEN_COLOR = \"#CCFFCC\"; // RGB(204, 255, 204)\n \n    try {\n        // Re-get worksheet reference within this context to ensure freshness\n        const context = worksheet.context; // Get context from the passed object\n        const worksheetName = worksheet.name; // Get name from potentially stale object\n        const currentWorksheet = context.workbook.worksheets.getItem(worksheetName);\n        // We assume the context itself is valid for this entire Excel.run block\n \n        // --- 1. Find INDEXBEGIN and INDEXEND rows ---\n        console.log(`Searching for ${BEGIN_MARKER} and ${END_MARKER} in column ${SEARCH_COL} of ${worksheetName}`);\n        const searchRangeAddress = `${SEARCH_COL}${START_ROW}:${SEARCH_COL}${initialLastRow}`; \n        const searchRange = currentWorksheet.getRange(searchRangeAddress); // Use refreshed worksheet object\n        searchRange.load(\"values\");\n        await context.sync(); // Use the context variable\n \n        let firstRow = -1;\n        let lastRow = -1;\n        let indexEndRow = -1; // Keep track of the original END_MARKER row\n \n        if (searchRange.values) {\n            for (let i = 0; i < searchRange.values.length; i++) {\n                const currentRow = START_ROW + i;\n                const cellValue = searchRange.values[i][0];\n                if (cellValue === BEGIN_MARKER && firstRow === -1) {\n                    firstRow = currentRow;\n                }\n                if (cellValue === END_MARKER) {\n                    lastRow = currentRow; // This will be the last END_MARKER found\n                    indexEndRow = currentRow; // Store the original row index\n                }\n            }\n        }\n \n        if (firstRow === -1 || lastRow === -1 || lastRow < firstRow) {\n            console.log(`Markers ${BEGIN_MARKER}/${END_MARKER} not found or in wrong order in ${searchRangeAddress}. Skipping Index Growth Curve.`);\n            return; // Exit if markers not found or invalid\n        }\n        console.log(`Found ${BEGIN_MARKER} at row ${firstRow}, ${END_MARKER} at row ${lastRow}`);\n \n        // --- 2. Collect Index Rows (Rows between markers where Col C is not empty) ---\n        const indexRows = [];\n        // CHANGE DATA_COL here if needed, e.g. const DATA_COL_TO_CHECK = \"B\";\n        const DATA_COL_TO_CHECK = \"B\"; // Or \"A\", etc.\n        const dataColRangeAddress = `${DATA_COL_TO_CHECK}${firstRow}:${DATA_COL_TO_CHECK}${lastRow}`;\n        const dataColRange = currentWorksheet.getRange(dataColRangeAddress);\n        // ... rest of the loading and checking logic ...\n \n        if (indexRows.length === 0) {\n            console.log(`No data rows found between ${BEGIN_MARKER} and ${END_MARKER} in column ${DATA_COL}. Skipping rest of Index Growth Curve.`);\n            return; // Exit if no data rows found\n        }\n        console.log(`Collected ${indexRows.length} index rows:`, indexRows);\n \n        // --- 3. Set Background Color for non-green rows ---\n        // Range: B(firstRow+2) to CX(lastRow-2) in VBA, but logic only checks B color. Let's adjust row color based on B.\n        const formatCheckStartRow = firstRow + 2;\n        const formatCheckEndRow = lastRow - 2;\n        console.log(`Setting background color for non-green rows between ${formatCheckStartRow} and ${formatCheckEndRow}`);\n        if (formatCheckStartRow <= formatCheckEndRow) {\n             // Load colors first\n             const checkColorRange = currentWorksheet.getRange(`${CHECK_COL_B}${formatCheckStartRow}:${CHECK_COL_B}${formatCheckEndRow}`);\n             checkColorRange.load(\"format/fill/color\");\n             await context.sync();\n \n              // Queue formatting changes\n              for (let i = 0; i < checkColorRange.values.length; i++) { // checkColorRange.values isn't loaded, use index\n                 const currentRow = formatCheckStartRow + i;\n                  // Use loaded format object\n                 if (checkColorRange.format.fill.color !== LIGHT_GREEN_COLOR) {\n                     console.log(`  Setting row ${currentRow} background to ${LIGHT_BLUE_COLOR}`);\n                     const rowRange = currentWorksheet.getRange(`${currentRow}:${currentRow}`);\n                     rowRange.format.fill.color = LIGHT_BLUE_COLOR;\n                     // Clear fill in column A specifically\n                     const cellARange = currentWorksheet.getRange(`A${currentRow}`);\n                     cellARange.format.fill.clear();\n                 }\n              }\n         }\n \n         // --- 4. Insert Rows ---\n         const newRowStart = lastRow + 2;\n         const numNewRows = indexRows.length;\n         const newRowEnd = newRowStart + numNewRows - 1;\n         console.log(`Inserting ${numNewRows} rows at range ${newRowStart}:${newRowEnd}`);\n         const insertRange = currentWorksheet.getRange(`${newRowStart}:${newRowEnd}`);\n         insertRange.insert(Excel.InsertShiftDirection.down);\n         // Sync required before populating new rows\n         await context.sync();\n \n         // --- 5. Populate New Rows (B, C, D) ---\n         console.log(`Populating columns ${OUTPUT_COL_B}, ${OUTPUT_COL_C}, ${OUTPUT_COL_D} in new rows ${newRowStart}:${newRowEnd}`);\n         // Load source data from original index rows\n         const sourceDataAddresses = indexRows.map(r => `${OUTPUT_COL_B}${r}:${OUTPUT_COL_C}${r}`);\n         // Cannot load disjoint ranges easily this way. Load columns B and C for the whole original block.\n         const sourceBlockRange = currentWorksheet.getRange(`${OUTPUT_COL_B}${firstRow}:${OUTPUT_COL_C}${lastRow}`);\n         sourceBlockRange.load(\"values\");\n         await context.sync();\n \n         const outputDataBC = [];\n         const outputDataD = [];\n         const sourceValues = sourceBlockRange.values;\n         for (const originalRow of indexRows) {\n             const rowIndexInBlock = originalRow - firstRow; // 0-based index within the loaded block\n             const valB = sourceValues[rowIndexInBlock][0]; // Col B is index 0\n             const valC = sourceValues[rowIndexInBlock][1]; // Col C is index 1\n             outputDataBC.push([valB, valC]);\n             outputDataD.push([END_MARKER]);\n         }\n \n         const outputRangeBC = currentWorksheet.getRange(`${OUTPUT_COL_B}${newRowStart}:${OUTPUT_COL_C}${newRowEnd}`);\n         outputRangeBC.values = outputDataBC;\n         const outputRangeD = currentWorksheet.getRange(`${OUTPUT_COL_D}${newRowStart}:${OUTPUT_COL_D}${newRowEnd}`);\n         outputRangeD.values = outputDataD;\n \n         // --- 6. Apply SUMIF Formulas (K-P) ---\n         console.log(`Applying SUMIF formulas to ${SUMIF_START_COL}${newRowStart}:${SUMIF_END_COL}${newRowEnd}`);\n         // Load necessary data: Col C and Col A values from original index rows\n         const sourceColCRange = currentWorksheet.getRange(`${DATA_COL}${firstRow}:${DATA_COL}${lastRow}`);\n         const sourceColARange = currentWorksheet.getRange(`${VALUE_COL_A}${firstRow}:${VALUE_COL_A}${lastRow}`);\n         sourceColCRange.load(\"values\");\n         sourceColARange.load(\"values\");\n         await context.sync();\n \n         const sourceValuesC = sourceColCRange.values;\n         const sourceValuesA = sourceColARange.values;\n         const numSumifCols = columnLetterToIndex(SUMIF_END_COL) - columnLetterToIndex(SUMIF_START_COL) + 1;\n         const sumifFormulas = [];\n \n         for (let i = 0; i < indexRows.length; i++) {\n             const originalRow = indexRows[i];\n             const rowIndexInBlock = originalRow - firstRow; // 0-based index within the loaded block\n             const codeC = sourceValuesC[rowIndexInBlock][0] || \"\"; // Ensure string\n             const valueA = sourceValuesA[rowIndexInBlock][0];\n             const targetRowNum = newRowStart + i; // Row where formula will be placed\n \n             let baseFormula;\n             // Check if Col C starts with \"BS\" or Col A is \"AV\"\n             if (codeC.toUpperCase().startsWith(\"BS\") || String(valueA).toUpperCase() === \"AV\") {\n                 // \"=SUMIF($3:$3,@ INDIRECT(ADDRESS(ROW($A$2),COLUMN(),2)), INDIRECT(ROW() & \"\":\"\" & ROW()))\"\n                  baseFormula = `=SUMIF($3:$3, INDIRECT(ADDRESS(2,COLUMN())), ${targetRowNum}:${targetRowNum})`;\n             } else {\n                 // \"=SUMIF($4:$4,@ INDIRECT(ADDRESS(ROW($A$2),COLUMN(),2)), INDIRECT(ROW() & \"\":\"\" & ROW()))\"\n                  baseFormula = `=SUMIF($4:$4, INDIRECT(ADDRESS(2,COLUMN())), ${targetRowNum}:${targetRowNum})`;\n             }\n             // Create array for the row\n             sumifFormulas.push(Array(numSumifCols).fill(baseFormula));\n         }\n \n         const sumifRange = currentWorksheet.getRange(`${SUMIF_START_COL}${newRowStart}:${SUMIF_END_COL}${newRowEnd}`);\n         sumifRange.formulas = sumifFormulas;\n \n         // --- 7. Apply SUMPRODUCT Formulas (AE) ---\n         console.log(`Applying SUMPRODUCT formulas to ${SUMPRODUCT_COL}${newRowStart}:${SUMPRODUCT_COL}${newRowEnd}`);\n         // Get the driver range string from the original END_MARKER row, column AE\n         const driverCell = currentWorksheet.getRange(`${DRIVER_REF_COL}${indexEndRow}`);\n         driverCell.load(\"values\");\n         await context.sync();\n         const driverRangeString = driverCell.values[0][0];\n \n         if (!driverRangeString || typeof driverRangeString !== 'string') {\n             console.warn(`Driver range string not found or invalid in cell ${DRIVER_REF_COL}${indexEndRow}. Skipping SUMPRODUCT.`);\n         } else {\n              console.log(`Using driver range: ${driverRangeString}`);\n              // Iterate and set formula for each cell individually (mimics FormulaArray)\n              for (let i = 0; i < indexRows.length; i++) {\n                  const originalRow = indexRows[i];\n                  const targetRow = newRowStart + i;\n                  const dataRangeString = `$${MONTHS_START_COL}$${originalRow}:$${MONTHS_END_COL}$${originalRow}`;\n                  // Formula: =SUMPRODUCT(INDEX(driverRange, N(IF({1}, MAX(COLUMN(driverRange)) - COLUMN(driverRange) + 1))), dataRange)\n                  const sumproductFormula = `=SUMPRODUCT(INDEX(${driverRangeString},N(IF({1},MAX(COLUMN(${driverRangeString}))-COLUMN(${driverRangeString})+1))), ${dataRangeString})`;\n \n                  const targetCell = currentWorksheet.getRange(`${SUMPRODUCT_COL}${targetRow}`);\n                  targetCell.formulas = [[sumproductFormula]];\n                  // console.log(`  Set formula for ${SUMPRODUCT_COL}${targetRow}: ${sumproductFormula}`);\n             }\n         }\n \n         // --- 8. Copy Formats and Adjust ---\n         console.log(`Copying formats and adjusting for new rows ${newRowStart}:${newRowEnd}`);\n         for (let i = 0; i < indexRows.length; i++) {\n             const sourceRow = indexRows[i];\n             const targetRow = newRowStart + i;\n \n             const sourceRowRange = currentWorksheet.getRange(`${sourceRow}:${sourceRow}`);\n             const targetRowRange = currentWorksheet.getRange(`${targetRow}:${targetRow}`);\n \n             // Copy formats first\n             targetRowRange.copyFrom(sourceRowRange, Excel.RangeCopyType.formats);\n              await context.sync(); // Sync after each copy maybe needed? Let's try one sync after loop.\n \n             // Apply format overrides\n             targetRowRange.format.font.color = \"#000000\"; // Black font\n             targetRowRange.format.borders.load('items'); // Load borders collection\n              await context.sync(); // Need to sync load before clearing\n \n              targetRowRange.format.borders.items.forEach(border => border.style = 'None');\n             // Explicitly clear all borders (simpler?)\n             // targetRowRange.format.borders.getItem('EdgeTop').style = 'None';\n             // targetRowRange.format.borders.getItem('EdgeBottom').style = 'None';\n             // targetRowRange.format.borders.getItem('EdgeLeft').style = 'None';\n             // targetRowRange.format.borders.getItem('EdgeRight').style = 'None';\n             // targetRowRange.format.borders.getItem('InsideVertical').style = 'None';\n             // targetRowRange.format.borders.getItem('InsideHorizontal').style = 'None';\n \n             targetRowRange.format.fill.clear(); // Clear interior color\n             targetRowRange.format.font.bold = false; // Remove bold\n \n             // Set indent level for column B\n             const targetCellB = currentWorksheet.getRange(`${OUTPUT_COL_B}${targetRow}`);\n             targetCellB.format.indentLevel = 2;\n         }\n          await context.sync(); // Sync format changes\n \n         // --- 9. Clear Original Column C values ---\n         console.log(`Clearing values in original index rows (${indexRows.join(', ')}) column ${DATA_COL}`);\n         // It's safer to clear individually if rows aren't contiguous\n         for (const originalRow of indexRows) {\n             const cellToClear = currentWorksheet.getRange(`${DATA_COL}${originalRow}`);\n             cellToClear.clear(Excel.ClearApplyTo.contents);\n         }\n          await context.sync(); // Sync clears\n \n         console.log(`applyIndexGrowthCurveJS completed successfully for sheet: ${worksheetName}`);\n \n     } catch (error) {\n         console.error(`Error in applyIndexGrowthCurveJS for sheet ${worksheet.name}:`, error);\n         // Decide if error should be re-thrown\n         // throw error; // Optional: re-throw to stop processAssumptionTabs if critical\n     }\n     // Note: This function runs within the context of the calling Excel.run in processAssumptionTabs.\n     // Syncs are added within the function for critical steps like after insertion.\n }","// Helper function to build the pipe-delimited string for a row\r\nfunction buildRowArrayString(valuesRow, formulasRow) {\r\n    // ... (Helper function remains the same)\r\n    // Indices: A=0, B=1, C=2, G=6, H=7, I=8, K=10, L=11, M=12, N=13, O=14, P=15, R=17\r\n    const cols = [0, 1, 2, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17];\r\n    const formulaCols = [10, 11, 12, 13, 14, 15, 17]; // Columns to check for formulas\r\n    let parts = [];\r\n\r\n    if (!valuesRow) return \"\"; // Handle case where row might be completely empty\r\n\r\n    for (const colIndex of cols) {\r\n        // Ensure the row has enough columns\r\n        let value = (valuesRow.length > colIndex && valuesRow[colIndex] !== null && valuesRow[colIndex] !== undefined) ? valuesRow[colIndex] : \"\";\r\n        let formula = (formulasRow && formulasRow.length > colIndex) ? formulasRow[colIndex] : null;\r\n\r\n        if (formulaCols.includes(colIndex)) {\r\n            // Check formula first\r\n            if (typeof formula === 'string' && formula.startsWith('=')) {\r\n                value = \"F\";\r\n            }\r\n        }\r\n        const valueString = String(value).replace(/\"/g, '\"\"');\r\n        parts.push(valueString);\r\n    }\r\n    return parts.join(\"|\");\r\n}\r\n\r\n// Helper function to process a standard code block based on Column D\r\nfunction processCodeBlock(values, formulas, startDataRowIndex, endDataRowIndex, codeName, rangeStartRowExcel) {\r\n    // console.log(`Processing block: ${codeName} from Excel row ${startDataRowIndex + rangeStartRowExcel} to ${endDataRowIndex + rangeStartRowExcel}`);\r\n    let blockString = `<${codeName};`;\r\n    let rowCount = 1;\r\n    // The indices i here are 0-based relative to the START of the loaded data range\r\n    for (let i = startDataRowIndex; i <= endDataRowIndex; i++) {\r\n        if (values && i < values.length && formulas && i < formulas.length) {\r\n            const rowArrayString = buildRowArrayString(values[i], formulas[i]);\r\n            blockString += `row${rowCount}=\"${rowArrayString}\";`;\r\n            rowCount++;\r\n        } else {\r\n             // console.warn(`Skipping data row index ${i} in block ${codeName} due to missing data.`);\r\n        }\r\n    }\r\n    blockString += \">\";\r\n    // console.log(`Generated block string for ${codeName}: ${blockString.substring(0,100)}...`);\r\n    return blockString;\r\n}\r\n\r\nexport async function generateTabString() {\r\n    try {\r\n        await Excel.run(async (context) => {\r\n            console.log(\"Starting generateTabString (dynamic range)...\");\r\n            const sheets = context.workbook.worksheets;\r\n            sheets.load(\"items/name\");\r\n            await context.sync();\r\n            console.log(`Found ${sheets.items.length} sheets.`);\r\n\r\n            let finalResultString = \"\";\r\n\r\n            for (const sheet of sheets.items) {\r\n                console.log(`Processing sheet: ${sheet.name}`);\r\n                let sheetCodeBlocks = \"\";\r\n                let lastUsedRowInB = 0;\r\n\r\n                try {\r\n                    // --- Find the last used row in Column B ---\r\n                    // Get the bottom-most cell in column B (using a large row number)\r\n                    const bottomCellInB = sheet.getRange(\"B1048576\");\r\n                    // Find the last used cell *up* from the absolute bottom\r\n                    const lastUsedCellInB = bottomCellInB.getRangeEdge(Excel.KeyboardDirection.up);\r\n                    lastUsedCellInB.load(\"rowIndex\");\r\n                    await context.sync();\r\n\r\n                    // Add 1 because rowIndex is 0-based\r\n                    lastUsedRowInB = lastUsedCellInB.rowIndex + 1;\r\n                    console.log(`Sheet ${sheet.name}: Last used row in Col B found at: ${lastUsedRowInB}`);\r\n\r\n                    // --- Validate last row and define dynamic range ---\r\n                    if (lastUsedRowInB < 9) {\r\n                        console.log(`Sheet ${sheet.name}: Last used row (${lastUsedRowInB}) is before row 9. Skipping code generation.`);\r\n                        finalResultString += `<TAB; label1=\"${sheet.name}\";>\\n\\n`; // Add TAB tag even if no codes\r\n                        continue; // Skip to the next sheet\r\n                    }\r\n\r\n                    const dynamicRangeAddress = `A9:R${lastUsedRowInB}`;\r\n                    console.log(`Sheet ${sheet.name}: Loading dynamic range: ${dynamicRangeAddress}`);\r\n\r\n                    // --- Load data from the dynamic range --- Load data from the dynamic range ---\r\n                    const range = sheet.getRange(dynamicRangeAddress);\r\n                    range.load([\"values\", \"formulas\", \"rowCount\", \"rowIndex\"]);\r\n                    await context.sync();\r\n\r\n                    const values = range.values;\r\n                    const formulas = range.formulas;\r\n                    const loadedRowCount = range.rowCount;\r\n                    const rangeStartRowExcel = range.rowIndex + 1; // Should be 9\r\n\r\n                    if (rangeStartRowExcel !== 9) {\r\n                         console.warn(`Sheet ${sheet.name}: Loaded range started at ${rangeStartRowExcel} instead of 9.`);\r\n                    }\r\n                    if (!values || loadedRowCount === 0) {\r\n                        console.log(`Sheet ${sheet.name}: No values loaded from range ${dynamicRangeAddress}. Skipping code generation.`);\r\n                        finalResultString += `<TAB; label1=\"${sheet.name}\";>\\n\\n`;\r\n                        continue; // Skip to the next sheet\r\n                    }\r\n\r\n                    // --- Process the loaded data --- Process the loaded data ---\r\n                    // Check if Column D (index 3 in the loaded array) has significant data\r\n                    let hasDataInD = false;\r\n                    for (let r = 0; r < loadedRowCount; r++) {\r\n                         if (values[r] && values[r].length > 3 && values[r][3] && String(values[r][3]).trim() !== \"\") {\r\n                            hasDataInD = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    console.log(`Sheet ${sheet.name}: Has significant data in Column D (in loaded range)? ${hasDataInD}`);\r\n\r\n                    if (!hasDataInD) {\r\n                        // --- Generate MANUAL-ER Block ---\r\n                        console.log(`Sheet ${sheet.name}: Generating MANUAL-ER block.`);\r\n                        sheetCodeBlocks += \"<MANUAL-ER;\";\r\n                        let manualRowCount = 1;\r\n                        for (let r = 0; r < loadedRowCount; r++) {\r\n                            if (values[r] && formulas[r]) { // Ensure row data exists\r\n                                const rowArrayString = buildRowArrayString(values[r], formulas[r]);\r\n                                sheetCodeBlocks += `row${manualRowCount}=\"${rowArrayString}\";`;\r\n                                manualRowCount++;\r\n                            }\r\n                        }\r\n                        sheetCodeBlocks += \">\";\r\n\r\n                    } else {\r\n                        // --- Generate Blocks Based on Column D ---\r\n                        console.log(`Sheet ${sheet.name}: Generating blocks based on Column D changes.`);\r\n                        let currentBlockStartDataRow = -1;\r\n                        let currentBlockCodeName = \"\";\r\n\r\n                        for (let r = 0; r < loadedRowCount; r++) {\r\n                            const dValue = (values[r] && values[r].length > 3 && values[r][3]) ? String(values[r][3]).trim() : \"\";\r\n\r\n                            if (dValue !== \"\") {\r\n                                if (currentBlockStartDataRow === -1) {\r\n                                    currentBlockStartDataRow = r;\r\n                                    currentBlockCodeName = dValue;\r\n                                } else if (dValue !== currentBlockCodeName) {\r\n                                    // Add newline before appending if sheetCodeBlocks isn't empty\r\n                                    if (sheetCodeBlocks) sheetCodeBlocks += \"\\n\";\r\n                                    sheetCodeBlocks += processCodeBlock(values, formulas, currentBlockStartDataRow, r - 1, currentBlockCodeName, rangeStartRowExcel);\r\n                                    currentBlockStartDataRow = r;\r\n                                    currentBlockCodeName = dValue;\r\n                                }\r\n                            } else { // Empty D value\r\n                                if (currentBlockStartDataRow !== -1) {\r\n                                    // Add newline before appending if sheetCodeBlocks isn't empty\r\n                                    if (sheetCodeBlocks) sheetCodeBlocks += \"\\n\";\r\n                                    sheetCodeBlocks += processCodeBlock(values, formulas, currentBlockStartDataRow, r - 1, currentBlockCodeName, rangeStartRowExcel);\r\n                                    currentBlockStartDataRow = -1;\r\n                                    currentBlockCodeName = \"\";\r\n                                }\r\n                            }\r\n\r\n                            // Handle the last block if the loop finishes while inside a block\r\n                            if (r === loadedRowCount - 1 && currentBlockStartDataRow !== -1) {\r\n                                // Add newline before appending if sheetCodeBlocks isn't empty\r\n                                if (sheetCodeBlocks) sheetCodeBlocks += \"\\n\";\r\n                                sheetCodeBlocks += processCodeBlock(values, formulas, currentBlockStartDataRow, r, currentBlockCodeName, rangeStartRowExcel);\r\n                            }\r\n                        } // end for loop r\r\n                    } // end else (hasDataInD)\r\n\r\n                } catch (sheetError) {\r\n                     console.error(`Error processing sheet ${sheet.name}: ${sheetError}`);\r\n                     if (sheetError instanceof OfficeExtension.Error) {\r\n                         console.error(\"Debug info: \" + JSON.stringify(sheetError.debugInfo));\r\n                     }\r\n                     sheetCodeBlocks = \"<!-- Error processing sheet data -->\";\r\n                }\r\n\r\n                // Append the result for this sheet\r\n                // Add a newline between TAB and blocks only if blocks exist\r\n                let tabLine = `<TAB; label1=\"${sheet.name}\";>`;\r\n                if (sheetCodeBlocks) {\r\n                    tabLine += \"\\n\" + sheetCodeBlocks; // Add newline before the blocks\r\n                }\r\n                finalResultString += tabLine + \"\\n\\n\"; // Add double newline after each sheet entry\r\n            } // end loop sheets\r\n\r\n            console.log(\"--- FINAL GENERATED STRING ---\");\r\n            console.log(finalResultString);\r\n            console.log(\"--- END FINAL GENERATED STRING ---\");\r\n\r\n        }); // end Excel.run\r\n    } catch (error) {\r\n        console.error(\"Error in generateTabString top level: \" + error);\r\n        if (error instanceof OfficeExtension.Error) {\r\n            console.error(\"Debug info: \" + JSON.stringify(error.debugInfo));\r\n        }\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global console, document, Excel, Office */\r\n\r\n// Remove imports from Langchain to avoid ESM module issues\r\n// Using direct fetch calls instead\r\n// Add this test function\r\nimport { validateCodeStrings } from './Validation.js';\r\n// Import the spreadsheet utilities\r\n// import { handleInsertWorksheetsFromBase64 } from './SpreadsheetUtils.js';\r\n// Import code collection functions\r\nimport { populateCodeCollection, exportCodeCollectionToText, runCodes, processAssumptionTabs, collapseGroupingsAndNavigateToFinancials, hideColumnsAndNavigate, handleInsertWorksheetsFromBase64 } from './CodeCollection.js';\r\n// >>> ADDED: Import the new validation function\r\nimport { validateCodeStringsForRun } from './Validation.js';\r\n// >>> ADDED: Import the tab string generator function\r\nimport { generateTabString } from './IndexWorksheet.js';\r\n// Add the codeStrings variable with the specified content\r\n// REMOVED hardcoded codeStrings variable\r\n\r\nimport { API_KEYS as configApiKeys } from '../../config.js'; // Assuming config.js exports API_KEYS\r\n\r\n// Mock fs module for browser environment (if needed within AIcalls)\r\nconst fs = {\r\n    writeFileSync: (path, content) => {\r\n        console.log(`Mock writeFileSync called with path: ${path}`);\r\n        // In browser, we'll just log the content instead of writing to file\r\n        console.log(`Content would be written to ${path}:`, content.substring(0, 100) + '...');\r\n    }\r\n};\r\n\r\n//*********Setup*********\r\n// Start the timer\r\nconst startTime = performance.now();\r\n\r\n//Debugging Toggle\r\nconst DEBUG = true;\r\n\r\n// Variable to store loaded code strings\r\nlet loadedCodeStrings = \"\";\r\n\r\n// Variable to store the parsed code database\r\nlet codeDatabase = [];\r\n\r\n// >>> ADDED: Variables for search/replace state <<<\r\n// >>> REMOVED: Main search/replace state variables <<<\r\n// let lastSearchTerm = '';\r\n// let lastSearchIndex = -1; // Tracks the starting index of the last found match\r\n// let searchResultIndices = []; // Stores indices of all matches for Replace All\r\n// let currentHighlightIndex = -1; // Index within searchResultIndices for Find Next\r\n\r\n// API keys storage - initialized by initializeAPIKeys\r\nlet INTERNAL_API_KEYS = {\r\n  OPENAI_API_KEY: \"\",\r\n  PINECONE_API_KEY: \"\"\r\n};\r\n\r\n// Function to set API keys from outside this module\r\nexport function setAPIKeys(keys) {\r\n  if (keys && typeof keys === 'object') {\r\n    if (keys.OPENAI_API_KEY) {\r\n      INTERNAL_API_KEYS.OPENAI_API_KEY = keys.OPENAI_API_KEY;\r\n      console.log(\"AIcalls.js: OpenAI API key set externally\");\r\n    }\r\n    if (keys.PINECONE_API_KEY) {\r\n      INTERNAL_API_KEYS.PINECONE_API_KEY = keys.PINECONE_API_KEY;\r\n      console.log(\"AIcalls.js: Pinecone API key set externally\");\r\n    }\r\n  }\r\n}\r\n\r\nconst srcPaths = [\r\n  'https://localhost:3002/src/prompts/Encoder_System.txt',\r\n  'https://localhost:3002/src/prompts/Encoder_Main.txt',\r\n  'https://localhost:3002/src/prompts/Followup_System.txt',\r\n  'https://localhost:3002/src/prompts/Structure_System.txt',\r\n  'https://localhost:3002/src/prompts/Validation_System.txt',\r\n  'https://localhost:3002/src/prompts/Validation_Main.txt'\r\n];\r\n\r\n// Function to load the code string database\r\nasync function loadCodeDatabase() {\r\n  try {\r\n    console.log(\"Loading code database...\");\r\n    const response = await fetch('https://localhost:3002/assets/codestringDB.txt');\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to load codestringDB.txt: ${response.statusText}`);\r\n    }\r\n    const text = await response.text();\r\n    const lines = text.split(/[\\r\\n]+/).filter(line => line.trim() !== ''); // Split by lines and remove empty ones\r\n\r\n    codeDatabase = lines.map(line => {\r\n      const parts = line.split('\\t'); // Assuming tab-separated\r\n      if (parts.length >= 2) {\r\n        return { name: parts[0].trim(), code: parts[1].trim() };\r\n      }\r\n      console.warn(`Skipping malformed line in codestringDB.txt: ${line}`);\r\n      return null;\r\n    }).filter(item => item !== null); // Filter out null entries from malformed lines\r\n\r\n    console.log(`Code database loaded successfully with ${codeDatabase.length} entries.`);\r\n    if (DEBUG && codeDatabase.length > 0) {\r\n        console.log(\"First few code database entries:\", codeDatabase.slice(0, 5));\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error(\"Error loading code database:\", error);\r\n    showError(\"Failed to load code database. Search functionality will be unavailable.\");\r\n    codeDatabase = []; // Ensure it's empty on error\r\n  }\r\n}\r\n\r\n// Function to load API keys from a config file\r\n// This allows the keys to be stored in a separate file that's .gitignored\r\nexport async function initializeAPIKeys() {\r\n  try {\r\n    console.log(\"Initializing API keys from AIcalls.js...\");\r\n\r\n    // Use keys from imported config.js if available\r\n    if (configApiKeys?.OPENAI_API_KEY) {\r\n        INTERNAL_API_KEYS.OPENAI_API_KEY = configApiKeys.OPENAI_API_KEY;\r\n        console.log(\"OpenAI API key loaded from config.js\");\r\n    } else {\r\n         console.warn(\"OpenAI API key not found in config.js.\");\r\n    }\r\n\r\n    if (configApiKeys?.PINECONE_API_KEY) {\r\n        INTERNAL_API_KEYS.PINECONE_API_KEY = configApiKeys.PINECONE_API_KEY;\r\n        console.log(\"Pinecone API key loaded from config.js\");\r\n    } else {\r\n         console.warn(\"Pinecone API key not found in config.js.\");\r\n    }\r\n\r\n    // Fallback: try fetching from the old location if config.js didn't provide them\r\n    if (!INTERNAL_API_KEYS.OPENAI_API_KEY || !INTERNAL_API_KEYS.PINECONE_API_KEY) {\r\n        console.log(\"Attempting fallback API key loading from https://localhost:3002/config.js\");\r\n        try {\r\n            const configResponse = await fetch('https://localhost:3002/config.js');\r\n            if (configResponse.ok) {\r\n                const configText = await configResponse.text();\r\n                // Extract keys from the config text using regex\r\n                const openaiKeyMatch = configText.match(/OPENAI_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n                const pineconeKeyMatch = configText.match(/PINECONE_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\r\n\r\n                if (!INTERNAL_API_KEYS.OPENAI_API_KEY && openaiKeyMatch && openaiKeyMatch[1]) {\r\n                    INTERNAL_API_KEYS.OPENAI_API_KEY = openaiKeyMatch[1];\r\n                    console.log(\"OpenAI API key loaded via fetch fallback.\");\r\n                }\r\n\r\n                if (!INTERNAL_API_KEYS.PINECONE_API_KEY && pineconeKeyMatch && pineconeKeyMatch[1]) {\r\n                    INTERNAL_API_KEYS.PINECONE_API_KEY = pineconeKeyMatch[1];\r\n                    console.log(\"Pinecone API key loaded via fetch fallback.\");\r\n                }\r\n            } else {\r\n                 console.warn(\"Fallback fetch for config.js failed or returned non-OK status.\");\r\n            }\r\n        } catch (error) {\r\n            console.warn(\"Could not load config.js via fetch fallback:\", error);\r\n        }\r\n    }\r\n\r\n    // Add debug logging with secure masking of keys\r\n    console.log(\"Loaded API Keys (AIcalls.js):\");\r\n    console.log(\"  OPENAI_API_KEY:\", INTERNAL_API_KEYS.OPENAI_API_KEY ?\r\n      `${INTERNAL_API_KEYS.OPENAI_API_KEY.substring(0, 3)}...${INTERNAL_API_KEYS.OPENAI_API_KEY.substring(INTERNAL_API_KEYS.OPENAI_API_KEY.length - 3)}` :\r\n      \"Not found\");\r\n    console.log(\"  PINECONE_API_KEY:\", INTERNAL_API_KEYS.PINECONE_API_KEY ?\r\n      `${INTERNAL_API_KEYS.PINECONE_API_KEY.substring(0, 3)}...${INTERNAL_API_KEYS.PINECONE_API_KEY.substring(INTERNAL_API_KEYS.PINECONE_API_KEY.length - 3)}` :\r\n      \"Not found\");\r\n\r\n    const keysFound = !!(INTERNAL_API_KEYS.OPENAI_API_KEY && INTERNAL_API_KEYS.PINECONE_API_KEY);\r\n    console.log(\"API Keys Initialized:\", keysFound);\r\n    // Return a copy to prevent external modification of the internal state\r\n    return { ...INTERNAL_API_KEYS };\r\n\r\n  } catch (error) {\r\n    console.error(\"Error initializing API keys:\", error);\r\n    // Return empty keys on error\r\n    return { OPENAI_API_KEY: \"\", PINECONE_API_KEY: \"\" };\r\n  }\r\n}\r\n\r\n// Update Pinecone configuration to handle multiple indexes\r\nconst PINECONE_ENVIRONMENT = \"gcp-starter\";\r\n\r\n// Define configurations for each index\r\nconst PINECONE_INDEXES = {\r\n    codes: {\r\n        name: \"codes\",\r\n        apiEndpoint: \"https://codes-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call2trainingdata: {\r\n        name: \"call2trainingdata\",\r\n        apiEndpoint: \"https://call2trainingdata-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call2context: {\r\n        name: \"call2context\",\r\n        apiEndpoint: \"https://call2context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    },\r\n    call1context: {\r\n        name: \"call1context\",\r\n        apiEndpoint: \"https://call1context-zmg9zog.svc.aped-4627-b74a.pinecone.io\"\r\n    }\r\n};\r\n\r\n//Models\r\nconst GPT4O_MINI = \"gpt-4o-mini\"\r\nconst GPT4O = \"gpt-4o\"\r\nconst GPT41 = \"gpt-4.1\"\r\nconst GPT45_TURBO = \"gpt-4.5-turbo\"\r\nconst GPT35_TURBO = \"gpt-3.5-turbo\"\r\nconst GPT4_TURBO = \"gpt-4-turbo\"\r\nconst GPTFT1 =  \"ft:gpt-3.5-turbo-1106:orsi-advisors:cohcolumnsgpt35:B6Wlrql1\"\r\n\r\n// Conversation history storage\r\nlet conversationHistory = [];\r\n\r\n// Functions to save and load conversation history (use localStorage directly)\r\nexport function saveConversationHistory(history) {\r\n    try {\r\n        localStorage.setItem('conversationHistory', JSON.stringify(history));\r\n        if (DEBUG) console.log('Conversation history saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving conversation history:\", error);\r\n    }\r\n}\r\n\r\nexport function loadConversationHistory() {\r\n    try {\r\n        const history = localStorage.getItem('conversationHistory');\r\n        if (history) {\r\n            if (DEBUG) console.log('Loaded conversation history from localStorage');\r\n            const parsedHistory = JSON.parse(history);\r\n\r\n            if (!Array.isArray(parsedHistory)) {\r\n                console.error(\"Invalid history format, expected array\");\r\n                return [];\r\n            }\r\n\r\n            return parsedHistory;\r\n        }\r\n        if (DEBUG) console.log(\"No conversation history found in localStorage\");\r\n        return [];\r\n    } catch (error) {\r\n        console.error(\"Error loading conversation history:\", error);\r\n        return [];\r\n    }\r\n}\r\n\r\n// Direct OpenAI API call function\r\nexport async function callOpenAI(messages, model = GPT41, temperature = 0.7) {\r\n  try {\r\n    console.log(`Calling OpenAI API with model: ${model}`);\r\n\r\n    if (!INTERNAL_API_KEYS.OPENAI_API_KEY) {\r\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\r\n    }\r\n\r\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${INTERNAL_API_KEYS.OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: model,\r\n        messages: messages,\r\n        temperature: temperature\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => null);\r\n      console.error(\"OpenAI API error response:\", errorData);\r\n      throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log(\"OpenAI API response received\");\r\n\r\n    return data.choices[0].message.content;\r\n  } catch (error) {\r\n    console.error(\"Error calling OpenAI API:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// OpenAI embeddings function\r\nexport async function createEmbedding(text) {\r\n  try {\r\n    console.log(\"Creating embedding for text\");\r\n\r\n    if (!INTERNAL_API_KEYS.OPENAI_API_KEY) {\r\n      throw new Error(\"OpenAI API key not found. Please check your API keys.\");\r\n    }\r\n\r\n    const response = await fetch('https://api.openai.com/v1/embeddings', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${INTERNAL_API_KEYS.OPENAI_API_KEY}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: \"text-embedding-3-large\",\r\n        input: text\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => null);\r\n      console.error(\"OpenAI Embeddings API error response:\", errorData);\r\n      throw new Error(`OpenAI Embeddings API error: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log(\"OpenAI Embeddings API response received\");\r\n\r\n    return data.data[0].embedding;\r\n  } catch (error) {\r\n    console.error(\"Error creating embedding:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to load prompts from files\r\nexport async function loadPromptFromFile(promptKey) {\r\n  try {\r\n    const paths = [\r\n      `https://localhost:3002/prompts/${promptKey}.txt`,\r\n      ...srcPaths // Add fallback paths if needed\r\n    ];\r\n\r\n    let response = null;\r\n    for (const path of paths) {\r\n      if (DEBUG) console.log(`Attempting to load prompt from: ${path}`);\r\n      try {\r\n        response = await fetch(path);\r\n        if (response.ok) {\r\n          if (DEBUG) console.log(`Successfully loaded prompt from: ${path}`);\r\n          break;\r\n        }\r\n      } catch (err) {\r\n        if (DEBUG) console.log(`Path ${path} failed: ${err.message}`);\r\n      }\r\n    }\r\n\r\n    if (!response || !response.ok) {\r\n      throw new Error(`Failed to load prompt: ${promptKey} (Could not find file in any location)`);\r\n    }\r\n\r\n    return await response.text();\r\n  } catch (error) {\r\n    console.error(`Error loading prompt ${promptKey}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to get system prompt from file\r\nexport async function getSystemPromptFromFile(promptKey) {\r\n  try {\r\n    const prompt = await loadPromptFromFile(promptKey);\r\n    if (!prompt) {\r\n      throw new Error(`Prompt key \"${promptKey}\" not found`);\r\n    }\r\n    return prompt;\r\n  } catch (error) {\r\n    console.error(`Error getting prompt for key ${promptKey}:`, error);\r\n    return null; // Return null or handle error as appropriate\r\n  }\r\n};\r\n\r\n// Function: OpenAI Call with conversation history support\r\nexport async function processPrompt({ userInput, systemPrompt, model, temperature, history = [] }) {\r\n    if (DEBUG) console.log(\"API Key being used for processPrompt:\", INTERNAL_API_KEYS.OPENAI_API_KEY ? `${INTERNAL_API_KEYS.OPENAI_API_KEY.substring(0, 3)}...` : \"None\");\r\n\r\n    const messages = [\r\n        { role: \"system\", content: systemPrompt }\r\n    ];\r\n\r\n    if (history.length > 0) {\r\n        history.forEach(message => {\r\n            // Ensure message is in the correct format [role, content]\r\n             if (Array.isArray(message) && message.length === 2) {\r\n                 messages.push({\r\n                     role: message[0] === \"human\" ? \"user\" : \"assistant\",\r\n                     content: message[1]\r\n                 });\r\n             } else {\r\n                 console.warn(\"Skipping malformed history message:\", message);\r\n             }\r\n        });\r\n    }\r\n\r\n    messages.push({ role: \"user\", content: userInput });\r\n\r\n    try {\r\n        const responseContent = await callOpenAI(messages, model, temperature);\r\n\r\n        // Try to parse JSON response if applicable, otherwise split lines\r\n        try {\r\n            const parsed = JSON.parse(responseContent);\r\n            // Expecting an array of strings based on original code\r\n            if (Array.isArray(parsed)) {\r\n                return parsed;\r\n            }\r\n            // If not array, maybe single string JSON? Unlikely based on usage.\r\n             console.warn(\"Parsed JSON response, but it was not an array:\", parsed);\r\n             // Fallback to splitting the original string\r\n             return responseContent.split('\\n').filter(line => line.trim());\r\n        } catch (e) {\r\n            return responseContent.split('\\n').filter(line => line.trim());\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in processPrompt:\", error);\r\n        throw error; // Re-throw to be caught by caller\r\n    }\r\n}\r\n\r\n// Function: Structure database queries\r\nexport async function structureDatabasequeries(clientprompt) {\r\n  if (DEBUG) console.log(\"Processing structured database queries:\", clientprompt);\r\n\r\n  try {\r\n      if (DEBUG) console.log(\"Getting structure system prompt\");\r\n      const systemStructurePrompt = await getSystemPromptFromFile('Structure_System');\r\n\r\n      if (!systemStructurePrompt) {\r\n          throw new Error(\"Failed to load structure system prompt\");\r\n      }\r\n\r\n      if (DEBUG) console.log(\"Got system prompt, processing query strings\");\r\n      // processPrompt expects history, pass empty array if none applicable here\r\n      const queryStrings = await processPrompt({\r\n          userInput: clientprompt,\r\n          systemPrompt: systemStructurePrompt,\r\n          model: GPT41,\r\n          temperature: 1,\r\n          history: [] // Explicitly empty\r\n      });\r\n\r\n      if (!queryStrings || !Array.isArray(queryStrings)) {\r\n          console.error(\"Invalid query strings received:\", queryStrings);\r\n          throw new Error(\"Failed to get valid query strings from structuring prompt\");\r\n      }\r\n\r\n      if (DEBUG) console.log(\"Got query strings:\", queryStrings);\r\n      const results = [];\r\n\r\n      for (const queryString of queryStrings) {\r\n          if (DEBUG) console.log(\"Processing query:\", queryString);\r\n          try {\r\n              // Make sure queryVectorDB uses the internal API keys\r\n              const queryResults = {\r\n                  query: queryString,\r\n                  trainingData: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call2trainingdata',\r\n                      numResults: 3\r\n                  }),\r\n                  call2Context: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call2context',\r\n                      numResults: 5\r\n                  }),\r\n                  call1Context: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      similarityThreshold: .2,\r\n                      indexName: 'call1context',\r\n                      numResults: 5\r\n                  }),\r\n                  codeOptions: await queryVectorDB({\r\n                      queryPrompt: queryString,\r\n                      indexName: 'codes',\r\n                      numResults: 3,\r\n                      similarityThreshold: .1\r\n                  })\r\n              };\r\n\r\n              results.push(queryResults);\r\n              if (DEBUG) console.log(\"Successfully processed query:\", queryString);\r\n          } catch (error) {\r\n              console.error(`Error processing query \"${queryString}\":`, error);\r\n              // Continue with next query instead of failing completely\r\n          }\r\n      }\r\n\r\n      if (results.length === 0 && queryStrings.length > 0) {\r\n           console.warn(\"All structured queries failed to produce results.\");\r\n           // Decide whether to throw an error or return empty results\r\n           // Throwing error based on original logic\r\n           throw new Error(\"No valid results were obtained from any structured queries\");\r\n      } else if (queryStrings.length === 0) {\r\n           console.warn(\"Structuring prompt returned no query strings.\");\r\n           // Throwing error as subsequent steps likely depend on results\r\n           throw new Error(\"Structuring prompt did not return any queries to process.\");\r\n      }\r\n\r\n      return results;\r\n  } catch (error) {\r\n      console.error(\"Error in structureDatabasequeries:\", error);\r\n      throw error; // Re-throw\r\n  }\r\n}\r\n\r\n// Function: Query Vector Database using Pinecone REST API\r\nexport async function queryVectorDB({ queryPrompt, indexName = 'codes', numResults = 10, similarityThreshold = null }) {\r\n    try {\r\n        if (DEBUG) console.log(\"Generating embeddings for query:\", queryPrompt);\r\n\r\n        // Ensure API key exists before proceeding\r\n        if (!INTERNAL_API_KEYS.PINECONE_API_KEY) {\r\n            throw new Error(\"Pinecone API key not found. Please check your API keys.\");\r\n        }\r\n\r\n        const embedding = await createEmbedding(queryPrompt); // Uses OpenAI key internally\r\n        if (DEBUG) console.log(\"Embeddings generated successfully\");\r\n\r\n        const indexConfig = PINECONE_INDEXES[indexName];\r\n        if (!indexConfig) {\r\n            throw new Error(`Invalid index name provided: ${indexName}`);\r\n        }\r\n\r\n        const url = `${indexConfig.apiEndpoint}/query`;\r\n        if (DEBUG) console.log(\"Making Pinecone API request to:\", url);\r\n\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'api-key': INTERNAL_API_KEYS.PINECONE_API_KEY,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                vector: embedding,\r\n                topK: numResults,\r\n                includeMetadata: true,\r\n                namespace: \"ns1\" // Assuming namespace is constant\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorText = await response.text().catch(() => \"Could not read error response body\");\r\n            console.error(\"Pinecone API error details:\", {\r\n                status: response.status,\r\n                statusText: response.statusText,\r\n                error: errorText\r\n            });\r\n            throw new Error(`Pinecone API error: ${response.status} ${response.statusText} - ${errorText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        if (DEBUG) console.log(\"Pinecone API response received\");\r\n\r\n        let matches = data.matches || [];\r\n\r\n        if (similarityThreshold !== null) {\r\n            matches = matches.filter(match => match.score >= similarityThreshold);\r\n        }\r\n\r\n        // Apply numResults limit *after* threshold filtering\r\n        matches = matches.slice(0, numResults);\r\n\r\n        // Extract text using the helper function\r\n        const cleanMatches = matches.map(match => extractTextFromJson(match)).filter(text => text !== \"\");\r\n\r\n        if (DEBUG) {\r\n            console.log(`Found ${cleanMatches.length} matches (after threshold/limit/extraction):`);\r\n            cleanMatches.forEach((text, i) => console.log(`  ${i + 1}: ${text.substring(0, 100)}...`));\r\n        }\r\n\r\n        return cleanMatches;\r\n\r\n    } catch (error) {\r\n        console.error(`Error during vector database query for index \"${indexName}\":`, error);\r\n        throw error; // Re-throw\r\n    }\r\n}\r\n\r\n\r\n// Helper function to extract text from Pinecone match JSON\r\nfunction extractTextFromJson(jsonInput) {\r\n   try {\r\n       // Input might already be an object if response was parsed\r\n       const jsonData = typeof jsonInput === 'string' ? JSON.parse(jsonInput) : jsonInput;\r\n\r\n       // Check common structures\r\n       if (jsonData?.metadata?.text) {\r\n           return jsonData.metadata.text;\r\n       }\r\n       // Fallback for older structures or direct text? (Less likely based on usage)\r\n       if (typeof jsonData?.text === 'string') {\r\n           return jsonData.text;\r\n       }\r\n\r\n       // Handle array case (though query response is usually object with 'matches')\r\n       if (Array.isArray(jsonData)) {\r\n           for (const item of jsonData) {\r\n               if (item?.metadata?.text) {\r\n                   return item.metadata.text; // Return first found\r\n               }\r\n           }\r\n       }\r\n\r\n       // If no text found\r\n       console.warn(\"Could not find 'text' field in metadata for match:\", JSON.stringify(jsonInput).substring(0, 100));\r\n       return \"\"; // Return empty string if text cannot be extracted\r\n\r\n   } catch (error) {\r\n       console.error(`Error processing JSON for text extraction: ${error.message}`);\r\n       // Log the problematic input for debugging\r\n       console.error(\"Input causing error:\", jsonInput);\r\n       return \"\"; // Return empty string on error\r\n   }\r\n}\r\n\r\n\r\n// Helper function to format JSON for prompts (handle potential errors)\r\nexport function safeJsonForPrompt(obj, readable = true) {\r\n    try {\r\n        if (!readable) {\r\n            // Simple stringify, remove potential noise, escape braces\r\n            let jsonString = JSON.stringify(obj);\r\n            // Remove empty values/metadata pairs if they exist and are noise\r\n            // Be cautious with overly broad replaces\r\n            // jsonString = jsonString.replace(/\"values\":\\s*\\[\\],\\s*\"metadata\":/g, '\"metadata\":'); // Example, adjust if needed\r\n            return jsonString\r\n                // .replace(/{/g, '\\\\u007B') // Escaping might not be needed depending on LLM\r\n                // .replace(/}/g, '\\\\u007D');\r\n        }\r\n\r\n        // Readable format (extract text, add score)\r\n        if (Array.isArray(obj)) {\r\n            return obj.map(item => {\r\n                let result = \"\";\r\n                if (item?.metadata?.text) {\r\n                    // Basic cleaning: replace newlines, trim\r\n                    const text = item.metadata.text.replace(/[\\r\\n]+/g, ' ').trim();\r\n                    result = text; // Use cleaned text directly\r\n                    // Example of splitting if structure was known:\r\n                    // const parts = text.split(';');\r\n                    // if (parts.length >= 1) result += parts[0].trim();\r\n                    // ... etc ...\r\n                } else {\r\n                    // Fallback if no text found\r\n                    result = JSON.stringify(item); // Stringify the whole item as fallback\r\n                }\r\n\r\n                if (item?.score) {\r\n                    result += `\\nSimilarity Score: ${item.score.toFixed(4)}`;\r\n                }\r\n                return result;\r\n            }).join('\\n\\n'); // Separate items clearly\r\n        }\r\n\r\n        // Fallback for non-array objects (less likely for lists of results)\r\n        return JSON.stringify(obj, null, 2); // Pretty print as fallback\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in safeJsonForPrompt:\", error);\r\n        // Return a safe representation of the error or the input\r\n        return `[Error formatting JSON: ${error.message}]`;\r\n    }\r\n}\r\n\r\n\r\n// Function: Handle Follow-Up Conversation\r\nexport async function handleFollowUpConversation(clientprompt, currentHistory) {\r\n    if (DEBUG) console.log(\"Processing follow-up question:\", clientprompt);\r\n    if (DEBUG) console.log(\"Using conversation history length:\", currentHistory.length);\r\n\r\n    // Ensure API keys are available\r\n    if (!INTERNAL_API_KEYS.OPENAI_API_KEY || !INTERNAL_API_KEYS.PINECONE_API_KEY) {\r\n        throw new Error(\"API keys not initialized for follow-up conversation.\");\r\n    }\r\n\r\n    // Load necessary prompts\r\n    const systemPrompt = await getSystemPromptFromFile('Followup_System');\r\n    const mainPromptText = await getSystemPromptFromFile('Encoder_Main'); // Assuming this is the 'MainPrompt' context needed\r\n\r\n     if (!systemPrompt || !mainPromptText) {\r\n         throw new Error(\"Failed to load required prompts for follow-up.\");\r\n     }\r\n\r\n    // Fetch context using vector DB queries\r\n    // These calls internally use createEmbedding (OpenAI key) and query (Pinecone key)\r\n    const trainingdataCall2 = await queryVectorDB({\r\n        queryPrompt: clientprompt,\r\n        similarityThreshold: .4,\r\n        indexName: 'call2trainingdata',\r\n        numResults: 3\r\n    });\r\n\r\n    const call2context = await queryVectorDB({\r\n        queryPrompt: clientprompt + safeJsonForPrompt(trainingdataCall2, false), // Append context for better query\r\n        similarityThreshold: .3,\r\n        indexName: 'call2context',\r\n        numResults: 5\r\n    });\r\n\r\n    const call1context = await queryVectorDB({\r\n        queryPrompt: clientprompt + safeJsonForPrompt(trainingdataCall2, false),\r\n        similarityThreshold: .3,\r\n        indexName: 'call1context',\r\n        numResults: 5\r\n    });\r\n\r\n    const codeOptions = await queryVectorDB({\r\n        queryPrompt: clientprompt + safeJsonForPrompt(trainingdataCall2, false) + safeJsonForPrompt(call1context, false),\r\n        indexName: 'codes',\r\n        numResults: 10,\r\n        similarityThreshold: .1\r\n    });\r\n\r\n    // Construct the prompt for the LLM\r\n    const followUpPrompt = `Client request: ${clientprompt}\\n` +\r\n                   `Main Prompt Context: ${mainPromptText}\\n` + // Use loaded main prompt text\r\n                   `Training Data Context: ${safeJsonForPrompt(trainingdataCall2, true)}\\n` + // Use readable format for prompt\r\n                   `Code Choosing Context: ${safeJsonForPrompt(call1context, true)}\\n` +\r\n                   `Code Editing Context: ${safeJsonForPrompt(call2context, true)}\\n` +\r\n                   `Relevant Code Options: ${safeJsonForPrompt(codeOptions, true)}`;\r\n\r\n    // Call the LLM (processPrompt uses OpenAI key internally)\r\n    const responseArray = await processPrompt({\r\n        userInput: followUpPrompt,\r\n        systemPrompt: systemPrompt,\r\n        model: GPT41,\r\n        temperature: 1,\r\n        history: currentHistory // Pass the existing history\r\n    });\r\n\r\n    // Update history (create new array, don't modify inplace)\r\n    const updatedHistory = [\r\n        ...currentHistory,\r\n        [\"human\", clientprompt],\r\n        [\"assistant\", responseArray.join(\"\\n\")] // Store response as single string\r\n    ];\r\n\r\n    // Persist updated history and analysis data (using localStorage helpers)\r\n    saveConversationHistory(updatedHistory); // Save the new history state\r\n    savePromptAnalysis(\r\n        clientprompt,\r\n        systemPrompt,\r\n        mainPromptText,\r\n        null, // No validation prompt info available here\r\n        null, // No validation prompt info available here\r\n        null, // No validation results available here\r\n        safeJsonForPrompt(call2context, false), // Save non-readable for potential re-use\r\n        safeJsonForPrompt(call1context, false),\r\n        safeJsonForPrompt(trainingdataCall2, false),\r\n        safeJsonForPrompt(codeOptions, false),\r\n        responseArray\r\n    );\r\n    saveTrainingData(clientprompt, responseArray);\r\n\r\n    if (DEBUG) console.log(\"Follow-up conversation processed. History length:\", updatedHistory.length);\r\n\r\n    // Return the response and the updated history\r\n    return { response: responseArray, history: updatedHistory };\r\n}\r\n\r\n\r\n// Function: Handle Initial Conversation\r\nexport async function handleInitialConversation(clientprompt) {\r\n    if (DEBUG) console.log(\"Processing initial question:\", clientprompt);\r\n\r\n     // Ensure API keys are available\r\n    if (!INTERNAL_API_KEYS.OPENAI_API_KEY) {\r\n        throw new Error(\"OpenAI API key not initialized for initial conversation.\");\r\n    }\r\n\r\n    // Load necessary prompts\r\n    const systemPrompt = await getSystemPromptFromFile('Encoder_System');\r\n    const mainPromptText = await getSystemPromptFromFile('Encoder_Main');\r\n\r\n     if (!systemPrompt || !mainPromptText) {\r\n         throw new Error(\"Failed to load required prompts for initial conversation.\");\r\n     }\r\n\r\n    if (DEBUG) console.log(\"SYSTEM PROMPT: \", systemPrompt ? systemPrompt.substring(0,100) + \"...\" : \"Not loaded\");\r\n    if (DEBUG) console.log(\"MAIN PROMPT: \", mainPromptText ? mainPromptText.substring(0,100) + \"...\" : \"Not loaded\");\r\n\r\n    // Construct the prompt for the first call (no vector DB context yet)\r\n    const initialCallPrompt = `Client request: ${clientprompt}\\n` +\r\n                           `Main Prompt: ${mainPromptText}`;\r\n\r\n    // Call the LLM (processPrompt uses OpenAI key internally)\r\n    const outputArray = await processPrompt({\r\n        userInput: initialCallPrompt,\r\n        systemPrompt: systemPrompt,\r\n        model: GPT41,\r\n        temperature: 1,\r\n        history: [] // No history for initial call\r\n    });\r\n\r\n    // Create the initial history\r\n    const initialHistory = [\r\n        [\"human\", clientprompt],\r\n        [\"assistant\", outputArray.join(\"\\n\")] // Store response as single string\r\n    ];\r\n\r\n    // Persist history and analysis data\r\n    saveConversationHistory(initialHistory);\r\n    savePromptAnalysis(\r\n        clientprompt,\r\n        systemPrompt,\r\n        mainPromptText,\r\n        null, null, null, // No validation info\r\n        \"\", \"\", \"\", \"\", // No vector DB context yet\r\n        outputArray\r\n    );\r\n    saveTrainingData(clientprompt, outputArray);\r\n\r\n    if (DEBUG) console.log(\"Initial conversation processed. History length:\", initialHistory.length);\r\n    if (DEBUG) console.log(\"Initial Response:\", outputArray);\r\n\r\n    // Return the response and the new history\r\n    return { response: outputArray, history: initialHistory };\r\n}\r\n\r\n// Main conversation handler - decides between initial and follow-up\r\n// Takes current history and returns { response, history }\r\nexport async function handleConversation(clientprompt, currentHistory) {\r\n    try {\r\n        const isFollowUp = currentHistory && currentHistory.length > 0;\r\n        if (isFollowUp) {\r\n            return await handleFollowUpConversation(clientprompt, currentHistory);\r\n        } else {\r\n            return await handleInitialConversation(clientprompt);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in conversation handling:\", error);\r\n        // Return error message and unchanged history\r\n        return {\r\n            response: [\"Error processing your request: \" + error.message],\r\n            history: currentHistory || [] // Return existing or empty history\r\n        };\r\n    }\r\n}\r\n\r\n\r\n// Function: Save prompt analysis data to localStorage\r\nfunction savePromptAnalysis(clientprompt, systemPrompt, mainPrompt, validationSystemPrompt, validationMainPrompt, validationResults, call2context, call1context, trainingdataCall2, codeOptions, outputArray) {\r\n    try {\r\n        const analysisData = {\r\n            clientRequest: clientprompt || \"\",\r\n            systemPrompt: systemPrompt || \"\",\r\n            mainPrompt: mainPrompt || \"\",\r\n            validationSystemPrompt: validationSystemPrompt || \"\",\r\n            validationMainPrompt: validationMainPrompt || \"\",\r\n            validationResults: validationResults || [],\r\n            call2context: call2context || \"\", // Store the potentially non-readable string used\r\n            call1context: call1context || \"\",\r\n            trainingdataCall2: trainingdataCall2 || \"\",\r\n            codeOptions: codeOptions || \"\",\r\n            outputArray: outputArray || []\r\n        };\r\n\r\n        localStorage.setItem('promptAnalysis', JSON.stringify(analysisData));\r\n        if (DEBUG) console.log('Prompt analysis saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving prompt analysis:\", error);\r\n    }\r\n}\r\n\r\n// Function: Save training data pair to localStorage\r\nfunction saveTrainingData(clientprompt, outputArray) {\r\n    try {\r\n        // Helper to clean text for storage\r\n        function cleanText(text) {\r\n            if (!text) return '';\r\n            // Convert non-strings (like arrays) to string first\r\n            const str = Array.isArray(text) ? JSON.stringify(text) : String(text);\r\n            return str.replace(/[\\r\\n\\t]+/g, ' ').trim(); // Replace newlines/tabs with space\r\n        }\r\n\r\n        const trainingData = {\r\n            prompt: cleanText(clientprompt),\r\n            // Ensure outputArray is stringified if it's an array\r\n            response: cleanText(outputArray)\r\n        };\r\n\r\n        localStorage.setItem('trainingData', JSON.stringify(trainingData));\r\n        if (DEBUG) console.log('Training data saved to localStorage');\r\n    } catch (error) {\r\n        console.error(\"Error saving training data:\", error);\r\n    }\r\n}\r\n\r\n\r\n// Function: Perform validation correction using LLM\r\n// Note: Assumes localStorage contains relevant context from previous calls\r\nexport async function validationCorrection(clientprompt, initialResponse, validationResults) {\r\n    try {\r\n         // Ensure API keys are available\r\n         if (!INTERNAL_API_KEYS.OPENAI_API_KEY) {\r\n            throw new Error(\"OpenAI API key not initialized for validation correction.\");\r\n        }\r\n\r\n        // Load context from localStorage (as per original logic)\r\n        // Consider passing these as arguments if localStorage access becomes problematic\r\n        const trainingData = localStorage.getItem('trainingData') || '{\"prompt\":\"\",\"response\":\"\"}'; // Provide default structure\r\n        const promptAnalysisData = JSON.parse(localStorage.getItem('promptAnalysis') || '{}');\r\n\r\n        // Load validation prompts\r\n        const validationSystemPrompt = await getSystemPromptFromFile('Validation_System');\r\n        const validationMainPrompt = await getSystemPromptFromFile('Validation_Main');\r\n\r\n        if (!validationSystemPrompt || !validationMainPrompt) {\r\n            throw new Error(\"Failed to load validation system or main prompt\");\r\n        }\r\n\r\n        // Format the initial response and validation results as strings\r\n        const responseString = Array.isArray(initialResponse) ? initialResponse.join(\"\\n\") : String(initialResponse);\r\n        const validationResultsString = Array.isArray(validationResults) ? validationResults.join(\"\\n\") : String(validationResults);\r\n\r\n        // Construct the correction prompt using loaded context\r\n        const correctionPrompt =\r\n            `Main Prompt: ${validationMainPrompt}\\n\\n` +\r\n            `Original User Input: ${clientprompt}\\n\\n` +\r\n            `Initial Response (to be corrected): ${responseString}\\n\\n` +\r\n            `Validation Errors Found: ${validationResultsString}\\n\\n` +\r\n            // Include context from the last analysis if available\r\n            `Training Data Example: ${trainingData}\\n\\n` + // Use loaded training data string\r\n            `Code Options Context: ${promptAnalysisData.codeOptions || \"Not available\"}\\n\\n` +\r\n            `Code Choosing Context: ${promptAnalysisData.call1context || \"Not available\"}\\n\\n` +\r\n            `Code Editing Context: ${promptAnalysisData.call2context || \"Not available\"}`;\r\n\r\n\r\n        if (DEBUG) {\r\n            console.log(\"====== VALIDATION CORRECTION INPUT ======\");\r\n            console.log(\"System Prompt:\", validationSystemPrompt.substring(0,100) + \"...\");\r\n            console.log(\"User Input Prompt (truncated):\", correctionPrompt.substring(0, 500) + \"...\");\r\n            console.log(\"=========================================\");\r\n        }\r\n\r\n        // Call LLM for correction (processPrompt uses OpenAI key)\r\n        // Pass an empty history, as correction likely doesn't need chat context\r\n        const correctedResponseArray = await processPrompt({\r\n            userInput: correctionPrompt,\r\n            systemPrompt: validationSystemPrompt,\r\n            model: GPT41,\r\n            temperature: 0.7, // Lower temperature for correction\r\n            history: []\r\n        });\r\n\r\n        // Save the output using the mock fs (as per original logic)\r\n        const correctionOutputPath = \"C:\\\\Users\\\\joeor\\\\Dropbox\\\\B - Freelance\\\\C_Projectify\\\\VanPC\\\\Training Data\\\\Main Script Training and Context Data\\\\validation_correction_output.txt\";\r\n        const correctedResponseString = Array.isArray(correctedResponseArray) ? correctedResponseArray.join(\"\\n\") : correctedResponseArray;\r\n        fs.writeFileSync(correctionOutputPath, correctedResponseString);\r\n\r\n        if (DEBUG) console.log(`Validation correction output saved via mock fs to ${correctionOutputPath}`);\r\n        if (DEBUG) console.log(\"Corrected Response:\", correctedResponseArray);\r\n\r\n        return correctedResponseArray; // Return the array format expected by caller\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in validation correction:\", error);\r\n        // console.error(error.stack); // Keep stack trace for detailed debugging\r\n        // Return an error message array, consistent with other function returns\r\n        return [\"Error during validation correction: \" + error.message];\r\n    }\r\n}\r\n\r\n","import { validateCodeStrings } from './Validation.js';\n\nimport { populateCodeCollection, exportCodeCollectionToText, runCodes, processAssumptionTabs, collapseGroupingsAndNavigateToFinancials, hideColumnsAndNavigate, handleInsertWorksheetsFromBase64 } from './CodeCollection.js';\n// >>> ADDED: Import the new validation function\nimport { validateCodeStringsForRun } from './Validation.js';\n// >>> ADDED: Import the tab string generator function\nimport { generateTabString } from './IndexWorksheet.js';\n// >>> UPDATED: Import structureDatabasequeries from the helper file\nimport { structureDatabasequeries } from './StructureHelper.js';\n// >>> ADDED: Import setAPIKeys function from AIcalls\nimport { setAPIKeys } from './AIcalls.js';\n// >>> ADDED: Import callOpenAI function from AIcalls\nimport { callOpenAI } from './AIcalls.js';\n// >>> ADDED: Import conversation history functions from AIcalls\nimport { saveConversationHistory, loadConversationHistory } from './AIcalls.js';\n// >>> ADDED: Import prompt loading functions from AIcalls\nimport { loadPromptFromFile, getSystemPromptFromFile } from './AIcalls.js';\n// >>> ADDED: Import processPrompt function from AIcalls\nimport { processPrompt } from './AIcalls.js';\n// >>> ADDED: Import createEmbedding function from AIcalls\nimport { createEmbedding } from './AIcalls.js';\n// >>> ADDED: Import queryVectorDB function from AIcalls\nimport { queryVectorDB } from './AIcalls.js';\n// >>> ADDED: Import safeJsonForPrompt function from AIcalls\nimport { safeJsonForPrompt } from './AIcalls.js';\n// >>> ADDED: Import conversation handling and validation functions from AIcalls\n// Make sure handleConversation is included here\nimport { handleFollowUpConversation, handleInitialConversation, handleConversation, validationCorrection } from './AIcalls.js';\n// Add the codeStrings variable with the specified content\n// REMOVED hardcoded codeStrings variable\n\nimport { API_KEYS as configApiKeys } from '../../config.js'; // Assuming config.js exports API_KEYS\n\n//Debugging Toggle\nconst DEBUG = true;\n\n// Variable to store loaded code strings\nlet loadedCodeStrings = \"\";\n\n// Variable to store the parsed code database\nlet codeDatabase = [];\n\n// API keys storage - initialized by initializeAPIKeys\nlet INTERNAL_API_KEYS = {\n  OPENAI_API_KEY: \"\",\n  PINECONE_API_KEY: \"\"\n};\n\n// >>> MOVED & MODIFIED: Ensure truly global scope for cursor position\nvar lastEditorCursorPosition = null;\n\n// Function to load the code string database\nasync function loadCodeDatabase() {\n  try {\n    console.log(\"Loading code database...\");\n    const response = await fetch('https://localhost:3002/assets/codestringDB.txt');\n    if (!response.ok) {\n      throw new Error(`Failed to load codestringDB.txt: ${response.statusText}`);\n    }\n    const text = await response.text();\n    const lines = text.split(/[\\r\\n]+/).filter(line => line.trim() !== ''); // Split by lines and remove empty ones\n\n    codeDatabase = lines.map(line => {\n      const parts = line.split('\\t'); // Assuming tab-separated\n      if (parts.length >= 2) {\n        return { name: parts[0].trim(), code: parts[1].trim() };\n      }\n      console.warn(`Skipping malformed line in codestringDB.txt: ${line}`);\n      return null;\n    }).filter(item => item !== null); // Filter out null entries from malformed lines\n\n    console.log(`Code database loaded successfully with ${codeDatabase.length} entries.`);\n    if (DEBUG && codeDatabase.length > 0) {\n        console.log(\"First few code database entries:\", codeDatabase.slice(0, 5));\n    }\n\n  } catch (error) {\n    console.error(\"Error loading code database:\", error);\n    showError(\"Failed to load code database. Search functionality will be unavailable.\");\n    codeDatabase = []; // Ensure it's empty on error\n  }\n}\n\n// Function to load API keys from a config file\n// This allows the keys to be stored in a separate file that's .gitignored\nexport async function initializeAPIKeys() {\n  try {\n    console.log(\"Initializing API keys from AIcalls.js...\");\n\n    // Use keys from imported config.js if available\n    if (configApiKeys?.OPENAI_API_KEY) {\n        INTERNAL_API_KEYS.OPENAI_API_KEY = configApiKeys.OPENAI_API_KEY;\n        console.log(\"OpenAI API key loaded from config.js\");\n    } else {\n         console.warn(\"OpenAI API key not found in config.js.\");\n    }\n\n    if (configApiKeys?.PINECONE_API_KEY) {\n        INTERNAL_API_KEYS.PINECONE_API_KEY = configApiKeys.PINECONE_API_KEY;\n        console.log(\"Pinecone API key loaded from config.js\");\n    } else {\n         console.warn(\"Pinecone API key not found in config.js.\");\n    }\n\n    // Fallback: try fetching from the old location if config.js didn't provide them\n    if (!INTERNAL_API_KEYS.OPENAI_API_KEY || !INTERNAL_API_KEYS.PINECONE_API_KEY) {\n        console.log(\"Attempting fallback API key loading from https://localhost:3002/config.js\");\n        try {\n            const configResponse = await fetch('https://localhost:3002/config.js');\n            if (configResponse.ok) {\n                const configText = await configResponse.text();\n                // Extract keys from the config text using regex\n                const openaiKeyMatch = configText.match(/OPENAI_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\n                const pineconeKeyMatch = configText.match(/PINECONE_API_KEY\\s*=\\s*[\"']([^\"']+)[\"']/);\n\n                if (!INTERNAL_API_KEYS.OPENAI_API_KEY && openaiKeyMatch && openaiKeyMatch[1]) {\n                    INTERNAL_API_KEYS.OPENAI_API_KEY = openaiKeyMatch[1];\n                    console.log(\"OpenAI API key loaded via fetch fallback.\");\n                }\n\n                if (!INTERNAL_API_KEYS.PINECONE_API_KEY && pineconeKeyMatch && pineconeKeyMatch[1]) {\n                    INTERNAL_API_KEYS.PINECONE_API_KEY = pineconeKeyMatch[1];\n                    console.log(\"Pinecone API key loaded via fetch fallback.\");\n                }\n            } else {\n                 console.warn(\"Fallback fetch for config.js failed or returned non-OK status.\");\n            }\n        } catch (error) {\n            console.warn(\"Could not load config.js via fetch fallback:\", error);\n        }\n    }\n\n    // Add debug logging with secure masking of keys\n    console.log(\"Loaded API Keys (AIcalls.js):\");\n    console.log(\"  OPENAI_API_KEY:\", INTERNAL_API_KEYS.OPENAI_API_KEY ?\n      `${INTERNAL_API_KEYS.OPENAI_API_KEY.substring(0, 3)}...${INTERNAL_API_KEYS.OPENAI_API_KEY.substring(INTERNAL_API_KEYS.OPENAI_API_KEY.length - 3)}` :\n      \"Not found\");\n    console.log(\"  PINECONE_API_KEY:\", INTERNAL_API_KEYS.PINECONE_API_KEY ?\n      `${INTERNAL_API_KEYS.PINECONE_API_KEY.substring(0, 3)}...${INTERNAL_API_KEYS.PINECONE_API_KEY.substring(INTERNAL_API_KEYS.PINECONE_API_KEY.length - 3)}` :\n      \"Not found\");\n\n    const keysFound = !!(INTERNAL_API_KEYS.OPENAI_API_KEY && INTERNAL_API_KEYS.PINECONE_API_KEY);\n    console.log(\"API Keys Initialized:\", keysFound);\n    // Return a copy to prevent external modification of the internal state\n    return { ...INTERNAL_API_KEYS };\n\n  } catch (error) {\n    console.error(\"Error initializing API keys:\", error);\n    // Return empty keys on error\n    return { OPENAI_API_KEY: \"\", PINECONE_API_KEY: \"\" };\n  }\n}\n\n// Conversation history storage\nlet conversationHistory = [];\n\n// Add this function at the top level\nfunction showMessage(message) {\n    const messageDiv = document.createElement('div');\n    messageDiv.style.color = 'green';\n    messageDiv.style.padding = '10px';\n    messageDiv.style.margin = '10px';\n    messageDiv.style.border = '1px solid green';\n    messageDiv.style.borderRadius = '4px';\n    messageDiv.textContent = message;\n    \n    const appBody = document.getElementById('app-body');\n    appBody.insertBefore(messageDiv, appBody.firstChild);\n    \n    // Remove the message after 5 seconds\n    setTimeout(() => {\n        messageDiv.remove();\n    }, 5000);\n}\n\n// Add this function at the top level\nfunction showError(message) {\n    const errorDiv = document.createElement('div');\n    errorDiv.style.color = 'red';\n    errorDiv.style.padding = '10px';\n    errorDiv.style.margin = '10px';\n    errorDiv.style.border = '1px solid red';\n    errorDiv.style.borderRadius = '4px';\n    errorDiv.textContent = `Error: ${message}`;\n    \n    const appBody = document.getElementById('app-body');\n    appBody.insertBefore(errorDiv, appBody.firstChild);\n    \n    // Remove the error message after 5 seconds\n    setTimeout(() => {\n        errorDiv.remove();\n    }, 5000);\n}\n\n// Add this function at the top level\nfunction setButtonLoading(isLoading) {\n    console.log(`[setButtonLoading] Called with isLoading: ${isLoading}`);\n    const sendButton = document.getElementById('send');\n    const loadingAnimation = document.getElementById('loading-animation');\n    \n    if (sendButton) {\n        sendButton.disabled = isLoading;\n    } else {\n        console.warn(\"[setButtonLoading] Could not find send button with id='send'\");\n    }\n    \n    if (loadingAnimation) {\n        const newDisplay = isLoading ? 'flex' : 'none';\n        console.log(`[setButtonLoading] Found loadingAnimation element. Setting display to: ${newDisplay}`);\n        loadingAnimation.style.display = newDisplay;\n    } else {\n        console.error(\"[setButtonLoading] Could not find loading animation element with id='loading-animation'\");\n    }\n}\n\n// Add this variable to store the last response\nlet lastResponse = null;\n\n// Add this variable to track if the current message is a response\nlet isResponse = false;\n\n// Add this function to write to Excel\nasync function writeToExcel() {\n    if (!lastResponse) {\n        showError('No response to write to Excel');\n        return;\n    }\n\n    try {\n        await Excel.run(async (context) => {\n            const range = context.workbook.getSelectedRange();\n            range.load(\"rowIndex\");\n            range.load(\"columnIndex\");\n            await context.sync();\n            \n            const startRow = range.rowIndex;\n            const startCol = range.columnIndex;\n            \n            // Split the response into individual code strings\n            let codeStrings = [];\n            if (Array.isArray(lastResponse)) {\n                // Join the array elements and then split by brackets\n                const fullText = lastResponse.join(' ');\n                codeStrings = fullText.match(/<[^>]+>/g) || [];\n            } else if (typeof lastResponse === 'string') {\n                codeStrings = lastResponse.match(/<[^>]+>/g) || [];\n            }\n            \n            if (codeStrings.length === 0) {\n                throw new Error(\"No valid code strings found in response\");\n            }\n            \n            // Create a range that spans all the rows we need\n            const targetRange = range.worksheet.getRangeByIndexes(\n                startRow,\n                startCol,\n                codeStrings.length,\n                1\n            );\n            \n            // Set all values at once, with each code string in its own row\n            targetRange.values = codeStrings.map(str => [str]);\n            \n            await context.sync();\n            console.log(\"Response written to Excel\");\n        });\n    } catch (error) {\n        console.error(\"Error writing to Excel:\", error);\n        showError(error.message);\n    }\n}\n\n// Add this function to append messages to the chat log\nfunction appendMessage(content, isUser = false) {\n    const chatLog = document.getElementById('chat-log');\n    const welcomeMessage = document.getElementById('welcome-message');\n    \n    // Hide welcome message when first message is added\n    if (welcomeMessage) {\n        welcomeMessage.style.display = 'none';\n    }\n    \n    const messageDiv = document.createElement('div');\n    messageDiv.className = `chat-message ${isUser ? 'user-message' : 'assistant-message'}`;\n    \n    const messageContent = document.createElement('p');\n    messageContent.className = 'message-content';\n    messageContent.textContent = content;\n    \n    messageDiv.appendChild(messageContent);\n    chatLog.appendChild(messageDiv);\n    \n    // Scroll to bottom\n    chatLog.scrollTop = chatLog.scrollHeight;\n}\n\n// Modify the handleSend function\nasync function handleSend() {\n    const userInput = document.getElementById('user-input').value.trim();\n    \n    if (!userInput) {\n        showError('Please enter a request');\n        return;\n    }\n\n    // Check if this is a response to a previous message\n    isResponse = conversationHistory.length > 0;\n\n    // Add user message to chat\n    appendMessage(userInput, true);\n    \n    // Clear input\n    document.getElementById('user-input').value = '';\n\n    setButtonLoading(true);\n    try {\n        // Process the text through the main function\n        console.log(\"Starting structureDatabasequeries\");\n        const dbResults = await structureDatabasequeries(userInput);\n        console.log(\"Database queries completed\");\n        \n        if (!dbResults || !Array.isArray(dbResults)) {\n            console.error(\"Invalid database results:\", dbResults);\n            throw new Error(\"Failed to get valid database results\");\n        }\n        \n        // Format the database results into a string\n        const plainTextResults = dbResults.map(result => {\n            if (!result) return \"No results found\";\n            \n            return `Query: ${result.query || 'No query'}\\n` +\n                   `Training Data:\\n${(result.trainingData || []).join('\\n')}\\n` +\n                   `Code Options:\\n${(result.codeOptions || []).join('\\n')}\\n` +\n                   `Code Choosing Context:\\n${(result.call1Context || []).join('\\n')}\\n` +\n                   `Code Editing Context:\\n${(result.call2Context || []).join('\\n')}\\n` +\n                   `---\\n`;\n        }).join('\\n');\n\n        const enhancedPrompt = `Client Request: ${userInput}\\n\\nDatabase Results:\\n${plainTextResults}`;\n        console.log(\"Enhanced prompt created\");\n        console.log(\"Enhanced prompt:\", enhancedPrompt);\n\n        console.log(\"Starting handleConversation\");\n        let conversationResult = await handleConversation(enhancedPrompt, isResponse); // Store the whole result object\n        console.log(\"Conversation completed\");\n        console.log(\"Initial Conversation Result:\", conversationResult); // Log the whole object\n\n        // Extract the response array and update history\n        let responseArray = conversationResult.response;\n        conversationHistory = conversationResult.history; // Update global history if needed (check AIcalls.js if it manages history internally)\n\n        // Validate the extracted response array\n        if (!responseArray || !Array.isArray(responseArray)) {\n            console.error(\"Invalid response array extracted:\", responseArray);\n            throw new Error(\"Failed to get valid response array from conversation result\");\n        }\n\n        // Run validation and correction if needed (using the extracted array)\n        console.log(\"Starting validation\");\n        const validationResults = await validateCodeStrings(responseArray);\n        console.log(\"Validation completed:\", validationResults);\n\n        if (validationResults && validationResults.length > 0) {\n            console.log(\"Starting validation correction\");\n            // Pass the extracted array to validationCorrection\n            responseArray = await validationCorrection(userInput, responseArray, validationResults);\n            console.log(\"Validation correction completed\");\n        }\n\n        // Store the final response array for Excel writing\n        lastResponse = responseArray;\n\n        // Add assistant message to chat (using the extracted array)\n        appendMessage(responseArray.join('\\n'));\n        \n    } catch (error) {\n        console.error(\"Error in handleSend:\", error);\n        showError(error.message);\n        // Add error message to chat\n        appendMessage(`Error: ${error.message}`);\n    } finally {\n        setButtonLoading(false);\n    }\n}\n\n// Add this function to reset the chat\nfunction resetChat() {\n    // Clear the chat log\n    const chatLog = document.getElementById('chat-log');\n    chatLog.innerHTML = '';\n    \n    // Restore welcome message\n    const welcomeMessage = document.createElement('div');\n    welcomeMessage.id = 'welcome-message';\n    welcomeMessage.className = 'welcome-message';\n    const welcomeTitle = document.createElement('h1');\n    welcomeTitle.textContent = 'What would you like to model?';\n    welcomeMessage.appendChild(welcomeTitle);\n    chatLog.appendChild(welcomeMessage);\n    \n    // Clear the conversation history\n    conversationHistory = [];\n    saveConversationHistory(conversationHistory);\n    \n    // Reset the response flag and last response\n    isResponse = false;\n    lastResponse = null;\n    \n    // Clear the input field\n    document.getElementById('user-input').value = '';\n    \n    console.log(\"Chat reset completed\");\n}\n\n// *** Define Helper Function Globally (BEFORE Office.onReady) ***\nfunction getTabBlocks(codeString) {\n    if (!codeString) return [];\n    const tabBlocks = [];\n    const tabRegex = /(<TAB;[^>]*>)/g;\n    let match;\n    const indices = [];\n    while ((match = tabRegex.exec(codeString)) !== null) {\n        indices.push({ index: match.index, tag: match[1] });\n    }\n    if (indices.length === 0) {\n        if (codeString.trim().length > 0) {\n            console.warn(\"Code string provided but no <TAB;...> tags found. Processing cannot proceed based on Tabs.\");\n        }\n        return []; \n    } \n    for (let i = 0; i < indices.length; i++) {\n        const start = indices[i].index;\n        const tag = indices[i].tag;\n        const end = (i + 1 < indices.length) ? indices[i + 1].index : codeString.length;\n        const blockText = codeString.substring(start, end).trim();\n        if (blockText) {\n            tabBlocks.push({ tag: tag, text: blockText });\n        }\n    }\n    return tabBlocks;\n}\n\n// Helper function to find max driver numbers in existing text\nfunction getMaxDriverNumbers(text) {\n    const maxNumbers = {};\n    // MODIFIED Regex: Allow optional spaces around =\n    const regex = /row\\d+\\s*=\\s*\"([A-Z]+)(\\d*)\\|/g;\n    let match;\n    console.log(\"Scanning text for drivers:\", text.substring(0, 200) + \"...\"); // Log input text\n\n    while ((match = regex.exec(text)) !== null) {\n        const prefix = match[1];\n        const numberStr = match[2];\n        const number = numberStr ? parseInt(numberStr, 10) : 0;\n        console.log(`Found driver match: prefix='${prefix}', numberStr='${numberStr}', number=${number}`); // Log each match\n\n        if (isNaN(number)) {\n             console.warn(`Parsed NaN for number from '${numberStr}' for prefix '${prefix}'. Skipping.`);\n             continue;\n        }\n\n        if (!maxNumbers[prefix] || number > maxNumbers[prefix]) {\n            maxNumbers[prefix] = number;\n            console.log(`Updated max for '${prefix}' to ${number}`); // Log updates\n        }\n    }\n    if (Object.keys(maxNumbers).length === 0) {\n        console.log(\"No existing drivers found matching the pattern.\");\n    }\n    console.log(\"Final max existing driver numbers:\", maxNumbers);\n    return maxNumbers;\n}\n\nasync function insertSheetsAndRunCodes() {\n\n    // >>> ADDED: Get codes from textarea and save automatically\n    const codesTextarea = document.getElementById('codes-textarea');\n    if (!codesTextarea) {\n        showError(\"Could not find the code input area. Cannot run codes.\");\n        return;\n    }\n    loadedCodeStrings = codesTextarea.value; // Update global variable\n    try {\n        localStorage.setItem('userCodeStrings', loadedCodeStrings);\n        console.log(\"[Run Codes] Automatically saved codes from textarea to localStorage.\");\n    } catch (error) {\n        console.error(\"[Run Codes] Error auto-saving codes to localStorage:\", error);\n        showError(`Error automatically saving codes: ${error.message}. Run may not reflect latest changes.`);\n    }\n    // <<< END ADDED CODE\n\n    let codesToRun = loadedCodeStrings;\n    let previousCodes = null;\n    // >>> REVISED: Unified list for all content to process\n    let allCodeContentToProcess = \"\"; // Holds full text of *all* new AND modified tabs\n    let runResult = null; // To store result from runCodes if called\n    // Removed: codesToProcessForRunCodes, tabsToInsertIncrementally, codeStringToValidate (use allCodeContentToProcess)\n\n    // Main processing wrapped in try/catch/finally\n    try {\n        // --- Check Financials Sheet Existence ---\n        let financialsSheetExists = false;\n        await Excel.run(async (context) => {\n            try {\n                const financialsSheet = context.workbook.worksheets.getItem(\"Financials\");\n                financialsSheet.load(\"name\");\n                await context.sync();\n                financialsSheetExists = true;\n            } catch (error) {\n                if (error instanceof OfficeExtension.Error && error.code === Excel.ErrorCodes.itemNotFound) {\n                    financialsSheetExists = false;\n                } else { throw error; } // Rethrow other errors\n            }\n        });\n\n        // Set calculation mode to manual (do this early)\n        await Excel.run(async (context) => {\n            context.application.calculationMode = Excel.CalculationMode.manual;\n            await context.sync();\n        });\n\n        setButtonLoading(true);\n        console.log(\"Starting code processing...\");\n\n        // --- Pass Logic: Determine sheets to insert and codes to process ---\n        if (!financialsSheetExists) {\n            // *** FIRST PASS ***\n            console.log(\"[Run Codes] FIRST PASS: Financials sheet not found.\");\n            allCodeContentToProcess = codesToRun; // All codes are new\n\n            // >>> VALIDATION FOR FIRST PASS <<<\n            if (allCodeContentToProcess.trim().length > 0) {\n                console.log(\"Validating ALL codes before initial base sheet insertion...\");\n                const validationErrors = await validateCodeStringsForRun(allCodeContentToProcess.split(/\\r?\\n/).filter(line => line.trim() !== ''));\n                if (validationErrors && validationErrors.length > 0) {\n                    const errorMsg = \"Initial validation failed. Please fix the errors before running:\\n\" + validationErrors.join(\"\\n\");\n                    console.error(\"Code validation failed:\", validationErrors);\n                    showError(\"Code validation failed. See chat for details.\");\n                    appendMessage(errorMsg);\n                    setButtonLoading(false);\n                    return; // Stop execution\n                }\n                console.log(\"Initial code validation successful.\");\n            } else {\n                console.log(\"[Run Codes] No codes to validate on first pass.\");\n                // If no codes, no need to insert base sheets? Or insert anyway? Assuming insert needed.\n            }\n\n            // --- Insert BASE sheets ---\n            console.log(\"Inserting base sheets from Worksheets_4.3.25 v1.xlsx...\");\n            // ... (fetch and handleInsertWorksheetsFromBase64 for Worksheets_4.3.25 remains the same) ...\n            const worksheetsResponse = await fetch('https://localhost:3002/assets/Worksheets_4.3.25 v1.xlsx');\n            if (!worksheetsResponse.ok) throw new Error(`Worksheets load failed: ${worksheetsResponse.statusText}`);\n            const worksheetsArrayBuffer = await worksheetsResponse.arrayBuffer();\n            console.log(\"Converting base file to base64 (using chunks)...\");\n            const worksheetsUint8Array = new Uint8Array(worksheetsArrayBuffer);\n            let worksheetsBinaryString = '';\n            const chunkSize = 8192;\n            for (let i = 0; i < worksheetsUint8Array.length; i += chunkSize) {\n                const chunk = worksheetsUint8Array.slice(i, Math.min(i + chunkSize, worksheetsUint8Array.length));\n                worksheetsBinaryString += String.fromCharCode.apply(null, chunk);\n            }\n            const worksheetsBase64String = btoa(worksheetsBinaryString);\n            console.log(\"Base64 conversion complete.\");\n            await handleInsertWorksheetsFromBase64(worksheetsBase64String);\n            console.log(\"Base sheets inserted.\");\n            // No need to insert codes.xlsx here, it happens after runCodes\n\n        } else {\n            // *** SECOND PASS (or later) ***\n            console.log(\"[Run Codes] SUBSEQUENT PASS: Financials sheet found.\");\n\n            // Load previous codes for comparison\n            try {\n                previousCodes = localStorage.getItem('previousRunCodeStrings');\n            } catch (error) {\n                 console.error(\"[Run Codes] Error loading previous codes for comparison:\", error);\n                 console.warn(\"[Run Codes] Could not load previous codes. Processing ALL current codes as fallback.\");\n                 previousCodes = null; // Treat as if all codes are new if loading fails\n            }\n\n            // Check for NO changes first\n            if (previousCodes !== null && previousCodes === codesToRun) {\n                 console.log(\"[Run Codes] No change in code strings since last run. Nothing to process.\");\n                 // Update previous state just in case, though it's identical\n                 try { localStorage.setItem('previousRunCodeStrings', codesToRun); } catch(e) { console.error(\"Err updating prev codes:\", e); }\n                 showMessage(\"No code changes to run.\");\n                 setButtonLoading(false);\n                 return; // <<< EXIT EARLY\n            }\n\n            // --- Identify New and Modified Tabs & Collect ALL content ---\n            const currentTabs = getTabBlocks(codesToRun);\n            const previousTabs = getTabBlocks(previousCodes || \"\"); // Use empty string if previousCodes is null\n            const previousTabMap = new Map(previousTabs.map(block => [block.tag, block.text]));\n\n            let hasAnyChanges = false; // Flag to check if codes.xlsx needs inserting\n            const codeRegex = /<[^>]+>/g; // Regex to find <...> codes\n\n            for (const currentTab of currentTabs) {\n                const currentTag = currentTab.tag; // This is the <TAB;...> tag\n                const currentText = currentTab.text; // This is the full text block starting with <TAB;...>\n                const previousText = previousTabMap.get(currentTag);\n\n                if (previousText === undefined) {\n                    // *** New Tab ***\n                    console.log(`[Run Codes] Identified NEW tab: ${currentTag}. Adding all its codes.`);\n                    const newTabCodes = currentText.match(codeRegex) || [];\n                    if (newTabCodes.length > 0) {\n                        allCodeContentToProcess += newTabCodes.join(\"\\n\") + \"\\n\\n\"; // newTabCodes already includes the TAB tag\n                        hasAnyChanges = true;\n                    }\n                } else {\n                    // *** Existing Tab: Compare individual codes ***\n                    const currentCodes = currentText.match(codeRegex) || [];\n                    const previousCodesSet = new Set((previousText || \"\").match(codeRegex) || []);\n                    let tabHasChanges = false;\n                    let codesToAddForThisTab = \"\"; // Collect codes for this tab\n\n                    for (const currentCode of currentCodes) {\n                        if (!previousCodesSet.has(currentCode)) {\n                            console.log(`[Run Codes] Identified NEW/MODIFIED code in tab ${currentTag}: ${currentCode.substring(0, 80)}...`);\n                            codesToAddForThisTab += currentCode + \"\\n\"; // Collect only the new/modified code\n                            hasAnyChanges = true;\n                            tabHasChanges = true; // Mark that this specific tab had changes\n                        }\n                    }\n                    // If codes were added from this modified tab, prefix them with the TAB tag\n                    if (tabHasChanges) {\n                        allCodeContentToProcess += currentTag + \"\\n\"; // Add TAB tag\n                        allCodeContentToProcess += codesToAddForThisTab + \"\\n\"; // Add collected codes + separator\n                    }\n                }\n            }\n\n            // --- Validate ALL collected content BEFORE inserting codes.xlsx ---\n            if (hasAnyChanges) {\n                if (allCodeContentToProcess.trim().length > 0) {\n                    console.log(\"Validating ALL content from new/modified tabs BEFORE inserting codes.xlsx...\");\n                    const validationErrors = await validateCodeStringsForRun(allCodeContentToProcess.split(/\\r?\\n/).filter(line => line.trim() !== ''));\n\n                    if (validationErrors && validationErrors.length > 0) {\n                        const errorMsg = \"Validation failed. Please fix the errors before running:\\n\" + validationErrors.join(\"\\n\");\n                        console.error(\"Code validation failed:\", validationErrors);\n                        showError(\"Code validation failed. See chat for details.\");\n                        appendMessage(errorMsg);\n                        setButtonLoading(false);\n                        return; // Stop execution\n                    }\n                    console.log(\"Code validation successful for new/modified tabs.\");\n                } else {\n                    console.log(\"[Run Codes] Changes detected, but no code content found for validation in new/modified tabs.\");\n                     // This case might occur if only whitespace/comments changed within tabs\n                     // Decide if codes.xlsx insertion is still needed? Assuming yes if hasAnyChanges=true\n                }\n\n                // --- Insert codes.xlsx only AFTER successful validation if changes were detected ---\n                console.log(`[Run Codes] Changes detected and validated: ${currentTabs.filter(tab => !previousTabMap.has(tab.tag) || previousTabMap.get(tab.tag) !== tab.text).map(tab => tab.tag).join(', ')}. Inserting base sheets from codes.xlsx...`);\n                try {\n                    const codesResponse = await fetch('https://localhost:3002/assets/codes.xlsx');\n                    if (!codesResponse.ok) throw new Error(`codes.xlsx load failed: ${codesResponse.statusText}`);\n                    const codesArrayBuffer = await codesResponse.arrayBuffer();\n                    console.log(\"Converting codes.xlsx file to base64 (using chunks)...\");\n                    // ... (base64 conversion remains the same) ...\n                    const codesUint8Array = new Uint8Array(codesArrayBuffer);\n                    let codesBinaryString = '';\n                    const chunkSize_codes = 8192;\n                    for (let i = 0; i < codesUint8Array.length; i += chunkSize_codes) {\n                        const chunk = codesUint8Array.slice(i, Math.min(i + chunkSize_codes, codesUint8Array.length));\n                        codesBinaryString += String.fromCharCode.apply(null, chunk);\n                    }\n                    const codesBase64String = btoa(codesBinaryString);\n\n                    console.log(\"codes.xlsx Base64 conversion complete.\");\n                    await handleInsertWorksheetsFromBase64(codesBase64String);\n                    console.log(\"codes.xlsx sheets inserted.\");\n                } catch (e) {\n                    console.error(\"Failed to insert sheets from codes.xlsx:\", e);\n                    showError(\"Failed to insert necessary sheets from codes.xlsx. Aborting.\");\n                    setButtonLoading(false);\n                    return;\n                }\n            } else {\n                 console.log(\"[Run Codes] No changes identified in tabs compared to previous run. Nothing to insert or process.\");\n                 // Update previous state as the content is effectively the same\n                 try { localStorage.setItem('previousRunCodeStrings', codesToRun); } catch(e) { console.error(\"Err updating prev codes:\", e); }\n                 showMessage(\"No code changes identified to run.\");\n                 setButtonLoading(false);\n                 return; // Exit if no actionable changes\n            }\n\n        } // End of pass logic (if/else financialsSheetExists)\n\n        // --- Execute Processing ---\n\n        // >>> REMOVED: Incremental Insertion block <<<\n\n        // --- Process ALL collected content (New + Modified Tabs) using runCodes ---\n        if (allCodeContentToProcess.trim().length > 0) {\n            console.log(\"[Run Codes] Processing collected content from new/modified tabs...\");\n            console.log(\"Populating collection...\");\n            const collection = populateCodeCollection(allCodeContentToProcess);\n            console.log(`Collection populated with ${collection.length} code(s)`);\n\n             // Check if collection is empty after population (might happen if only comments/whitespace)\n            if (collection.length > 0) {\n                console.log(\"Running codes...\");\n                runResult = await runCodes(collection); // Store the result\n                console.log(\"Codes executed:\", runResult);\n            } else {\n                 console.log(\"[Run Codes] Collection is empty after population, skipping runCodes execution.\");\n                 // Ensure runResult is initialized for post-processing\n                 if (!runResult) runResult = { assumptionTabs: [] };\n            }\n        } else {\n            console.log(\"[Run Codes] No code content collected to process via runCodes.\");\n             // Initialize runResult structure if needed by post-processing\n             if (!runResult) runResult = { assumptionTabs: [] }; // Ensure runResult exists\n        }\n\n        // --- Post-processing (Runs regardless) ---\n        console.log(\"[Run Codes] Starting post-processing steps...\");\n        if (runResult && runResult.assumptionTabs && runResult.assumptionTabs.length > 0) {\n            console.log(\"Processing assumption tabs...\");\n            await processAssumptionTabs(runResult.assumptionTabs);\n        } else {\n             console.log(\"No assumption tabs to process.\");\n        }\n        console.log(\"Hiding specific columns and navigating...\");\n        // Pass assumption tabs from runResult (if any), otherwise an empty array.\n        await hideColumnsAndNavigate(runResult?.assumptionTabs || []);\n\n        // Cleanup\n        console.log(\"Deleting Codes sheet / Skipping hiding Calcs sheet...\");\n        await Excel.run(async (context) => {\n            try {\n                const codesSheet = context.workbook.worksheets.getItem(\"Codes\");\n                codesSheet.delete();\n                console.log(\"Codes sheet deleted.\");\n            } catch (e) {\n                if (e instanceof OfficeExtension.Error && e.code === Excel.ErrorCodes.itemNotFound) {\n                     console.warn(\"Codes sheet not found, skipping deletion.\");\n                } else { console.error(\"Error deleting Codes sheet:\", e); }\n            }\n            // Hiding Calcs sheet logic was removed previously, keeping it out.\n            await context.sync();\n        }).catch(error => { console.error(\"Error during sheet cleanup:\", error); });\n\n        // --- IMPORTANT: Update previous codes state AFTER successful processing ---\n        try {\n            localStorage.setItem('previousRunCodeStrings', codesToRun);\n            console.log(\"[Run Codes] Updated previous run state with full current codes.\");\n        } catch (error) {\n             console.error(\"[Run Codes] Failed to update previous run state:\", error);\n        }\n\n        showMessage(\"Code processing finished successfully!\");\n\n    } catch (error) {\n        console.error(\"An error occurred during the build process:\", error);\n        showError(`Operation failed: ${error.message || error.toString()}`);\n    } finally {\n        // Always set calculation mode back to automatic and hide loading\n        try {\n            await Excel.run(async (context) => {\n                context.application.calculationMode = Excel.CalculationMode.automatic;\n                await context.sync();\n            });\n        } catch (finalError) {\n            console.error(\"Error setting calculation mode to automatic:\", finalError);\n        }\n        setButtonLoading(false);\n    }\n}\n\n// Ensure Office.onReady sets up the button click handler for the REVISED function\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // Assign the REVISED async function as the handler\n    const button = document.getElementById(\"insert-and-run\");\n    if (button) {\n        button.onclick = insertSheetsAndRunCodes; // Use the revised function\n    } else {\n        console.error(\"Could not find button with id='insert-and-run'\");\n    }\n\n    // ... (rest of your Office.onReady remains the same) ...\n\n    // Keep the setup for your other buttons (send-button, reset-button, etc.)\n    const sendButton = document.getElementById('send');\n    if (sendButton) sendButton.onclick = handleSend;\n\n    const writeButton = document.getElementById('write-to-excel');\n    if (writeButton) writeButton.onclick = writeToExcel;\n\n    const resetButton = document.getElementById('reset-chat');\n    if (resetButton) resetButton.onclick = resetChat;\n\n    // >>> ADDED: Setup for Generate Tab String button\n    const generateTabStringButton = document.getElementById('generate-tab-string-button');\n    if (generateTabStringButton) {\n        generateTabStringButton.onclick = generateTabString; // Assign the imported function\n    } else {\n        console.error(\"Could not find button with id='generate-tab-string-button'\");\n    }\n    // <<< END ADDED CODE\n\n    const codesTextarea = document.getElementById('codes-textarea');\n    const editParamsButton = document.getElementById('edit-code-params-button');\n    const paramsModal = document.getElementById('code-params-modal');\n    const paramsModalForm = document.getElementById('code-params-modal-form');\n    const closeModalButton = paramsModal.querySelector('.close-button');\n    const applyParamsButton = document.getElementById('apply-code-params-button');\n    const cancelParamsButton = document.getElementById('cancel-code-params-button');\n\n    // Modal Find/Replace elements\n    const modalFindInput = document.getElementById('modal-find-input');\n    const modalReplaceInput = document.getElementById('modal-replace-input');\n    const modalReplaceAllButton = document.getElementById('modal-replace-all-button');\n    const modalSearchStatus = document.getElementById('modal-search-status');\n\n    let currentCodeStringRange = null; // To store {start, end} of the code string being edited\n    let currentCodeStringType = ''; // To store the type like 'VOL-EV'\n\n    // State for modal find/replace (Simplified)\n    let modalSearchableElements = []; // Stores {element, originalValue}\n    // Removed modalSearchTerm, modalCurrentMatchIndex, modalAllMatches\n\n    // Function to reset modal search state (Simplified)\n    const resetModalSearchState = () => {\n        modalSearchableElements = Array.from(paramsModalForm.querySelectorAll('input[data-param-key], textarea[data-param-key]'));\n        if (modalSearchStatus) modalSearchStatus.textContent = '';\n        // Clear input fields as well?\n        // if (modalFindInput) modalFindInput.value = '';\n        // if (modalReplaceInput) modalReplaceInput.value = '';\n        console.log(\"Modal search state reset.\");\n    };\n\n    // Function to update modal search status\n    const updateModalSearchStatus = (message) => {\n        if (modalSearchStatus) {\n            modalSearchStatus.textContent = message;\n        }\n    };\n\n    // Removed findAllMatchesInModal function\n\n    // Function to show the modal\n    const showParamsModal = () => {\n        if (paramsModal) {\n            paramsModal.style.display = 'block';\n            resetModalSearchState(); // Reset search when modal opens\n        }\n    };\n\n    // Function to hide the modal\n    const hideParamsModal = () => {\n        if (paramsModal) {\n            paramsModal.style.display = 'none';\n            paramsModalForm.innerHTML = ''; // Clear the form\n            currentCodeStringRange = null; // Reset state\n            currentCodeStringType = '';\n            resetModalSearchState(); // Also reset search state on close\n        }\n    };\n\n    // Function to find the <...> block around the cursor\n    const findCodeStringAroundCursor = (text, cursorPos) => {\n        const textBeforeCursor = text.substring(0, cursorPos);\n        const textAfterCursor = text.substring(cursorPos);\n\n        const lastOpenBracket = textBeforeCursor.lastIndexOf('<');\n        const lastCloseBracketBefore = textBeforeCursor.lastIndexOf('>');\n\n        // Check if cursor is potentially inside brackets\n        if (lastOpenBracket > lastCloseBracketBefore) {\n            const firstCloseBracketAfter = textAfterCursor.indexOf('>');\n            if (firstCloseBracketAfter !== -1) {\n                const start = lastOpenBracket;\n                const end = cursorPos + firstCloseBracketAfter + 1; // +1 to include '>'\n                const codeString = text.substring(start, end);\n                console.log(`Found code string: ${codeString} at range [${start}, ${end})`);\n                return { codeString, start, end };\n            }\n        }\n        console.log(\"Cursor not inside a <...> block.\");\n        return null; // Cursor is not inside a valid <...> block\n    };\n\n    // Function to parse parameters from the code string content (inside <...>)\n    const parseCodeParameters = (content) => {\n        const parts = content.split(';');\n        if (parts.length < 1) return { type: '', params: {} };\n\n        const type = parts[0].trim();\n        const params = {};\n        // Regex to match key=\"value\" or key=value (no quotes)\n        const paramRegex = /\\s*([^=\\s]+)\\s*=\\s*(?:\"([^\"]*)\"|([^;]*))/g;\n\n        for (let i = 1; i < parts.length; i++) {\n            const part = parts[i].trim();\n            if (!part) continue;\n\n            // Reset regex index before each exec\n            paramRegex.lastIndex = 0;\n            const match = paramRegex.exec(part);\n\n            if (match) {\n                const key = match[1];\n                // Value could be in group 2 (quoted) or group 3 (unquoted)\n                const value = match[2] !== undefined ? match[2] : match[3];\n                 if (key) { // Ensure key is valid\n                    params[key] = value.trim();\n                }\n            } else {\n                console.warn(`Could not parse parameter part: '${part}'`);\n            }\n        }\n        console.log(`Parsed type: ${type}, params:`, params);\n        return { type, params };\n    };\n\n    // Function to populate the modal form (needs to update searchable elements)\n    const populateParamsModal = (type, params) => {\n        paramsModalForm.innerHTML = ''; // Clear previous form items\n        currentCodeStringType = type; // Store the type\n\n        Object.entries(params).forEach(([key, value]) => {\n            const paramEntryDiv = document.createElement('div');\n            paramEntryDiv.className = 'param-entry';\n\n            const label = document.createElement('label');\n            label.htmlFor = `param-${key}`;\n            label.textContent = key;\n\n            let inputElement;\n            const isLongValue = key.toLowerCase().includes('row') || value.length > 60;\n            const isLIParam = /LI\\d+\\|/.test(value.trim()); // Check if value starts with LI<digit>|\n\n            if (isLongValue || isLIParam) { // Use textarea for LI params too, for consistency\n                inputElement = document.createElement('textarea');\n                inputElement.rows = isLIParam ? 2 : 3; // Slightly smaller for LI rows initially\n            } else {\n                inputElement = document.createElement('input');\n                inputElement.type = 'text';\n            }\n\n            inputElement.id = `param-${key}`;\n            inputElement.value = value;\n            inputElement.dataset.paramKey = key;\n            if (isLIParam) {\n                inputElement.dataset.isOriginalLi = \"true\"; // Mark original LI fields\n            }\n\n            paramEntryDiv.appendChild(label);\n\n            if (isLIParam) {\n                // Create a container for the LI field and its add button\n                const liContainer = document.createElement('div');\n                liContainer.className = 'li-parameter-container';\n                liContainer.dataset.originalLiKey = key; // Link container to original key\n\n                liContainer.appendChild(inputElement); // Add the input field first\n\n                // Create the Add button\n                const addButton = document.createElement('button');\n                addButton.type = 'button'; // Important: prevent form submission\n                addButton.textContent = '+';\n                addButton.className = 'ms-Button ms-Button--icon add-li-button'; // Add specific class\n                addButton.title = 'Add another LI item based on this one';\n                addButton.dataset.targetLiKey = key; // Link button to the input's key\n\n                addButton.onclick = (event) => {\n                    const sourceInput = document.getElementById(`param-${key}`);\n                    if (!sourceInput) return;\n\n                    const newValueContainer = document.createElement('div');\n                    newValueContainer.className = 'added-li-item';\n\n                    const newInput = sourceInput.cloneNode(true); // Clone the original input/textarea\n                    // Clear ID, mark as added, remove original marker\n                    newInput.id = '';\n                    newInput.dataset.isAddedLi = \"true\";\n                    delete newInput.dataset.isOriginalLi;\n                    newInput.dataset.originalLiKey = key; // Link back to the original key\n                    // Keep the same value as the original initially\n                    newInput.value = sourceInput.value; // Duplicate the content\n\n                    // Add a remove button for the added item\n                    const removeButton = document.createElement('button');\n                    removeButton.type = 'button';\n                    removeButton.textContent = '-';\n                    removeButton.className = 'ms-Button ms-Button--icon remove-li-button';\n                    removeButton.title = 'Remove this added LI item';\n                    removeButton.onclick = () => {\n                        newValueContainer.remove();\n                    };\n\n                    newValueContainer.appendChild(newInput);\n                    newValueContainer.appendChild(removeButton);\n\n                    // Insert the new container after the clicked button\n                    // or after the last added item within this container\n                    event.target.parentNode.appendChild(newValueContainer);\n                     // Maybe scroll container? paramsModalForm.scrollTop = paramsModalForm.scrollHeight;\n                };\n\n                liContainer.appendChild(addButton); // Add button after input\n                paramEntryDiv.appendChild(liContainer); // Add container to entry div\n\n            } else {\n                 paramEntryDiv.appendChild(inputElement); // Non-LI params added directly\n            }\n\n            paramsModalForm.appendChild(paramEntryDiv);\n        });\n        // IMPORTANT: Update searchable elements after populating\n        resetModalSearchState(); // Reset search state after populating form\n    };\n\n    // --- Event Listener for the Edit Parameters Button ---\n    if (editParamsButton && codesTextarea && paramsModal) {\n        editParamsButton.onclick = () => {\n            const text = codesTextarea.value;\n            const cursorPos = codesTextarea.selectionStart;\n\n            const codeInfo = findCodeStringAroundCursor(text, cursorPos);\n\n            if (codeInfo) {\n                // Extract content within < >\n                const content = codeInfo.codeString.substring(1, codeInfo.codeString.length - 1);\n                const { type, params } = parseCodeParameters(content);\n\n                if (type) {\n                    currentCodeStringRange = { start: codeInfo.start, end: codeInfo.end };\n                    populateParamsModal(type, params);\n                    showParamsModal();\n                } else {\n                    showError(\"Could not parse the code string structure.\");\n                }\n            } else {\n                showError(\"Place cursor inside a <...> code block to edit parameters.\");\n            }\n        };\n    }\n\n    // --- Event Listeners for Modal Actions ---\n    if (closeModalButton) {\n        closeModalButton.onclick = hideParamsModal;\n    }\n    if (cancelParamsButton) {\n        cancelParamsButton.onclick = hideParamsModal;\n    }\n\n    // --- APPLY CHANGES LOGIC (MODIFIED) ---\n    if (applyParamsButton && codesTextarea) {\n        applyParamsButton.onclick = () => {\n            if (!currentCodeStringRange || !currentCodeStringType) return; // Safety check\n\n            // Use a map to reconstruct parameters, handling LI aggregation\n            const paramValues = {};\n\n            // Process all input/textarea fields in the form\n            const formElements = paramsModalForm.querySelectorAll('input[data-param-key], textarea[data-param-key]');\n\n            formElements.forEach(input => {\n                const key = input.dataset.paramKey;\n                const isOriginalLI = input.dataset.isOriginalLi === \"true\";\n                const isAddedLI = input.dataset.isAddedLi === \"true\";\n                const value = input.value;\n\n                if (isOriginalLI) {\n                    // If it's an original LI, initialize its value in the map\n                    if (!paramValues[key]) {\n                        paramValues[key] = value; // Start with the original value\n                    }\n                } else if (isAddedLI) {\n                    // This case handled below by finding related elements\n                    // We only need to store original keys first\n                } else if (key && !isAddedLI) {\n                    // Standard parameter, just store its value\n                     if (!paramValues[key]) { // Check prevents overwriting if key appears twice (shouldn't happen)\n                       paramValues[key] = value;\n                    }\n                }\n            });\n\n            // Now, aggregate added LI items\n            const addedLiElements = paramsModalForm.querySelectorAll('textarea[data-is-added-li=\"true\"]');\n            addedLiElements.forEach(addedInput => {\n                 const originalKey = addedInput.dataset.originalLiKey;\n                 if (originalKey && paramValues[originalKey]) {\n                      // Append the added value, prefixed with *\n                      paramValues[originalKey] += ` *${addedInput.value}`;\n                 }\n            });\n\n            // Build the final parameter string parts\n            const updatedParams = Object.entries(paramValues).map(([key, finalValue]) => {\n                 // Re-add quotes around the final aggregated value\n                 return `${key}=\"${finalValue}\"`;\n            });\n\n            // Reconstruct the code string\n            const newCodeStringContent = `${currentCodeStringType}; ${updatedParams.join('; ')}`;\n            const newCodeString = `<${newCodeStringContent}>`;\n\n            // Update the textarea content\n            const currentText = codesTextarea.value;\n            const textBefore = currentText.substring(0, currentCodeStringRange.start);\n            const textAfter = currentText.substring(currentCodeStringRange.end);\n\n            codesTextarea.value = textBefore + newCodeString + textAfter;\n\n            console.log(`Updated code string at [${currentCodeStringRange.start}, ${currentCodeStringRange.start + newCodeString.length})`);\n            console.log(\"New string:\", newCodeString);\n\n            // Optionally, update cursor position\n            const newCursorPos = currentCodeStringRange.start + newCodeString.length;\n            codesTextarea.focus();\n            codesTextarea.setSelectionRange(newCursorPos, newCursorPos);\n\n            hideParamsModal(); // Close modal after applying\n        };\n    }\n\n    // --- Modal Find/Replace Logic (Simplified) ---\n\n    const modalReplaceAll = () => {\n        const searchTerm = modalFindInput.value;\n        const replaceTerm = modalReplaceInput.value;\n        if (!searchTerm) {\n            updateModalSearchStatus(\"Enter search term.\");\n            return;\n        }\n\n        // Ensure searchable elements are up-to-date\n        modalSearchableElements = Array.from(paramsModalForm.querySelectorAll('input[data-param-key], textarea[data-param-key]'));\n\n        let replacementsMade = 0;\n        modalSearchableElements.forEach((element, index) => {\n            let currentValue = element.value;\n            // Escape regex special characters in search term\n            const escapedSearchTerm = searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n            let newValue = currentValue.replace(new RegExp(escapedSearchTerm, 'g'), () => {\n                replacementsMade++;\n                return replaceTerm;\n            });\n            if (currentValue !== newValue) {\n                element.value = newValue;\n                console.log(`Modal Replace All: Made replacements in element ${index}`);\n            }\n        });\n\n        if (replacementsMade > 0) {\n            updateModalSearchStatus(`Replaced ${replacementsMade} occurrence(s).`);\n            // No need to reset search state as there's no find next\n        } else {\n            updateModalSearchStatus(`\"${searchTerm}\" not found.`);\n        }\n    };\n\n    // Add event listeners for modal find/replace buttons (Simplified)\n    // Removed listeners for Find Next and Replace\n    if (modalReplaceAllButton) modalReplaceAllButton.onclick = modalReplaceAll;\n    // Removed input listener for modalFindInput\n\n    // --- Event Listeners for Modal Actions ---\n    if (closeModalButton) {\n        closeModalButton.onclick = hideParamsModal;\n    }\n\n    // ... (rest of your Office.onReady, including suggestion logic, initializations)\n\n    // Make sure initialization runs after setting up modal logic\n    Promise.all([\n        initializeAPIKeys(),\n        loadCodeDatabase()\n    ]).then(([keys]) => {\n      if (!keys) {\n        showError(\"Failed to load API keys. Please check configuration.\");\n      } else {\n        // >>> ADDED: Set the API keys in AIcalls module\n        setAPIKeys(keys);\n      }\n      conversationHistory = loadConversationHistory();\n\n      try {\n          const storedCodes = localStorage.getItem('userCodeStrings');\n          if (storedCodes !== null) {\n              loadedCodeStrings = storedCodes;\n              if (codesTextarea) {\n                  codesTextarea.value = loadedCodeStrings;\n              }\n              console.log(\"Code strings loaded from localStorage into global variable.\");\n          } else {\n              console.log(\"No code strings found in localStorage, initializing global variable as empty.\");\n              loadedCodeStrings = \"\";\n          }\n          // Also load the previous run codes if available\n           const storedPreviousCodes = localStorage.getItem('previousRunCodeStrings');\n           if (storedPreviousCodes) {\n               console.log(\"Previous run code strings loaded from localStorage.\");\n           }\n\n      } catch (error) {\n          console.error(\"Error loading code strings from localStorage:\", error);\n          showError(`Error loading codes from storage: ${error.message}`);\n          loadedCodeStrings = \"\";\n      }\n\n      // >>> MOVED: Assign event listeners AFTER initialization is complete\n      // Setup cursor position tracking\n      if (codesTextarea) {\n          const updateCursorPosition = () => {\n              lastEditorCursorPosition = codesTextarea.selectionStart;\n              // console.log(`Cursor position updated: ${lastEditorCursorPosition}`); // Optional debug log\n          };\n          codesTextarea.addEventListener('keyup', updateCursorPosition); // Update on key release\n          codesTextarea.addEventListener('mouseup', updateCursorPosition); // Update on mouse click release\n          codesTextarea.addEventListener('focus', updateCursorPosition);   // Update when focus is gained\n          // codesTextarea.addEventListener('blur', updateCursorPosition); // Maybe don't update on blur?\n          console.log(\"[Office.onReady] Added event listeners to codesTextarea for cursor tracking.\"); // <<< DEBUG LOG\n      }\n\n      // Setup Insert to Editor button\n      const insertToEditorButton = document.getElementById('insert-to-editor');\n      if (insertToEditorButton) {\n          console.log(\"[Office.onReady] Found insert-to-editor button.\"); // <<< DEBUG LOG\n          insertToEditorButton.onclick = insertResponseToEditor;\n          console.log(\"[Office.onReady] Assigned onclick for insert-to-editor button.\"); // <<< DEBUG LOG\n      } else {\n          console.error(\"[Office.onReady] Could not find button with id='insert-to-editor'\");\n      }\n      // <<< END MOVED CODE\n\n    }).catch(error => {\n        console.error(\"Error during initialization:\", error);\n        showError(\"Error during initialization: \" + error.message);\n    });\n\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"block\";\n\n    // ... (existing modal logic: applyParamsButton.onclick, window.onclick)\n\n    // --- Code Suggestion Logic (Restored) ---\n    let dynamicSuggestionsContainer = document.getElementById('dynamic-suggestions-container');\n    if (!dynamicSuggestionsContainer) {\n        dynamicSuggestionsContainer = document.createElement('div');\n        dynamicSuggestionsContainer.id = 'dynamic-suggestions-container';\n        dynamicSuggestionsContainer.className = 'code-suggestions'; // Reuse class if styling exists\n        dynamicSuggestionsContainer.style.display = 'none';\n        // Basic positioning styles (adjust in CSS for better control)\n        dynamicSuggestionsContainer.style.position = 'absolute';\n        dynamicSuggestionsContainer.style.border = '1px solid #ccc';\n        dynamicSuggestionsContainer.style.backgroundColor = 'white';\n        dynamicSuggestionsContainer.style.maxHeight = '150px';\n        dynamicSuggestionsContainer.style.overflowY = 'auto';\n        dynamicSuggestionsContainer.style.zIndex = '1000';\n\n        // Insert after the textarea's container or adjust as needed\n        if (codesTextarea && codesTextarea.parentNode) { // Check if codesTextarea exists\n            codesTextarea.parentNode.insertBefore(dynamicSuggestionsContainer, codesTextarea.nextSibling);\n        } else {\n            // Fallback: Append to body, though less ideal positioning\n            document.body.appendChild(dynamicSuggestionsContainer);\n        }\n\n        // Function to update position and width\n        const updateSuggestionPosition = () => {\n          if (dynamicSuggestionsContainer.style.display === 'block' && codesTextarea) {\n              const rect = codesTextarea.getBoundingClientRect();\n              dynamicSuggestionsContainer.style.width = codesTextarea.offsetWidth + 'px';\n              dynamicSuggestionsContainer.style.top = (rect.bottom + window.scrollY) + 'px';\n              dynamicSuggestionsContainer.style.left = (rect.left + window.scrollX) + 'px';\n          }\n        };\n\n        // Update on resize and scroll\n        window.addEventListener('resize', updateSuggestionPosition);\n        window.addEventListener('scroll', updateSuggestionPosition, true); // Use capture phase for scroll\n    }\n\n    let highlightedSuggestionIndex = -1;\n    let currentSuggestions = [];\n\n    const updateHighlight = (newIndex) => {\n      if (!dynamicSuggestionsContainer) return; // Guard against null\n      const suggestionItems = dynamicSuggestionsContainer.querySelectorAll('.code-suggestion-item');\n      if (highlightedSuggestionIndex >= 0 && highlightedSuggestionIndex < suggestionItems.length) {\n        suggestionItems[highlightedSuggestionIndex].classList.remove('suggestion-highlight');\n      }\n      if (newIndex >= 0 && newIndex < suggestionItems.length) {\n        suggestionItems[newIndex].classList.add('suggestion-highlight');\n        suggestionItems[newIndex].scrollIntoView({ block: 'nearest' });\n      }\n      highlightedSuggestionIndex = newIndex;\n    };\n\n    const showSuggestionsForTerm = (searchTerm) => {\n        if (!dynamicSuggestionsContainer || !codesTextarea) return; // Guard against null\n\n        searchTerm = searchTerm.toLowerCase().trim();\n        console.log(`[showSuggestionsForTerm] Search Term: '${searchTerm}'`);\n\n        dynamicSuggestionsContainer.innerHTML = '';\n        highlightedSuggestionIndex = -1;\n        currentSuggestions = [];\n\n        if (searchTerm.length < 2) {\n            console.log(\"[showSuggestionsForTerm] Search term too short, hiding suggestions.\");\n            dynamicSuggestionsContainer.style.display = 'none';\n            return;\n        }\n\n        console.log(\"[showSuggestionsForTerm] Filtering code database...\");\n        const suggestions = codeDatabase\n            .filter(item => {\n                const hasName = item && typeof item.name === 'string';\n                return hasName && item.name.toLowerCase().includes(searchTerm);\n            })\n            .slice(0, 10);\n\n        currentSuggestions = suggestions;\n        console.log(`[showSuggestionsForTerm] Found ${currentSuggestions.length} suggestions:`, currentSuggestions);\n\n        if (currentSuggestions.length > 0) {\n            console.log(\"[showSuggestionsForTerm] Populating suggestions container...\");\n            currentSuggestions.forEach((item, i) => {\n                const suggestionDiv = document.createElement('div');\n                suggestionDiv.className = 'code-suggestion-item';\n                suggestionDiv.textContent = item.name;\n                suggestionDiv.dataset.index = i;\n\n                suggestionDiv.onclick = () => {\n                    console.log(`Suggestion clicked: '${item.name}'`);\n                    const currentText = codesTextarea.value;\n                    const cursorPosition = codesTextarea.selectionStart;\n                    let codeToAdd = item.code;\n\n                    let insertionPosition = cursorPosition;\n                    let wasAdjusted = false;\n                    const textBeforeCursor = currentText.substring(0, cursorPosition);\n                    const lastOpenBracket = textBeforeCursor.lastIndexOf('<');\n                    const lastCloseBracket = textBeforeCursor.lastIndexOf('>');\n\n                    if (lastOpenBracket > lastCloseBracket) {\n                        const textAfterCursor = currentText.substring(cursorPosition);\n                        const nextCloseBracket = textAfterCursor.indexOf('>');\n                        if (nextCloseBracket !== -1) {\n                            insertionPosition = cursorPosition + nextCloseBracket + 1;\n                            wasAdjusted = true;\n                            console.log(`Cursor inside <>, adjusting insertion point to after > at ${insertionPosition}`);\n                        }\n                    }\n\n                    const maxNumbers = getMaxDriverNumbers(currentText);\n                    // Corrected regex - double escapes not needed in string literal here\n                    const driverRegex = /(row\\d+\\s*=\\s*\")([A-Z]+)(\\d*)(\\|)/g;\n                    const nextNumbers = { ...maxNumbers };\n\n                    codeToAdd = codeToAdd.replace(driverRegex, (match, rowPart, prefix, existingNumberStr, pipePart) => {\n                        nextNumbers[prefix] = (nextNumbers[prefix] || 0) + 1;\n                        const newNumber = nextNumbers[prefix];\n                        const replacement = `${rowPart}${prefix}${newNumber}${pipePart}`;\n                        console.log(`Replacing driver: '${prefix}${existingNumberStr || ''}|' with '${prefix}${newNumber}|'`);\n                        return replacement;\n                    });\n\n                    console.log(\"Modified code to add:\", codeToAdd);\n\n                    const textAfterInsertion = currentText.substring(insertionPosition);\n                    let textBeforeFinal = \"\";\n                    let searchStartIndex = insertionPosition;\n\n                    if (!wasAdjusted) {\n                        const textBeforeInsertion = currentText.substring(0, insertionPosition);\n                        let tempSearchStart = cursorPosition - 1;\n                        while (tempSearchStart >= 0) {\n                            const char = textBeforeCursor[tempSearchStart];\n                             // CORRECTED REGEX IN ONCLICK:\n                            if (/\\s|\\n|>|<|;|\\|/.test(char)) {\n                                tempSearchStart++;\n                                break;\n                            }\n                            tempSearchStart--;\n                        }\n                        if (tempSearchStart < 0) tempSearchStart = 0;\n\n                        searchStartIndex = tempSearchStart;\n                        const searchTermToRemove = textBeforeCursor.substring(searchStartIndex, cursorPosition);\n                        console.log(`Attempting to replace term: '${searchTermToRemove}' starting at index ${searchStartIndex}`);\n                        textBeforeFinal = currentText.substring(0, searchStartIndex);\n                    } else {\n                         textBeforeFinal = currentText.substring(0, insertionPosition);\n                         searchStartIndex = insertionPosition;\n                    }\n\n                    const firstNewlineIndexInSuffix = textAfterInsertion.indexOf('\\n');\n                    let remainderOfOriginalLine = \"\";\n                    let subsequentLines = \"\";\n\n                    if (firstNewlineIndexInSuffix === -1) {\n                        remainderOfOriginalLine = textAfterInsertion;\n                    } else {\n                        remainderOfOriginalLine = textAfterInsertion.substring(0, firstNewlineIndexInSuffix);\n                        subsequentLines = textAfterInsertion.substring(firstNewlineIndexInSuffix);\n                    }\n\n                    const newText = textBeforeFinal +\n                                    codeToAdd +\n                                    (remainderOfOriginalLine.length > 0 ? '\\n' : '') +\n                                    remainderOfOriginalLine +\n                                    subsequentLines;\n\n                    codesTextarea.value = newText;\n\n                    const newCursorPosition = (textBeforeFinal + codeToAdd).length;\n                    codesTextarea.focus();\n                    codesTextarea.setSelectionRange(newCursorPos, newCursorPos);\n\n                    dynamicSuggestionsContainer.innerHTML = '';\n                    dynamicSuggestionsContainer.style.display = 'none';\n                    highlightedSuggestionIndex = -1;\n                    currentSuggestions = [];\n                };\n\n                suggestionDiv.onmouseover = () => {\n                    updateHighlight(i);\n                };\n\n                dynamicSuggestionsContainer.appendChild(suggestionDiv);\n            });\n            console.log(\"[showSuggestionsForTerm] Setting suggestions display to 'block'\");\n\n            const rect = codesTextarea.getBoundingClientRect();\n            dynamicSuggestionsContainer.style.width = codesTextarea.offsetWidth + 'px';\n            dynamicSuggestionsContainer.style.top = (rect.bottom + window.scrollY) + 'px';\n            dynamicSuggestionsContainer.style.left = (rect.left + window.scrollX) + 'px';\n            dynamicSuggestionsContainer.style.display = 'block';\n        } else {\n            console.log(\"[showSuggestionsForTerm] No suggestions found, hiding container.\");\n            dynamicSuggestionsContainer.style.display = 'none';\n        }\n    };\n\n    if (codesTextarea && dynamicSuggestionsContainer) {\n        codesTextarea.oninput = (event) => {\n             if (!event.isTrusted || !dynamicSuggestionsContainer) {\n                 return;\n             }\n            const cursorPosition = codesTextarea.selectionStart;\n            const currentText = codesTextarea.value;\n\n            const textBeforeCursor = currentText.substring(0, cursorPosition);\n            const lastOpenBracket = textBeforeCursor.lastIndexOf('<');\n            const lastCloseBracket = textBeforeCursor.lastIndexOf('>');\n            let isInsideBrackets = false;\n            if (lastOpenBracket > lastCloseBracket) {\n                const textAfterCursor = currentText.substring(cursorPosition);\n                const nextCloseBracket = textAfterCursor.indexOf('>');\n                if (nextCloseBracket !== -1 ) {\n                    isInsideBrackets = true;\n                }\n            }\n\n            if (isInsideBrackets) {\n                console.log(\"[Textarea Input] Cursor inside <>, hiding suggestions.\");\n                dynamicSuggestionsContainer.style.display = 'none';\n                highlightedSuggestionIndex = -1;\n                currentSuggestions = [];\n            } else {\n                let searchStart = cursorPosition - 1;\n                while (searchStart >= 0) {\n                    const char = textBeforeCursor[searchStart];\n                    // CORRECTED REGEX: No double escapes needed\n                    if (/\\s|\\n|>|<|;|\\|/.test(char)) {\n                        searchStart++;\n                        break;\n                    }\n                    searchStart--;\n                }\n                if (searchStart < 0) searchStart = 0;\n\n                console.log(`[Textarea Input Debug] cursorPosition: ${cursorPosition}, calculated searchStart: ${searchStart}, char at searchStart: '${searchStart < currentText.length ? textBeforeCursor[searchStart] : 'EOF'}'`);\n\n                const searchTerm = textBeforeCursor.substring(searchStart, cursorPosition);\n                const trimmedSearchTerm = searchTerm.trim();\n\n                if (trimmedSearchTerm.length === 0 || !/^[a-zA-Z]/.test(trimmedSearchTerm)) {\n                     if (trimmedSearchTerm.length === 0) {\n                         console.log(`[Textarea Input] Hiding suggestions (empty term detected immediately after delimiter)`);\n                     } else {\n                         console.log(`[Textarea Input] Hiding suggestions (term does not start with letter: '${searchTerm}')`);\n                     }\n                    dynamicSuggestionsContainer.style.display = 'none';\n                    highlightedSuggestionIndex = -1;\n                    currentSuggestions = [];\n                } else {\n                    console.log(`[Textarea Input] Cursor outside <>, potential search term: '${searchTerm}'`);\n                    showSuggestionsForTerm(searchTerm);\n                }\n            }\n        };\n\n        codesTextarea.onkeydown = (event) => {\n            if (!dynamicSuggestionsContainer || dynamicSuggestionsContainer.style.display !== 'block' || currentSuggestions.length === 0) {\n                return;\n            }\n\n            const suggestionItems = dynamicSuggestionsContainer.querySelectorAll('.code-suggestion-item');\n            let newIndex = highlightedSuggestionIndex;\n\n            switch (event.key) {\n                case 'ArrowDown':\n                case 'ArrowUp':\n                    event.preventDefault();\n                    newIndex = event.key === 'ArrowDown'\n                        ? (highlightedSuggestionIndex + 1) % currentSuggestions.length\n                        : (highlightedSuggestionIndex - 1 + currentSuggestions.length) % currentSuggestions.length;\n                    updateHighlight(newIndex);\n                    break;\n\n                case 'Enter':\n                 case 'Tab':\n                    event.preventDefault();\n                    if (highlightedSuggestionIndex >= 0 && highlightedSuggestionIndex < suggestionItems.length) {\n                        suggestionItems[highlightedSuggestionIndex].click();\n                    } else if (currentSuggestions.length > 0 && suggestionItems.length > 0) {\n                         suggestionItems[0].click(); // Select first if none highlighted\n                    }\n                    // Suggestion click handles hiding\n                    break;\n\n                case 'Escape':\n                    event.preventDefault();\n                    dynamicSuggestionsContainer.style.display = 'none';\n                    highlightedSuggestionIndex = -1;\n                    currentSuggestions = [];\n                    break;\n\n                default:\n                    if (!event.ctrlKey && !event.altKey && !event.metaKey && event.key.length === 1) {\n                       updateHighlight(-1);\n                    }\n                    break;\n            }\n        };\n\n         codesTextarea.addEventListener('blur', () => {\n             if (!dynamicSuggestionsContainer) return;\n             setTimeout(() => {\n                 if (!dynamicSuggestionsContainer.contains(document.activeElement)) {\n                      dynamicSuggestionsContainer.style.display = 'none';\n                      highlightedSuggestionIndex = -1;\n                 }\n             }, 150);\n         });\n    }\n    // --- End of Code Suggestion Logic ---\n\n\n    // ... (rest of your Office.onReady, e.g., Promise.all)\n\n    // Make sure initialization runs after setting up modal logic\n  }\n});\n\n// >>> ADDED: Function definition moved here\nasync function insertResponseToEditor() {\n    console.log(\"[insertResponseToEditor] Function called.\");\n    if (!lastResponse) {\n        console.log(\"[insertResponseToEditor] Exiting: lastResponse is null or empty.\");\n        showError('No response to insert');\n        return;\n    }\n\n    console.log(\"[insertResponseToEditor] lastResponse:\", lastResponse);\n\n    const codesTextarea = document.getElementById('codes-textarea');\n    if (!codesTextarea) {\n        console.error(\"[insertResponseToEditor] Exiting: Could not find codes-textarea.\");\n        showError('Could not find the code editor textarea');\n        return;\n    }\n\n    console.log(\"[insertResponseToEditor] Found codesTextarea.\");\n\n    try {\n        // Check for valid cursor position FIRST\n        if (lastEditorCursorPosition === null) {\n             console.log(\"[insertResponseToEditor] Exiting: lastEditorCursorPosition is null.\");\n             showError(\"Please click in the code editor first to set the insertion point.\");\n             return;\n        }\n\n        let responseText = \"\";\n        // >>> MODIFIED: Extract <...> strings and ensure each is on a new line\n        let codeStringsToInsert = [];\n        if (Array.isArray(lastResponse)) {\n            // Filter out empty strings just in case\n            codeStringsToInsert = lastResponse.filter(item => typeof item === 'string' && item.trim().length > 0);\n        } else if (typeof lastResponse === 'string') {\n            const matches = lastResponse.match(/<[^>]+>/g); // Find all <...> patterns\n            if (matches) {\n                codeStringsToInsert = matches;\n            } else if (lastResponse.trim().length > 0) {\n                 // Fallback: If it's a string but no <...> found, maybe insert the whole string?\n                 // For now, let's only insert if <...> are found based on the requirement.\n                 console.log(\"[insertResponseToEditor] lastResponse is a string but no <...> tags found.\");\n            }\n        } else {\n            // Log if the format is unexpected\n             console.warn(\"[insertResponseToEditor] lastResponse is not an array or string:\", lastResponse);\n        }\n\n        if (codeStringsToInsert.length === 0) {\n            showMessage(\"No code strings found in the response to insert.\");\n            console.log(\"[insertResponseToEditor] No <...> strings extracted from lastResponse.\");\n            return;\n        }\n\n        // Join the extracted strings, each on its own line\n        responseText = codeStringsToInsert.join('\\n');\n        // <<< END MODIFIED BLOCK\n\n        if (!responseText) {\n            showMessage(\"Response is empty, nothing to insert.\");\n            return;\n        }\n\n        const currentText = codesTextarea.value;\n        // Define insertionPoint using the validated cursor position\n        const insertionPoint = lastEditorCursorPosition;\n\n        // >>> ADDED: Check for <TAB; prefix if missing\n        const tabPrefix = '<TAB; ';\n        const defaultTabString = '<TAB; label1=\"Calcs\";>';\n        let addDefaultTab = false;\n        if (!currentText.includes(tabPrefix) && !responseText.includes(tabPrefix)) {\n            addDefaultTab = true;\n            console.log(\"[insertResponseToEditor] Neither editor nor response contains '<TAB; '. Prepending default tab.\");\n        }\n        // <<< END ADDED CHECK\n\n        // Validate insertionPoint is within bounds (safety check)\n        if (insertionPoint < 0 || insertionPoint > currentText.length) {\n             console.error(`[insertResponseToEditor] Invalid insertionPoint: ${insertionPoint}, currentText length: ${currentText.length}`);\n             showError(\"Invalid cursor position detected. Please click in the editor again.\");\n             lastEditorCursorPosition = null; // Reset invalid position\n             return;\n        }\n\n        const textBefore = currentText.substring(0, insertionPoint);\n        const textAfter = currentText.substring(insertionPoint);\n\n        // Insert the response, adding a newline before if inserting mid-text and not at the start or after a newline\n        let textToInsert = (addDefaultTab ? defaultTabString + '\\n' : '') + responseText; // Prepend default tab if needed\n        if (insertionPoint > 0 && textBefore.charAt(textBefore.length - 1) !== '\\n') {\n             textToInsert = '\\n' + textToInsert; // Add leading newline to the combined string (tab + response)\n        }\n        // Add a newline after if not inserting at the very end or before an existing newline\n        if (insertionPoint < currentText.length && textAfter.charAt(0) !== '\\n') {\n             textToInsert += '\\n';\n        } else if (insertionPoint === currentText.length && currentText.length > 0 && textBefore.charAt(textBefore.length - 1) !== '\\n') {\n             // Special case: inserting exactly at the end, ensure newline separation from previous content\n             textToInsert = '\\n' + textToInsert;\n        }\n\n\n        codesTextarea.value = textBefore + textToInsert + textAfter;\n\n        // Update the last cursor position to be after the inserted text\n        const newCursorPos = insertionPoint + textToInsert.length;\n        codesTextarea.focus();\n        codesTextarea.setSelectionRange(newCursorPos, newCursorPos);\n        lastEditorCursorPosition = newCursorPos; // Update tracked position\n\n        showMessage(\"Response inserted into editor.\");\n        console.log(`Response inserted at position: ${insertionPoint}`);\n\n    } catch (error) {\n        console.error(\"Error inserting response to editor:\", error);\n        showError(`Failed to insert response: ${error.message}`);\n    }\n}\n\n\n\n\n\n\n\n\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"./taskpane.js\", import.meta.url);\n// Module\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Projectify Task Pane</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <\" + \"script src=\\\"https://cdn.sheetjs.com/xlsx-0.20.1/package/dist/xlsx.full.min.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-Fabric\\\" dir=\\\"ltr\\\"> <div id=\\\"sideload-msg\\\" class=\\\"ms-Rule ms-font-xl\\\"> <p>Please <a target=\\\"_blank\\\" href=\\\"https://learn.microsoft.com/office/dev/add-ins/testing/sideload-office-add-ins-for-testing\\\">sideload</a> your add-in to see app body.</p> </div> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none\\\"> <div class=\\\"container\\\"> <div id=\\\"chat-log\\\" class=\\\"chat-log\\\"> <div id=\\\"welcome-message\\\" class=\\\"welcome-message\\\"> <h1>What would you like to model?</h1> </div> </div> <div class=\\\"input-area\\\"> <input type=\\\"text\\\" id=\\\"user-input\\\" placeholder=\\\"Enter your request here...\\\"> <button id=\\\"send\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Send</span> </button> <div id=\\\"loading-animation\\\" class=\\\"loading-animation\\\"></div> <button id=\\\"write-to-excel\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Write Response to Excel</span> </button> <button id=\\\"insert-to-editor\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Insert to Editor</span> </button> <button id=\\\"reset-chat\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Reset Chat</span> </button> </div> <div class=\\\"code-area\\\"> <h2>Codes</h2> <textarea id=\\\"codes-textarea\\\" rows=\\\"15\\\" placeholder=\\\"Code strings will appear here after generation or can be pasted...\\\"></textarea> <div id=\\\"dynamic-suggestions-container\\\" class=\\\"code-suggestions\\\"></div> <div class=\\\"code-area-buttons\\\"> <button id=\\\"edit-code-params-button\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Edit Params</span> </button> <button id=\\\"insert-and-run\\\" class=\\\"ms-Button ms-Button--primary\\\"> <span class=\\\"ms-Button-label\\\">Run Codes</span> </button> <button id=\\\"generate-tab-string-button\\\" class=\\\"ms-Button\\\"> <span class=\\\"ms-Button-label\\\">Generate Tab Index</span> </button> </div> </div> <div id=\\\"code-params-modal\\\" class=\\\"modal\\\"> <div class=\\\"modal-content\\\"> <span class=\\\"close-button\\\">&times;</span> <h2>Edit Code Parameters</h2> <div class=\\\"modal-find-replace\\\"> <input type=\\\"text\\\" id=\\\"modal-find-input\\\" placeholder=\\\"Find in Params\\\"> <input type=\\\"text\\\" id=\\\"modal-replace-input\\\" placeholder=\\\"Replace With\\\"> <button id=\\\"modal-replace-all-button\\\" class=\\\"ms-Button\\\">Replace All</button> <span id=\\\"modal-search-status\\\"></span> </div> <form id=\\\"code-params-modal-form\\\"> </form> <div class=\\\"modal-actions\\\"> <button id=\\\"apply-code-params-button\\\" class=\\\"ms-Button ms-Button--primary\\\">Apply</button> <button id=\\\"cancel-code-params-button\\\" class=\\\"ms-Button\\\">Cancel</button> </div> </div> </div> </div> </main> <\" + \"script src=\\\"\" + ___HTML_LOADER_IMPORT_1___ + \"\\\"><\" + \"/script> </body> </html>\";\n// Exports\nexport default code;"],"names":["Object","defineProperty","exports","value","handleApiError","utils_1","http_1","request_1","async","e","customMessage","url","Error","name","responseError","rawMessage","extractMessage","statusCode","response","status","message","mapHttpStatusError","PineconeConnectionError","err","ChatStream","convertKeys_1","constructor","stream","this","Symbol","asyncIterator","buffer","chunk","newlineIndex","toString","indexOf","line","slice","trim","startsWith","json","parsedJson","JSON","parse","convertedJson","convertKeysToCamelCase","console","debug","PineconeUnmappedHttpError","PineconeNotImplementedError","PineconeUnavailableError","PineconeMaxRetriesExceededError","PineconeInternalServerError","PineconeConflictError","PineconeNotFoundError","PineconeAuthorizationError","PineconeBadRequestError","base_1","CONFIG_HELP","BasePineconeError","failedRequest","super","body","join","retries","requestInfo","failedRequestInfo","getFetch","errors_1","config","fetchApi","g","fetch","PineconeConfigurationError","RetryOnServerFailure","asyncFn","maxRetries","calculateRetryDelay","attempt","baseDelay","maxDelay","jitterFactor","delay","Math","random","min","max","execute","args","isRetryError","error","mappedError","mapErrorIfNeeded","shouldStopRetrying","includes","delayTime","Promise","resolve","setTimeout","cachedSetTimeout","cachedClearTimeout","process","module","defaultSetTimout","defaultClearTimeout","runTimeout","fun","call","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","Array","arguments","i","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","PineconeUnableToResolveHostError","PineconeEnvironmentVarsNotSupportedError","PineconeUnexpectedResponseError","normalizeUrl","PineconeRequestError","urlMessage","context","init","method","cause","setPrototypeOf","captureStackTrace","debugLog","str","PINECONE_DEBUG","log","isBrowser","isEdge","EdgeRuntime","window","__createBinding","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","__exportStar","p","hasOwnProperty","PineconeArgumentError","config_1","validation_1","handling_1","object","isArray","map","item","entries","reduce","acc","key","toCamelCase","replace","_","letter","toUpperCase","text","messageJSON","__setModuleDefault","v","__importStar","mod","result","buildUserAgent","environment_1","packageInfo","userAgentParts","sourceTag","normalizeSourceTag","toLowerCase","queryParamsStringify","params","prefix","keys","querystringSingleKey","filter","part","keyPrefix","fullKey","multiValue","singleValue","encodeURIComponent","String","Set","from","Date","toISOString","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis","Function","obj","prop","scriptUrl","importScripts","location","document","currentScript","tagName","src","scripts","getElementsByTagName","test","b","baseURI","self","href","_regeneratorRuntime","t","r","n","a","iterator","c","u","toStringTag","define","wrap","Generator","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","__await","then","callInvokeWithMethodAndArg","done","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","__proto__","awrap","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","catch","delegateYield","_toConsumableArray","_arrayLikeToArray","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","_createForOfIteratorHelper","_n","F","asyncGeneratorStep","_asyncToGenerator","_next","_throw","validateCodeStrings","_x","_validateCodeStrings","_callee","inputCodeStrings","errors","tabLabels","rowValues","codeTypes","vvCodes","vrCodes","rrCodes","rvCodes","evCodes","erCodes","validCodes","fileContent","_iterator","_step","codeString","rowMatches","codeMatch","codeType","_i","_arr","code","_i2","_arr2","_code","_iterator2","_step2","_codeString","_codeMatch","_codeType","labelMatch","label","_rowMatches","_iterator3","_step3","_codeString2","driverMatches","_context","match","ok","split","t0","endsWith","parts","trimmedPart","afterAsterisk","substring","add","t1","size","has","rowContent","t2","driverValue","validateCodeStringsForRun","_x3","_validateCodeStringsForRun","_callee3","_iterator4","_step4","_i3","_arr3","_i4","_arr4","_code2","_iterator5","_step5","_codeString3","_codeMatch2","_codeType2","_rowMatches2","_iterator6","_step6","_codeString4","_context3","ownKeys","getOwnPropertySymbols","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","toPrimitive","_toPrimitive","_toPropertyKey","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","populateCodeCollection","inputText","codeCollection","paramsString","matchAll","rowNum","rowValue","paramName","paramValue","runCodes","_runCodes","_callee4","currentWorksheetName","assumptionTabs","_loop","finalResult","_context5","processedCodes","createdTabs","tabName","_context4","label1","Label1","Excel","_ref3","sheets","existingSheet","financialsSheet","newSheet","sourceSheetName","sourceCalcsWS","usedRange","lastColIndex","lastColLetter","linkRangeAddress","linkRange","cellValue","colLetter","cellAddress","formula","headerFormatRangeAddress","workbook","worksheets","load","sync","items","find","sheet","getItem","position","copy","warn","getRange","clear","ClearApplyTo","all","getUsedRange","columnCount","columnIndexToLetter","formulas","format","font","color","tabColor","worksheet","_x26","codeIndex","_ref4","codesWS","currentWS","lastUsedRow","pasteRow","firstRow","lastRow","columnD","row","currentWorksheet","rowCount","getLastRow","rowIndex","_ref5","_callee2","sourceRange","_context2","copyFrom","RangeCopyType","_x28","driverAndAssumptionInputs","_x27","tab","_x2","_x4","_driverAndAssumptionInputs","_callee10","calcsPasteRow","worksheetName","_context11","_ref7","_callee7","_context8","_x30","_ref8","_callee8","lastRowRange","_context9","_x31","_ref9","_callee9","determinedLastRow","columnSequence","codeValue","searchRow","searchRange","searchRangeAddress","checkRow","isGreen","cellB","targetRow","driverParam","labelParam","currentCheckRowForInserts","rowParam","rowItems","numNewRows","baseRowForThisG","sourceRowRange","originalFormulas","newFormulas","formulaRegex","modifiedFormula","insertStartAddress","sourceRowNum","targetRowNum","_sourceRowRange","targetRowRange","yy","currentRowNum","splitArray","x","valueToWrite","cellToWrite","numValue","_context10","fill","financialsdriver","col","insert","InsertShiftDirection","down","formats","Number","_x32","getLastUsedRow","_x5","_x6","_getLastUsedRow","_callee11","columnLetter","fullColumn","lastCell","lastRowIndex","_context12","getLastCell","adjustDriversJS","_x7","_x8","_adjustDriversJS","_callee12","START_ROW","DRIVER_CODE_COL","LOOKUP_COL","TARGET_COL","driverCodeRangeAddress","lookupRangeAddress","driverCodeRange","lookupRange","driverCodeValues","lookupValues","lookupMap","outputValues","foundCount","notFoundCount","driverCode","currentRow","foundRow","targetAddress","targetRangeAddress","targetRange","_context13","Map","set","replaceIndirectsJS","_x9","_x10","_replaceIndirectsJS","_callee13","referencesToLookup","formulaData","searchStartIndex","upperFormula","indirectStartIndex","parenStartIndex","parenEndIndex","argString","_step6$value","refString","data","_iterator7","_step7","_step7$value","_refString","_data","cellText","_i5","_formulaData","currentFormula","loopCount","MAX_LOOPS","_upperFormula","_indirectStartIndex","_parenStartIndex","_parenEndIndex","indString","_argString","directRef","_context14","originalFormula","index","range","rangeError","debugInfo","valueError","populateFinancialsJS","_x11","_x12","_x13","_populateFinancialsJS","_callee14","CALCS_FIRST_ROW","ASSUMPTION_CODE_COL","ASSUMPTION_LINK_COL_B","ASSUMPTION_LINK_COL_D","ASSUMPTION_MONTHS_START_COL","FINANCIALS_CODE_COLUMN","FINANCIALS_TARGET_COL_B","FINANCIALS_TARGET_COL_D","FINANCIALS_ANNUALS_START_COL","FINANCIALS_MONTHS_START_COL","ANNUALS_END_COL","MONTHS_END_COL","GREEN_COLOR","CURRENCY_FORMAT","_assumptionCodes$leng","assumptionCodeRange","financialsSearchCol","financialsUsedRange","financialsLastRow","fallbackRange","lastRowB","financialsCodeMap","financialsCodeRange","_i6","tasks","assumptionCodes","_i7","_assumptionCodes$leng2","assumptionRow","linkFormulaB","linkFormulaD","linkFormulaMonths","_i8","_tasks","task","originalTargetRowsAsc","taskAdjustedRows","totalShift","_i9","_tasks2","_task","populateRow","cellD","cellAnnualsStart","cellMonthsStart","codePrefix","formulaJ","actualsRange","numCols","formulasArray","_i10","_tasks3","_task2","_populateRow","sourceAnnuals","destAnnuals","sourceMonths","destMonths","codeColRange","currentCodeValues","modifiedCodeValues","modifiedCount","_i11","originalValue","_context15","addressB","addressD","addressMonths","sort","uniqueRow","tasksAtThisRow","currentAdjustedRowForGroup","bold","italic","indentLevel","formulasR1C1","numberFormat","columnLetterToIndex","sumifsError","autoFill","AutoFillType","fillDefault","autofillError","t3","t4","processAssumptionTabs","_x15","_processAssumptionTabs","_callee18","assumptionTabNames","FINANCIALS_SHEET_NAME","AUTOFILL_START_COLUMN","_iterator8","_step8","_loop2","_context20","_context19","_ref11","_callee17","updatedLastRow","finalLastRow","fillRange","_context18","setColumnAFontWhite","applyIndexGrowthCurveJS","deleteGreenRows","_x34","_ref10","_callee16","finSheet","_context17","_x33","_x16","_x17","_x18","_deleteGreenRows","_callee19","startRow","rowsToDelete","cell","_iterator9","_step9","_rowNum","newLastRow","_context21","delete","DeleteShiftDirection","up","_x19","_x20","_x21","_setColumnAFontWhite","_callee20","_context22","fromCharCode","charCodeAt","floor","hideColumnsAndNavigate","_x22","_hideColumnsAndNavigate","_callee22","ACTUALS_START_COL","ACTUALS_END_COL","targetSheetNames","_context24","_ref12","_callee21","hideAttempted","actualsEndIndex","actualsEndMinusOneCol","_iterator10","_step10","sheetName","_iterator11","_step11","_sheetName","_worksheet","_iterator12","_step12","_sheetName2","_worksheet2","_context23","rowHidden","columnHidden","stringify","activate","select","t5","_x35","handleInsertWorksheetsFromBase64","_x23","_handleInsertWorksheetsFromBase","_callee26","base64String","sheetNames","_args28","_context28","_ref14","_callee25","_context27","insertWorksheetsFromBase64","_x37","_x24","_x25","_applyIndexGrowthCurveJS","_callee27","initialLastRow","BEGIN_MARKER","END_MARKER","DATA_COL","OUTPUT_COL_B","OUTPUT_COL_C","OUTPUT_COL_D","CHECK_COL_B","VALUE_COL_A","DRIVER_REF_COL","SUMIF_START_COL","SUMIF_END_COL","SUMPRODUCT_COL","MONTHS_START_COL","LIGHT_BLUE_COLOR","LIGHT_GREEN_COLOR","indexEndRow","indexRows","dataColRangeAddress","formatCheckStartRow","formatCheckEndRow","checkColorRange","_i12","_currentRow","newRowStart","newRowEnd","sourceBlockRange","outputDataBC","outputDataD","sourceValues","_i13","_indexRows","originalRow","rowIndexInBlock","valB","valC","sourceColCRange","sourceColARange","sourceValuesC","sourceValuesA","numSumifCols","sumifFormulas","_i14","_originalRow","_rowIndexInBlock","codeC","valueA","baseFormula","driverCell","driverRangeString","_i15","_originalRow2","dataRangeString","sumproductFormula","_i16","sourceRow","_targetRow","_i17","_indexRows2","_originalRow3","_context29","borders","border","style","contents","buildRowArrayString","valuesRow","formulasRow","formulaCols","_cols","colIndex","valueString","processCodeBlock","startDataRowIndex","endDataRowIndex","codeName","rangeStartRowExcel","blockString","rowArrayString","generateTabString","_generateTabString","_ref","finalResultString","sheetCodeBlocks","lastUsedRowInB","bottomCellInB","lastUsedCellInB","dynamicRangeAddress","loadedRowCount","hasDataInD","manualRowCount","_r","currentBlockStartDataRow","currentBlockCodeName","_r2","dValue","tabLine","getRangeEdge","KeyboardDirection","OfficeExtension","INTERNAL_API_KEYS","performance","now","OPENAI_API_KEY","PINECONE_API_KEY","srcPaths","PINECONE_INDEXES","codes","apiEndpoint","call2trainingdata","call2context","call1context","GPT41","saveConversationHistory","history","localStorage","setItem","callOpenAI","_callOpenAI","messages","model","temperature","errorData","_args3","headers","statusText","choices","content","createEmbedding","_createEmbedding","input","embedding","loadPromptFromFile","_loadPromptFromFile","_callee5","promptKey","paths","path","getSystemPromptFromFile","_getSystemPromptFromFile","_callee6","prompt","_context6","processPrompt","_processPrompt","userInput","systemPrompt","_ref$history","responseContent","parsed","_context7","role","structureDatabasequeries","_structureDatabasequeries","clientprompt","systemStructurePrompt","queryStrings","results","queryString","queryResults","queryVectorDB","queryPrompt","similarityThreshold","indexName","numResults","query","trainingData","call2Context","call1Context","codeOptions","t6","t7","_queryVectorDB","_ref2","_ref2$indexName","_ref2$numResults","_ref2$similarityThres","indexConfig","errorText","matches","cleanMatches","vector","topK","includeMetadata","namespace","score","extractTextFromJson","jsonInput","_jsonData$metadata","jsonData","metadata","_item$metadata","safeJsonForPrompt","readable","_item$metadata2","toFixed","handleFollowUpConversation","_handleFollowUpConversation","currentHistory","mainPromptText","trainingdataCall2","followUpPrompt","responseArray","updatedHistory","savePromptAnalysis","saveTrainingData","handleInitialConversation","_handleInitialConversation","initialCallPrompt","outputArray","initialHistory","handleConversation","_handleConversation","mainPrompt","validationSystemPrompt","validationMainPrompt","validationResults","analysisData","clientRequest","cleanText","validationCorrection","_x14","_validationCorrection","initialResponse","promptAnalysisData","responseString","validationResultsString","correctionPrompt","correctedResponseArray","correctionOutputPath","correctedResponseString","loadedCodeStrings","codeDatabase","lastEditorCursorPosition","loadCodeDatabase","_loadCodeDatabase","lines","showError","initializeAPIKeys","_initializeAPIKeys","configResponse","configText","openaiKeyMatch","pineconeKeyMatch","keysFound","configApiKeys","conversationHistory","showMessage","messageDiv","createElement","padding","margin","borderRadius","textContent","appBody","getElementById","insertBefore","firstChild","remove","errorDiv","setButtonLoading","isLoading","sendButton","loadingAnimation","disabled","newDisplay","display","lastResponse","isResponse","writeToExcel","_writeToExcel","startCol","codeStrings","fullText","getSelectedRange","columnIndex","getRangeByIndexes","appendMessage","isUser","chatLog","welcomeMessage","className","messageContent","appendChild","scrollTop","scrollHeight","handleSend","_handleSend","dbResults","plainTextResults","enhancedPrompt","conversationResult","resetChat","innerHTML","id","welcomeTitle","getTabBlocks","tabBlocks","tabRegex","indices","exec","tag","start","end","blockText","insertSheetsAndRunCodes","_insertSheetsAndRunCodes","codesTextarea","codesToRun","previousCodes","allCodeContentToProcess","runResult","_runResult","financialsSheetExists","validationErrors","errorMsg","worksheetsResponse","worksheetsArrayBuffer","worksheetsUint8Array","worksheetsBinaryString","worksheetsBase64String","currentTabs","previousTabs","previousTabMap","hasAnyChanges","codeRegex","currentTab","currentTag","currentText","previousText","newTabCodes","currentCodes","previousCodesSet","tabHasChanges","codesToAddForThisTab","currentCode","_validationErrors","_errorMsg","codesResponse","codesArrayBuffer","codesUint8Array","codesBinaryString","_chunk","codesBase64String","collection","ErrorCodes","itemNotFound","application","calculationMode","CalculationMode","manual","arrayBuffer","Uint8Array","btoa","block","automatic","insertResponseToEditor","_insertResponseToEditor","responseText","codeStringsToInsert","insertionPoint","tabPrefix","defaultTabString","addDefaultTab","textBefore","textAfter","textToInsert","_newCursorPos","newCursorPos","focus","setSelectionRange","Office","onReady","info","host","HostType","button","onclick","writeButton","resetButton","generateTabStringButton","editParamsButton","paramsModal","paramsModalForm","closeModalButton","querySelector","applyParamsButton","cancelParamsButton","modalFindInput","modalReplaceInput","modalReplaceAllButton","modalSearchStatus","currentCodeStringRange","currentCodeStringType","modalSearchableElements","resetModalSearchState","querySelectorAll","updateModalSearchStatus","hideParamsModal","codeInfo","cursorPos","textBeforeCursor","textAfterCursor","lastOpenBracket","lastIndexOf","firstCloseBracketAfter","findCodeStringAroundCursor","selectionStart","_parseCodeParameters","paramRegex","lastIndex","parseCodeParameters","paramEntryDiv","inputElement","htmlFor","isLongValue","isLIParam","rows","dataset","paramKey","isOriginalLi","liContainer","originalLiKey","addButton","targetLiKey","event","sourceInput","newValueContainer","newInput","cloneNode","isAddedLi","removeButton","target","parentNode","populateParamsModal","paramValues","isOriginalLI","isAddedLI","addedInput","originalKey","updatedParams","finalValue","newCodeStringContent","newCodeString","searchTerm","replaceTerm","replacementsMade","element","currentValue","escapedSearchTerm","newValue","RegExp","setAPIKeys","parsedHistory","loadConversationHistory","storedCodes","updateCursorPosition","addEventListener","insertToEditorButton","dynamicSuggestionsContainer","backgroundColor","maxHeight","overflowY","zIndex","nextSibling","updateSuggestionPosition","rect","getBoundingClientRect","width","offsetWidth","top","bottom","scrollY","left","scrollX","highlightedSuggestionIndex","currentSuggestions","updateHighlight","newIndex","suggestionItems","classList","scrollIntoView","oninput","isTrusted","cursorPosition","isInsideBrackets","searchStart","char","trimmedSearchTerm","suggestions","suggestionDiv","codeToAdd","insertionPosition","wasAdjusted","nextCloseBracket","nextNumbers","maxNumbers","regex","numberStr","number","parseInt","getMaxDriverNumbers","rowPart","existingNumberStr","pipePart","newNumber","replacement","textAfterInsertion","textBeforeFinal","tempSearchStart","searchTermToRemove","firstNewlineIndexInSuffix","remainderOfOriginalLine","subsequentLines","newText","onmouseover","showSuggestionsForTerm","onkeydown","preventDefault","click","ctrlKey","altKey","metaKey","contains","activeElement","URL"],"sourceRoot":""}