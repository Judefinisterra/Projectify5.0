# DEBT MODELING GUIDANCE

## ‚ö†Ô∏è CRITICAL DEBT MODELING ALERTS ‚ö†Ô∏è

### **üö® INTEREST PLACEMENT RULE:**
**INTEREST EXPENSE/INCOME MUST NEVER BE CALCULATED INSIDE DEBT RECONCILIATION TABLES (BEGIN/END).** Interest calculations must ALWAYS be placed AFTER the debt reconciliation table but WITHIN the INDEX block when using INDEX approach. Only PIK interest can be fed into reconciliation tables using DIRECT-S.

### **üö® LENDING SIGN CHECK:**
**IF THIS IS A LENDING SCENARIO:** Every single cash flow item you create MUST have `negative="true"` or there is absolutely no point in creating it. The entire purpose of creating separate cash flow rows for lending is to flip the signs. Without `negative="true"`, you're just duplicating incorrect cash flows.

## SIMPLE DEBT CODES vs INDEX APPROACH

### **Use Simple Debt Codes When:**
All loans follow **identical, predictable patterns** with standard repayment structures:

**Simple Debt Code Types:**
- **DAMORT**: Amortizing debt (with down payment/origination)
- **LAMORT**: Amortizing debt (loan-style)  
- **DBULLET**: Bullet/balloon payment debt (with down payment)
- **LBULLET**: Bullet/balloon payment debt (loan-style)

### **Bullet vs Amortizing Decision Logic**
üö® **DEFAULT TO BULLET STRUCTURE** when client describes:
- "Loan is due on [specific date]"
- "Repaid after [time period]" 
- "Matures in X years"
- "Balloon payment"
- No mention of monthly/regular payments

‚úÖ **Use BULLET codes (DBULLET/LBULLET)** for these scenarios

üîÑ **Only use AMORTIZING codes (DAMORT/LAMORT)** when client explicitly mentions:
- "Monthly payments"
- "Amortizes over X period"
- "Regular installments"
- "Principal and interest payments"

### **Example Interpretations:**
- ‚ùå "I need a $100K loan due in 2 years" ‚Üí **BULLET** (not amortizing)
- ‚ùå "Equipment financing repaid after 36 months" ‚Üí **BULLET** (not amortizing)  
- ‚úÖ "Equipment loan with monthly payments over 36 months" ‚Üí **AMORTIZING**
- ‚úÖ "Mortgage that amortizes over 30 years" ‚Üí **AMORTIZING**

**Characteristics of Simple Debt:**
- Same principal amount across all loans
- Same interest rate and term
- Standard amortization schedule OR single balloon payment
- Predictable monthly payments
- No custom payment milestones

### **Use INDEX Growth Curve When:**
Individual loans have **custom, non-standard repayment patterns**:

**Characteristics of Complex Debt:**
- Non-standard repayment schedules
- Multiple payment milestones at specific ages
- Variable payment amounts over loan life
- Custom amortization curves
- Age-dependent payment patterns

## EXAMPLES

### ‚úÖ **Simple Debt Examples** (Use Standard Codes):
- "I will originate 10 loans per month for $1000 each. They amortize over 24 months and have 5% interest."
- "We issue $50K of bonds annually. They mature in 5 years with 4% interest paid quarterly."
- "Monthly equipment financing of $25K, repaid over 36 months at 6% APR."

### ‚ùå **Complex Debt Examples** (Use INDEX Growth Curve):

#### **Unit-Based INDEX Examples:**
- "I borrow 10 loans a month. Each is for $1000. They are repaid in 2 payments: 50% in month 12, 50% in month 24."
- "We originate 5 mortgages per quarter for $200K each with custom schedules: 10% down, interest-only for 12 months, then principal + interest."

#### **Dollar-Based INDEX Examples:**
- "We will originate $1.2M in loans in January, $2.4M in February. Each loan is repaid 50% in month 12, 50% in month 24 with 5% interest."
- "Monthly equipment financing volume of $500K, repaid with custom schedule: $0 for months 1-6, then equal payments for months 7-24."
- "Variable lending: $100K in Q1, $250K in Q2, $400K in Q3. All loans have balloon payment structure: full repayment in month 36."

#### **TABLEMIN Function Examples:**
- "I borrowed $10,000 and will repay it with $500 monthly payments" ‚Üí Use TABLEMIN(V1, 500) to prevent overpayment in final month
- "Equipment loan of $25K with fixed $1,000 monthly payments" ‚Üí Use TABLEMIN(BEG_BALANCE, 1000) for automatic payment adjustment
- "Multiple loans, each repaid with $200 monthly installments" ‚Üí Use TABLEMIN within INDEX structure for each loan cohort

## INDEX APPROACH FOR COMPLEX DEBT

### **Structure:**
```
<SPREAD-E; row1="V1(D)|# of New Loans per Month(L)|...">

<INDEXBEGIN; driver1="V1"; row1="...">
  <BEGIN-S; row1="V3(D)|Outstanding Balance(L)|is: liability(F)|...">
  <CONST-E; row1="V2(D)|New Borrowing(L)|is: liability(F)|...">
  <FORMULA-S; row1="A1(D)|Principal Payment Month 12(L)|is: liability(F)|cd{6-V2}*onetimeindex(12)">
  <FORMULA-S; row1="A2(D)|Principal Payment Month 24(L)|is: liability(F)|cd{6-V2}*onetimeindex(24)">
  <END-S; row1="V4(D)|Ending Balance(L)|is: liability(F)|...">
  
  <!-- Interest calculations WITHIN INDEX but OUTSIDE debt reconciliation table -->
  <FORMULA-S; row1="A3(D)|Interest Expense(L)|is: interest expense(F)|cd{6-V3}*0.05/12">
<INDEXEND>
```

### **Key Components:**
1. **Volume Driver**: Number of new loans per period (outside INDEX)
2. **Principal**: Initial loan amount using CONST-E or SPREADINDEX-E
3. **Custom Payments**: Use FORMULA-S with ONETIMEINDEX() for specific payment dates
4. **Interest Calculations**: Use FORMULA-S with rd{} references for complex interest logic
5. **Self-Containment**: All debt logic must be within INDEX block

## üí∞ INDEX WITH DOLLAR AMOUNT DRIVERS

### **Two Approaches for INDEX Debt Modeling:**

#### **1. Unit-Based Approach (Number of Loans)**
- Driver represents **number of loans** originated per period
- INDEX models **one loan** of specific dollar amount
- Example: 10 loans per month, each for $1,000

#### **2. Dollar-Based Approach (Total Dollar Amount)**
- Driver represents **total dollar amount** of lending/borrowing per period
- INDEX models the behavior of **$1** of debt
- System automatically scales by driver amount

### **When to Use Dollar-Based Approach:**
‚úÖ **Use Dollar-Based When:**
- Client specifies total dollar amounts rather than number of loans
- Variable loan sizes that aggregate to a total amount
- Continuous lending amounts (not discrete loans)
- Easier to think in terms of total lending volume

‚úÖ **Examples Requiring Dollar-Based:**
- "We will originate $1.2M in loans in January, $2.4M in February"
- "Monthly lending volume of $500K with balloon payments"
- "Equipment financing of $50K per month, repaid over custom schedule"

### **Dollar-Based INDEX Structure:**
```
<SPREAD-E; row1="V1(D)|New Lending Volume per Month(L)|1200|2400|1800|...">

<INDEXBEGIN; driver1="V1"; row1="...">
  <BEGIN-S; row1="V3(D)|Outstanding Balance per $1(L)|is: asset(F)|...">
  <CONST-E; row1="V2(D)|Principal per $1 Lent(L)|is: asset(F)|1">
  <FORMULA-S; row1="A1(D)|Repayment Month 12 per $1(L)|is: asset(F)|-cd{6-V2}*onetimeindex(12)*0.5">
  <FORMULA-S; row1="A2(D)|Repayment Month 24 per $1(L)|is: asset(F)|-cd{6-V2}*onetimeindex(24)*0.5">
  <END-S; row1="V4(D)|Ending Balance per $1(L)|is: asset(F)|...">
  
  <!-- Interest calculations WITHIN INDEX but OUTSIDE debt reconciliation table -->
  <FORMULA-S; row1="A3(D)|Interest per $1(L)|is: interest income(F)|cd{6-V3}*0.05/12">
<INDEXEND>
```

### **How Dollar-Based Scaling Works:**

#### **Mathematical Logic:**
- **V1 Driver**: $1,200 of new lending in January
- **V2 Inside INDEX**: Models what happens to $1 of lending
- **System Calculation**: V2 √ó V1 = $1 √ó $1,200 = $1,200 of actual principal

#### **Month-by-Month Example:**
**January (Month 1):**
- V1 = $1,200 (new lending volume)
- V2 = $1 (principal per $1 lent)
- **Result**: $1,200 of new loans originated

**January (Month 13 - 12 months later):**
- A1 = $1 √ó ONETIMEINDEX(12) √ó 0.5 = $0.50 per original $1 lent
- **Scaled Result**: $0.50 √ó $1,200 = $600 repayment from January loans

### **Detailed Dollar-Based Example:**

```
<!-- Driver: Monthly lending volume -->
<SPREAD-E; row1="V1(D)|Monthly Lending Volume(L)|1200|2400|1800|0|0|...">

<INDEXBEGIN; driver1="V1"; row1="DollarDebtIndex">
  <!-- Debt reconciliation table for $1 -->
  <BEGIN-S; row1="V3(D)|Outstanding Balance per $1(L)|is: asset(F)|...">
  <CONST-E; row1="V2(D)|Principal per $1(L)|is: asset(F)|1">
  <FORMULA-S; row1="A1(D)|Repayment Month 12 per $1(L)|is: asset(F)|-cd{6-V2}*onetimeindex(12)*0.5">
  <FORMULA-S; row1="A2(D)|Repayment Month 24 per $1(L)|is: asset(F)|-cd{6-V2}*onetimeindex(24)*0.5">
  <END-S; row1="V4(D)|Ending Balance per $1(L)|is: asset(F)|...">
  
  <!-- Interest calculations WITHIN INDEX but OUTSIDE debt reconciliation table -->
  <FORMULA-S; row1="A3(D)|Monthly Interest per $1(L)|is: interest income(F)|cd{6-V3}*0.05/12">
  
  <!-- Cash flow reversals for lending (all with negative="true") -->
  <MULT2-S; driver1="V2"; driver2="-1"; row1="CF1(D)|Principal Outflow per $1(L)|CF: CFI(F)|negative='true'">
  <MULT2-S; driver1="A1"; driver2="-1"; row1="CF2(D)|Repayment Month 12 per $1(L)|CF: CFI(F)|negative='true'">
  <MULT2-S; driver1="A2"; driver2="-1"; row1="CF3(D)|Repayment Month 24 per $1(L)|CF: CFI(F)|negative='true'">
  <MULT2-S; driver1="A3"; driver2="-1"; row1="CF4(D)|Interest Inflow per $1(L)|CF: CFI(F)|negative='true'">
<INDEXEND>
```

### **Results from Dollar-Based Example:**

**January Lending ($1,200):**
- Principal: $1,200 asset created
- Cash Flow: -$1,200 (cash outflow from lending)

**January + 12 Months:**
- Repayment: $600 asset reduction (50% of $1,200)
- Cash Flow: +$600 (cash inflow from repayment)

**January + 24 Months:**
- Repayment: $600 asset reduction (remaining 50% of $1,200)
- Cash Flow: +$600 (final cash inflow from repayment)

**Monthly Interest on January Loans:**
- Interest Income: $1,200 √ó 5% √∑ 12 = $5 per month
- Cash Flow: +$5 per month (interest cash inflow)

### **Dollar-Based vs Unit-Based Comparison:**

| Aspect | Dollar-Based | Unit-Based |
|--------|-------------|------------|
| **Driver** | Total $ amount per period | Number of loans per period |
| **INDEX Models** | $1 of debt behavior | 1 loan of specific $ amount |
| **Principal Inside INDEX** | Always $1 | Actual loan amount (e.g., $1,000) |
| **Best For** | Variable loan sizes, total volumes | Fixed loan amounts, discrete counting |
| **Example Driver** | $1,200, $2,400, $1,800 | 1, 2, 3 (loans) |

### **Key Advantages of Dollar-Based:**
‚úÖ **Flexible loan sizes** - doesn't assume uniform loan amounts
‚úÖ **Direct volume tracking** - matches how businesses think about lending volumes
‚úÖ **Easier scaling** - system handles all multiplication automatically
‚úÖ **Simpler driver setup** - just enter dollar amounts per period

## DECISION FLOWCHART

```
Does the debt have standard repayment terms?
‚îú‚îÄ‚îÄ YES ‚Üí Are all loans identical in structure?
‚îÇ   ‚îú‚îÄ‚îÄ YES ‚Üí Use Simple Debt Codes (DAMORT, LAMORT, DBULLET, LBULLET)
‚îÇ   ‚îî‚îÄ‚îÄ NO ‚Üí Use INDEX Growth Curve
‚îî‚îÄ‚îÄ NO ‚Üí Use INDEX Growth Curve
    ‚îú‚îÄ‚îÄ Does client specify total dollar amounts per period?
    ‚îÇ   ‚îú‚îÄ‚îÄ YES ‚Üí Use Dollar-Based INDEX (model $1, driver = total $)
    ‚îÇ   ‚îî‚îÄ‚îÄ NO ‚Üí Does client specify number of loans?
    ‚îÇ       ‚îú‚îÄ‚îÄ YES ‚Üí Use Unit-Based INDEX (model 1 loan, driver = count)
    ‚îÇ       ‚îî‚îÄ‚îÄ NO ‚Üí Choose based on context:
    ‚îÇ           ‚îú‚îÄ‚îÄ Variable loan sizes ‚Üí Dollar-Based INDEX
    ‚îÇ           ‚îî‚îÄ‚îÄ Fixed loan amounts ‚Üí Unit-Based INDEX
```

## KEY FUNCTIONS FOR COMPLEX DEBT

### **ONETIMEINDEX(month)**
- **Purpose**: Triggers payment only at specific loan age month
- **Example**: `ONETIMEINDEX(12)` = payment occurs only in month 12 of loan's life
- **Use**: Custom payment schedules, balloon payments, milestone payments

### **BEGINDEX(month)**
- **Purpose**: Starts payment from specific loan age month and continues
- **Example**: `BEGINDEX(6)` = payments start in month 6 of loan's life and continue
- **Use**: Delayed payment starts, grace periods ending

### **ENDINDEX(month)**
- **Purpose**: Ends payment at specific loan age month
- **Example**: `ENDINDEX(24)` = payments end at month 24 of loan's life
- **Use**: Limited payment periods, temporary payments

### **rd{driverName}** 
- **Purpose**: References other rows within INDEX for calculations
- **Example**: `rd{V2}` = references loan principal row
- **Use**: Interest calculations, balance references

### **cd{column-driver}**
- **Purpose**: References specific column value from driver row
- **Example**: `cd{6-V2}` = column I value from V2 row
- **Use**: Payment amount calculations

### **üö® CRITICAL: INTEREST PLACEMENT RULE**
**INTEREST EXPENSE/INCOME MUST NEVER BE CALCULATED INSIDE DEBT RECONCILIATION TABLES (BEGIN/END).**

Interest calculations must ALWAYS be placed **AFTER** the debt reconciliation table (END statement), but **WITHIN** the INDEX block when using INDEX approach. Never place interest calculations inside the debt reconciliation table itself.

**‚ùå INCORRECT - Interest Inside Debt Reconciliation Table:**
```
<BEGIN-S; row1="...">
<FORMULA-S; row1="...|New Borrowing(L)|...">
<FORMULA-S; row1="...|Repayment(L)|...">
<FORMULA-S; row1="...|Interest Income(L)|..."> <!-- WRONG - Interest inside debt reconciliation -->
<END-S; row1="...">
```

**‚úÖ CORRECT - Interest Outside Debt Reconciliation Table:**
```
<BEGIN-S; row1="...">
<FORMULA-S; row1="...|New Borrowing(L)|...">
<FORMULA-S; row1="...|Repayment(L)|...">
<END-S; row1="...">
<!-- Interest calculations come AFTER the debt reconciliation table -->
<FORMULA-S; row1="...|Interest Income(L)|is: interest income(F)|...">
```

**üîç Exception: PIK Interest Only**
The ONLY way to feed interest into a debt reconciliation table is via DIRECT-S code referencing external interest calculations, and this should ONLY be used for PIK (Payment-In-Kind) interest when you want to add interest to the principal balance:

```
<!-- Interest calculation outside debt reconciliation table -->
<FORMULA-S; row1="A5(D)|Interest Calculation(L)|is: interest expense(F)|...">

<!-- PIK interest added to balance inside debt reconciliation table -->
<BEGIN-S; row1="...">
<FORMULA-S; row1="...|New Borrowing(L)|...">
<DIRECT-S; driver1="A5"; row1="...|PIK Interest Added to Balance(L)|...">
<END-S; row1="...">
```

### **TABLEMIN Custom Function for Fixed Monthly Payments**
üéØ **PURPOSE**: Use TABLEMIN for fixed monthly debt payments to prevent overpaying the remaining loan balance.

**When to Use TABLEMIN:**
- Client specifies fixed monthly payment amounts (e.g., "$100 monthly payment")
- Need to ensure payments never exceed remaining loan balance
- Want automatic payment adjustment in final payment period

**TABLEMIN Syntax:**
```
customformula="TABLEMIN(driver1, driver2)"
```
- **driver1**: Reference to BEG code (starting balance for payment calculation)
- **driver2**: Fixed monthly payment amount

**How TABLEMIN Works:**
- Formula: `MIN(SUM(driver1 : OFFSET(INDIRECT(ADDRESS(ROW(),COLUMN())),-1,0)), driver2)`
- Creates dynamic sum from beginning balance to current row
- Returns minimum of accumulated balance and fixed payment
- Prevents overpayment by capping payment at remaining balance

**Example Implementation:**
```
<BEGIN-S; row1="V1(D)|Loan Balance(L)|is: liability(F)|...">
<FORMULA-S; row1="V2(D)|New Borrowing(L)|is: liability(F)|1000">
<FORMULA-S; row1="A1(D)|Fixed Monthly Payment(L)|is: liability(F)|customformula='TABLEMIN(V1,100)'">
<END-S; row1="V3(D)|Ending Balance(L)|is: liability(F)|...">
```

**Real-World Scenario:**
- Client: "I borrowed $1,000 and will repay it with $100 monthly payments"
- Month 1-9: Pays exactly $100 (remaining balance > $100)
- Month 10: Pays only $100 (final payment, remaining balance = $100)
- Result: Total payments = $1,000 (no overpayment)

**Complete TABLEMIN Implementation:**
```
<BEGIN-S; row1="V1(D)|Outstanding Loan Balance(L)|is: liability(F)|...">
<FORMULA-S; row1="V2(D)|New Borrowing(L)|is: liability(F)|1000">
<FORMULA-S; row1="A1(D)|Monthly Payment(L)|is: liability(F)|customformula='TABLEMIN(V1,100)'">
<END-S; row1="V3(D)|Ending Balance(L)|is: liability(F)|...">

<!-- Interest calculation OUTSIDE the reconciliation table -->
<FORMULA-S; row1="A2(D)|Interest Expense(L)|is: interest expense(F)|V1*0.05/12">
```

**TABLEMIN vs Other Payment Methods:**
| Method | Use Case | Overpayment Risk |
|--------|----------|------------------|
| **TABLEMIN** | Fixed monthly payments | ‚ùå No - auto-adjusts final payment |
| **Fixed Amount** | `customformula="100"` | ‚úÖ Yes - may overpay in final period |
| **AMORT** | Standard amortization | ‚ùå No - but requires complex setup |

### **SUMTABLE Custom Function for Full Loan Repayment**
üéØ **PURPOSE**: Use SUMTABLE when the entire loan/debt is repaid in full on a given month # or date.

**When to Use SUMTABLE:**
- Entire loan is repaid in full on a specific month (e.g., loan repaid in full in month 24)
- PIK interest has been added to the loan and needs to be repaid with the principal
- Amortizing loan is repaid in full prior to its ending amortization date
- Need to capture accumulated balance including all accrued interest/fees

**SUMTABLE Syntax:**
```
customformula="SUMTABLE(rd{driver of BEG row})"
```
- **rd{driver}**: Must reference the BEG code (beginning balance driver) of the debt reconciliation table
- **Always link to beginning row**: This ensures the formula captures the full accumulated balance

**How SUMTABLE Works:**
- Formula: `SUM(driver1:OFFSET(INDIRECT(ADDRESS(ROW(),COLUMN())),-1,0))`
- Creates cumulative sum from beginning balance to current row
- Captures all balance movements including PIK interest additions
- Returns total accumulated balance for full repayment

**Example Implementation - Loan Repaid in Full Month 24:**
```
<BEGIN-S; row1="V1(D)|Outstanding Loan Balance(L)|is: liability(F)|...">
<FORMULA-S; row1="V2(D)|New Borrowing(L)|is: liability(F)|5000">
<FORMULA-S; row1="A1(D)|PIK Interest Added to Balance(L)|is: liability(F)|rd{V1}*0.08/12">
<FORMULA-S; row1="A2(D)|Full Repayment Month 24(L)|is: liability(F)|customformula='SUMTABLE(rd{V1})*onetimeindex(24)'">
<END-S; row1="V3(D)|Ending Balance(L)|is: liability(F)|...">
```

**Real-World Scenario:**
- Client: "We borrowed $5,000. PIK interest of 8% annually is added to the balance. The entire loan plus all accrued interest is repaid in month 24."
- SUMTABLE captures: Original $5,000 + all accumulated PIK interest over 24 months
- Repayment occurs only in month 24 using ONETIMEINDEX(24)

**SUMTABLE vs Other Repayment Methods:**
| Method | Use Case | When to Use |
|--------|----------|-------------|
| **SUMTABLE** | Full loan repayment with accumulated balance | Balloon payment + PIK interest, early payoff of amortizing loan |
| **TABLEMIN** | Fixed monthly payments | Prevent overpayment in regular payment schedule |
| **Fixed Amount** | Known repayment amount | Standard principal repayment without balance accumulation |

**Key Requirements for SUMTABLE:**
‚úÖ **Always use rd{BEG_driver}**: Must reference the beginning balance row
‚úÖ **Combine with ONETIMEINDEX**: Specify exact month for full repayment  
‚úÖ **Perfect for PIK scenarios**: Captures principal + all accumulated interest
‚úÖ **Early payoff scenarios**: Ideal when loan repaid before scheduled maturity

### **AMORT Function Placement Rule**
üö® **CRITICAL**: The AMORT custom function must ONLY be added as the **last row before ENDING** in the debt reconciliation table. Never place AMORT in the middle of the reconciliation sequence.

**Correct Placement:**
```
<BEGIN-S; row1="...">
<FORMULA-S; row1="...|New Borrowing(L)|...">
<FORMULA-S; row1="...|Principal Payment(L)|AMORT(...)"> <!-- LAST row before ENDING -->
<END-S; row1="...">
```

**Why This Matters:**
- AMORT calculations depend on cumulative balance calculations
- Placing AMORT in wrong position breaks debt reconciliation mathematics
- System expects AMORT as final calculation before closing balance

## VALIDATION CHECKLIST

### For Simple Debt:
‚úì All loans have identical terms and structure
‚úì Standard amortization OR bullet payment structure
‚úì No custom payment schedules or milestones
‚úì Uses appropriate prefix (D=down payment, L=loan)

### For INDEX Debt:
‚úì Volume driver exists for loan origination volume
‚úì Custom payment logic uses ONETIMEINDEX() functions
‚úì Interest calculations placed OUTSIDE debt reconciliation table (never inside BEGIN/END)
‚úì Interest calculations placed WITHIN INDEX block (inside INDEXBEGIN/INDEXEND)
‚úì Interest calculations reference loan balances correctly  
‚úì All debt components self-contained within INDEX
‚úì Principal and payment flows have proper fincodes
‚úì Only PIK interest uses DIRECT-S to feed into debt reconciliation table

### For Dollar-Based INDEX Debt:
‚úì Driver represents total dollar amounts (not number of loans)
‚úì Principal inside INDEX is exactly $1 (not actual loan amount)
‚úì All formulas reference cd{6-V2} where V2 = $1
‚úì System scaling works: $1 model √ó dollar driver = correct totals
‚úì Interest rates applied to $1 principal correctly
‚úì Repayment percentages applied to $1 principal correctly

## BORROWING vs LENDING

### **Borrowing (Default Behavior)**
- Debt codes model the company **receiving loans**
- Principal increases liabilities (positive)
- Repayments decrease liabilities (negative)
- Uses **CF: CFF** (Cash Flow from Financing) fincodes

### **Lending (Company Making Loans)**
- Company **originating loans to others**
- Requires **sign reversal** in debt reconciliation table
- Must **remove CF: CFF fincodes** and use **CF: CFI** (Cash Flow from Investing)
- Principal becomes an asset (positive)
- Repayments reduce the asset (negative)

## üö® CRITICAL: LENDING CASH FLOW SIGN REQUIREMENTS

### **The Golden Rule for Lending Cash Flows:**
**ALL lending cash flow items MUST have `negative="true"` attribute or there is NO POINT in adding them.**

The entire purpose of creating separate cash flow rows for lending is to flip the signs. Without `negative="true"`, you're just duplicating the same cash flow direction as borrowing, which defeats the purpose.

### **Sign Logic Verification Checklist:**

#### **For Lending Scenarios - ALWAYS Verify:**
‚úÖ **Principal Outflow** (when making loans):
- Balance sheet: Asset increases (+)
- Cash flow: Cash decreases (-) ‚Üí **MUST have `negative="true"`**

‚úÖ **Principal Inflow** (when receiving repayments):
- Balance sheet: Asset decreases (-)
- Cash flow: Cash increases (+) ‚Üí **MUST have `negative="true"`** to flip the negative asset change

‚úÖ **Interest Income**:
- Income statement: Revenue increases (+)
- Cash flow: Cash increases (+) ‚Üí **MUST have `negative="true"`** if sourced from negative interest expense

#### **Common Sign Flow Patterns:**

**üìä CORRECT Lending Flow:**
```
Balance Sheet Asset: +$1000 (loan originated)
Cash Flow Item: -$1000 (cash out) with negative="true"
Final Cash Flow: -$1000 (correct - cash decreased when loan was made)
```

**‚ùå INCORRECT Lending Flow (Missing negative="true"):**
```
Balance Sheet Asset: +$1000 (loan originated)
Cash Flow Item: +$1000 (WRONG - no negative="true")
Final Cash Flow: +$1000 (WRONG - shows cash increased when loan was made)
```

### **Double-Check Questions for All Lending Cash Flows:**

1. **"Does this cash flow item have `negative="true"`?"**
   - If NO ‚Üí **FIX IT** or remove the item entirely

2. **"What actually happened to cash when this transaction occurred?"**
   - Made a loan ‚Üí Cash went OUT (negative)
   - Received repayment ‚Üí Cash came IN (positive)
   - Received interest ‚Üí Cash came IN (positive)

3. **"Does my final cash flow direction match the actual cash movement?"**
   - If NO ‚Üí Check your `negative="true"` attributes

4. **"Am I creating unnecessary cash flow items?"**
   - Only create separate CF items if you need to flip signs or change classifications
   - If the original debt reconciliation already produces correct cash flows, don't add redundant items

### **Implementation for Lending:**

#### **Simple Debt Codes:**
- **LAMORT** and **LBULLET** automatically handle lending logic
- No additional rows needed - built-in sign reversal and CFI classification

#### **Complex INDEX Debt:**
Must manually add rows to reverse signs before passing to CF: CFI:
```
<INDEXBEGIN; driver1="V1">
  <CONST-E; row1="V2(D)|Loan Principal(L)|is: asset(F)|...">
  <FORMULA-S; row1="A1(D)|Principal Payment(L)|is: asset(F)|-cd{6-V2}*onetimeindex(12)">
  <!-- Manual reversal rows for CFI reconciliation -->
  <MULT2-S; driver1="V2"; driver2="-1"; row1="A2(D)|Lending - Principal Outflow(L)|CF: CFI(F)|negative='true'">
  <MULT2-S; driver1="A1"; driver2="-1"; row1="A3(D)|Lending - Principal Inflow(L)|CF: CFI(F)|negative='true'">
<INDEXEND>
```

### **üîç DETAILED SIGN VERIFICATION EXAMPLES:**

#### **Example 1: Correct Lending Implementation**
```
<INDEXBEGIN; driver1="V1">
  <CONST-E; row1="V2(D)|Loan Principal(L)|is: asset(F)|1000">
  <FORMULA-S; row1="A1(D)|Principal Payment Month 12(L)|is: asset(F)|-cd{6-V2}*onetimeindex(12)*0.5">
  <FORMULA-S; row1="A2(D)|Principal Payment Month 24(L)|is: asset(F)|-cd{6-V2}*onetimeindex(24)*0.5">
  
  <!-- CFI Cash Flow Reversals for principal only - ALL must have negative="true" -->
  <MULT2-S; driver1="V2"; driver2="-1"; row1="CF1(D)|Lending - Principal Outflow(L)|CF: CFI(F)|negative='true'">
  <MULT2-S; driver1="A1"; driver2="-1"; row1="CF2(D)|Lending - Principal Inflow Month 12(L)|CF: CFI(F)|negative='true'">
  <MULT2-S; driver1="A2"; driver2="-1"; row1="CF3(D)|Lending - Principal Inflow Month 24(L)|CF: CFI(F)|negative='true'">
  
  <!-- Interest calculations MUST be outside INDEXBEGIN/INDEXEND -->
<INDEXEND>

<!-- Interest and interest cash flows placed AFTER INDEX block -->
<FORMULA-S; row1="A3(D)|Interest Income(L)|is: interest income(F)|cd{6-V2}*0.05/12">
<MULT2-S; driver1="A3"; driver2="-1"; row1="CF4(D)|Lending - Interest Inflow(L)|CF: CFI(F)|negative='true'">
```

#### **Example 2: WRONG Implementation (Missing negative="true")**
```
‚ùå INCORRECT - DO NOT DO THIS:
<MULT2-S; driver1="V2"; driver2="-1"; row1="CF1(D)|Lending - Principal Outflow(L)|CF: CFI(F)">
<!-- Missing negative="true" means cash flow shows POSITIVE when loan is made -->
<!-- This is WRONG - when you lend money, cash should DECREASE -->
```

#### **Example 3: Cash Flow Logic Verification**
For a $1000 loan originated in Month 1, repaid $500 in Month 12, $500 in Month 24, with 5% interest:

**Month 1 (Loan Origination):**
- Balance Sheet: Asset +$1000
- Cash Flow: Should be -$1000 (cash decreases when loan is made)
- Code: `<MULT2-S; driver1="V2"; driver2="-1"; row1="CF1(D)|Principal Outflow(L)|CF: CFI(F)|negative='true'">`
- Result: V2 = +1000, multiplied by -1 = -1000, then negative="true" flips to -1000 ‚úÖ

**Month 12 (First Repayment):**
- Balance Sheet: Asset -$500
- Cash Flow: Should be +$500 (cash increases when repayment received)
- Code: `<MULT2-S; driver1="A1"; driver2="-1"; row1="CF2(D)|Principal Inflow(L)|CF: CFI(F)|negative='true'">`
- Result: A1 = -500, multiplied by -1 = +500, then negative="true" flips to +500 ‚úÖ

### **Key Requirements for Lending:**
‚úì Remove all **CF: CFF** fincodes from debt items
‚úì Add **CF: CFI** fincodes for cash flow classification  
‚úì Create sign reversal rows for INDEX debt reconciliation
‚úì Principal becomes asset, not liability
‚úì Use **LAMORT/LBULLET** for simple lending scenarios

## COMMON MISTAKES

### **üö® CRITICAL LENDING ERRORS:**
‚ùå **FATAL**: Missing `negative="true"` on lending cash flow items
‚ùå **FATAL**: Cash flows showing wrong direction (positive when should be negative)
‚ùå **Wrong**: Using CF: CFF fincodes for lending scenarios (should be CF: CFI)
‚ùå **Wrong**: Forgetting sign reversal rows entirely for INDEX lending
‚ùå **Wrong**: Creating cash flow items without proper sign verification

### **üö® CRITICAL INTEREST PLACEMENT ERRORS:**
‚ùå **FATAL**: Placing interest expense/income calculations inside debt reconciliation tables (BEGIN/END)
‚ùå **FATAL**: Using interest calculations as debt reconciliation table items
‚ùå **Wrong**: Including interest in debt balance movements (except PIK interest)
‚ùå **Wrong**: Forgetting that interest affects P&L, not debt balance reconciliation
‚ùå **Wrong**: Placing interest calculations outside INDEX block when using INDEX approach

### **General Debt Modeling Errors:**
‚ùå **Wrong**: Using simple codes for custom repayment schedules
‚ùå **Wrong**: External references to INDEX debt drivers
‚ùå **Wrong**: Missing fincodes on principal and payment flows
‚ùå **Wrong**: Mixing simple debt codes with INDEX approach for same loan type

### **üö® DOLLAR-BASED INDEX ERRORS:**
‚ùå **FATAL**: Using actual loan amount instead of $1 inside INDEX
‚ùå **FATAL**: Setting driver to number of loans instead of dollar amounts
‚ùå **Wrong**: Forgetting that INDEX models $1, not the full amount
‚ùå **Wrong**: Using cd{6-V2} when V2 ‚â† $1
‚ùå **Wrong**: Applying interest rates to wrong base amount inside INDEX

### **‚úÖ CORRECT APPROACH:**
‚úÖ **Correct**: ALL interest calculations MUST be placed OUTSIDE debt reconciliation tables (BEGIN/END)
‚úÖ **Correct**: ALL interest calculations MUST be placed WITHIN INDEX block when using INDEX approach
‚úÖ **Correct**: ALL lending cash flows MUST have `negative="true"`
‚úÖ **Correct**: Verify cash flow direction matches actual cash movement
‚úÖ **Correct**: Choose one approach per debt type consistently
‚úÖ **Correct**: Use INDEX for ANY custom repayment logic
‚úÖ **Correct**: Model single loan within INDEX, scale by volume driver
‚úÖ **Correct**: Use LAMORT/LBULLET for simple lending scenarios
‚úÖ **Correct**: Add manual sign reversal with `negative="true"` for complex INDEX lending
‚úÖ **Correct**: Only use DIRECT-S for PIK interest feeding into debt reconciliation tables
‚úÖ **Correct**: Use TABLEMIN for fixed monthly payments to prevent overpayment

### **‚úÖ DOLLAR-BASED INDEX BEST PRACTICES:**
‚úÖ **Correct**: Always model exactly $1 of principal inside INDEX
‚úÖ **Correct**: Set driver to total dollar amounts, not loan counts
‚úÖ **Correct**: Let the system handle scaling ($1 model √ó dollar driver)
‚úÖ **Correct**: Apply interest rates to $1 principal: cd{6-V2}*rate/12
‚úÖ **Correct**: Apply repayment percentages to $1: cd{6-V2}*onetimeindex(month)*percentage
‚úÖ **Correct**: Use dollar-based when client specifies total volumes rather than loan counts

### **üîç FINAL VERIFICATION CHECKLIST:**
Before submitting any debt model, ask these questions:

1. **Are ALL interest calculations placed OUTSIDE of debt reconciliation tables (BEGIN/END)?**
   - Interest should be calculated AFTER debt reconciliation blocks but WITHIN INDEX blocks
   - Only PIK interest uses DIRECT-S to feed into debt balance reconciliation
2. **Does every lending cash flow item have `negative="true"`?**
3. **Do the cash flow directions make economic sense?**
   - Loan origination = Cash OUT (negative)
   - Loan repayment = Cash IN (positive)
   - Interest received = Cash IN (positive)
4. **Are all cash flows properly classified as CF: CFI (not CF: CFF)?**
5. **Did I test the signs by tracing through one complete loan lifecycle?**
6. **For dollar-based INDEX: Is the principal inside INDEX exactly $1?**
7. **For fixed monthly payments: Did I use TABLEMIN to prevent overpayment?**
   - TABLEMIN(beginning_balance_driver, fixed_payment_amount)
   - Ensures final payment doesn't exceed remaining balance

If ANY answer is NO, review and fix the implementation before proceeding. 