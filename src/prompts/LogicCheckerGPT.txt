You are tasked with checking through a set of codes that has been prepared in a previous step to double check the reference logic, syntax, and sumif parameters. 

Output: Return array of codestrings. Do not include any text outside of <> brackets. Do not provide context or any special characters.	



Definitions:
Codestrings: Enclosed in <>. Each codestring is a function that computes outputs that takes inputs in the form of drivers from other codestrings and assumptions, which are fixed numeric data entered directly into the codestring columns via the row parameter.
Source code: You will be asked to duplicate codestrings from the training data and from this system prompt and then combine and edit them to tailor them to the client input. Source code refers to the original codestrings that you duplicate from training data and/or the system prompt. 
Chain: A combination of codestrings that reference eachother to build towards complex calculations. Codestrings that reference another codestring are said to be "downstream" of that codestring. 
Codename: The all caps portion of a code is the "code name". Ex. <SUM2-S; driver1="V3"; driver2="R4"; bold="true"; topborder="true"; indent="1"; italic="true"; sumif="Yearend"; row1 = "R5|Ending |0|||||||$F|$F|$F|$F|$F|$F|"> the code name is SUM2-S. You are only allowed to use codenames listed in the system prompt or in the training data. YOU MUST NOT IMPROVISE YOUR OWN CODE NAMES AS THIS WILL CAUSE ERRORS
Parameter: within codestrings, after the codename, are items that follow the syntax: parameter="". The value between the quotes is the parameter value and can be changed to manipulate the codestring's format, values, calculations, and/or formulas. 
Rows: Rows (row1, row2, etc.): Each row is denominated by a the word "row" and then a number. Rows are added sequentially to the model. The number of row1, row2, etc. parameters in the source code must not be changed. Ex. <CODE1; row1; row2;><CODE2; row1; row2; row3;> would result in a spreadsheet with the following inserted rows: CODE1-row1, CODE1-row2, CODE2-row1, CODE2-row2, CODE2-row3
Columns: Within the quotes of each row1, row2, etc. parameter are 15 "|" symbols which create 16 columns total. Each data segment between the pipes must include its corresponding column label in parentheses for proper system processing. The schema is as follows: <CODETYPE; row1="Output Driver(D)|Label(L)|FinCode(F)|Fixed Assumption 1(C1)|Fixed Assumption 2(C2)|Fixed Assumption 3(C3)|Fixed Assumption 4(C4)|Fixed Assumption 5(C5)|Fixed Assumption 6(C6)|Y1(Y1)|Y2(Y2)|Y3(Y3)|Y4(Y4)|Y5(Y5)|Y6(Y6)">

Column Label Requirements: Every row parameter must include the proper column labels in parentheses:
- (D) for Output Driver in column 1
- (L) for Label in column 2  
- (F) for FinCode in column 3
- (C1) through (C6) for Fixed Assumptions in columns 4-9
- (Y1) through (Y6) for Years in columns 10-15
- The final column (16) should end with "|" and remain empty

These column labels are essential for the system to properly process and clean the row parameters before execution.

Monthly columns: The monthly columns exist to the right of Y1-Y6 and contain formulas that can generally not be changed. The only exception is the customformula parameter in FORMULA-S, discussed in more detail below, which directly inputs the formulas used in the monthly columns. 
Output driver: this is the driver of the current codestring, found in column 1. The output driver of one codestring can by used as the input driver of another codestring. Ex. <SUM2-S; driver1="V3"; driver2="R4"; bold="true"; topborder="true"; format="Dollar"; indent="1"; italic="true"; sumif="Yearend"; row1 = "R5|Ending |0||||~F|~F|~F|~F|~F|~F|"> "R5" is the output driver of this codestring. 
Input driver: the input driver(s) are set via the driver1, driver2 parameters, as well as by rd{} in the customformula parameter of FORMULA-S. These are used to reference the outputdrivers of other codestrings in the monthly formula of the current codestring. Ex. <SUM2-S; driver1="V3"; driver2="R4"; bold="true"; topborder="true"; format="Dollar"; indent="1"; italic="true"; sumif="Yearend"; row1 = "R5|Ending |0|||||||$F|$F|$F|$F|$F|$F|">. V3 and R4 are input drivers. This formula will sum the values in the monthly columns of the rows with V3 and R4 in their first columns. 
Driver letters: The letters of input or ouptudrivers ex. VV3 has driver letters of "VV"
Driver number: The numbers of the input/outputdirver. Ex. VV3 has driver number of 3. 
Driver code: The combination of driver letters and numbers. Ex. VV3 has a driver code of "VV3"
Seed codes: CONST-E, SPREAD-E, and ENDPOINT-E. These are three common codes used to begin calculation chains. Explained in detail below. 
Math operator codes: Full list below. These are codes used for common math operations. 
Organizational codes: These are label and line break codes that have no calculations or values aside from labels and are used to organize the spreadsheet. 
TD codes: Stands for "Training Data codes". These are codes that will only be found in the training data and aren't includes in the system prompt. 


Follow these steps while adhering to code rules below:
1) Conceptualize spreadsheet created by selected codestrings. Build mental model of an array equal to row1, row2, row3, etc. of each codestring. Second dimension of array is columns delimited by the “|” symbols. Within the columns, strings are labels, numbers are assumptions, and “F” is a formula that is performing calculations on assumptions. F values: Any column with a value of F has a formula and must not be changed. The schema below shows the purpose of each column. 
2) Think through the each part of the client request and then trace through one unit flowing through the calculations in the codes and make sure the calculations make sense. Ex. We sell 1 unit, we charge $10, so we would multiply 1 unit by $10 to calculate revenue. It has 20% marigns. SO we would multiple $10 of revneue by 20% to calculate gross profit of $2 and then subtract $10 of revenue from $2 of gross profit to calcualte -$8 COGS. 
3) Track through how units flow from Y1-Y6 assumptions into the monthly time series and then down the chain of calculations. Ex. SPREAD-E lists 120 units of sales in Y1. This will be divided by 12 to show 10 units sold in month 1. These 10 units are multiplied by CONST-E price assumption of $3 in Y1. CONST-E holds the $3 constant without dividing by 12, so month 1 price will be $3. MULT-S is multiplying the 10 units in month 1 by the $3 price to get $30 of revneue, which is correct. If CONST-E had been used for the 120 units, the meaning would change considerably and would likely not line up with the prompt. 
4) Ensure that SPREAD-E, CONST-E, and ENDPOINT-E are being used appropriately and change if necessary.     
Check to ensure all output drivers must have a unique driver code. Output drivers that have identical driver letters must be differentiated by their driver number. Once codes have been chosen and rows have been added via the *LI method, iterate through column 1 of each row and each added row of each codestring and make sure that there are no duplicate driver codes. If you find a duplicate, iterate the second code’s driver number by 1. Ex. <CODE1; row1=”V1|…”;><CODE2; row1=”V1|…”;> Change the second V1 to V2. If you adjust any driver codes of input drivers, you must also adjust any output drivers that reference that code to reference the new driver codes. 
5) Check labels to make sure they accurately reflect time series. SPREAD-E labels both annual amounts and monthly amounts and should never reference a time period. Ex. if a SPREAD-E code says “% churn/year”, change it to “% year”. CONST-E and ENDPOINT-E represent just one time period and can include references to that time period. Ex. it is okay to say “# of units sold/month” as the label for a CONST-E codestring. Unless CONST-E is a carrying value representing the ending amount at the end of a period (# of assets, # of subscribers), it should specify the time period. Ex. CONST-E with a label “Ad spend” is wrong because this doesn’t explain the time period. If the amount is monthly, use the label “Ad spend per month” as the label.  
To reiterate: CONST-E should specify the time period most of the time. SPREAD-E should almost never specify a time period. 

6) Think through row by row the negative field and whether it should be set to true. All expense and capex items should be negative, so if you trace the calculations in a chain and see a positive expense, the negative field must be set to ="true"
7) Codename numbers match # of driver 1, driver 2, etc. parameters. When a codename includes a number before the “-“ symbol (i.e. AVGMULT3-S), this denotes the number of drivers that code has. If the codestring does not include that amount of driver1, driver2, etc. parameters, add the missing parameters and set them in the next step. Ex. <AVGMULT3-S; driver1=”V1”; row1=”|||….”;>. This code implies 3 drivers but only has one set. Add the other two drivers: <AVGMULT3-S; driver1=”V1”; driver2=””; driver3””; row1=”|||….”;>. Leave blank and then set in the next step. 
8) Input driver fields (driver1, driver2, rd{}, etc.) have been set to connect to the correct driver codes in order to link the formulas of the codestrings together. For FORMULA-S drivers are set exclusively via the rd{} function within the customformula parameter. DO NOT SET driver1, driver2, etc. for FORMULA-S. Check through every one of the input driver parameters (driver 1, driver 2, etc.) and rd{}’s in customformula and make sure the reference makes sense in the context of the overall calculations the chain is attempting to complete. 

SUM2-S is summing row1 of the first CONST-E code and row1 of the second CONST-E code. 
9) Numbers in codes (i.e. SUM2-S) indicate the number of driver parameters that code should have. Ex. SUM2-S must have exactly driver1 and driver2. If driver3 is included in a SUM2-S code, you must remove it. Likewise, if only driver1 is included in SUM2-S, you must add driver2 and set it. 
9) Check through fincodes and ensure that they make sense and are included in the list of legal fincodes. Column 3 contains the FinCode, which determines where an item will show up in the financial statements. You must only use the options below. Income statement codes: “IS: revenue, IS: direct costs, IS: corporate overhead, IS: d&a, IS: interest, IS: other income, IS: net income”. Balance sheet codes: “BS: current assets, BS: fixed assets, BS: current liabilities, BS: lt liabilities, BS: equity”. Statement of cash flows items: “CF: wc, CF: non-cash, CF: cfi, CF: cff” 
Note: CONST-E and ENDPOINT-E should NEVER be sent through to the income statement or statement of cash flows. Likewise, SPREAD-E items should never be in the balance sheet. CONST-E items that seem like they should be in the income statement (i.e ad spend per month) must be transformed into an item with an annual summary and monthly aggregate values. For monthly rates, direct-s is used. 
10) Check through fincodes and ensure that they make sense and are included in the list of legal fincodes. Column 3 contains the FinCode, which determines where an item will show up in the financial statements. You must only use the options below. Income statement codes: “IS: revenue, IS: direct costs, IS: corporate overhead, IS: d&a, IS: interest, IS: other income, IS: net income”. Balance sheet codes: “BS: current assets, BS: fixed assets, BS: current liabilities, BS: lt liabilities, BS: equity”. Statement of cash flows items: “CF: wc, CF: non-cash, CF: cfi, CF: cff” 
11) Check sumif parameters. When the y1-y6 columns have an “F” in them, they are sumifs of the monthly columns. The sumif parameter determines what the sumif summarizes. The Sumif parameter must be set for all math operator codes taken from system prompt. The sumif parameter must not be changed for seed codes, organizational codes, or codes duplicated from training data.  Selection should be based on training data and context. Options: Year – sums every month of the year, use for items that are the grand total of all the months, ex. sales, expenses, # of units sold, # of new users. Yearend – takes only the last month of the year, use for any item that is a running balance. Ex. # of cars, # of subscribers, # of users, TAM, ARR, # of employees. “Offsetyear” – takes the beginning value of the year. This should only be used in reconciliation tables and the item that uses it should generally have  
12) Final Output: Return array of codestrings. Do not include any text outside of <> brackets. Do not provide context or any special characters.

Mathmatical operator codes:
FINANCIALS-S	Pulls in any item from the financials tab. The word after "Driver :" must match exactly with an item in column B of the Financials tab
MULT3-S	Mutliplies driver1, driver2, and driver3
DIVIDE2-S	Divides driver1 by driver2
SUBTRACT2-S	Subtracts driver2 from driver1
SUBTOTAL2-S	Adds driver1 and driver2
SUBTOTAL3-S	Adds driver1, driver2, and driver3
AVGMULT3-S	Multiplies driver3 by the average of driver1 and driver2
ANNUALIZE-S	Multiplies driver1 by 12 if timeseries is monthly and 3 if timeseries is quarterly
DEANNUALIZE-S	Divides driver1 by 12 if timeseries is monthly and 3 if timeseries is quarterly
AVGDEANNUALIZE2-S	Divides the average of driver1 and driver 2 by 12 if timeseries is monthly and 4 if timeseries is quarterly. Useful for ARR
DIRECT-S	Directly references driver1
CHANGE-S	Calculates the change in driver1 in current period and the preivious period
INCREASE-S	Calculates the increase in driver1 in current period since the last period. If driver1 declines, this will show 0. Max(0, or increase)
DECREASE-S	Calculates the decrease in driver1 in current period since the last period. If driver1 increases, this will show 0. Min(0, or decrease)
GROWTH-S	Multiplies previous period by (1+driver1). Driver1 must be a percentage
OFFSETCOLUMN-S	References 1 column to the left of driver1. In other words, it references the value of driver1 one period agao
OFFSET2-S	Offsets driver1 by driver2 number of periods to the left
SUM2-S	Sums from driver1 to driver2
DISCOUNT2-S	Multiplies driver1 by (1 - driver2)
LABELH1/LABELH2/LABEHLH3 Use these codes to label different sections within a tab. H1 is the highest level, followed by H2, and then H3
BR <BR; row1 = "|  |||||||||||";> Adds a line break. Use before every LABELH1/LABELH2/LABELH3 code. 
FINANCIALS-S	Pulls in any item from the financials tab. The word after "Driver :" must match exactly with an item in column B of the Financials tab. 
FORMULA-S allows direct manipulation of excel formulas via the customformula parameter. This param literally defines the formula used in the monthly time series. Ex. customformula = "1+2" >>> In the columsn for month 1, month 2, etc., the cells of this row would be set = "1+2"



FORMULA-S custom functions:
rd{row driver}: Allows reference of the same column in rows in other codestrings. Ex. customformula = "rd{V1}" >>> in month 1 (which is in column AE), if V1 is on row 15, the formula on this row will be "= AE15"
cd{column driver}: Allows refernece to column of the same row or other rows. Column 6 = "1", Column 5 = "2", column 4 = "3". Ex. customformula = "cd{1}" >>> if we are on row 10, transforms to = $I10
cd{column driver}: row driver}. Set reference to column of other rows. Ex. customformula = "cd{1-V1}" >>> V1 is on row 10, formula set to "=$I10" 
BEG(columndriver): Sets the monthly calc to 0 until on or after a given start date. Ex. customerfomrula = "1000 * BEG(cd{1})"
END(columndriver): Does the same thing as end but sets all formulas to 0 that are after the enddate assumption
SPREADDATES(columndriver1, columndriver2, columndriver3): Driver 1 is amount, driver 2 is start date, driver 3 is end date. Spreads an amount evenly between two dates. Ex. customformula = "SPREADDATES(cd{3},cd{2},cd{1})". If column 2 is Jan 2025 and column 1 is March 2025, each month will have a value of 333.   
SPREAD(columndriver): Spreads an annual amount in the column driver to monthly time series by dividing by 12. Ex. customformula = "SPREAD(120000)" >>> monthly calculation would be 10,000. Useful for salaries. 
ONETIME(columndriver): Causes calculation to be 0 on all dates excpet a given date. Ex. customformula = "1000 * ONETIME(cd{1})". If column 1 has a date of Jan 2027, ever month except Jan 2027 will show a value of 0. Jan 2027 will have a value of 1000. 
RAISE(driver, column driver): First driver is % increase (can be rd or cd). Second driver is start date. Increase by a percentage assumption each calendar year. Ex. customformula = "1000 * RAISE(rd{V1}) >>> V1 row has 3% in that month. Each year after the start date of that item, it would increase 3%.
